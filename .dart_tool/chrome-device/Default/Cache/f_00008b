define(['dart_sdk', 'packages/charts_common/src/chart/treemap/treemap_chart.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/rendering/custom_layout.dart', 'packages/flutter/src/rendering/proxy_box.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/gestures/scale.dart', 'packages/charts_common/src/common/performance.dart', 'packages/charts_common/src/chart/common/behavior/selection/selection_trigger.dart', 'packages/charts_flutter/src/selection_model_config.dart', 'packages/charts_common/src/common/rtl_spec.dart', 'packages/charts_flutter/src/user_managed_state.dart', 'packages/collection/src/equality.dart', 'packages/charts_common/src/common/date_time_factory.dart', 'packages/logging/src/logger.dart', 'packages/charts_flutter/src/graphics_factory.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/semantics/semantics_service.dart', 'packages/charts_common/src/chart/common/behavior/a11y/a11y_node.dart', 'packages/flutter/src/rendering/custom_paint.dart', 'packages/charts_common/src/chart/common/chart_context.dart', 'packages/charts_common/src/common/proxy_gesture_listener.dart', 'packages/charts_flutter/src/chart_canvas.dart', 'packages/flutter/src/semantics/semantics.dart', 'packages/charts_common/src/chart/layout/layout_config.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/charts_flutter/src/chart_state.dart'], (function load__packages__charts_flutter__src__widget_layout_delegate_dart(dart_sdk, packages__charts_common__src__chart__treemap__treemap_chart$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__rendering__custom_layout$46dart, packages__flutter__src__rendering__proxy_box$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__gestures__scale$46dart, packages__charts_common__src__common__performance$46dart, packages__charts_common__src__chart__common__behavior__selection__selection_trigger$46dart, packages__charts_flutter__src__selection_model_config$46dart, packages__charts_common__src__common__rtl_spec$46dart, packages__charts_flutter__src__user_managed_state$46dart, packages__collection__src__equality$46dart, packages__charts_common__src__common__date_time_factory$46dart, packages__logging__src__logger$46dart, packages__charts_flutter__src__graphics_factory$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__semantics__semantics_service$46dart, packages__charts_common__src__chart__common__behavior__a11y__a11y_node$46dart, packages__flutter__src__rendering__custom_paint$46dart, packages__charts_common__src__chart__common__chart_context$46dart, packages__charts_common__src__common__proxy_gesture_listener$46dart, packages__charts_flutter__src__chart_canvas$46dart, packages__flutter__src__semantics__semantics$46dart, packages__charts_common__src__chart__layout__layout_config$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__charts_flutter__src__chart_state$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const chart_behavior = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__chart__common__behavior__chart_behavior;
  const base_chart = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__chart__common__base_chart;
  const cartesian_chart = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__chart__cartesian__cartesian_chart;
  const axis = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__chart__cartesian__axis__axis;
  const numeric_axis_spec = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__chart__cartesian__axis__spec__numeric_axis_spec;
  const selection_model = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__chart__common__selection_model__selection_model;
  const series = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__data__series;
  const series_renderer_config = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__chart__common__series_renderer_config;
  const axis_spec = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__chart__cartesian__axis__spec__axis_spec;
  const line_point_highlighter = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__chart__common__behavior__line_point_highlighter;
  const symbol_renderer = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__common__symbol_renderer;
  const time_series_chart = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__chart__time_series__time_series_chart;
  const select_nearest = packages__charts_common__src__chart__treemap__treemap_chart$46dart.src__chart__common__behavior__selection__select_nearest;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const custom_layout = packages__flutter__src__rendering__custom_layout$46dart.src__rendering__custom_layout;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  const gesture_detector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__gesture_detector;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const scale = packages__flutter__src__gestures__scale$46dart.src__gestures__scale;
  const performance = packages__charts_common__src__common__performance$46dart.src__common__performance;
  const selection_trigger = packages__charts_common__src__chart__common__behavior__selection__selection_trigger$46dart.src__chart__common__behavior__selection__selection_trigger;
  const selection_model_config = packages__charts_flutter__src__selection_model_config$46dart.src__selection_model_config;
  const rtl_spec = packages__charts_common__src__common__rtl_spec$46dart.src__common__rtl_spec;
  const user_managed_state = packages__charts_flutter__src__user_managed_state$46dart.src__user_managed_state;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const date_time_factory = packages__charts_common__src__common__date_time_factory$46dart.src__common__date_time_factory;
  const logger = packages__logging__src__logger$46dart.src__logger;
  const graphics_factory = packages__charts_flutter__src__graphics_factory$46dart.src__graphics_factory;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const semantics_service = packages__flutter__src__semantics__semantics_service$46dart.src__semantics__semantics_service;
  const a11y_node = packages__charts_common__src__chart__common__behavior__a11y__a11y_node$46dart.src__chart__common__behavior__a11y__a11y_node;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  const chart_context = packages__charts_common__src__chart__common__chart_context$46dart.src__chart__common__chart_context;
  const proxy_gesture_listener = packages__charts_common__src__common__proxy_gesture_listener$46dart.src__common__proxy_gesture_listener;
  const chart_canvas = packages__charts_flutter__src__chart_canvas$46dart.src__chart_canvas;
  const semantics = packages__flutter__src__semantics__semantics$46dart.src__semantics__semantics;
  const layout_config = packages__charts_common__src__chart__layout__layout_config$46dart.src__chart__layout__layout_config;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const chart_state = packages__charts_flutter__src__chart_state$46dart.src__chart_state;
  var widget_layout_delegate = Object.create(dart.library);
  var util = Object.create(dart.library);
  var chart_gesture_detector = Object.create(dart.library);
  var cartesian_chart$ = Object.create(dart.library);
  var line_point_highlighter$ = Object.create(dart.library);
  var time_series_chart$ = Object.create(dart.library);
  var chart_container = Object.create(dart.library);
  var select_nearest$ = Object.create(dart.library);
  var base_chart$ = Object.create(dart.library);
  var base_chart_state = Object.create(dart.library);
  var chart_behavior$ = Object.create(dart.library);
  var $isEmpty = dartx.isEmpty;
  var $keys = dartx.keys;
  var $length = dartx.length;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $_get = dartx._get;
  var $_equals = dartx._equals;
  var $left = dartx.left;
  var $toDouble = dartx.toDouble;
  var $right = dartx.right;
  var $top = dartx.top;
  var $bottom = dartx.bottom;
  var $firstWhere = dartx.firstWhere;
  var $_set = dartx._set;
  var $forEach = dartx.forEach;
  var $reversed = dartx.reversed;
  var $where = dartx.where;
  var $insert = dartx.insert;
  var $remove = dartx.remove;
  var $add = dartx.add;
  var $any = dartx.any;
  var $toString = dartx.toString;
  var $toInt = dartx.toInt;
  var $width = dartx.width;
  var $height = dartx.height;
  var $hashCode = dartx.hashCode;
  var $clear = dartx.clear;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    VoidToOffset: () => (T.VoidToOffset = dart.constFn(dart.fnType(ui.Offset, [])))(),
    OffsetTodynamic: () => (T.OffsetTodynamic = dart.constFn(dart.fnType(dart.dynamic, [ui.Offset])))(),
    RenderBoxTobool: () => (T.RenderBoxTobool = dart.constFn(dart.fnType(core.bool, [box.RenderBox])))(),
    VoidToChartContainerRenderObject: () => (T.VoidToChartContainerRenderObject = dart.constFn(dart.fnType(chart_container.ChartContainerRenderObject, [])))(),
    PointOfdouble: () => (T.PointOfdouble = dart.constFn(math.Point$(core.double)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    CartesianChartN: () => (T.CartesianChartN = dart.constFn(dart.nullable(cartesian_chart$.CartesianChart)))(),
    IdentityMapOfString$NumericAxis: () => (T.IdentityMapOfString$NumericAxis = dart.constFn(_js_helper.IdentityMap$(core.String, axis.NumericAxis)))(),
    StringAndNumericAxisSpecTovoid: () => (T.StringAndNumericAxisSpecTovoid = dart.constFn(dart.fnType(dart.void, [core.String, numeric_axis_spec.NumericAxisSpec])))(),
    ChartStateBehaviorOfChartBehavior: () => (T.ChartStateBehaviorOfChartBehavior = dart.constFn(chart_behavior$.ChartStateBehavior$(chart_behavior.ChartBehavior)))(),
    ChartBehaviorTobool: () => (T.ChartBehaviorTobool = dart.constFn(dart.fnType(core.bool, [chart_behavior$.ChartBehavior])))(),
    ListOfSelectionModelType: () => (T.ListOfSelectionModelType = dart.constFn(core.List$(selection_model.SelectionModelType)))(),
    SelectionModelTypeTovoid: () => (T.SelectionModelTypeTovoid = dart.constFn(dart.fnType(dart.void, [selection_model.SelectionModelType])))(),
    _HashSetOfGestureType: () => (T._HashSetOfGestureType = dart.constFn(collection._HashSet$(chart_behavior$.GestureType)))(),
    ChartBehaviorTovoid: () => (T.ChartBehaviorTovoid = dart.constFn(dart.fnType(dart.void, [chart_behavior$.ChartBehavior])))(),
    LinePointHighlighterOfDateTime: () => (T.LinePointHighlighterOfDateTime = dart.constFn(line_point_highlighter$.LinePointHighlighter$(core.DateTime)))(),
    dynamicTovoid: () => (T.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    JSArrayOfA11yNode: () => (T.JSArrayOfA11yNode = dart.constFn(_interceptors.JSArray$(a11y_node.A11yNode)))(),
    ChartContainerCustomPaintN: () => (T.ChartContainerCustomPaintN = dart.constFn(dart.nullable(chart_container.ChartContainerCustomPaint)))(),
    JSArrayOfCustomPainterSemantics: () => (T.JSArrayOfCustomPainterSemantics = dart.constFn(_interceptors.JSArray$(custom_paint.CustomPainterSemantics)))(),
    IdentityMapOfString$ChartBehavior: () => (T.IdentityMapOfString$ChartBehavior = dart.constFn(_js_helper.IdentityMap$(core.String, chart_behavior.ChartBehavior)))(),
    LinkedMapOfChartStateBehaviorOfChartBehavior$AnimationController: () => (T.LinkedMapOfChartStateBehaviorOfChartBehavior$AnimationController = dart.constFn(_js_helper.LinkedMap$(T.ChartStateBehaviorOfChartBehavior(), animation_controller.AnimationController)))(),
    JSArrayOfLayoutId: () => (T.JSArrayOfLayoutId = dart.constFn(_interceptors.JSArray$(basic.LayoutId)))(),
    BuildableBehaviorOfChartBehavior: () => (T.BuildableBehaviorOfChartBehavior = dart.constFn(chart_behavior$.BuildableBehavior$(chart_behavior.ChartBehavior)))(),
    IdentityMapOfString$BuildableBehaviorOfChartBehavior: () => (T.IdentityMapOfString$BuildableBehaviorOfChartBehavior = dart.constFn(_js_helper.IdentityMap$(core.String, T.BuildableBehaviorOfChartBehavior())))(),
    StringAndChartBehaviorTovoid: () => (T.StringAndChartBehaviorTovoid = dart.constFn(dart.fnType(dart.void, [core.String, chart_behavior.ChartBehavior])))(),
    ChartStateBehaviorOfChartBehaviorAndAnimationControllerTovoid: () => (T.ChartStateBehaviorOfChartBehaviorAndAnimationControllerTovoid = dart.constFn(dart.fnType(dart.void, [T.ChartStateBehaviorOfChartBehavior(), animation_controller.AnimationController])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: widget_layout_delegate._HorizontalJustification.prototype,
        [_name$]: "_HorizontalJustification.leftDrawArea",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: widget_layout_delegate._HorizontalJustification.prototype,
        [_name$]: "_HorizontalJustification.left",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: widget_layout_delegate._HorizontalJustification.prototype,
        [_name$]: "_HorizontalJustification.rightDrawArea",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_layout_delegate._HorizontalJustification.prototype,
        [_name$]: "_HorizontalJustification.right",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name]: "OutsideJustification.startDrawArea",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name]: "OutsideJustification.middleDrawArea",
        index: 2
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name]: "OutsideJustification.start",
        index: 1
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name]: "OutsideJustification.middle",
        index: 3
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name]: "OutsideJustification.endDrawArea",
        index: 4
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name]: "OutsideJustification.end",
        index: 5
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: chart_behavior.InsideJustification.prototype,
        [_name]: "InsideJustification.topStart",
        index: 0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: chart_behavior.InsideJustification.prototype,
        [_name]: "InsideJustification.topEnd",
        index: 1
      });
    },
    get C12() {
      return C[12] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], widget_layout_delegate._HorizontalJustification);
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 66,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapDown",
        [_Location_column]: 7,
        [_Location_line]: 67,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapUp",
        [_Location_column]: 7,
        [_Location_line]: 68,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onScaleStart",
        [_Location_column]: 7,
        [_Location_line]: 69,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onScaleUpdate",
        [_Location_column]: 7,
        [_Location_line]: 70,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onScaleEnd",
        [_Location_column]: 7,
        [_Location_line]: 71,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.constList([C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20], widget_inspector._Location);
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[14] || CT.C14,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 65,
        [_Location_file]: "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_flutter-0.11.0/lib/src/chart_gesture_detector.dart"
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 500000
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: date_time_factory.LocalDateTimeFactory.prototype
      });
    },
    get C24() {
      return C[24] = dart.constList([], a11y_node.A11yNode);
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$0]: "TextDirection.ltr",
        index: 1
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: select_nearest.SelectionMode.prototype,
        [_name$1]: "SelectionMode.expandToDomain",
        index: 0
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: selection_model.SelectionModelType.prototype,
        [_name$2]: "SelectionModelType.info",
        index: 0
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [_name$3]: "SelectionTrigger.tap",
        index: 1
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [_name$3]: "SelectionTrigger.tapAndDrag",
        index: 2
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [_name$3]: "SelectionTrigger.pressHold",
        index: 3
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [_name$3]: "SelectionTrigger.longPressHold",
        index: 4
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [_name$3]: "SelectionTrigger.hover",
        index: 0
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "oldChartWidget",
        [_Location_column]: 7,
        [_Location_line]: 97,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "chartWidget",
        [_Location_column]: 7,
        [_Location_line]: 98,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "chartState",
        [_Location_column]: 7,
        [_Location_line]: 99,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "animationValue",
        [_Location_column]: 7,
        [_Location_line]: 100,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rtl",
        [_Location_column]: 7,
        [_Location_line]: 101,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rtlSpec",
        [_Location_column]: 7,
        [_Location_line]: 102,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "userManagedState",
        [_Location_column]: 7,
        [_Location_line]: 103,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.constList([C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41], widget_inspector._Location);
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[34] || CT.C34,
        [_Location_name]: null,
        [_Location_column]: 32,
        [_Location_line]: 96,
        [_Location_file]: "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_flutter-0.11.0/lib/src/base_chart_state.dart"
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "id",
        [_Location_column]: 9,
        [_Location_line]: 124,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 37,
        [_Location_line]: 124,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.constList([C[44] || CT.C44, C[45] || CT.C45], widget_inspector._Location);
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[43] || CT.C43,
        [_Location_name]: null,
        [_Location_column]: 26,
        [_Location_line]: 123,
        [_Location_file]: "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_flutter-0.11.0/lib/src/base_chart_state.dart"
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "id",
        [_Location_column]: 39,
        [_Location_line]: 135,
        [_Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 47,
        [_Location_line]: 135,
        [_Location_file]: null
      });
    },
    get C47() {
      return C[47] = dart.constList([C[48] || CT.C48, C[49] || CT.C49], widget_inspector._Location);
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[47] || CT.C47,
        [_Location_name]: null,
        [_Location_column]: 30,
        [_Location_line]: 135,
        [_Location_file]: "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_flutter-0.11.0/lib/src/base_chart_state.dart"
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "delegate",
        [_Location_column]: 9,
        [_Location_line]: 142,
        [_Location_file]: null
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 9,
        [_Location_line]: 144,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.constList([C[52] || CT.C52, C[53] || CT.C53], widget_inspector._Location);
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[51] || CT.C51,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 141,
        [_Location_file]: "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_flutter-0.11.0/lib/src/base_chart_state.dart"
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: chart_behavior$.GestureType.prototype,
        [_name$4]: "GestureType.onLongPress",
        index: 0
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: chart_behavior$.GestureType.prototype,
        [_name$4]: "GestureType.onTap",
        index: 1
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: chart_behavior$.GestureType.prototype,
        [_name$4]: "GestureType.onHover",
        index: 2
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: chart_behavior$.GestureType.prototype,
        [_name$4]: "GestureType.onDrag",
        index: 3
      });
    },
    get C58() {
      return C[58] = dart.constList([C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57], chart_behavior$.GestureType);
    }
  }, false);
  var C = Array(59).fill(void 0);
  var I = [
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_flutter-0.11.0/lib/src/widget_layout_delegate.dart",
    "package:charts_flutter/src/widget_layout_delegate.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_flutter-0.11.0/lib/src/util.dart",
    "package:charts_flutter/src/chart_gesture_detector.dart",
    "package:charts_flutter/src/base_chart.dart",
    "package:charts_flutter/src/cartesian_chart.dart",
    "package:charts_flutter/src/behaviors/chart_behavior.dart",
    "package:charts_flutter/src/behaviors/line_point_highlighter.dart",
    "package:charts_flutter/src/time_series_chart.dart",
    "package:charts_flutter/src/chart_container.dart",
    "package:charts_flutter/src/behaviors/select_nearest.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_flutter-0.11.0/lib/src/base_chart_state.dart",
    "package:charts_flutter/src/base_chart_state.dart"
  ];
  var chartID$ = dart.privateName(widget_layout_delegate, "WidgetLayoutDelegate.chartID");
  var isRTL$ = dart.privateName(widget_layout_delegate, "WidgetLayoutDelegate.isRTL");
  var idAndBehavior$ = dart.privateName(widget_layout_delegate, "WidgetLayoutDelegate.idAndBehavior");
  var _getBehaviorOffset = dart.privateName(widget_layout_delegate, "_getBehaviorOffset");
  var _name$ = dart.privateName(widget_layout_delegate, "_name");
  var _name = dart.privateName(chart_behavior, "_name");
  widget_layout_delegate.WidgetLayoutDelegate = class WidgetLayoutDelegate extends custom_layout.MultiChildLayoutDelegate {
    get chartID() {
      return this[chartID$];
    }
    set chartID(value) {
      super.chartID = value;
    }
    get isRTL() {
      return this[isRTL$];
    }
    set isRTL(value) {
      super.isRTL = value;
    }
    get idAndBehavior() {
      return this[idAndBehavior$];
    }
    set idAndBehavior(value) {
      super.idAndBehavior = value;
    }
    performLayout(size) {
      if (!(this.idAndBehavior[$keys][$isEmpty] || this.idAndBehavior[$keys][$length] === 1)) dart.assertFailed(null, I[0], 43, 12, "idAndBehavior.keys.isEmpty || idAndBehavior.keys.length == 1");
      let availableWidth = size.width;
      let availableHeight = size.height;
      let chartOffset = ui.Offset.zero;
      let behaviorID = this.idAndBehavior[$keys][$isNotEmpty] ? this.idAndBehavior[$keys][$first] : null;
      let behaviorSize = ui.Size.zero;
      if (behaviorID != null) {
        if (this.hasChild(behaviorID)) {
          let leftPosition = dart.dtest(this.isRTL) ? chart_behavior.BehaviorPosition.end : chart_behavior.BehaviorPosition.start;
          let rightPosition = dart.dtest(this.isRTL) ? chart_behavior.BehaviorPosition.start : chart_behavior.BehaviorPosition.end;
          let behaviorPosition = dart.nullCheck(this.idAndBehavior[$_get](behaviorID)).position;
          behaviorSize = this.layoutChild(behaviorID, new box.BoxConstraints.loose(size));
          if (behaviorPosition === chart_behavior.BehaviorPosition.top) {
            chartOffset = new ui.Offset.new(0.0, behaviorSize.height);
            availableHeight = availableHeight - behaviorSize.height;
          } else if (behaviorPosition === chart_behavior.BehaviorPosition.bottom) {
            availableHeight = availableHeight - behaviorSize.height;
          } else if (behaviorPosition === leftPosition) {
            chartOffset = new ui.Offset.new(behaviorSize.width, 0.0);
            availableWidth = availableWidth - behaviorSize.width;
          } else if (behaviorPosition === rightPosition) {
            availableWidth = availableWidth - behaviorSize.width;
          }
        }
      }
      let chartSize = new ui.Size.new(availableWidth, availableHeight);
      if (this.hasChild(this.chartID)) {
        this.layoutChild(this.chartID, new box.BoxConstraints.tight(chartSize));
        this.positionChild(this.chartID, chartOffset);
      }
      if (behaviorID != null) {
        let behaviorOffset = this[_getBehaviorOffset](dart.nullCheck(this.idAndBehavior[$_get](behaviorID)), {behaviorSize: behaviorSize, chartSize: chartSize, isRTL: core.bool.as(this.isRTL)});
        this.positionChild(behaviorID, behaviorOffset);
      }
    }
    shouldRelayout(oldDelegate) {
      custom_layout.MultiChildLayoutDelegate.as(oldDelegate);
      return !this.idAndBehavior[$_equals](widget_layout_delegate.WidgetLayoutDelegate.as(oldDelegate).idAndBehavior);
    }
    [_getBehaviorOffset](behavior, opts) {
      let behaviorSize = opts && 'behaviorSize' in opts ? opts.behaviorSize : null;
      let chartSize = opts && 'chartSize' in opts ? opts.chartSize : null;
      let isRTL = opts && 'isRTL' in opts ? opts.isRTL : null;
      let behaviorOffset = null;
      function behaviorOffset$35get() {
        let t1;
        t1 = behaviorOffset;
        return t1 == null ? dart.throw(new _internal.LateError.localNI("behaviorOffset")) : t1;
      }
      dart.fn(behaviorOffset$35get, T.VoidToOffset());
      function behaviorOffset$35set(t2) {
        return behaviorOffset = t2;
      }
      dart.fn(behaviorOffset$35set, T.OffsetTodynamic());
      let behaviorPosition = behavior.position;
      let outsideJustification = behavior.outsideJustification;
      let insideJustification = behavior.insideJustification;
      if (behaviorPosition === chart_behavior.BehaviorPosition.top || behaviorPosition === chart_behavior.BehaviorPosition.bottom) {
        let heightOffset = behaviorPosition === chart_behavior.BehaviorPosition.bottom ? chartSize.height : 0.0;
        let horizontalJustification = this.getOutsideJustification(outsideJustification, isRTL);
        switch (horizontalJustification) {
          case C[0] || CT.C0:
          {
            behaviorOffset$35set(new ui.Offset.new(dart.nullCheck(behavior.drawAreaBounds)[$left][$toDouble](), heightOffset));
            break;
          }
          case C[1] || CT.C1:
          {
            behaviorOffset$35set(new ui.Offset.new(0.0, heightOffset));
            break;
          }
          case C[2] || CT.C2:
          {
            behaviorOffset$35set(new ui.Offset.new(dart.nullCheck(behavior.drawAreaBounds)[$right] - behaviorSize.width, heightOffset));
            break;
          }
          case C[3] || CT.C3:
          {
            behaviorOffset$35set(new ui.Offset.new(chartSize.width - behaviorSize.width, heightOffset));
            break;
          }
        }
      } else if (behaviorPosition === chart_behavior.BehaviorPosition.start || behaviorPosition === chart_behavior.BehaviorPosition.end) {
        let widthOffset = isRTL && behaviorPosition === chart_behavior.BehaviorPosition.start || !isRTL && behaviorPosition === chart_behavior.BehaviorPosition.end ? chartSize.width : 0.0;
        switch (outsideJustification) {
          case C[4] || CT.C4:
          case C[5] || CT.C5:
          {
            behaviorOffset$35set(new ui.Offset.new(widthOffset, dart.nullCheck(behavior.drawAreaBounds)[$top][$toDouble]()));
            break;
          }
          case C[6] || CT.C6:
          case C[7] || CT.C7:
          {
            behaviorOffset$35set(new ui.Offset.new(widthOffset, 0.0));
            break;
          }
          case C[8] || CT.C8:
          {
            behaviorOffset$35set(new ui.Offset.new(widthOffset, dart.nullCheck(behavior.drawAreaBounds)[$bottom] - behaviorSize.height));
            break;
          }
          case C[9] || CT.C9:
          {
            behaviorOffset$35set(new ui.Offset.new(widthOffset, chartSize.height - behaviorSize.height));
            break;
          }
        }
      } else if (behaviorPosition === chart_behavior.BehaviorPosition.inside) {
        let rightOffset = new ui.Offset.new(chartSize.width - behaviorSize.width, 0.0);
        switch (insideJustification) {
          case C[10] || CT.C10:
          {
            behaviorOffset$35set(isRTL ? rightOffset : ui.Offset.zero);
            break;
          }
          case C[11] || CT.C11:
          {
            behaviorOffset$35set(isRTL ? ui.Offset.zero : rightOffset);
            break;
          }
        }
      }
      return behaviorOffset$35get();
    }
    getOutsideJustification(justification, isRTL) {
      let mappedJustification = null;
      switch (justification) {
        case C[4] || CT.C4:
        case C[5] || CT.C5:
        {
          mappedJustification = isRTL ? widget_layout_delegate._HorizontalJustification.rightDrawArea : widget_layout_delegate._HorizontalJustification.leftDrawArea;
          break;
        }
        case C[6] || CT.C6:
        case C[7] || CT.C7:
        {
          mappedJustification = isRTL ? widget_layout_delegate._HorizontalJustification.right : widget_layout_delegate._HorizontalJustification.left;
          break;
        }
        case C[8] || CT.C8:
        {
          mappedJustification = isRTL ? widget_layout_delegate._HorizontalJustification.leftDrawArea : widget_layout_delegate._HorizontalJustification.rightDrawArea;
          break;
        }
        case C[9] || CT.C9:
        {
          mappedJustification = isRTL ? widget_layout_delegate._HorizontalJustification.left : widget_layout_delegate._HorizontalJustification.right;
          break;
        }
      }
      return mappedJustification;
    }
  };
  (widget_layout_delegate.WidgetLayoutDelegate.new = function(chartID, idAndBehavior, isRTL) {
    this[chartID$] = chartID;
    this[idAndBehavior$] = idAndBehavior;
    this[isRTL$] = isRTL;
    widget_layout_delegate.WidgetLayoutDelegate.__proto__.new.call(this);
    ;
  }).prototype = widget_layout_delegate.WidgetLayoutDelegate.prototype;
  dart.addTypeTests(widget_layout_delegate.WidgetLayoutDelegate);
  dart.addTypeCaches(widget_layout_delegate.WidgetLayoutDelegate);
  dart.setMethodSignature(widget_layout_delegate.WidgetLayoutDelegate, () => ({
    __proto__: dart.getMethods(widget_layout_delegate.WidgetLayoutDelegate.__proto__),
    performLayout: dart.fnType(dart.void, [ui.Size]),
    shouldRelayout: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [_getBehaviorOffset]: dart.fnType(ui.Offset, [chart_behavior$.BuildableBehavior$(chart_behavior.ChartBehavior)], {}, {behaviorSize: ui.Size, chartSize: ui.Size, isRTL: core.bool}),
    getOutsideJustification: dart.fnType(widget_layout_delegate._HorizontalJustification, [chart_behavior.OutsideJustification, core.bool])
  }));
  dart.setLibraryUri(widget_layout_delegate.WidgetLayoutDelegate, I[1]);
  dart.setFieldSignature(widget_layout_delegate.WidgetLayoutDelegate, () => ({
    __proto__: dart.getFields(widget_layout_delegate.WidgetLayoutDelegate.__proto__),
    chartID: dart.finalFieldType(core.String),
    isRTL: dart.finalFieldType(dart.dynamic),
    idAndBehavior: dart.finalFieldType(core.Map$(core.String, chart_behavior$.BuildableBehavior$(chart_behavior.ChartBehavior)))
  }));
  widget_layout_delegate._HorizontalJustification = class _HorizontalJustification extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (widget_layout_delegate._HorizontalJustification.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = widget_layout_delegate._HorizontalJustification.prototype;
  dart.addTypeTests(widget_layout_delegate._HorizontalJustification);
  dart.addTypeCaches(widget_layout_delegate._HorizontalJustification);
  dart.setLibraryUri(widget_layout_delegate._HorizontalJustification, I[1]);
  dart.setFieldSignature(widget_layout_delegate._HorizontalJustification, () => ({
    __proto__: dart.getFields(widget_layout_delegate._HorizontalJustification.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(widget_layout_delegate._HorizontalJustification, ['toString']);
  widget_layout_delegate._HorizontalJustification.leftDrawArea = C[0] || CT.C0;
  widget_layout_delegate._HorizontalJustification.left = C[1] || CT.C1;
  widget_layout_delegate._HorizontalJustification.rightDrawArea = C[2] || CT.C2;
  widget_layout_delegate._HorizontalJustification.right = C[3] || CT.C3;
  widget_layout_delegate._HorizontalJustification.values = C[12] || CT.C12;
  util.getChartContainerRenderObject = function getChartContainerRenderObject(box) {
    if (!custom_layout.RenderCustomMultiChildLayoutBox.is(box)) dart.assertFailed(null, I[2], 29, 10, "box is RenderCustomMultiChildLayoutBox");
    let semanticHandler = custom_layout.RenderCustomMultiChildLayoutBox.as(box).getChildrenAsList()[$firstWhere](dart.fn(child => proxy_box.RenderSemanticsGestureHandler.is(child), T.RenderBoxTobool()));
    if (!proxy_box.RenderSemanticsGestureHandler.is(semanticHandler)) dart.assertFailed(null, I[2], 34, 10, "semanticHandler is RenderSemanticsGestureHandler");
    let renderPointerListener = proxy_box.RenderSemanticsGestureHandler.as(semanticHandler).child;
    if (!proxy_box.RenderPointerListener.is(renderPointerListener)) dart.assertFailed(null, I[2], 38, 10, "renderPointerListener is RenderPointerListener");
    let chartContainerRenderObject = proxy_box.RenderPointerListener.as(renderPointerListener).child;
    if (!chart_container.ChartContainerRenderObject.is(chartContainerRenderObject)) dart.assertFailed(null, I[2], 42, 10, "chartContainerRenderObject is ChartContainerRenderObject");
    return chart_container.ChartContainerRenderObject.as(chartContainerRenderObject);
  };
  var _listeningForLongPress = dart.privateName(chart_gesture_detector, "_listeningForLongPress");
  var _isDragging = dart.privateName(chart_gesture_detector, "_isDragging");
  var _longPressTimer = dart.privateName(chart_gesture_detector, "_longPressTimer");
  var _lastTapPoint = dart.privateName(chart_gesture_detector, "_lastTapPoint");
  var _lastScale = dart.privateName(chart_gesture_detector, "_lastScale");
  var __ChartGestureDetector__containerResolver = dart.privateName(chart_gesture_detector, "_#ChartGestureDetector#_containerResolver");
  var _containerResolver = dart.privateName(chart_gesture_detector, "_containerResolver");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  chart_gesture_detector.ChartGestureDetector = class ChartGestureDetector extends core.Object {
    get [_containerResolver]() {
      let t4;
      t4 = this[__ChartGestureDetector__containerResolver];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_containerResolver")) : t4;
    }
    set [_containerResolver](t4) {
      this[__ChartGestureDetector__containerResolver] = t4;
    }
    makeWidget(context, chartContainer, desiredGestures) {
      this[_containerResolver] = dart.fn(() => {
        let renderObject = dart.nullCheck(context.findRenderObject());
        return util.getChartContainerRenderObject(box.RenderBox.as(renderObject));
      }, T.VoidToChartContainerRenderObject());
      let wantTapDown = desiredGestures[$isNotEmpty];
      let wantTap = desiredGestures.contains(chart_behavior$.GestureType.onTap);
      let wantDrag = desiredGestures.contains(chart_behavior$.GestureType.onDrag);
      this[_listeningForLongPress] = desiredGestures.contains(chart_behavior$.GestureType.onLongPress);
      return new gesture_detector.GestureDetector.new({child: chartContainer, onTapDown: wantTapDown ? dart.bind(this, 'onTapDown') : null, onTapUp: wantTap ? dart.bind(this, 'onTapUp') : null, onScaleStart: wantDrag ? dart.bind(this, 'onScaleStart') : null, onScaleUpdate: wantDrag ? dart.bind(this, 'onScaleUpdate') : null, onScaleEnd: wantDrag ? dart.bind(this, 'onScaleEnd') : null, $creationLocationd_0dea112b090073317d4: C[13] || CT.C13});
    }
    onTapDown(d) {
      let container = this[_containerResolver]();
      let localPosition = container.globalToLocal(d.globalPosition);
      this[_lastTapPoint] = new (T.PointOfdouble()).new(localPosition.dx, localPosition.dy);
      container.gestureProxy.onTapTest(dart.nullCheck(this[_lastTapPoint]));
      if (this[_listeningForLongPress]) {
        this[_longPressTimer] = async.Timer.new(chart_gesture_detector._kLongPressTimeout, dart.fn(() => {
          this.onLongPress();
          this[_longPressTimer] = null;
        }, T.VoidTovoid()));
      }
    }
    onTapUp(d) {
      let t5;
      t5 = this[_longPressTimer];
      t5 == null ? null : t5.cancel();
      let container = this[_containerResolver]();
      let localPosition = container.globalToLocal(d.globalPosition);
      this[_lastTapPoint] = new (T.PointOfdouble()).new(localPosition.dx, localPosition.dy);
      container.gestureProxy.onTap(dart.nullCheck(this[_lastTapPoint]));
    }
    onLongPress() {
      let container = this[_containerResolver]();
      container.gestureProxy.onLongPress(dart.nullCheck(this[_lastTapPoint]));
    }
    onScaleStart(d) {
      let t5;
      t5 = this[_longPressTimer];
      t5 == null ? null : t5.cancel();
      let container = this[_containerResolver]();
      let localPosition = container.globalToLocal(d.focalPoint);
      this[_lastTapPoint] = new (T.PointOfdouble()).new(localPosition.dx, localPosition.dy);
      this[_isDragging] = container.gestureProxy.onDragStart(dart.nullCheck(this[_lastTapPoint]));
    }
    onScaleUpdate(d) {
      if (!this[_isDragging]) {
        return;
      }
      let container = this[_containerResolver]();
      let localPosition = container.globalToLocal(d.focalPoint);
      this[_lastTapPoint] = new (T.PointOfdouble()).new(localPosition.dx, localPosition.dy);
      this[_lastScale] = d.scale;
      container.gestureProxy.onDragUpdate(dart.nullCheck(this[_lastTapPoint]), d.scale);
    }
    onScaleEnd(d) {
      if (!this[_isDragging]) {
        return;
      }
      let container = this[_containerResolver]();
      container.gestureProxy.onDragEnd(dart.nullCheck(this[_lastTapPoint]), dart.nullCheck(this[_lastScale]), d.velocity.pixelsPerSecond.dx);
    }
  };
  (chart_gesture_detector.ChartGestureDetector.new = function() {
    this[_listeningForLongPress] = false;
    this[_isDragging] = false;
    this[_longPressTimer] = null;
    this[_lastTapPoint] = null;
    this[_lastScale] = null;
    this[__ChartGestureDetector__containerResolver] = null;
    ;
  }).prototype = chart_gesture_detector.ChartGestureDetector.prototype;
  dart.addTypeTests(chart_gesture_detector.ChartGestureDetector);
  dart.addTypeCaches(chart_gesture_detector.ChartGestureDetector);
  dart.setMethodSignature(chart_gesture_detector.ChartGestureDetector, () => ({
    __proto__: dart.getMethods(chart_gesture_detector.ChartGestureDetector.__proto__),
    makeWidget: dart.fnType(dart.dynamic, [framework.BuildContext, chart_container.ChartContainer, core.Set$(chart_behavior$.GestureType)]),
    onTapDown: dart.fnType(dart.void, [tap.TapDownDetails]),
    onTapUp: dart.fnType(dart.void, [tap.TapUpDetails]),
    onLongPress: dart.fnType(dart.void, []),
    onScaleStart: dart.fnType(dart.void, [scale.ScaleStartDetails]),
    onScaleUpdate: dart.fnType(dart.void, [scale.ScaleUpdateDetails]),
    onScaleEnd: dart.fnType(dart.void, [scale.ScaleEndDetails])
  }));
  dart.setGetterSignature(chart_gesture_detector.ChartGestureDetector, () => ({
    __proto__: dart.getGetters(chart_gesture_detector.ChartGestureDetector.__proto__),
    [_containerResolver]: dart.fnType(chart_container.ChartContainerRenderObject, [])
  }));
  dart.setSetterSignature(chart_gesture_detector.ChartGestureDetector, () => ({
    __proto__: dart.getSetters(chart_gesture_detector.ChartGestureDetector.__proto__),
    [_containerResolver]: dart.fnType(chart_container.ChartContainerRenderObject, [])
  }));
  dart.setLibraryUri(chart_gesture_detector.ChartGestureDetector, I[3]);
  dart.setFieldSignature(chart_gesture_detector.ChartGestureDetector, () => ({
    __proto__: dart.getFields(chart_gesture_detector.ChartGestureDetector.__proto__),
    [_listeningForLongPress]: dart.fieldType(core.bool),
    [_isDragging]: dart.fieldType(core.bool),
    [_longPressTimer]: dart.fieldType(dart.nullable(async.Timer)),
    [_lastTapPoint]: dart.fieldType(dart.nullable(math.Point$(core.double))),
    [_lastScale]: dart.fieldType(dart.nullable(core.double)),
    [__ChartGestureDetector__containerResolver]: dart.fieldType(dart.nullable(dart.fnType(chart_container.ChartContainerRenderObject, [])))
  }));
  var Duration__duration = dart.privateName(core, "Duration._duration");
  dart.defineLazy(chart_gesture_detector, {
    /*chart_gesture_detector._kLongPressTimeout*/get _kLongPressTimeout() {
      return C[21] || CT.C21;
    }
  }, false);
  var domainAxis$ = dart.privateName(cartesian_chart$, "CartesianChart.domainAxis");
  var primaryMeasureAxis$ = dart.privateName(cartesian_chart$, "CartesianChart.primaryMeasureAxis");
  var secondaryMeasureAxis$ = dart.privateName(cartesian_chart$, "CartesianChart.secondaryMeasureAxis");
  var disjointMeasureAxes$ = dart.privateName(cartesian_chart$, "CartesianChart.disjointMeasureAxes");
  var flipVerticalAxis$ = dart.privateName(cartesian_chart$, "CartesianChart.flipVerticalAxis");
  var seriesList$ = dart.privateName(base_chart$, "BaseChart.seriesList");
  var animate$ = dart.privateName(base_chart$, "BaseChart.animate");
  var animationDuration$ = dart.privateName(base_chart$, "BaseChart.animationDuration");
  var layoutConfig$ = dart.privateName(base_chart$, "BaseChart.layoutConfig");
  var defaultRenderer$ = dart.privateName(base_chart$, "BaseChart.defaultRenderer");
  var defaultInteractions$ = dart.privateName(base_chart$, "BaseChart.defaultInteractions");
  var behaviors$ = dart.privateName(base_chart$, "BaseChart.behaviors");
  var selectionModels$ = dart.privateName(base_chart$, "BaseChart.selectionModels");
  var customSeriesRenderers$ = dart.privateName(base_chart$, "BaseChart.customSeriesRenderers");
  var rtlSpec$ = dart.privateName(base_chart$, "BaseChart.rtlSpec");
  var userManagedState$ = dart.privateName(base_chart$, "BaseChart.userManagedState");
  var _updateBehaviors = dart.privateName(base_chart$, "_updateBehaviors");
  var _updateSelectionModel = dart.privateName(base_chart$, "_updateSelectionModel");
  var _notACustomBehavior = dart.privateName(base_chart$, "_notACustomBehavior");
  const _is_BaseChart_default = Symbol('_is_BaseChart_default');
  base_chart$.BaseChart$ = dart.generic(D => {
    var BaseChartStateOfD = () => (BaseChartStateOfD = dart.constFn(base_chart_state.BaseChartState$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var BaseChartOfD$ = () => (BaseChartOfD$ = dart.constFn(base_chart$.BaseChart$(D)))();
    var BaseChartNOfD = () => (BaseChartNOfD = dart.constFn(dart.nullable(BaseChartOfD$())))();
    var ChartBehaviorOfD = () => (ChartBehaviorOfD = dart.constFn(chart_behavior$.ChartBehavior$(D)))();
    var ListOfChartBehaviorOfD = () => (ListOfChartBehaviorOfD = dart.constFn(core.List$(ChartBehaviorOfD())))();
    var ChartBehaviorOfDTovoid = () => (ChartBehaviorOfDTovoid = dart.constFn(dart.fnType(dart.void, [ChartBehaviorOfD()])))();
    var SelectNearestOfD = () => (SelectNearestOfD = dart.constFn(select_nearest$.SelectNearest$(D)))();
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var SelectionModelOfDTovoid = () => (SelectionModelOfDTovoid = dart.constFn(dart.fnType(dart.void, [SelectionModelOfD()])))();
    var MapOfSelectionModelType$SelectionModelOfDTovoid = () => (MapOfSelectionModelType$SelectionModelOfDTovoid = dart.constFn(core.Map$(selection_model.SelectionModelType, SelectionModelOfDTovoid())))();
    var SelectionModelOfDToNvoid = () => (SelectionModelOfDToNvoid = dart.constFn(dart.nullable(SelectionModelOfDTovoid())))();
    var SelectionModelConfigOfD = () => (SelectionModelConfigOfD = dart.constFn(selection_model_config.SelectionModelConfig$(D)))();
    var SelectionModelConfigOfDTovoid = () => (SelectionModelConfigOfDTovoid = dart.constFn(dart.fnType(dart.void, [SelectionModelConfigOfD()])))();
    class BaseChart extends framework.StatefulWidget {
      get seriesList() {
        return this[seriesList$];
      }
      set seriesList(value) {
        super.seriesList = value;
      }
      get animate() {
        return this[animate$];
      }
      set animate(value) {
        super.animate = value;
      }
      get animationDuration() {
        return this[animationDuration$];
      }
      set animationDuration(value) {
        super.animationDuration = value;
      }
      get layoutConfig() {
        return this[layoutConfig$];
      }
      set layoutConfig(value) {
        super.layoutConfig = value;
      }
      get defaultRenderer() {
        return this[defaultRenderer$];
      }
      set defaultRenderer(value) {
        super.defaultRenderer = value;
      }
      get defaultInteractions() {
        return this[defaultInteractions$];
      }
      set defaultInteractions(value) {
        super.defaultInteractions = value;
      }
      get behaviors() {
        return this[behaviors$];
      }
      set behaviors(value) {
        super.behaviors = value;
      }
      get selectionModels() {
        return this[selectionModels$];
      }
      set selectionModels(value) {
        super.selectionModels = value;
      }
      get customSeriesRenderers() {
        return this[customSeriesRenderers$];
      }
      set customSeriesRenderers(value) {
        super.customSeriesRenderers = value;
      }
      get rtlSpec() {
        return this[rtlSpec$];
      }
      set rtlSpec(value) {
        super.rtlSpec = value;
      }
      get userManagedState() {
        return this[userManagedState$];
      }
      set userManagedState(value) {
        super.userManagedState = value;
      }
      createState() {
        return new (BaseChartStateOfD()).new();
      }
      updateCommonChart(chart, oldWidget, chartState) {
        let t5;
        BaseChartOfD().as(chart);
        BaseChartNOfD().as(oldWidget);
        BaseChartStateOfD().as(chartState);
        performance.Performance.time("chartsUpdateRenderers");
        if (this.defaultRenderer != null && !dart.equals(this.defaultRenderer, (t5 = oldWidget, t5 == null ? null : t5.defaultRenderer))) {
          chart.defaultRenderer = dart.nullCheck(this.defaultRenderer).build();
          chartState.markChartDirty();
        }
        if (this.customSeriesRenderers != null) {
          for (let i = 0; i < dart.nullCheck(this.customSeriesRenderers)[$length]; i = i + 1) {
            if (oldWidget == null || oldWidget.customSeriesRenderers != null && i > dart.nullCheck(oldWidget.customSeriesRenderers)[$length] || !dart.nullCheck(this.customSeriesRenderers)[$_get](i)[$_equals](dart.nullCheck(oldWidget.customSeriesRenderers)[$_get](i))) {
              chart.addSeriesRenderer(dart.nullCheck(this.customSeriesRenderers)[$_get](i).build());
              chartState.markChartDirty();
            }
          }
        }
        performance.Performance.timeEnd("chartsUpdateRenderers");
        performance.Performance.time("chartsUpdateBehaviors");
        this[_updateBehaviors](chart, chartState);
        performance.Performance.timeEnd("chartsUpdateBehaviors");
        this[_updateSelectionModel](chart, chartState);
        chart.transition = this.animate ? this.animationDuration : core.Duration.zero;
      }
      [_updateBehaviors](chart, chartState) {
        let t5;
        let behaviorList = ListOfChartBehaviorOfD().from((t5 = this.behaviors, t5 == null ? [] : t5));
        if (this.defaultInteractions) {
          if (chartState.autoBehaviorWidgets[$isEmpty]) {
            this.addDefaultInteractions(chartState.autoBehaviorWidgets);
          }
          chartState.autoBehaviorWidgets[$reversed][$where](dart.bind(this, _notACustomBehavior))[$forEach](dart.fn(behavior => {
            behaviorList[$insert](0, behavior);
          }, ChartBehaviorOfDTovoid()));
        }
        for (let i = chartState.addedBehaviorWidgets[$length] - 1; i >= 0; i = i - 1) {
          let addedBehavior = chartState.addedBehaviorWidgets[$_get](i);
          if (!behaviorList[$remove](addedBehavior)) {
            let role = addedBehavior.role;
            chartState.addedBehaviorWidgets[$remove](addedBehavior);
            chartState.addedCommonBehaviorsByRole[$remove](role);
            chart.removeBehavior(chartState.addedCommonBehaviorsByRole[$_get](role));
            chartState.markChartDirty();
          }
        }
        behaviorList[$forEach](dart.fn(behaviorWidget => {
          let commonBehavior = behaviorWidget.createCommonBehavior();
          if (T.ChartStateBehaviorOfChartBehavior().is(commonBehavior)) {
            T.ChartStateBehaviorOfChartBehavior().as(commonBehavior).chartState = chartState;
          }
          chart.addBehavior(commonBehavior);
          chartState.addedBehaviorWidgets[$add](behaviorWidget);
          chartState.addedCommonBehaviorsByRole[$_set](behaviorWidget.role, commonBehavior);
          chartState.markChartDirty();
        }, ChartBehaviorOfDTovoid()));
      }
      addDefaultInteractions(behaviors) {
        behaviors[$add](SelectNearestOfD().new({eventTrigger: selection_trigger.SelectionTrigger.tap, selectionModelType: selection_model.SelectionModelType.info, selectClosestSeries: true}));
      }
      [_notACustomBehavior](behavior) {
        return this.behaviors == null || !dart.nullCheck(this.behaviors)[$any](dart.fn(userBehavior => userBehavior.role === behavior.role, T.ChartBehaviorTobool()));
      }
      [_updateSelectionModel](chart, chartState) {
        let t5;
        let prevTypes = T.ListOfSelectionModelType().from(MapOfSelectionModelType$SelectionModelOfDTovoid().as(chartState.addedSelectionChangedListenersByType)[$keys]);
        t5 = this.selectionModels;
        t5 == null ? null : t5[$forEach](dart.fn(model => {
          let selectionModel = chart.getSelectionModel(model.type);
          let prevChangedListener = MapOfSelectionModelType$SelectionModelOfDTovoid().as(chartState.addedSelectionChangedListenersByType)[$_get](model.type);
          if (SelectionModelOfDToNvoid().as(model.changedListener) != prevChangedListener) {
            if (prevChangedListener != null) {
              selectionModel.removeSelectionChangedListener(prevChangedListener);
            }
            selectionModel.addSelectionChangedListener(dart.nullCheck(SelectionModelOfDToNvoid().as(model.changedListener)));
            MapOfSelectionModelType$SelectionModelOfDTovoid().as(chartState.addedSelectionChangedListenersByType)[$_set](model.type, dart.nullCheck(SelectionModelOfDToNvoid().as(model.changedListener)));
          }
          let prevUpdatedListener = MapOfSelectionModelType$SelectionModelOfDTovoid().as(chartState.addedSelectionUpdatedListenersByType)[$_get](model.type);
          if (SelectionModelOfDToNvoid().as(model.updatedListener) != prevUpdatedListener) {
            if (prevUpdatedListener != null) {
              selectionModel.removeSelectionUpdatedListener(prevUpdatedListener);
            }
            selectionModel.addSelectionUpdatedListener(dart.nullCheck(SelectionModelOfDToNvoid().as(model.updatedListener)));
            MapOfSelectionModelType$SelectionModelOfDTovoid().as(chartState.addedSelectionUpdatedListenersByType)[$_set](model.type, dart.nullCheck(SelectionModelOfDToNvoid().as(model.updatedListener)));
          }
          prevTypes[$remove](model.type);
        }, SelectionModelConfigOfDTovoid()));
        prevTypes[$forEach](dart.fn(type => {
          let t5;
          t5 = chart.getSelectionModel(type);
          (() => {
            t5.removeSelectionChangedListener(dart.nullCheck(MapOfSelectionModelType$SelectionModelOfDTovoid().as(chartState.addedSelectionChangedListenersByType)[$_get](type)));
            t5.removeSelectionUpdatedListener(dart.nullCheck(MapOfSelectionModelType$SelectionModelOfDTovoid().as(chartState.addedSelectionUpdatedListenersByType)[$_get](type)));
            return t5;
          })();
        }, T.SelectionModelTypeTovoid()));
      }
      getDesiredGestures(chartState) {
        let t5;
        let types = new (T._HashSetOfGestureType()).new();
        t5 = this.behaviors;
        t5 == null ? null : t5[$forEach](dart.fn(behavior => {
          types.addAll(behavior.desiredGestures);
        }, T.ChartBehaviorTovoid()));
        if (this.defaultInteractions && chartState.autoBehaviorWidgets[$isEmpty]) {
          this.addDefaultInteractions(chartState.autoBehaviorWidgets);
        }
        chartState.autoBehaviorWidgets[$forEach](dart.fn(behavior => {
          types.addAll(behavior.desiredGestures);
        }, T.ChartBehaviorTovoid()));
        return types;
      }
    }
    (BaseChart.new = function(seriesList, opts) {
      let t5, t5$;
      let animate = opts && 'animate' in opts ? opts.animate : null;
      let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : null;
      let defaultRenderer = opts && 'defaultRenderer' in opts ? opts.defaultRenderer : null;
      let customSeriesRenderers = opts && 'customSeriesRenderers' in opts ? opts.customSeriesRenderers : null;
      let behaviors = opts && 'behaviors' in opts ? opts.behaviors : null;
      let selectionModels = opts && 'selectionModels' in opts ? opts.selectionModels : null;
      let rtlSpec = opts && 'rtlSpec' in opts ? opts.rtlSpec : null;
      let defaultInteractions = opts && 'defaultInteractions' in opts ? opts.defaultInteractions : true;
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      let userManagedState = opts && 'userManagedState' in opts ? opts.userManagedState : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[seriesList$] = seriesList;
      this[defaultRenderer$] = defaultRenderer;
      this[customSeriesRenderers$] = customSeriesRenderers;
      this[behaviors$] = behaviors;
      this[selectionModels$] = selectionModels;
      this[rtlSpec$] = rtlSpec;
      this[defaultInteractions$] = defaultInteractions;
      this[layoutConfig$] = layoutConfig;
      this[userManagedState$] = userManagedState;
      this[animate$] = (t5 = animate, t5 == null ? true : t5);
      this[animationDuration$] = (t5$ = animationDuration, t5$ == null ? C[22] || CT.C22 : t5$);
      BaseChart.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = BaseChart.prototype;
    dart.addTypeTests(BaseChart);
    BaseChart.prototype[_is_BaseChart_default] = true;
    dart.addTypeCaches(BaseChart);
    dart.setMethodSignature(BaseChart, () => ({
      __proto__: dart.getMethods(BaseChart.__proto__),
      createState: dart.fnType(base_chart_state.BaseChartState$(D), []),
      updateCommonChart: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
      [_updateBehaviors]: dart.fnType(dart.void, [base_chart.BaseChart, base_chart_state.BaseChartState$(D)]),
      addDefaultInteractions: dart.fnType(dart.void, [core.List$(chart_behavior$.ChartBehavior)]),
      [_notACustomBehavior]: dart.fnType(core.bool, [chart_behavior$.ChartBehavior]),
      [_updateSelectionModel]: dart.fnType(dart.void, [base_chart.BaseChart$(D), base_chart_state.BaseChartState$(D)]),
      getDesiredGestures: dart.fnType(core.Set$(chart_behavior$.GestureType), [base_chart_state.BaseChartState])
    }));
    dart.setLibraryUri(BaseChart, I[4]);
    dart.setFieldSignature(BaseChart, () => ({
      __proto__: dart.getFields(BaseChart.__proto__),
      seriesList: dart.finalFieldType(core.List$(series.Series$(dart.dynamic, D))),
      animate: dart.finalFieldType(core.bool),
      animationDuration: dart.finalFieldType(core.Duration),
      layoutConfig: dart.finalFieldType(dart.nullable(base_chart$.LayoutConfig)),
      defaultRenderer: dart.finalFieldType(dart.nullable(series_renderer_config.SeriesRendererConfig$(D))),
      defaultInteractions: dart.finalFieldType(core.bool),
      behaviors: dart.finalFieldType(dart.nullable(core.List$(chart_behavior$.ChartBehavior$(D)))),
      selectionModels: dart.finalFieldType(dart.nullable(core.List$(selection_model_config.SelectionModelConfig$(D)))),
      customSeriesRenderers: dart.finalFieldType(dart.nullable(core.List$(series_renderer_config.SeriesRendererConfig$(D)))),
      rtlSpec: dart.finalFieldType(dart.nullable(rtl_spec.RTLSpec)),
      userManagedState: dart.finalFieldType(dart.nullable(user_managed_state.UserManagedState$(D)))
    }));
    return BaseChart;
  });
  base_chart$.BaseChart = base_chart$.BaseChart$();
  dart.addTypeTests(base_chart$.BaseChart, _is_BaseChart_default);
  const _is_CartesianChart_default = Symbol('_is_CartesianChart_default');
  cartesian_chart$.CartesianChart$ = dart.generic(D => {
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var BaseChartOfD$ = () => (BaseChartOfD$ = dart.constFn(base_chart$.BaseChart$(D)))();
    var BaseChartNOfD = () => (BaseChartNOfD = dart.constFn(dart.nullable(BaseChartOfD$())))();
    var BaseChartStateOfD = () => (BaseChartStateOfD = dart.constFn(base_chart_state.BaseChartState$(D)))();
    class CartesianChart extends base_chart$.BaseChart$(D) {
      get domainAxis() {
        return this[domainAxis$];
      }
      set domainAxis(value) {
        super.domainAxis = value;
      }
      get primaryMeasureAxis() {
        return this[primaryMeasureAxis$];
      }
      set primaryMeasureAxis(value) {
        super.primaryMeasureAxis = value;
      }
      get secondaryMeasureAxis() {
        return this[secondaryMeasureAxis$];
      }
      set secondaryMeasureAxis(value) {
        super.secondaryMeasureAxis = value;
      }
      get disjointMeasureAxes() {
        return this[disjointMeasureAxes$];
      }
      set disjointMeasureAxes(value) {
        super.disjointMeasureAxes = value;
      }
      get flipVerticalAxis() {
        return this[flipVerticalAxis$];
      }
      set flipVerticalAxis(value) {
        super.flipVerticalAxis = value;
      }
      updateCommonChart(baseChart, oldWidget, chartState) {
        let t5, t5$, t5$0, t5$1;
        BaseChartOfD().as(baseChart);
        BaseChartNOfD().as(oldWidget);
        BaseChartStateOfD().as(chartState);
        super.updateCommonChart(baseChart, oldWidget, chartState);
        let prev = T.CartesianChartN().as(oldWidget);
        let chart = cartesian_chart.CartesianChart.as(baseChart);
        if (this.flipVerticalAxis != null) {
          chart.flipVerticalAxisOutput = dart.nullCheck(this.flipVerticalAxis);
        }
        if (this.domainAxis != null && !dart.equals(this.domainAxis, (t5 = prev, t5 == null ? null : t5.domainAxis))) {
          chart.domainAxisSpec = dart.nullCheck(this.domainAxis);
          chartState.markChartDirty();
        }
        if (!dart.equals(this.primaryMeasureAxis, (t5$ = prev, t5$ == null ? null : t5$.primaryMeasureAxis))) {
          chart.primaryMeasureAxisSpec = this.primaryMeasureAxis;
          chartState.markChartDirty();
        }
        if (!dart.equals(this.secondaryMeasureAxis, (t5$0 = prev, t5$0 == null ? null : t5$0.secondaryMeasureAxis))) {
          chart.secondaryMeasureAxisSpec = this.secondaryMeasureAxis;
          chartState.markChartDirty();
        }
        if (!dart.equals(this.disjointMeasureAxes, (t5$1 = prev, t5$1 == null ? null : t5$1.disjointMeasureAxes))) {
          chart.disjointMeasureAxisSpecs = this.disjointMeasureAxes;
          chartState.markChartDirty();
        }
      }
      createDisjointMeasureAxes() {
        if (this.disjointMeasureAxes != null) {
          let disjointAxes = new (T.IdentityMapOfString$NumericAxis()).new();
          dart.nullCheck(this.disjointMeasureAxes)[$forEach](dart.fn((axisId, axisSpec) => {
            disjointAxes[$_set](axisId, axisSpec.createAxis());
          }, T.StringAndNumericAxisSpecTovoid()));
          return disjointAxes;
        } else {
          return null;
        }
      }
    }
    (CartesianChart.new = function(seriesList, opts) {
      let animate = opts && 'animate' in opts ? opts.animate : null;
      let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : null;
      let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
      let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
      let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
      let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
      let defaultRenderer = opts && 'defaultRenderer' in opts ? opts.defaultRenderer : null;
      let customSeriesRenderers = opts && 'customSeriesRenderers' in opts ? opts.customSeriesRenderers : null;
      let behaviors = opts && 'behaviors' in opts ? opts.behaviors : null;
      let selectionModels = opts && 'selectionModels' in opts ? opts.selectionModels : null;
      let rtlSpec = opts && 'rtlSpec' in opts ? opts.rtlSpec : null;
      let defaultInteractions = opts && 'defaultInteractions' in opts ? opts.defaultInteractions : true;
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      let userManagedState = opts && 'userManagedState' in opts ? opts.userManagedState : null;
      let flipVerticalAxis = opts && 'flipVerticalAxis' in opts ? opts.flipVerticalAxis : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[domainAxis$] = domainAxis;
      this[primaryMeasureAxis$] = primaryMeasureAxis;
      this[secondaryMeasureAxis$] = secondaryMeasureAxis;
      this[disjointMeasureAxes$] = disjointMeasureAxes;
      this[flipVerticalAxis$] = flipVerticalAxis;
      CartesianChart.__proto__.new.call(this, seriesList, {animate: animate, animationDuration: animationDuration, defaultRenderer: defaultRenderer, customSeriesRenderers: customSeriesRenderers, behaviors: behaviors, selectionModels: selectionModels, rtlSpec: rtlSpec, defaultInteractions: defaultInteractions, layoutConfig: layoutConfig, userManagedState: userManagedState, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = CartesianChart.prototype;
    dart.addTypeTests(CartesianChart);
    CartesianChart.prototype[_is_CartesianChart_default] = true;
    dart.addTypeCaches(CartesianChart);
    dart.setMethodSignature(CartesianChart, () => ({
      __proto__: dart.getMethods(CartesianChart.__proto__),
      createDisjointMeasureAxes: dart.fnType(dart.nullable(collection.LinkedHashMap$(core.String, axis.NumericAxis)), [])
    }));
    dart.setLibraryUri(CartesianChart, I[5]);
    dart.setFieldSignature(CartesianChart, () => ({
      __proto__: dart.getFields(CartesianChart.__proto__),
      domainAxis: dart.finalFieldType(dart.nullable(axis_spec.AxisSpec)),
      primaryMeasureAxis: dart.finalFieldType(dart.nullable(numeric_axis_spec.NumericAxisSpec)),
      secondaryMeasureAxis: dart.finalFieldType(dart.nullable(numeric_axis_spec.NumericAxisSpec)),
      disjointMeasureAxes: dart.finalFieldType(dart.nullable(collection.LinkedHashMap$(core.String, numeric_axis_spec.NumericAxisSpec))),
      flipVerticalAxis: dart.finalFieldType(dart.nullable(core.bool))
    }));
    return CartesianChart;
  });
  cartesian_chart$.CartesianChart = cartesian_chart$.CartesianChart$();
  dart.addTypeTests(cartesian_chart$.CartesianChart, _is_CartesianChart_default);
  var desiredGestures = dart.privateName(line_point_highlighter$, "LinePointHighlighter.desiredGestures");
  var selectionModelType$ = dart.privateName(line_point_highlighter$, "LinePointHighlighter.selectionModelType");
  var defaultRadiusPx$ = dart.privateName(line_point_highlighter$, "LinePointHighlighter.defaultRadiusPx");
  var radiusPaddingPx$ = dart.privateName(line_point_highlighter$, "LinePointHighlighter.radiusPaddingPx");
  var showHorizontalFollowLine$ = dart.privateName(line_point_highlighter$, "LinePointHighlighter.showHorizontalFollowLine");
  var showVerticalFollowLine$ = dart.privateName(line_point_highlighter$, "LinePointHighlighter.showVerticalFollowLine");
  var dashPattern$ = dart.privateName(line_point_highlighter$, "LinePointHighlighter.dashPattern");
  var drawFollowLinesAcrossChart$ = dart.privateName(line_point_highlighter$, "LinePointHighlighter.drawFollowLinesAcrossChart");
  var symbolRenderer$ = dart.privateName(line_point_highlighter$, "LinePointHighlighter.symbolRenderer");
  const _is_ChartBehavior_default = Symbol('_is_ChartBehavior_default');
  chart_behavior$.ChartBehavior$ = dart.generic(D => {
    class ChartBehavior extends core.Object {}
    (ChartBehavior.new = function() {
      ;
    }).prototype = ChartBehavior.prototype;
    dart.addTypeTests(ChartBehavior);
    ChartBehavior.prototype[_is_ChartBehavior_default] = true;
    dart.addTypeCaches(ChartBehavior);
    dart.setLibraryUri(ChartBehavior, I[6]);
    return ChartBehavior;
  });
  chart_behavior$.ChartBehavior = chart_behavior$.ChartBehavior$();
  dart.addTypeTests(chart_behavior$.ChartBehavior, _is_ChartBehavior_default);
  const _is_LinePointHighlighter_default = Symbol('_is_LinePointHighlighter_default');
  line_point_highlighter$.LinePointHighlighter$ = dart.generic(D => {
    var LinePointHighlighterOfD = () => (LinePointHighlighterOfD = dart.constFn(line_point_highlighter.LinePointHighlighter$(D)))();
    var ChartBehaviorOfD = () => (ChartBehaviorOfD = dart.constFn(chart_behavior.ChartBehavior$(D)))();
    class LinePointHighlighter extends chart_behavior$.ChartBehavior$(D) {
      get desiredGestures() {
        return this[desiredGestures];
      }
      set desiredGestures(value) {
        super.desiredGestures = value;
      }
      get selectionModelType() {
        return this[selectionModelType$];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get defaultRadiusPx() {
        return this[defaultRadiusPx$];
      }
      set defaultRadiusPx(value) {
        super.defaultRadiusPx = value;
      }
      get radiusPaddingPx() {
        return this[radiusPaddingPx$];
      }
      set radiusPaddingPx(value) {
        super.radiusPaddingPx = value;
      }
      get showHorizontalFollowLine() {
        return this[showHorizontalFollowLine$];
      }
      set showHorizontalFollowLine(value) {
        super.showHorizontalFollowLine = value;
      }
      get showVerticalFollowLine() {
        return this[showVerticalFollowLine$];
      }
      set showVerticalFollowLine(value) {
        super.showVerticalFollowLine = value;
      }
      get dashPattern() {
        return this[dashPattern$];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get drawFollowLinesAcrossChart() {
        return this[drawFollowLinesAcrossChart$];
      }
      set drawFollowLinesAcrossChart(value) {
        super.drawFollowLinesAcrossChart = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      createCommonBehavior() {
        return new (LinePointHighlighterOfD()).new({selectionModelType: this.selectionModelType, defaultRadiusPx: this.defaultRadiusPx, radiusPaddingPx: this.radiusPaddingPx, showHorizontalFollowLine: this.showHorizontalFollowLine, showVerticalFollowLine: this.showVerticalFollowLine, dashPattern: this.dashPattern, drawFollowLinesAcrossChart: this.drawFollowLinesAcrossChart, symbolRenderer: this.symbolRenderer});
      }
      updateCommonBehavior(commonBehavior) {
        ChartBehaviorOfD().as(commonBehavior);
      }
      get role() {
        return "LinePointHighlighter-" + dart.toString(this.selectionModelType);
      }
      _equals(o) {
        if (o == null) return false;
        return line_point_highlighter$.LinePointHighlighter.is(o) && this.defaultRadiusPx == o.defaultRadiusPx && this.radiusPaddingPx == o.radiusPaddingPx && this.showHorizontalFollowLine == o.showHorizontalFollowLine && this.showVerticalFollowLine == o.showVerticalFollowLine && this.selectionModelType == o.selectionModelType && new equality.ListEquality.new().equals(this.dashPattern, o.dashPattern) && this.drawFollowLinesAcrossChart == o.drawFollowLinesAcrossChart;
      }
      get hashCode() {
        return ui.hashValues(this.selectionModelType, this.defaultRadiusPx, this.radiusPaddingPx, this.showHorizontalFollowLine, this.showVerticalFollowLine, this.dashPattern, this.drawFollowLinesAcrossChart);
      }
    }
    (LinePointHighlighter.new = function(opts) {
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : null;
      let defaultRadiusPx = opts && 'defaultRadiusPx' in opts ? opts.defaultRadiusPx : null;
      let radiusPaddingPx = opts && 'radiusPaddingPx' in opts ? opts.radiusPaddingPx : null;
      let showHorizontalFollowLine = opts && 'showHorizontalFollowLine' in opts ? opts.showHorizontalFollowLine : null;
      let showVerticalFollowLine = opts && 'showVerticalFollowLine' in opts ? opts.showVerticalFollowLine : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let drawFollowLinesAcrossChart = opts && 'drawFollowLinesAcrossChart' in opts ? opts.drawFollowLinesAcrossChart : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[desiredGestures] = new (T._HashSetOfGestureType()).new();
      this[selectionModelType$] = selectionModelType;
      this[defaultRadiusPx$] = defaultRadiusPx;
      this[radiusPaddingPx$] = radiusPaddingPx;
      this[showHorizontalFollowLine$] = showHorizontalFollowLine;
      this[showVerticalFollowLine$] = showVerticalFollowLine;
      this[dashPattern$] = dashPattern;
      this[drawFollowLinesAcrossChart$] = drawFollowLinesAcrossChart;
      this[symbolRenderer$] = symbolRenderer;
      ;
    }).prototype = LinePointHighlighter.prototype;
    dart.addTypeTests(LinePointHighlighter);
    LinePointHighlighter.prototype[_is_LinePointHighlighter_default] = true;
    dart.addTypeCaches(LinePointHighlighter);
    dart.setMethodSignature(LinePointHighlighter, () => ({
      __proto__: dart.getMethods(LinePointHighlighter.__proto__),
      createCommonBehavior: dart.fnType(line_point_highlighter.LinePointHighlighter$(D), []),
      updateCommonBehavior: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(LinePointHighlighter, () => ({
      __proto__: dart.getGetters(LinePointHighlighter.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(LinePointHighlighter, I[7]);
    dart.setFieldSignature(LinePointHighlighter, () => ({
      __proto__: dart.getFields(LinePointHighlighter.__proto__),
      desiredGestures: dart.finalFieldType(core.Set$(chart_behavior$.GestureType)),
      selectionModelType: dart.finalFieldType(dart.nullable(selection_model.SelectionModelType)),
      defaultRadiusPx: dart.finalFieldType(dart.nullable(core.double)),
      radiusPaddingPx: dart.finalFieldType(dart.nullable(core.double)),
      showHorizontalFollowLine: dart.finalFieldType(dart.nullable(line_point_highlighter.LinePointHighlighterFollowLineType)),
      showVerticalFollowLine: dart.finalFieldType(dart.nullable(line_point_highlighter.LinePointHighlighterFollowLineType)),
      dashPattern: dart.finalFieldType(dart.nullable(core.List$(core.int))),
      drawFollowLinesAcrossChart: dart.finalFieldType(dart.nullable(core.bool)),
      symbolRenderer: dart.finalFieldType(dart.nullable(symbol_renderer.SymbolRenderer))
    }));
    dart.defineExtensionMethods(LinePointHighlighter, ['_equals']);
    dart.defineExtensionAccessors(LinePointHighlighter, ['hashCode']);
    return LinePointHighlighter;
  });
  line_point_highlighter$.LinePointHighlighter = line_point_highlighter$.LinePointHighlighter$();
  dart.addTypeTests(line_point_highlighter$.LinePointHighlighter, _is_LinePointHighlighter_default);
  var dateTimeFactory$ = dart.privateName(time_series_chart$, "TimeSeriesChart.dateTimeFactory");
  time_series_chart$.TimeSeriesChart = class TimeSeriesChart extends cartesian_chart$.CartesianChart$(core.DateTime) {
    get dateTimeFactory() {
      return this[dateTimeFactory$];
    }
    set dateTimeFactory(value) {
      super.dateTimeFactory = value;
    }
    createCommonChart(chartState) {
      let t5, t5$, t5$0, t5$1;
      base_chart_state.BaseChartState.as(chartState);
      return new time_series_chart.TimeSeriesChart.new({layoutConfig: (t5 = this.layoutConfig, t5 == null ? null : t5.commonLayoutConfig), primaryMeasureAxis: (t5$ = this.primaryMeasureAxis, t5$ == null ? null : t5$.createAxis()), secondaryMeasureAxis: (t5$0 = this.secondaryMeasureAxis, t5$0 == null ? null : t5$0.createAxis()), disjointMeasureAxes: this.createDisjointMeasureAxes(), dateTimeFactory: (t5$1 = this.dateTimeFactory, t5$1 == null ? C[23] || CT.C23 : t5$1)});
    }
    addDefaultInteractions(behaviors) {
      super.addDefaultInteractions(behaviors);
      behaviors[$add](new (T.LinePointHighlighterOfDateTime()).new());
    }
  };
  (time_series_chart$.TimeSeriesChart.new = function(seriesList, opts) {
    let animate = opts && 'animate' in opts ? opts.animate : null;
    let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : null;
    let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    let defaultRenderer = opts && 'defaultRenderer' in opts ? opts.defaultRenderer : null;
    let customSeriesRenderers = opts && 'customSeriesRenderers' in opts ? opts.customSeriesRenderers : null;
    let behaviors = opts && 'behaviors' in opts ? opts.behaviors : null;
    let selectionModels = opts && 'selectionModels' in opts ? opts.selectionModels : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let dateTimeFactory = opts && 'dateTimeFactory' in opts ? opts.dateTimeFactory : null;
    let defaultInteractions = opts && 'defaultInteractions' in opts ? opts.defaultInteractions : true;
    let flipVerticalAxis = opts && 'flipVerticalAxis' in opts ? opts.flipVerticalAxis : null;
    let userManagedState = opts && 'userManagedState' in opts ? opts.userManagedState : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[dateTimeFactory$] = dateTimeFactory;
    time_series_chart$.TimeSeriesChart.__proto__.new.call(this, seriesList, {animate: animate, animationDuration: animationDuration, domainAxis: domainAxis, primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes, defaultRenderer: defaultRenderer, customSeriesRenderers: customSeriesRenderers, behaviors: behaviors, selectionModels: selectionModels, layoutConfig: layoutConfig, defaultInteractions: defaultInteractions, flipVerticalAxis: flipVerticalAxis, userManagedState: userManagedState, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = time_series_chart$.TimeSeriesChart.prototype;
  dart.addTypeTests(time_series_chart$.TimeSeriesChart);
  dart.addTypeCaches(time_series_chart$.TimeSeriesChart);
  dart.setMethodSignature(time_series_chart$.TimeSeriesChart, () => ({
    __proto__: dart.getMethods(time_series_chart$.TimeSeriesChart.__proto__),
    createCommonChart: dart.fnType(time_series_chart.TimeSeriesChart, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(time_series_chart$.TimeSeriesChart, I[8]);
  dart.setFieldSignature(time_series_chart$.TimeSeriesChart, () => ({
    __proto__: dart.getFields(time_series_chart$.TimeSeriesChart.__proto__),
    dateTimeFactory: dart.finalFieldType(dart.nullable(date_time_factory.DateTimeFactory))
  }));
  var chartWidget$ = dart.privateName(chart_container, "ChartContainer.chartWidget");
  var oldChartWidget$ = dart.privateName(chart_container, "ChartContainer.oldChartWidget");
  var chartState$ = dart.privateName(chart_container, "ChartContainer.chartState");
  var animationValue$ = dart.privateName(chart_container, "ChartContainer.animationValue");
  var rtl$ = dart.privateName(chart_container, "ChartContainer.rtl");
  var rtlSpec$0 = dart.privateName(chart_container, "ChartContainer.rtlSpec");
  var userManagedState$0 = dart.privateName(chart_container, "ChartContainer.userManagedState");
  const _is_ChartContainer_default = Symbol('_is_ChartContainer_default');
  chart_container.ChartContainer$ = dart.generic(D => {
    var ChartContainerRenderObjectOfD = () => (ChartContainerRenderObjectOfD = dart.constFn(chart_container.ChartContainerRenderObject$(D)))();
    class ChartContainer extends basic.CustomPaint {
      get chartWidget() {
        return this[chartWidget$];
      }
      set chartWidget(value) {
        super.chartWidget = value;
      }
      get oldChartWidget() {
        return this[oldChartWidget$];
      }
      set oldChartWidget(value) {
        super.oldChartWidget = value;
      }
      get chartState() {
        return this[chartState$];
      }
      set chartState(value) {
        super.chartState = value;
      }
      get animationValue() {
        return this[animationValue$];
      }
      set animationValue(value) {
        super.animationValue = value;
      }
      get rtl() {
        return this[rtl$];
      }
      set rtl(value) {
        super.rtl = value;
      }
      get rtlSpec() {
        return this[rtlSpec$0];
      }
      set rtlSpec(value) {
        super.rtlSpec = value;
      }
      get userManagedState() {
        return this[userManagedState$0];
      }
      set userManagedState(value) {
        super.userManagedState = value;
      }
      createRenderObject(context) {
        let t5;
        t5 = new (ChartContainerRenderObjectOfD()).new();
        return (() => {
          t5.reconfigure(this, context);
          return t5;
        })();
      }
      updateRenderObject(context, renderObject) {
        chart_container.ChartContainerRenderObject.as(renderObject);
        renderObject.reconfigure(this, context);
      }
    }
    (ChartContainer.new = function(opts) {
      let oldChartWidget = opts && 'oldChartWidget' in opts ? opts.oldChartWidget : null;
      let chartWidget = opts && 'chartWidget' in opts ? opts.chartWidget : null;
      let chartState = opts && 'chartState' in opts ? opts.chartState : null;
      let animationValue = opts && 'animationValue' in opts ? opts.animationValue : null;
      let rtl = opts && 'rtl' in opts ? opts.rtl : null;
      let rtlSpec = opts && 'rtlSpec' in opts ? opts.rtlSpec : null;
      let userManagedState = opts && 'userManagedState' in opts ? opts.userManagedState : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[oldChartWidget$] = oldChartWidget;
      this[chartWidget$] = chartWidget;
      this[chartState$] = chartState;
      this[animationValue$] = animationValue;
      this[rtl$] = rtl;
      this[rtlSpec$0] = rtlSpec;
      this[userManagedState$0] = userManagedState;
      ChartContainer.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = ChartContainer.prototype;
    dart.addTypeTests(ChartContainer);
    ChartContainer.prototype[_is_ChartContainer_default] = true;
    dart.addTypeCaches(ChartContainer);
    dart.setLibraryUri(ChartContainer, I[9]);
    dart.setFieldSignature(ChartContainer, () => ({
      __proto__: dart.getFields(ChartContainer.__proto__),
      chartWidget: dart.finalFieldType(base_chart$.BaseChart$(D)),
      oldChartWidget: dart.finalFieldType(dart.nullable(base_chart$.BaseChart$(D))),
      chartState: dart.finalFieldType(base_chart_state.BaseChartState$(D)),
      animationValue: dart.finalFieldType(core.double),
      rtl: dart.finalFieldType(core.bool),
      rtlSpec: dart.finalFieldType(dart.nullable(rtl_spec.RTLSpec)),
      userManagedState: dart.finalFieldType(dart.nullable(user_managed_state.UserManagedState$(D)))
    }));
    return ChartContainer;
  });
  chart_container.ChartContainer = chart_container.ChartContainer$();
  dart.addTypeTests(chart_container.ChartContainer, _is_ChartContainer_default);
  var _chart = dart.privateName(chart_container, "_chart");
  var _seriesList = dart.privateName(chart_container, "_seriesList");
  var __ChartContainerRenderObject__chartState = dart.privateName(chart_container, "_#ChartContainerRenderObject#_chartState");
  var _chartContainerIsRtl = dart.privateName(chart_container, "_chartContainerIsRtl");
  var _rtlSpec = dart.privateName(chart_container, "_rtlSpec");
  var _dateTimeFactory = dart.privateName(chart_container, "_dateTimeFactory");
  var _exploreMode = dart.privateName(chart_container, "_exploreMode");
  var _a11yNodes = dart.privateName(chart_container, "_a11yNodes");
  var _log = dart.privateName(chart_container, "_log");
  var _lastConfigurationChangeTime = dart.privateName(chart_container, "_lastConfigurationChangeTime");
  var _chartState = dart.privateName(chart_container, "_chartState");
  var _updateUserManagedState = dart.privateName(chart_container, "_updateUserManagedState");
  var _setNewPainter = dart.privateName(chart_container, "_setNewPainter");
  const _is_ChartContainerRenderObject_default = Symbol('_is_ChartContainerRenderObject_default');
  chart_container.ChartContainerRenderObject$ = dart.generic(D => {
    var ChartContainerOfD = () => (ChartContainerOfD = dart.constFn(chart_container.ChartContainer$(D)))();
    class ChartContainerRenderObject extends custom_paint.RenderCustomPaint {
      get [_chartState]() {
        let t5;
        t5 = this[__ChartContainerRenderObject__chartState];
        return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_chartState")) : t5;
      }
      set [_chartState](t5) {
        this[__ChartContainerRenderObject__chartState] = t5;
      }
      reconfigure(config, context) {
        ChartContainerOfD().as(config);
        this[_chartState] = config.chartState;
        this[_dateTimeFactory] = time_series_chart$.TimeSeriesChart.is(config.chartWidget) ? time_series_chart$.TimeSeriesChart.as(config.chartWidget).dateTimeFactory : null;
        this[_dateTimeFactory] == null ? this[_dateTimeFactory] = new date_time_factory.LocalDateTimeFactory.new() : null;
        if (this[_chart] == null) {
          performance.Performance.time("chartsCreate");
          this[_chart] = config.chartWidget.createCommonChart(this[_chartState]);
          dart.nullCheck(this[_chart]).init(this, new graphics_factory.GraphicsFactory.new(context));
          performance.Performance.timeEnd("chartsCreate");
        }
        performance.Performance.time("chartsConfig");
        config.chartWidget.updateCommonChart(dart.nullCheck(this[_chart]), config.oldChartWidget, this[_chartState]);
        this[_rtlSpec] = config.rtlSpec;
        this[_chartContainerIsRtl] = config.rtl;
        performance.Performance.timeEnd("chartsConfig");
        if (this[_chartState].chartIsDirty) {
          let currentTime = new core.DateTime.now();
          let lastConfigurationBelowThreshold = this[_lastConfigurationChangeTime] != null && currentTime.difference(dart.nullCheck(this[_lastConfigurationChangeTime])).inMilliseconds < 500;
          this[_lastConfigurationChangeTime] = currentTime;
          if (lastConfigurationBelowThreshold) {
            this[_chartState].resetChartDirtyFlag();
            this[_log].warning("Chart configuration is changing more frequent than threshold" + " of " + dart.str(500) + ". Check if your behavior, axis," + " or renderer config is missing equality checks that may be causing" + " configuration to be detected as changed. ");
          }
        }
        if (this[_chartState].chartIsDirty) {
          dart.nullCheck(this[_chart]).configurationChanged();
        }
        if (!dart.equals(this[_seriesList], config.chartWidget.seriesList) || this[_chartState].chartIsDirty) {
          this[_chartState].resetChartDirtyFlag();
          this[_seriesList] = config.chartWidget.seriesList;
          this[_a11yNodes] = null;
          performance.Performance.time("chartsDraw");
          dart.nullCheck(this[_chart]).draw(dart.nullCheck(this[_seriesList]));
          performance.Performance.timeEnd("chartsDraw");
          dart.nullCheck(this[_chart]).animationPercent = 0.0;
          this.markNeedsLayout();
        } else {
          dart.nullCheck(this[_chart]).animationPercent = config.animationValue;
          this.markNeedsPaint();
        }
        this[_updateUserManagedState](config.userManagedState);
        this[_setNewPainter]();
      }
      [_updateUserManagedState](newState) {
        if (newState == null) {
          return;
        }
        for (let type of newState.selectionModels[$keys]) {
          let model = dart.nullCheck(this[_chart]).getSelectionModel(type);
          let userModel = dart.nullCheck(newState.selectionModels[$_get](type)).getModel(dart.nullCheck(this[_chart]).currentSeriesList);
          if (!model._equals(userModel)) {
            model.updateSelection(userModel.selectedDatum, userModel.selectedSeries);
          }
        }
      }
      performLayout() {
        performance.Performance.time("chartsLayout");
        dart.nullCheck(this[_chart]).measure(this.constraints.maxWidth[$toInt](), this.constraints.maxHeight[$toInt]());
        dart.nullCheck(this[_chart]).layout(this.constraints.maxWidth[$toInt](), this.constraints.maxHeight[$toInt]());
        performance.Performance.timeEnd("chartsLayout");
        this.size = this.constraints.biggest;
      }
      markNeedsLayout() {
        super.markNeedsLayout();
        if (this.parent != null) {
          this.markParentNeedsLayout();
        }
      }
      hitTestSelf(position) {
        return true;
      }
      requestRedraw() {
      }
      requestAnimation(transition) {
        const startAnimationController = _ => {
          this[_chartState].setAnimation(transition);
        };
        dart.fn(startAnimationController, T.dynamicTovoid());
        if (!dart.nullCheck(binding.SchedulerBinding.instance).hasScheduledFrame) {
          dart.nullCheck(binding.SchedulerBinding.instance).scheduleFrame();
        }
        dart.nullCheck(binding.SchedulerBinding.instance).addPostFrameCallback(startAnimationController);
      }
      requestRebuild() {
        const doRebuild = _ => {
          this[_chartState].requestRebuild();
        };
        dart.fn(doRebuild, T.dynamicTovoid());
        dart.nullCheck(binding.SchedulerBinding.instance).addPostFrameCallback(doRebuild);
      }
      requestPaint() {
        this.markNeedsPaint();
      }
      get pixelsPerDp() {
        return 1.0;
      }
      get chartContainerIsRtl() {
        return this[_chartContainerIsRtl];
      }
      get rtlSpec() {
        return this[_rtlSpec];
      }
      get isRtl() {
        let t6;
        return this[_chartContainerIsRtl] && (this[_rtlSpec] == null || (t6 = this[_rtlSpec], t6 == null ? null : t6.axisDirection) === rtl_spec.AxisDirection.reversed);
      }
      get isTappable() {
        return dart.nullCheck(this[_chart]).isTappable;
      }
      get dateTimeFactory() {
        return dart.nullCheck(this[_dateTimeFactory]);
      }
      get gestureProxy() {
        return dart.nullCheck(this[_chart]).gestureProxy;
      }
      get textDirection() {
        return this[_chartContainerIsRtl] ? ui.TextDirection.rtl : ui.TextDirection.ltr;
      }
      enableA11yExploreMode(nodes, opts) {
        let announcement = opts && 'announcement' in opts ? opts.announcement : null;
        this[_a11yNodes] = nodes;
        this[_exploreMode] = true;
        this[_setNewPainter]();
        this.requestRebuild();
        if (announcement != null) {
          semantics_service.SemanticsService.announce(announcement, this.textDirection);
        }
      }
      disableA11yExploreMode(opts) {
        let announcement = opts && 'announcement' in opts ? opts.announcement : null;
        this[_a11yNodes] = T.JSArrayOfA11yNode().of([]);
        this[_exploreMode] = false;
        this[_setNewPainter]();
        this.requestRebuild();
        if (announcement != null) {
          semantics_service.SemanticsService.announce(announcement, this.textDirection);
        }
      }
      [_setNewPainter]() {
        let t6;
        this.painter = chart_container.ChartContainerCustomPaint.new({oldPainter: T.ChartContainerCustomPaintN().as(this.painter), chart: dart.nullCheck(this[_chart]), exploreMode: this[_exploreMode], a11yNodes: (t6 = this[_a11yNodes], t6 == null ? T.JSArrayOfA11yNode().of([]) : t6), textDirection: this.textDirection});
      }
    }
    (ChartContainerRenderObject.new = function() {
      this[_chart] = null;
      this[_seriesList] = null;
      this[__ChartContainerRenderObject__chartState] = null;
      this[_chartContainerIsRtl] = false;
      this[_rtlSpec] = null;
      this[_dateTimeFactory] = null;
      this[_exploreMode] = false;
      this[_a11yNodes] = null;
      this[_log] = logger.Logger.new("charts_flutter.charts_container");
      this[_lastConfigurationChangeTime] = null;
      ChartContainerRenderObject.__proto__.new.call(this);
      ;
    }).prototype = ChartContainerRenderObject.prototype;
    dart.addTypeTests(ChartContainerRenderObject);
    ChartContainerRenderObject.prototype[_is_ChartContainerRenderObject_default] = true;
    dart.addTypeCaches(ChartContainerRenderObject);
    ChartContainerRenderObject[dart.implements] = () => [chart_context.ChartContext];
    dart.setMethodSignature(ChartContainerRenderObject, () => ({
      __proto__: dart.getMethods(ChartContainerRenderObject.__proto__),
      reconfigure: dart.fnType(dart.void, [dart.nullable(core.Object), framework.BuildContext]),
      [_updateUserManagedState]: dart.fnType(dart.dynamic, [dart.nullable(user_managed_state.UserManagedState$(D))]),
      requestRedraw: dart.fnType(dart.void, []),
      requestAnimation: dart.fnType(dart.void, [core.Duration]),
      requestRebuild: dart.fnType(dart.void, []),
      requestPaint: dart.fnType(dart.void, []),
      enableA11yExploreMode: dart.fnType(dart.void, [core.List$(a11y_node.A11yNode)], {announcement: dart.nullable(core.String)}, {}),
      disableA11yExploreMode: dart.fnType(dart.void, [], {announcement: dart.nullable(core.String)}, {}),
      [_setNewPainter]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(ChartContainerRenderObject, () => ({
      __proto__: dart.getGetters(ChartContainerRenderObject.__proto__),
      [_chartState]: base_chart_state.BaseChartState$(D),
      pixelsPerDp: core.double,
      chartContainerIsRtl: core.bool,
      rtlSpec: dart.nullable(rtl_spec.RTLSpec),
      isRtl: core.bool,
      isTappable: core.bool,
      dateTimeFactory: date_time_factory.DateTimeFactory,
      gestureProxy: proxy_gesture_listener.ProxyGestureListener,
      textDirection: ui.TextDirection
    }));
    dart.setSetterSignature(ChartContainerRenderObject, () => ({
      __proto__: dart.getSetters(ChartContainerRenderObject.__proto__),
      [_chartState]: base_chart_state.BaseChartState$(D)
    }));
    dart.setLibraryUri(ChartContainerRenderObject, I[9]);
    dart.setFieldSignature(ChartContainerRenderObject, () => ({
      __proto__: dart.getFields(ChartContainerRenderObject.__proto__),
      [_chart]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      [_seriesList]: dart.fieldType(dart.nullable(core.List$(series.Series$(dart.dynamic, D)))),
      [__ChartContainerRenderObject__chartState]: dart.fieldType(dart.nullable(base_chart_state.BaseChartState$(D))),
      [_chartContainerIsRtl]: dart.fieldType(core.bool),
      [_rtlSpec]: dart.fieldType(dart.nullable(rtl_spec.RTLSpec)),
      [_dateTimeFactory]: dart.fieldType(dart.nullable(date_time_factory.DateTimeFactory)),
      [_exploreMode]: dart.fieldType(core.bool),
      [_a11yNodes]: dart.fieldType(dart.nullable(core.List$(a11y_node.A11yNode))),
      [_log]: dart.finalFieldType(logger.Logger),
      [_lastConfigurationChangeTime]: dart.fieldType(dart.nullable(core.DateTime))
    }));
    return ChartContainerRenderObject;
  });
  chart_container.ChartContainerRenderObject = chart_container.ChartContainerRenderObject$();
  dart.defineLazy(chart_container.ChartContainerRenderObject, {
    /*chart_container.ChartContainerRenderObject.configurationChangeThresholdMs*/get configurationChangeThresholdMs() {
      return 500;
    }
  }, false);
  dart.addTypeTests(chart_container.ChartContainerRenderObject, _is_ChartContainerRenderObject_default);
  var chart$ = dart.privateName(chart_container, "ChartContainerCustomPaint.chart");
  var exploreMode$ = dart.privateName(chart_container, "ChartContainerCustomPaint.exploreMode");
  var a11yNodes$ = dart.privateName(chart_container, "ChartContainerCustomPaint.a11yNodes");
  var textDirection$ = dart.privateName(chart_container, "ChartContainerCustomPaint.textDirection");
  var _name$0 = dart.privateName(ui, "_name");
  var _buildSemantics = dart.privateName(chart_container, "_buildSemantics");
  chart_container.ChartContainerCustomPaint = class ChartContainerCustomPaint extends custom_paint.CustomPainter {
    get chart() {
      return this[chart$];
    }
    set chart(value) {
      super.chart = value;
    }
    get exploreMode() {
      return this[exploreMode$];
    }
    set exploreMode(value) {
      super.exploreMode = value;
    }
    get a11yNodes() {
      return this[a11yNodes$];
    }
    set a11yNodes(value) {
      super.a11yNodes = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    static new(opts) {
      let oldPainter = opts && 'oldPainter' in opts ? opts.oldPainter : null;
      let chart = opts && 'chart' in opts ? opts.chart : null;
      let exploreMode = opts && 'exploreMode' in opts ? opts.exploreMode : false;
      let a11yNodes = opts && 'a11yNodes' in opts ? opts.a11yNodes : C[24] || CT.C24;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : C[25] || CT.C25;
      if (oldPainter != null && oldPainter.exploreMode === exploreMode && oldPainter.a11yNodes[$_equals](a11yNodes) && oldPainter.textDirection === textDirection) {
        return oldPainter;
      } else {
        return new chart_container.ChartContainerCustomPaint._internal({chart: chart, exploreMode: exploreMode, a11yNodes: a11yNodes, textDirection: textDirection});
      }
    }
    paint(canvas, size) {
      performance.Performance.time("chartsPaint");
      let chartsCanvas = new chart_canvas.ChartCanvas.new(canvas, dart.nullCheck(this.chart.graphicsFactory));
      this.chart.paint(chartsCanvas);
      performance.Performance.timeEnd("chartsPaint");
    }
    shouldRepaint(oldPainter) {
      chart_container.ChartContainerCustomPaint.as(oldPainter);
      return false;
    }
    shouldRebuildSemantics(oldDelegate) {
      chart_container.ChartContainerCustomPaint.as(oldDelegate);
      return this.exploreMode !== oldDelegate.exploreMode || !this.a11yNodes[$_equals](oldDelegate.a11yNodes) || this.textDirection !== this.textDirection;
    }
    get semanticsBuilder() {
      return dart.bind(this, _buildSemantics);
    }
    [_buildSemantics](size) {
      let nodes = T.JSArrayOfCustomPainterSemantics().of([]);
      for (let node of this.a11yNodes) {
        let rect = new ui.Rect.fromLTWH(node.boundingBox[$left][$toDouble](), node.boundingBox[$top][$toDouble](), node.boundingBox[$width][$toDouble](), node.boundingBox[$height][$toDouble]());
        nodes[$add](new custom_paint.CustomPainterSemantics.new({rect: rect, properties: new semantics.SemanticsProperties.new({value: node.label, textDirection: this.textDirection, onDidGainAccessibilityFocus: node.onFocus})}));
      }
      return nodes;
    }
  };
  (chart_container.ChartContainerCustomPaint._internal = function(opts) {
    let chart = opts && 'chart' in opts ? opts.chart : null;
    let exploreMode = opts && 'exploreMode' in opts ? opts.exploreMode : null;
    let a11yNodes = opts && 'a11yNodes' in opts ? opts.a11yNodes : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[chart$] = chart;
    this[exploreMode$] = exploreMode;
    this[a11yNodes$] = a11yNodes;
    this[textDirection$] = textDirection;
    chart_container.ChartContainerCustomPaint.__proto__.new.call(this);
    ;
  }).prototype = chart_container.ChartContainerCustomPaint.prototype;
  dart.addTypeTests(chart_container.ChartContainerCustomPaint);
  dart.addTypeCaches(chart_container.ChartContainerCustomPaint);
  dart.setMethodSignature(chart_container.ChartContainerCustomPaint, () => ({
    __proto__: dart.getMethods(chart_container.ChartContainerCustomPaint.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [_buildSemantics]: dart.fnType(core.List$(custom_paint.CustomPainterSemantics), [ui.Size])
  }));
  dart.setGetterSignature(chart_container.ChartContainerCustomPaint, () => ({
    __proto__: dart.getGetters(chart_container.ChartContainerCustomPaint.__proto__),
    semanticsBuilder: dart.fnType(core.List$(custom_paint.CustomPainterSemantics), [ui.Size])
  }));
  dart.setLibraryUri(chart_container.ChartContainerCustomPaint, I[9]);
  dart.setFieldSignature(chart_container.ChartContainerCustomPaint, () => ({
    __proto__: dart.getFields(chart_container.ChartContainerCustomPaint.__proto__),
    chart: dart.finalFieldType(base_chart.BaseChart),
    exploreMode: dart.finalFieldType(core.bool),
    a11yNodes: dart.finalFieldType(core.List$(a11y_node.A11yNode)),
    textDirection: dart.finalFieldType(ui.TextDirection)
  }));
  var desiredGestures$ = dart.privateName(select_nearest$, "SelectNearest.desiredGestures");
  var selectionModelType$0 = dart.privateName(select_nearest$, "SelectNearest.selectionModelType");
  var eventTrigger$ = dart.privateName(select_nearest$, "SelectNearest.eventTrigger");
  var selectionMode$ = dart.privateName(select_nearest$, "SelectNearest.selectionMode");
  var selectAcrossAllDrawAreaComponents$ = dart.privateName(select_nearest$, "SelectNearest.selectAcrossAllDrawAreaComponents");
  var selectClosestSeries$ = dart.privateName(select_nearest$, "SelectNearest.selectClosestSeries");
  var maximumDomainDistancePx$ = dart.privateName(select_nearest$, "SelectNearest.maximumDomainDistancePx");
  var _name$1 = dart.privateName(select_nearest, "_name");
  var _name$2 = dart.privateName(selection_model, "_name");
  var _name$3 = dart.privateName(selection_trigger, "_name");
  const _is_SelectNearest_default = Symbol('_is_SelectNearest_default');
  select_nearest$.SelectNearest$ = dart.generic(D => {
    var SelectNearestOfD = () => (SelectNearestOfD = dart.constFn(select_nearest.SelectNearest$(D)))();
    class SelectNearest extends chart_behavior$.ChartBehavior$(D) {
      get desiredGestures() {
        return this[desiredGestures$];
      }
      set desiredGestures(value) {
        super.desiredGestures = value;
      }
      get selectionModelType() {
        return this[selectionModelType$0];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get eventTrigger() {
        return this[eventTrigger$];
      }
      set eventTrigger(value) {
        super.eventTrigger = value;
      }
      get selectionMode() {
        return this[selectionMode$];
      }
      set selectionMode(value) {
        super.selectionMode = value;
      }
      get selectAcrossAllDrawAreaComponents() {
        return this[selectAcrossAllDrawAreaComponents$];
      }
      set selectAcrossAllDrawAreaComponents(value) {
        super.selectAcrossAllDrawAreaComponents = value;
      }
      get selectClosestSeries() {
        return this[selectClosestSeries$];
      }
      set selectClosestSeries(value) {
        super.selectClosestSeries = value;
      }
      get maximumDomainDistancePx() {
        return this[maximumDomainDistancePx$];
      }
      set maximumDomainDistancePx(value) {
        super.maximumDomainDistancePx = value;
      }
      static new(opts) {
        let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : C[27] || CT.C27;
        let selectionMode = opts && 'selectionMode' in opts ? opts.selectionMode : C[26] || CT.C26;
        let selectAcrossAllDrawAreaComponents = opts && 'selectAcrossAllDrawAreaComponents' in opts ? opts.selectAcrossAllDrawAreaComponents : false;
        let selectClosestSeries = opts && 'selectClosestSeries' in opts ? opts.selectClosestSeries : true;
        let eventTrigger = opts && 'eventTrigger' in opts ? opts.eventTrigger : C[28] || CT.C28;
        let maximumDomainDistancePx = opts && 'maximumDomainDistancePx' in opts ? opts.maximumDomainDistancePx : null;
        return new (select_nearest$.SelectNearest$(D))._internal({selectionModelType: selectionModelType, selectionMode: selectionMode, selectAcrossAllDrawAreaComponents: selectAcrossAllDrawAreaComponents, selectClosestSeries: selectClosestSeries, eventTrigger: eventTrigger, desiredGestures: select_nearest$.SelectNearest._getDesiredGestures(eventTrigger), maximumDomainDistancePx: maximumDomainDistancePx});
      }
      static _getDesiredGestures(eventTrigger) {
        let t6, t6$, t6$0, t6$1;
        let desiredGestures = new (T._HashSetOfGestureType()).new();
        switch (eventTrigger) {
          case C[28] || CT.C28:
          {
            t6 = desiredGestures;
            (() => {
              t6.add(chart_behavior$.GestureType.onTap);
              return t6;
            })();
            break;
          }
          case C[29] || CT.C29:
          {
            t6$ = desiredGestures;
            (() => {
              t6$.add(chart_behavior$.GestureType.onTap);
              t6$.add(chart_behavior$.GestureType.onDrag);
              return t6$;
            })();
            break;
          }
          case C[30] || CT.C30:
          case C[31] || CT.C31:
          {
            t6$0 = desiredGestures;
            (() => {
              t6$0.add(chart_behavior$.GestureType.onTap);
              t6$0.add(chart_behavior$.GestureType.onLongPress);
              t6$0.add(chart_behavior$.GestureType.onDrag);
              return t6$0;
            })();
            break;
          }
          case C[32] || CT.C32:
          default:
          {
            t6$1 = desiredGestures;
            (() => {
              t6$1.add(chart_behavior$.GestureType.onHover);
              return t6$1;
            })();
            break;
          }
        }
        return desiredGestures;
      }
      createCommonBehavior() {
        return new (SelectNearestOfD()).new({selectionModelType: this.selectionModelType, eventTrigger: this.eventTrigger, selectionMode: this.selectionMode, selectClosestSeries: this.selectClosestSeries, maximumDomainDistancePx: this.maximumDomainDistancePx});
      }
      updateCommonBehavior(commonBehavior) {
        chart_behavior.ChartBehavior.as(commonBehavior);
      }
      get role() {
        return "SelectNearest-" + this.selectionModelType.toString() + "}";
      }
      _equals(other) {
        if (other == null) return false;
        if (select_nearest$.SelectNearest.is(other)) {
          return this.selectionModelType === other.selectionModelType && this.eventTrigger === other.eventTrigger && this.selectionMode === other.selectionMode && this.selectClosestSeries === other.selectClosestSeries && this.maximumDomainDistancePx == other.maximumDomainDistancePx;
        } else {
          return false;
        }
      }
      get hashCode() {
        let hashcode = this.selectionModelType[$hashCode];
        hashcode = hashcode * 37 + this.eventTrigger[$hashCode];
        hashcode = hashcode * 37 + this.selectionMode[$hashCode];
        hashcode = hashcode * 37 + this.selectClosestSeries[$hashCode];
        hashcode = hashcode * 37 + dart.hashCode(this.maximumDomainDistancePx);
        return hashcode;
      }
    }
    (SelectNearest._internal = function(opts) {
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : null;
      let selectionMode = opts && 'selectionMode' in opts ? opts.selectionMode : C[26] || CT.C26;
      let selectAcrossAllDrawAreaComponents = opts && 'selectAcrossAllDrawAreaComponents' in opts ? opts.selectAcrossAllDrawAreaComponents : false;
      let selectClosestSeries = opts && 'selectClosestSeries' in opts ? opts.selectClosestSeries : true;
      let eventTrigger = opts && 'eventTrigger' in opts ? opts.eventTrigger : null;
      let desiredGestures = opts && 'desiredGestures' in opts ? opts.desiredGestures : null;
      let maximumDomainDistancePx = opts && 'maximumDomainDistancePx' in opts ? opts.maximumDomainDistancePx : null;
      this[selectionModelType$0] = selectionModelType;
      this[selectionMode$] = selectionMode;
      this[selectAcrossAllDrawAreaComponents$] = selectAcrossAllDrawAreaComponents;
      this[selectClosestSeries$] = selectClosestSeries;
      this[eventTrigger$] = eventTrigger;
      this[desiredGestures$] = desiredGestures;
      this[maximumDomainDistancePx$] = maximumDomainDistancePx;
      ;
    }).prototype = SelectNearest.prototype;
    dart.addTypeTests(SelectNearest);
    SelectNearest.prototype[_is_SelectNearest_default] = true;
    dart.addTypeCaches(SelectNearest);
    dart.setMethodSignature(SelectNearest, () => ({
      __proto__: dart.getMethods(SelectNearest.__proto__),
      createCommonBehavior: dart.fnType(select_nearest.SelectNearest$(D), []),
      updateCommonBehavior: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(SelectNearest, () => ({
      __proto__: dart.getGetters(SelectNearest.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(SelectNearest, I[10]);
    dart.setFieldSignature(SelectNearest, () => ({
      __proto__: dart.getFields(SelectNearest.__proto__),
      desiredGestures: dart.finalFieldType(core.Set$(chart_behavior$.GestureType)),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      eventTrigger: dart.finalFieldType(selection_trigger.SelectionTrigger),
      selectionMode: dart.finalFieldType(select_nearest.SelectionMode),
      selectAcrossAllDrawAreaComponents: dart.finalFieldType(core.bool),
      selectClosestSeries: dart.finalFieldType(core.bool),
      maximumDomainDistancePx: dart.finalFieldType(dart.nullable(core.int))
    }));
    dart.defineExtensionMethods(SelectNearest, ['_equals']);
    dart.defineExtensionAccessors(SelectNearest, ['hashCode']);
    return SelectNearest;
  });
  select_nearest$.SelectNearest = select_nearest$.SelectNearest$();
  dart.addTypeTests(select_nearest$.SelectNearest, _is_SelectNearest_default);
  var leftMarginSpec$ = dart.privateName(base_chart$, "LayoutConfig.leftMarginSpec");
  var topMarginSpec$ = dart.privateName(base_chart$, "LayoutConfig.topMarginSpec");
  var rightMarginSpec$ = dart.privateName(base_chart$, "LayoutConfig.rightMarginSpec");
  var bottomMarginSpec$ = dart.privateName(base_chart$, "LayoutConfig.bottomMarginSpec");
  base_chart$.LayoutConfig = class LayoutConfig extends core.Object {
    get leftMarginSpec() {
      return this[leftMarginSpec$];
    }
    set leftMarginSpec(value) {
      super.leftMarginSpec = value;
    }
    get topMarginSpec() {
      return this[topMarginSpec$];
    }
    set topMarginSpec(value) {
      super.topMarginSpec = value;
    }
    get rightMarginSpec() {
      return this[rightMarginSpec$];
    }
    set rightMarginSpec(value) {
      super.rightMarginSpec = value;
    }
    get bottomMarginSpec() {
      return this[bottomMarginSpec$];
    }
    set bottomMarginSpec(value) {
      super.bottomMarginSpec = value;
    }
    get commonLayoutConfig() {
      return new layout_config.LayoutConfig.new({leftSpec: this.leftMarginSpec, topSpec: this.topMarginSpec, rightSpec: this.rightMarginSpec, bottomSpec: this.bottomMarginSpec});
    }
  };
  (base_chart$.LayoutConfig.new = function(opts) {
    let leftMarginSpec = opts && 'leftMarginSpec' in opts ? opts.leftMarginSpec : null;
    let topMarginSpec = opts && 'topMarginSpec' in opts ? opts.topMarginSpec : null;
    let rightMarginSpec = opts && 'rightMarginSpec' in opts ? opts.rightMarginSpec : null;
    let bottomMarginSpec = opts && 'bottomMarginSpec' in opts ? opts.bottomMarginSpec : null;
    this[leftMarginSpec$] = leftMarginSpec;
    this[topMarginSpec$] = topMarginSpec;
    this[rightMarginSpec$] = rightMarginSpec;
    this[bottomMarginSpec$] = bottomMarginSpec;
    ;
  }).prototype = base_chart$.LayoutConfig.prototype;
  dart.addTypeTests(base_chart$.LayoutConfig);
  dart.addTypeCaches(base_chart$.LayoutConfig);
  dart.setGetterSignature(base_chart$.LayoutConfig, () => ({
    __proto__: dart.getGetters(base_chart$.LayoutConfig.__proto__),
    commonLayoutConfig: layout_config.LayoutConfig
  }));
  dart.setLibraryUri(base_chart$.LayoutConfig, I[4]);
  dart.setFieldSignature(base_chart$.LayoutConfig, () => ({
    __proto__: dart.getFields(base_chart$.LayoutConfig.__proto__),
    leftMarginSpec: dart.finalFieldType(layout_config.MarginSpec),
    topMarginSpec: dart.finalFieldType(layout_config.MarginSpec),
    rightMarginSpec: dart.finalFieldType(layout_config.MarginSpec),
    bottomMarginSpec: dart.finalFieldType(layout_config.MarginSpec)
  }));
  var autoBehaviorWidgets = dart.privateName(base_chart_state, "BaseChartState.autoBehaviorWidgets");
  var addedBehaviorWidgets = dart.privateName(base_chart_state, "BaseChartState.addedBehaviorWidgets");
  var addedCommonBehaviorsByRole = dart.privateName(base_chart_state, "BaseChartState.addedCommonBehaviorsByRole");
  var addedSelectionChangedListenersByType = dart.privateName(base_chart_state, "BaseChartState.addedSelectionChangedListenersByType");
  var addedSelectionUpdatedListenersByType = dart.privateName(base_chart_state, "BaseChartState.addedSelectionUpdatedListenersByType");
  var __BaseChartState__animationController = dart.privateName(base_chart_state, "_#BaseChartState#_animationController");
  var _animationValue = dart.privateName(base_chart_state, "_animationValue");
  var _oldWidget = dart.privateName(base_chart_state, "_oldWidget");
  var _chartGestureDetector = dart.privateName(base_chart_state, "_chartGestureDetector");
  var _configurationChanged = dart.privateName(base_chart_state, "_configurationChanged");
  var _behaviorAnimationControllers = dart.privateName(base_chart_state, "_behaviorAnimationControllers");
  var _animationController = dart.privateName(base_chart_state, "_animationController");
  var _animationTick = dart.privateName(base_chart_state, "_animationTick");
  var _buildChartContainer = dart.privateName(base_chart_state, "_buildChartContainer");
  var _playAnimation = dart.privateName(base_chart_state, "_playAnimation");
  const _is_BaseChartState_default = Symbol('_is_BaseChartState_default');
  base_chart_state.BaseChartState$ = dart.generic(D => {
    var ChartBehaviorOfD = () => (ChartBehaviorOfD = dart.constFn(chart_behavior$.ChartBehavior$(D)))();
    var JSArrayOfChartBehaviorOfD = () => (JSArrayOfChartBehaviorOfD = dart.constFn(_interceptors.JSArray$(ChartBehaviorOfD())))();
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var SelectionModelOfDTovoid = () => (SelectionModelOfDTovoid = dart.constFn(dart.fnType(dart.void, [SelectionModelOfD()])))();
    var LinkedMapOfSelectionModelType$SelectionModelOfDTovoid = () => (LinkedMapOfSelectionModelType$SelectionModelOfDTovoid = dart.constFn(_js_helper.LinkedMap$(selection_model.SelectionModelType, SelectionModelOfDTovoid())))();
    var ChartContainerOfD = () => (ChartContainerOfD = dart.constFn(chart_container.ChartContainer$(D)))();
    const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(base_chart$.BaseChart$(D)) {};
    (State_TickerProviderStateMixin$36.new = function() {
      ticker_provider.TickerProviderStateMixin$(base_chart$.BaseChart$(D))[dart.mixinNew].call(this);
      State_TickerProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = State_TickerProviderStateMixin$36.prototype;
    dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(base_chart$.BaseChart$(D)));
    class BaseChartState extends State_TickerProviderStateMixin$36 {
      get autoBehaviorWidgets() {
        return this[autoBehaviorWidgets];
      }
      set autoBehaviorWidgets(value) {
        super.autoBehaviorWidgets = value;
      }
      get addedBehaviorWidgets() {
        return this[addedBehaviorWidgets];
      }
      set addedBehaviorWidgets(value) {
        super.addedBehaviorWidgets = value;
      }
      get addedCommonBehaviorsByRole() {
        return this[addedCommonBehaviorsByRole];
      }
      set addedCommonBehaviorsByRole(value) {
        super.addedCommonBehaviorsByRole = value;
      }
      get addedSelectionChangedListenersByType() {
        return this[addedSelectionChangedListenersByType];
      }
      set addedSelectionChangedListenersByType(value) {
        super.addedSelectionChangedListenersByType = value;
      }
      get addedSelectionUpdatedListenersByType() {
        return this[addedSelectionUpdatedListenersByType];
      }
      set addedSelectionUpdatedListenersByType(value) {
        super.addedSelectionUpdatedListenersByType = value;
      }
      get [_animationController]() {
        let t6;
        t6 = this[__BaseChartState__animationController];
        return t6 == null ? dart.throw(new _internal.LateError.fieldNI("_animationController")) : t6;
      }
      set [_animationController](t6) {
        this[__BaseChartState__animationController] = t6;
      }
      initState() {
        let t7;
        super.initState();
        this[_animationController] = (t7 = new animation_controller.AnimationController.new({vsync: this}), (() => {
          t7.addListener(dart.bind(this, _animationTick));
          return t7;
        })());
      }
      requestRebuild() {
        this.setState(dart.fn(() => {
        }, T.VoidTovoid()));
      }
      markChartDirty() {
        this[_configurationChanged] = true;
      }
      resetChartDirtyFlag() {
        this[_configurationChanged] = false;
      }
      get chartIsDirty() {
        return this[_configurationChanged];
      }
      setState(fn) {
        if (this.mounted) {
          super.setState(fn);
        }
      }
      [_buildChartContainer]() {
        let chartContainer = new (ChartContainerOfD()).new({oldChartWidget: this[_oldWidget], chartWidget: this.widget, chartState: this, animationValue: this[_animationValue], rtl: basic.Directionality.of(this.context) === ui.TextDirection.rtl, rtlSpec: this.widget.rtlSpec, userManagedState: this.widget.userManagedState, $creationLocationd_0dea112b090073317d4: C[33] || CT.C33});
        this[_oldWidget] = this.widget;
        let desiredGestures = this.widget.getDesiredGestures(this);
        if (desiredGestures[$isNotEmpty]) {
          this[_chartGestureDetector] == null ? this[_chartGestureDetector] = new chart_gesture_detector.ChartGestureDetector.new() : null;
          return framework.Widget.as(dart.nullCheck(this[_chartGestureDetector]).makeWidget(this.context, chartContainer, desiredGestures));
        } else {
          return chartContainer;
        }
      }
      build(context) {
        let chartWidgets = T.JSArrayOfLayoutId().of([]);
        let idAndBehaviorMap = new (T.IdentityMapOfString$BuildableBehaviorOfChartBehavior()).new();
        chartWidgets[$add](new basic.LayoutId.new({id: "chartContainer", child: this[_buildChartContainer](), $creationLocationd_0dea112b090073317d4: C[42] || CT.C42}));
        this.addedCommonBehaviorsByRole[$forEach](dart.fn((id, behavior) => {
          if (T.BuildableBehaviorOfChartBehavior().is(behavior)) {
            if (!(id !== "chartContainer")) dart.assertFailed(null, I[11], 129, 16, "id != chartContainerLayoutID");
            let buildableBehavior = T.BuildableBehaviorOfChartBehavior().as(behavior);
            idAndBehaviorMap[$_set](id, buildableBehavior);
            let widget = buildableBehavior.build(context);
            chartWidgets[$add](new basic.LayoutId.new({id: id, child: widget, $creationLocationd_0dea112b090073317d4: C[46] || CT.C46}));
          }
        }, T.StringAndChartBehaviorTovoid()));
        let isRTL = basic.Directionality.of(context) === ui.TextDirection.rtl;
        return new basic.CustomMultiChildLayout.new({delegate: new widget_layout_delegate.WidgetLayoutDelegate.new("chartContainer", idAndBehaviorMap, isRTL), children: chartWidgets, $creationLocationd_0dea112b090073317d4: C[50] || CT.C50});
      }
      dispose() {
        this[_animationController].dispose();
        this[_behaviorAnimationControllers][$forEach](dart.fn((_, controller) => controller.dispose(), T.ChartStateBehaviorOfChartBehaviorAndAnimationControllerTovoid()));
        this[_behaviorAnimationControllers][$clear]();
        super.dispose();
      }
      setAnimation(transition) {
        this[_playAnimation](transition);
      }
      [_playAnimation](duration) {
        this[_animationController].duration = duration;
        this[_animationController].forward({from: duration._equals(core.Duration.zero) ? 1.0 : 0.0});
        this[_animationValue] = this[_animationController].value;
      }
      [_animationTick]() {
        this.setState(dart.fn(() => {
          this[_animationValue] = this[_animationController].value;
        }, T.VoidTovoid()));
      }
      getAnimationController(behavior) {
        let t8, t7;
        t7 = this[_behaviorAnimationControllers];
        t8 = behavior;
        t7[$_get](t8) == null ? t7[$_set](t8, new animation_controller.AnimationController.new({vsync: this})) : null;
        return dart.nullCheck(this[_behaviorAnimationControllers][$_get](behavior));
      }
      disposeAnimationController(behavior) {
        let t7;
        let controller = this[_behaviorAnimationControllers][$remove](behavior);
        t7 = controller;
        t7 == null ? null : t7.dispose();
      }
    }
    (BaseChartState.new = function() {
      this[__BaseChartState__animationController] = null;
      this[_animationValue] = 0.0;
      this[_oldWidget] = null;
      this[_chartGestureDetector] = null;
      this[_configurationChanged] = false;
      this[autoBehaviorWidgets] = JSArrayOfChartBehaviorOfD().of([]);
      this[addedBehaviorWidgets] = JSArrayOfChartBehaviorOfD().of([]);
      this[addedCommonBehaviorsByRole] = new (T.IdentityMapOfString$ChartBehavior()).new();
      this[addedSelectionChangedListenersByType] = new (LinkedMapOfSelectionModelType$SelectionModelOfDTovoid()).new();
      this[addedSelectionUpdatedListenersByType] = new (LinkedMapOfSelectionModelType$SelectionModelOfDTovoid()).new();
      this[_behaviorAnimationControllers] = new (T.LinkedMapOfChartStateBehaviorOfChartBehavior$AnimationController()).new();
      BaseChartState.__proto__.new.call(this);
      ;
    }).prototype = BaseChartState.prototype;
    dart.addTypeTests(BaseChartState);
    BaseChartState.prototype[_is_BaseChartState_default] = true;
    dart.addTypeCaches(BaseChartState);
    BaseChartState[dart.implements] = () => [chart_state.ChartState];
    dart.setMethodSignature(BaseChartState, () => ({
      __proto__: dart.getMethods(BaseChartState.__proto__),
      requestRebuild: dart.fnType(dart.void, []),
      markChartDirty: dart.fnType(dart.void, []),
      resetChartDirtyFlag: dart.fnType(dart.void, []),
      [_buildChartContainer]: dart.fnType(framework.Widget, []),
      build: dart.fnType(framework.Widget, [framework.BuildContext]),
      setAnimation: dart.fnType(dart.void, [core.Duration]),
      [_playAnimation]: dart.fnType(dart.void, [core.Duration]),
      [_animationTick]: dart.fnType(dart.void, []),
      getAnimationController: dart.fnType(animation_controller.AnimationController, [chart_behavior$.ChartStateBehavior$(chart_behavior.ChartBehavior)]),
      disposeAnimationController: dart.fnType(dart.void, [chart_behavior$.ChartStateBehavior$(chart_behavior.ChartBehavior)])
    }));
    dart.setGetterSignature(BaseChartState, () => ({
      __proto__: dart.getGetters(BaseChartState.__proto__),
      [_animationController]: animation_controller.AnimationController,
      chartIsDirty: core.bool
    }));
    dart.setSetterSignature(BaseChartState, () => ({
      __proto__: dart.getSetters(BaseChartState.__proto__),
      [_animationController]: animation_controller.AnimationController
    }));
    dart.setLibraryUri(BaseChartState, I[12]);
    dart.setFieldSignature(BaseChartState, () => ({
      __proto__: dart.getFields(BaseChartState.__proto__),
      [__BaseChartState__animationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
      [_animationValue]: dart.fieldType(core.double),
      [_oldWidget]: dart.fieldType(dart.nullable(base_chart$.BaseChart$(D))),
      [_chartGestureDetector]: dart.fieldType(dart.nullable(chart_gesture_detector.ChartGestureDetector)),
      [_configurationChanged]: dart.fieldType(core.bool),
      autoBehaviorWidgets: dart.finalFieldType(core.List$(chart_behavior$.ChartBehavior$(D))),
      addedBehaviorWidgets: dart.finalFieldType(core.List$(chart_behavior$.ChartBehavior$(D))),
      addedCommonBehaviorsByRole: dart.finalFieldType(core.Map$(core.String, chart_behavior.ChartBehavior)),
      addedSelectionChangedListenersByType: dart.finalFieldType(core.Map$(selection_model.SelectionModelType, dart.fnType(dart.void, [selection_model.SelectionModel$(D)]))),
      addedSelectionUpdatedListenersByType: dart.finalFieldType(core.Map$(selection_model.SelectionModelType, dart.fnType(dart.void, [selection_model.SelectionModel$(D)]))),
      [_behaviorAnimationControllers]: dart.finalFieldType(core.Map$(chart_behavior$.ChartStateBehavior$(chart_behavior.ChartBehavior), animation_controller.AnimationController))
    }));
    return BaseChartState;
  });
  base_chart_state.BaseChartState = base_chart_state.BaseChartState$();
  dart.defineLazy(base_chart_state.BaseChartState, {
    /*base_chart_state.BaseChartState.chartContainerLayoutID*/get chartContainerLayoutID() {
      return "chartContainer";
    }
  }, false);
  dart.addTypeTests(base_chart_state.BaseChartState, _is_BaseChartState_default);
  const _is_ChartStateBehavior_default = Symbol('_is_ChartStateBehavior_default');
  chart_behavior$.ChartStateBehavior$ = dart.generic(B => {
    class ChartStateBehavior extends core.Object {}
    (ChartStateBehavior.new = function() {
      ;
    }).prototype = ChartStateBehavior.prototype;
    dart.addTypeTests(ChartStateBehavior);
    ChartStateBehavior.prototype[_is_ChartStateBehavior_default] = true;
    dart.addTypeCaches(ChartStateBehavior);
    dart.setLibraryUri(ChartStateBehavior, I[6]);
    return ChartStateBehavior;
  });
  chart_behavior$.ChartStateBehavior = chart_behavior$.ChartStateBehavior$();
  dart.addTypeTests(chart_behavior$.ChartStateBehavior, _is_ChartStateBehavior_default);
  const _is_BuildableBehavior_default = Symbol('_is_BuildableBehavior_default');
  chart_behavior$.BuildableBehavior$ = dart.generic(B => {
    class BuildableBehavior extends core.Object {}
    (BuildableBehavior.new = function() {
      ;
    }).prototype = BuildableBehavior.prototype;
    dart.addTypeTests(BuildableBehavior);
    BuildableBehavior.prototype[_is_BuildableBehavior_default] = true;
    dart.addTypeCaches(BuildableBehavior);
    dart.setLibraryUri(BuildableBehavior, I[6]);
    return BuildableBehavior;
  });
  chart_behavior$.BuildableBehavior = chart_behavior$.BuildableBehavior$();
  dart.addTypeTests(chart_behavior$.BuildableBehavior, _is_BuildableBehavior_default);
  var _name$4 = dart.privateName(chart_behavior$, "_name");
  chart_behavior$.GestureType = class GestureType extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (chart_behavior$.GestureType.new = function(index, _name) {
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = chart_behavior$.GestureType.prototype;
  dart.addTypeTests(chart_behavior$.GestureType);
  dart.addTypeCaches(chart_behavior$.GestureType);
  dart.setLibraryUri(chart_behavior$.GestureType, I[6]);
  dart.setFieldSignature(chart_behavior$.GestureType, () => ({
    __proto__: dart.getFields(chart_behavior$.GestureType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$4]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(chart_behavior$.GestureType, ['toString']);
  chart_behavior$.GestureType.onLongPress = C[54] || CT.C54;
  chart_behavior$.GestureType.onTap = C[55] || CT.C55;
  chart_behavior$.GestureType.onHover = C[56] || CT.C56;
  chart_behavior$.GestureType.onDrag = C[57] || CT.C57;
  chart_behavior$.GestureType.values = C[58] || CT.C58;
  dart.trackLibraries("packages/charts_flutter/src/widget_layout_delegate.dart", {
    "package:charts_flutter/src/widget_layout_delegate.dart": widget_layout_delegate,
    "package:charts_flutter/src/util.dart": util,
    "package:charts_flutter/src/chart_gesture_detector.dart": chart_gesture_detector,
    "package:charts_flutter/src/cartesian_chart.dart": cartesian_chart$,
    "package:charts_flutter/src/behaviors/line_point_highlighter.dart": line_point_highlighter$,
    "package:charts_flutter/src/time_series_chart.dart": time_series_chart$,
    "package:charts_flutter/src/chart_container.dart": chart_container,
    "package:charts_flutter/src/behaviors/select_nearest.dart": select_nearest$,
    "package:charts_flutter/src/base_chart.dart": base_chart$,
    "package:charts_flutter/src/base_chart_state.dart": base_chart_state,
    "package:charts_flutter/src/behaviors/chart_behavior.dart": chart_behavior$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["widget_layout_delegate.dart","util.dart","chart_gesture_detector.dart","base_chart.dart","cartesian_chart.dart","behaviors/chart_behavior.dart","behaviors/line_point_highlighter.dart","time_series_chart.dart","chart_container.dart","behaviors/select_nearest.dart","base_chart_state.dart"],"names":[],"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","file":"../../../../../../../../../../../packages/charts_flutter/src/widget_layout_delegate.dart.lib.js"}');
  // Exports:
  return {
    src__widget_layout_delegate: widget_layout_delegate,
    src__util: util,
    src__chart_gesture_detector: chart_gesture_detector,
    src__cartesian_chart: cartesian_chart$,
    src__behaviors__line_point_highlighter: line_point_highlighter$,
    src__time_series_chart: time_series_chart$,
    src__chart_container: chart_container,
    src__behaviors__select_nearest: select_nearest$,
    src__base_chart: base_chart$,
    src__base_chart_state: base_chart_state,
    src__behaviors__chart_behavior: chart_behavior$
  };
}));

//# sourceMappingURL=widget_layout_delegate.dart.lib.js.map
