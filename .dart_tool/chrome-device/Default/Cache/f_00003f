<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__widgets__layout_builder_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__foundation__debug$46dart) {
=======
define(['dart_sdk', 'packages/flutter/src/services/system_channels.dart'], (function load__packages__flutter__src__services__system_chrome_dart(dart_sdk, packages__flutter__src__services__system_channels$46dart) {
>>>>>>> feature-b
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
<<<<<<< HEAD
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const debug = packages__flutter__src__widgets__widget_span$46dart.src__widgets__debug;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var layout_builder = Object.create(dart.library);
  var $_equals = dartx._equals;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    SyncIterableOfDiagnosticsNode: () => (T.SyncIterableOfDiagnosticsNode = dart.constFn(_js_helper.SyncIterable$(diagnostics.DiagnosticsNode)))(),
    IterableOfDiagnosticsNode: () => (T.IterableOfDiagnosticsNode = dart.constFn(core.Iterable$(diagnostics.DiagnosticsNode)))(),
    VoidToIterableOfDiagnosticsNode: () => (T.VoidToIterableOfDiagnosticsNode = dart.constFn(dart.fnType(T.IterableOfDiagnosticsNode(), [])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))()
=======
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const system_channels = packages__flutter__src__services__system_channels$46dart.src__services__system_channels;
  var system_chrome = Object.create(dart.library);
  var $toString = dartx.toString;
  var $runtimeType = dartx.runtimeType;
  var $add = dartx.add;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))()
>>>>>>> feature-b
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
<<<<<<< HEAD
  var I = [
    "file:///C:/flutter/packages/flutter/lib/src/widgets/layout_builder.dart",
    "package:flutter/src/widgets/layout_builder.dart"
  ];
  var builder$ = dart.privateName(layout_builder, "ConstrainedLayoutBuilder.builder");
  const _is_ConstrainedLayoutBuilder_default = Symbol('_is_ConstrainedLayoutBuilder_default');
  layout_builder.ConstrainedLayoutBuilder$ = dart.generic(ConstraintType => {
    var _LayoutBuilderElementOfConstraintType = () => (_LayoutBuilderElementOfConstraintType = dart.constFn(layout_builder._LayoutBuilderElement$(ConstraintType)))();
    class ConstrainedLayoutBuilder extends framework.RenderObjectWidget {
      get builder() {
        return this[builder$];
      }
      set builder(value) {
        super.builder = value;
      }
      createElement() {
        return new (_LayoutBuilderElementOfConstraintType()).new(this);
      }
    }
    (ConstrainedLayoutBuilder.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[builder$] = builder;
      if (!(builder !== null)) dart.assertFailed(null, I[0], 43, 15, "builder != null");
      ConstrainedLayoutBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = ConstrainedLayoutBuilder.prototype;
    dart.addTypeTests(ConstrainedLayoutBuilder);
    ConstrainedLayoutBuilder.prototype[_is_ConstrainedLayoutBuilder_default] = true;
    dart.addTypeCaches(ConstrainedLayoutBuilder);
    dart.setMethodSignature(ConstrainedLayoutBuilder, () => ({
      __proto__: dart.getMethods(ConstrainedLayoutBuilder.__proto__),
      createElement: dart.fnType(layout_builder._LayoutBuilderElement$(ConstraintType), [])
    }));
    dart.setLibraryUri(ConstrainedLayoutBuilder, I[1]);
    dart.setFieldSignature(ConstrainedLayoutBuilder, () => ({
      __proto__: dart.getFields(ConstrainedLayoutBuilder.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, ConstraintType]))
    }));
    return ConstrainedLayoutBuilder;
  });
  layout_builder.ConstrainedLayoutBuilder = layout_builder.ConstrainedLayoutBuilder$();
  dart.addTypeTests(layout_builder.ConstrainedLayoutBuilder, _is_ConstrainedLayoutBuilder_default);
  var _child = dart.privateName(layout_builder, "_child");
  var _layout = dart.privateName(layout_builder, "_layout");
  const _is__LayoutBuilderElement_default = Symbol('_is__LayoutBuilderElement_default');
  layout_builder._LayoutBuilderElement$ = dart.generic(ConstraintType => {
    var ConstrainedLayoutBuilderOfConstraintType = () => (ConstrainedLayoutBuilderOfConstraintType = dart.constFn(layout_builder.ConstrainedLayoutBuilder$(ConstraintType)))();
    var RenderConstrainedLayoutBuilderOfConstraintType$RenderObject = () => (RenderConstrainedLayoutBuilderOfConstraintType$RenderObject = dart.constFn(layout_builder.RenderConstrainedLayoutBuilder$(ConstraintType, object.RenderObject)))();
    var BuildContextAndConstraintTypeToWidget = () => (BuildContextAndConstraintTypeToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, ConstraintType])))();
    class _LayoutBuilderElement extends framework.RenderObjectElement {
      get widget() {
        return ConstrainedLayoutBuilderOfConstraintType().as(super.widget);
      }
      get renderObject() {
        return RenderConstrainedLayoutBuilderOfConstraintType$RenderObject().as(super.renderObject);
      }
      visitChildren(visitor) {
        if (this[_child] != null) visitor(dart.nullCheck(this[_child]));
      }
      forgetChild(child) {
        if (!child._equals(this[_child])) dart.assertFailed(null, I[0], 76, 12, "child == _child");
        this[_child] = null;
        super.forgetChild(child);
      }
      mount(parent, newSlot) {
        super.mount(parent, newSlot);
        this.renderObject.updateCallback(dart.bind(this, _layout));
      }
      update(newWidget) {
        ConstrainedLayoutBuilderOfConstraintType().as(newWidget);
        if (!!this.widget._equals(newWidget)) dart.assertFailed(null, I[0], 89, 12, "widget != newWidget");
        super.update(newWidget);
        if (!this.widget._equals(newWidget)) dart.assertFailed(null, I[0], 91, 12, "widget == newWidget");
        this.renderObject.updateCallback(dart.bind(this, _layout));
        this.renderObject.markNeedsBuild();
      }
      performRebuild() {
        this.renderObject.markNeedsBuild();
        super.performRebuild();
      }
      unmount() {
        this.renderObject.updateCallback(null);
        super.unmount();
      }
      [_layout](constraints) {
        ConstraintType.as(constraints);
        dart.nullCheck(this.owner).buildScope(this, dart.fn(() => {
          let t1, t0;
          let built = null;
          try {
            built = (t0 = this.widget, t1 = constraints, BuildContextAndConstraintTypeToWidget().as(t0.builder)(this, t1));
            debug.debugWidgetBuilderValue(this.widget, built);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let stack = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              built = framework.ErrorWidget.builder(layout_builder._debugReportException(new assertions.ErrorDescription.new("building " + dart.str(this.widget)), e, stack, {informationCollector: dart.fn(() => new (T.SyncIterableOfDiagnosticsNode()).new((function*() {
                  yield new object.DiagnosticsDebugCreator.new(new framework.DebugCreator.new(this));
                }).bind(this)), T.VoidToIterableOfDiagnosticsNode())}));
            } else
              throw e$;
          }
          try {
            this[_child] = this.updateChild(this[_child], built, null);
            if (!(this[_child] != null)) dart.assertFailed(null, I[0], 137, 16, "_child != null");
          } catch (e$0) {
            let e = dart.getThrown(e$0);
            let stack = dart.stackTrace(e$0);
            if (core.Object.is(e)) {
              built = framework.ErrorWidget.builder(layout_builder._debugReportException(new assertions.ErrorDescription.new("building " + dart.str(this.widget)), e, stack, {informationCollector: dart.fn(() => new (T.SyncIterableOfDiagnosticsNode()).new((function*() {
                  yield new object.DiagnosticsDebugCreator.new(new framework.DebugCreator.new(this));
                }).bind(this)), T.VoidToIterableOfDiagnosticsNode())}));
              this[_child] = this.updateChild(null, built, this.slot);
            } else
              throw e$0;
          }
        }, T.VoidTovoid()));
      }
      insertRenderObjectChild(child, slot) {
        object.RenderObject.as(child);
        let renderObject = this.renderObject;
        if (!(slot == null)) dart.assertFailed(null, I[0], 157, 12, "slot == null");
        if (!renderObject.debugValidateChild(child)) dart.assertFailed(null, I[0], 158, 12, "renderObject.debugValidateChild(child)");
        renderObject.child = child;
        if (!renderObject[$_equals](this.renderObject)) dart.assertFailed(null, I[0], 160, 12, "renderObject == this.renderObject");
      }
      moveRenderObjectChild(child, oldSlot, newSlot) {
        object.RenderObject.as(child);
        if (!false) dart.assertFailed(null, I[0], 165, 12, "false");
      }
      removeRenderObjectChild(child, slot) {
        object.RenderObject.as(child);
        let renderObject = this.renderObject;
        if (!dart.equals(renderObject.child, child)) dart.assertFailed(null, I[0], 171, 12, "renderObject.child == child");
        renderObject.child = null;
        if (!renderObject[$_equals](this.renderObject)) dart.assertFailed(null, I[0], 173, 12, "renderObject == this.renderObject");
      }
    }
    (_LayoutBuilderElement.new = function(widget) {
      this[_child] = null;
      _LayoutBuilderElement.__proto__.new.call(this, widget);
      ;
    }).prototype = _LayoutBuilderElement.prototype;
    dart.addTypeTests(_LayoutBuilderElement);
    _LayoutBuilderElement.prototype[_is__LayoutBuilderElement_default] = true;
    dart.addTypeCaches(_LayoutBuilderElement);
    dart.setMethodSignature(_LayoutBuilderElement, () => ({
      __proto__: dart.getMethods(_LayoutBuilderElement.__proto__),
      [_layout]: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_LayoutBuilderElement, () => ({
      __proto__: dart.getGetters(_LayoutBuilderElement.__proto__),
      widget: layout_builder.ConstrainedLayoutBuilder$(ConstraintType),
      renderObject: layout_builder.RenderConstrainedLayoutBuilder$(ConstraintType, object.RenderObject)
    }));
    dart.setLibraryUri(_LayoutBuilderElement, I[1]);
    dart.setFieldSignature(_LayoutBuilderElement, () => ({
      __proto__: dart.getFields(_LayoutBuilderElement.__proto__),
      [_child]: dart.fieldType(dart.nullable(framework.Element))
    }));
    return _LayoutBuilderElement;
  });
  layout_builder._LayoutBuilderElement = layout_builder._LayoutBuilderElement$();
  dart.addTypeTests(layout_builder._LayoutBuilderElement, _is__LayoutBuilderElement_default);
  var _callback = dart.privateName(layout_builder, "RenderConstrainedLayoutBuilder._callback");
  var _needsBuild = dart.privateName(layout_builder, "RenderConstrainedLayoutBuilder._needsBuild");
  var _previousConstraints = dart.privateName(layout_builder, "RenderConstrainedLayoutBuilder._previousConstraints");
  var _callback$ = dart.privateName(layout_builder, "_callback");
  var _needsBuild$ = dart.privateName(layout_builder, "_needsBuild");
  var _previousConstraints$ = dart.privateName(layout_builder, "_previousConstraints");
  const _is_RenderConstrainedLayoutBuilder_default = Symbol('_is_RenderConstrainedLayoutBuilder_default');
  layout_builder.RenderConstrainedLayoutBuilder$ = dart.generic((ConstraintType, ChildType) => {
    class RenderConstrainedLayoutBuilder extends object.RenderObjectWithChildMixin$(ChildType) {}
    RenderConstrainedLayoutBuilder[dart.mixinOn] = RenderObjectWithChildMixin => class RenderConstrainedLayoutBuilder extends RenderObjectWithChildMixin {
      get [_callback$]() {
        return this[_callback];
      }
      set [_callback$](value) {
        this[_callback] = value;
      }
      get [_needsBuild$]() {
        return this[_needsBuild];
      }
      set [_needsBuild$](value) {
        this[_needsBuild] = value;
      }
      get [_previousConstraints$]() {
        return this[_previousConstraints];
      }
      set [_previousConstraints$](value) {
        this[_previousConstraints] = value;
      }
      updateCallback(value) {
        if (dart.equals(value, this[_callback$])) return;
        this[_callback$] = value;
        this.markNeedsLayout();
      }
      markNeedsBuild() {
        this[_needsBuild$] = true;
        this.markNeedsLayout();
      }
      rebuildIfNecessary() {
        if (!(this[_callback$] != null)) dart.assertFailed(null, I[0], 221, 12, "_callback != null");
        if (this[_needsBuild$] || !this.constraints[$_equals](this[_previousConstraints$])) {
          this[_previousConstraints$] = this.constraints;
          this[_needsBuild$] = false;
          this.invokeLayoutCallback(ConstraintType, dart.nullCheck(this[_callback$]));
        }
      }
    };
    (RenderConstrainedLayoutBuilder[dart.mixinNew] = function() {
      this[_callback] = null;
      this[_needsBuild] = true;
      this[_previousConstraints] = null;
    }).prototype = RenderConstrainedLayoutBuilder.prototype;
    dart.addTypeTests(RenderConstrainedLayoutBuilder);
    RenderConstrainedLayoutBuilder.prototype[_is_RenderConstrainedLayoutBuilder_default] = true;
    dart.addTypeCaches(RenderConstrainedLayoutBuilder);
    RenderConstrainedLayoutBuilder[dart.implements] = () => [object.RenderObjectWithChildMixin$(ChildType)];
    dart.setMethodSignature(RenderConstrainedLayoutBuilder, () => ({
      __proto__: dart.getMethods(RenderConstrainedLayoutBuilder.__proto__),
      updateCallback: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, [ConstraintType]))]),
      markNeedsBuild: dart.fnType(dart.void, []),
      rebuildIfNecessary: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(RenderConstrainedLayoutBuilder, I[1]);
    dart.setFieldSignature(RenderConstrainedLayoutBuilder, () => ({
      __proto__: dart.getFields(RenderConstrainedLayoutBuilder.__proto__),
      [_callback$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [ConstraintType]))),
      [_needsBuild$]: dart.fieldType(core.bool),
      [_previousConstraints$]: dart.fieldType(dart.nullable(object.Constraints))
    }));
    return RenderConstrainedLayoutBuilder;
  });
  layout_builder.RenderConstrainedLayoutBuilder = layout_builder.RenderConstrainedLayoutBuilder$();
  dart.addTypeTests(layout_builder.RenderConstrainedLayoutBuilder, _is_RenderConstrainedLayoutBuilder_default);
  layout_builder.LayoutBuilder = class LayoutBuilder extends layout_builder.ConstrainedLayoutBuilder$(box.BoxConstraints) {
    get builder() {
      return super.builder;
    }
    createRenderObject(context) {
      return new layout_builder._RenderLayoutBuilder.new();
    }
  };
  (layout_builder.LayoutBuilder.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    if (!(builder !== null)) dart.assertFailed(null, I[0], 313, 15, "builder != null");
    layout_builder.LayoutBuilder.__proto__.new.call(this, {key: key, builder: builder, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = layout_builder.LayoutBuilder.prototype;
  dart.addTypeTests(layout_builder.LayoutBuilder);
  dart.addTypeCaches(layout_builder.LayoutBuilder);
  dart.setMethodSignature(layout_builder.LayoutBuilder, () => ({
    __proto__: dart.getMethods(layout_builder.LayoutBuilder.__proto__),
    createRenderObject: dart.fnType(layout_builder._RenderLayoutBuilder, [framework.BuildContext])
  }));
  dart.setGetterSignature(layout_builder.LayoutBuilder, () => ({
    __proto__: dart.getGetters(layout_builder.LayoutBuilder.__proto__),
    builder: dart.fnType(framework.Widget, [framework.BuildContext, box.BoxConstraints])
  }));
  dart.setLibraryUri(layout_builder.LayoutBuilder, I[1]);
  var _debugThrowIfNotCheckingIntrinsics = dart.privateName(layout_builder, "_debugThrowIfNotCheckingIntrinsics");
  const RenderBox_RenderObjectWithChildMixin$36 = class RenderBox_RenderObjectWithChildMixin extends box.RenderBox {};
  (RenderBox_RenderObjectWithChildMixin$36.new = function() {
    object.RenderObjectWithChildMixin$(box.RenderBox)[dart.mixinNew].call(this);
    RenderBox_RenderObjectWithChildMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderObjectWithChildMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderObjectWithChildMixin$36, object.RenderObjectWithChildMixin$(box.RenderBox));
  const RenderBox_RenderConstrainedLayoutBuilder$36 = class RenderBox_RenderConstrainedLayoutBuilder extends RenderBox_RenderObjectWithChildMixin$36 {};
  (RenderBox_RenderConstrainedLayoutBuilder$36.new = function() {
    layout_builder.RenderConstrainedLayoutBuilder$(box.BoxConstraints, box.RenderBox)[dart.mixinNew].call(this);
    RenderBox_RenderConstrainedLayoutBuilder$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderConstrainedLayoutBuilder$36.prototype;
  dart.applyMixin(RenderBox_RenderConstrainedLayoutBuilder$36, layout_builder.RenderConstrainedLayoutBuilder$(box.BoxConstraints, box.RenderBox));
  layout_builder._RenderLayoutBuilder = class _RenderLayoutBuilder extends RenderBox_RenderConstrainedLayoutBuilder$36 {
    computeMinIntrinsicWidth(height) {
      if (!this[_debugThrowIfNotCheckingIntrinsics]()) dart.assertFailed(null, I[0], 326, 12, "_debugThrowIfNotCheckingIntrinsics()");
      return 0.0;
    }
    computeMaxIntrinsicWidth(height) {
      if (!this[_debugThrowIfNotCheckingIntrinsics]()) dart.assertFailed(null, I[0], 332, 12, "_debugThrowIfNotCheckingIntrinsics()");
      return 0.0;
    }
    computeMinIntrinsicHeight(width) {
      if (!this[_debugThrowIfNotCheckingIntrinsics]()) dart.assertFailed(null, I[0], 338, 12, "_debugThrowIfNotCheckingIntrinsics()");
      return 0.0;
    }
    computeMaxIntrinsicHeight(width) {
      if (!this[_debugThrowIfNotCheckingIntrinsics]()) dart.assertFailed(null, I[0], 344, 12, "_debugThrowIfNotCheckingIntrinsics()");
      return 0.0;
    }
    computeDryLayout(constraints) {
      if (!this.debugCannotComputeDryLayout({reason: "Calculating the dry layout would require running the layout callback " + "speculatively, which might mutate the live render object tree."})) dart.assertFailed(null, I[0], 350, 12, "debugCannotComputeDryLayout(reason:\r\n      'Calculating the dry layout would require running the layout callback '\r\n      'speculatively, which might mutate the live render object tree.',\r\n    )");
      return ui.Size.zero;
    }
    performLayout() {
      let constraints = this.constraints;
      this.rebuildIfNecessary();
      if (this.child != null) {
        dart.nullCheck(this.child).layout(constraints, {parentUsesSize: true});
        this.size = constraints.constrain(dart.nullCheck(this.child).size);
      } else {
        this.size = constraints.biggest;
      }
    }
    computeDistanceToActualBaseline(baseline) {
      if (this.child != null) return dart.nullCheck(this.child).getDistanceToActualBaseline(baseline);
      return super.computeDistanceToActualBaseline(baseline);
    }
    hitTestChildren(result, opts) {
      let t2, t2$;
      let position = opts && 'position' in opts ? opts.position : null;
      t2$ = (t2 = this.child, t2 == null ? null : t2.hitTest(result, {position: position}));
      return t2$ == null ? false : t2$;
    }
    paint(context, offset) {
      if (this.child != null) context.paintChild(dart.nullCheck(this.child), offset);
    }
    [_debugThrowIfNotCheckingIntrinsics]() {
      if (!dart.fn(() => {
        if (!object.RenderObject.debugCheckingIntrinsics) {
          dart.throw(assertions.FlutterError.new("LayoutBuilder does not support returning intrinsic dimensions.\n" + "Calculating the intrinsic dimensions would require running the layout " + "callback speculatively, which might mutate the live render object tree."));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[0], 388, 12, "() {\r\n      if (!RenderObject.debugCheckingIntrinsics) {\r\n        throw FlutterError(\r\n          'LayoutBuilder does not support returning intrinsic dimensions.\\n'\r\n          'Calculating the intrinsic dimensions would require running the layout '\r\n          'callback speculatively, which might mutate the live render object tree.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
  };
  (layout_builder._RenderLayoutBuilder.new = function() {
    layout_builder._RenderLayoutBuilder.__proto__.new.call(this);
    ;
  }).prototype = layout_builder._RenderLayoutBuilder.prototype;
  dart.addTypeTests(layout_builder._RenderLayoutBuilder);
  dart.addTypeCaches(layout_builder._RenderLayoutBuilder);
  dart.setMethodSignature(layout_builder._RenderLayoutBuilder, () => ({
    __proto__: dart.getMethods(layout_builder._RenderLayoutBuilder.__proto__),
    [_debugThrowIfNotCheckingIntrinsics]: dart.fnType(core.bool, [])
  }));
  dart.setLibraryUri(layout_builder._RenderLayoutBuilder, I[1]);
  layout_builder._debugReportException = function _debugReportException(context, exception, stack, opts) {
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    let details = new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "widgets library", context: context, informationCollector: informationCollector});
    assertions.FlutterError.reportError(details);
    return details;
  };
  dart.trackLibraries("packages/flutter/src/widgets/layout_builder.dart", {
    "package:flutter/src/widgets/layout_builder.dart": layout_builder
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["layout_builder.dart"],"names":[],"mappings":"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","file":"../../../../../../../E:/packages/flutter/src/widgets/layout_builder.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__layout_builder: layout_builder
  };
}));

//# sourceMappingURL=layout_builder.dart.lib.js.map
=======
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: system_chrome.DeviceOrientation.prototype,
        [_name$]: "DeviceOrientation.portraitUp",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: system_chrome.DeviceOrientation.prototype,
        [_name$]: "DeviceOrientation.landscapeLeft",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: system_chrome.DeviceOrientation.prototype,
        [_name$]: "DeviceOrientation.portraitDown",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: system_chrome.DeviceOrientation.prototype,
        [_name$]: "DeviceOrientation.landscapeRight",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], system_chrome.DeviceOrientation);
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: system_chrome.SystemUiOverlay.prototype,
        [_name$]: "SystemUiOverlay.top",
        index: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: system_chrome.SystemUiOverlay.prototype,
        [_name$]: "SystemUiOverlay.bottom",
        index: 1
      });
    },
    get C7() {
      return C[7] = dart.constList([C[5] || CT.C5, C[6] || CT.C6], system_chrome.SystemUiOverlay);
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name]: "Brightness.light",
        index: 1
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name]: "Brightness.dark",
        index: 0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: system_chrome.SystemUiOverlayStyle.prototype,
        [statusBarIconBrightness$]: C[9] || CT.C9,
        [statusBarBrightness$]: C[10] || CT.C10,
        [statusBarColor$]: null,
        [systemNavigationBarIconBrightness$]: C[9] || CT.C9,
        [systemNavigationBarDividerColor$]: null,
        [systemNavigationBarColor$]: C[11] || CT.C11
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: system_chrome.SystemUiOverlayStyle.prototype,
        [statusBarIconBrightness$]: C[10] || CT.C10,
        [statusBarBrightness$]: C[9] || CT.C9,
        [statusBarColor$]: null,
        [systemNavigationBarIconBrightness$]: C[9] || CT.C9,
        [systemNavigationBarDividerColor$]: null,
        [systemNavigationBarColor$]: C[11] || CT.C11
      });
    }
  }, false);
  var C = Array(13).fill(void 0);
  var I = [
    "package:flutter/src/services/system_chrome.dart",
    "file:///C:/flutter/packages/flutter/lib/src/services/system_chrome.dart"
  ];
  var _name$ = dart.privateName(system_chrome, "_name");
  system_chrome.DeviceOrientation = class DeviceOrientation extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (system_chrome.DeviceOrientation.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = system_chrome.DeviceOrientation.prototype;
  dart.addTypeTests(system_chrome.DeviceOrientation);
  dart.addTypeCaches(system_chrome.DeviceOrientation);
  dart.setLibraryUri(system_chrome.DeviceOrientation, I[0]);
  dart.setFieldSignature(system_chrome.DeviceOrientation, () => ({
    __proto__: dart.getFields(system_chrome.DeviceOrientation.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(system_chrome.DeviceOrientation, ['toString']);
  system_chrome.DeviceOrientation.portraitUp = C[0] || CT.C0;
  system_chrome.DeviceOrientation.landscapeLeft = C[1] || CT.C1;
  system_chrome.DeviceOrientation.portraitDown = C[2] || CT.C2;
  system_chrome.DeviceOrientation.landscapeRight = C[3] || CT.C3;
  system_chrome.DeviceOrientation.values = C[4] || CT.C4;
  var label$ = dart.privateName(system_chrome, "ApplicationSwitcherDescription.label");
  var primaryColor$ = dart.privateName(system_chrome, "ApplicationSwitcherDescription.primaryColor");
  system_chrome.ApplicationSwitcherDescription = class ApplicationSwitcherDescription extends core.Object {
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get primaryColor() {
      return this[primaryColor$];
    }
    set primaryColor(value) {
      super.primaryColor = value;
    }
  };
  (system_chrome.ApplicationSwitcherDescription.new = function(opts) {
    let label = opts && 'label' in opts ? opts.label : null;
    let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
    this[label$] = label;
    this[primaryColor$] = primaryColor;
    ;
  }).prototype = system_chrome.ApplicationSwitcherDescription.prototype;
  dart.addTypeTests(system_chrome.ApplicationSwitcherDescription);
  dart.addTypeCaches(system_chrome.ApplicationSwitcherDescription);
  dart.setLibraryUri(system_chrome.ApplicationSwitcherDescription, I[0]);
  dart.setFieldSignature(system_chrome.ApplicationSwitcherDescription, () => ({
    __proto__: dart.getFields(system_chrome.ApplicationSwitcherDescription.__proto__),
    label: dart.finalFieldType(dart.nullable(core.String)),
    primaryColor: dart.finalFieldType(dart.nullable(core.int))
  }));
  system_chrome.SystemUiOverlay = class SystemUiOverlay extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (system_chrome.SystemUiOverlay.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = system_chrome.SystemUiOverlay.prototype;
  dart.addTypeTests(system_chrome.SystemUiOverlay);
  dart.addTypeCaches(system_chrome.SystemUiOverlay);
  dart.setLibraryUri(system_chrome.SystemUiOverlay, I[0]);
  dart.setFieldSignature(system_chrome.SystemUiOverlay, () => ({
    __proto__: dart.getFields(system_chrome.SystemUiOverlay.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(system_chrome.SystemUiOverlay, ['toString']);
  system_chrome.SystemUiOverlay.top = C[5] || CT.C5;
  system_chrome.SystemUiOverlay.bottom = C[6] || CT.C6;
  system_chrome.SystemUiOverlay.values = C[7] || CT.C7;
  var systemNavigationBarColor$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.systemNavigationBarColor");
  var systemNavigationBarDividerColor$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.systemNavigationBarDividerColor");
  var systemNavigationBarIconBrightness$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.systemNavigationBarIconBrightness");
  var statusBarColor$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.statusBarColor");
  var statusBarBrightness$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.statusBarBrightness");
  var statusBarIconBrightness$ = dart.privateName(system_chrome, "SystemUiOverlayStyle.statusBarIconBrightness");
  var _toMap = dart.privateName(system_chrome, "_toMap");
  var _name = dart.privateName(ui, "_name");
  var Color_value = dart.privateName(ui, "Color.value");
  system_chrome.SystemUiOverlayStyle = class SystemUiOverlayStyle extends core.Object {
    get systemNavigationBarColor() {
      return this[systemNavigationBarColor$];
    }
    set systemNavigationBarColor(value) {
      super.systemNavigationBarColor = value;
    }
    get systemNavigationBarDividerColor() {
      return this[systemNavigationBarDividerColor$];
    }
    set systemNavigationBarDividerColor(value) {
      super.systemNavigationBarDividerColor = value;
    }
    get systemNavigationBarIconBrightness() {
      return this[systemNavigationBarIconBrightness$];
    }
    set systemNavigationBarIconBrightness(value) {
      super.systemNavigationBarIconBrightness = value;
    }
    get statusBarColor() {
      return this[statusBarColor$];
    }
    set statusBarColor(value) {
      super.statusBarColor = value;
    }
    get statusBarBrightness() {
      return this[statusBarBrightness$];
    }
    set statusBarBrightness(value) {
      super.statusBarBrightness = value;
    }
    get statusBarIconBrightness() {
      return this[statusBarIconBrightness$];
    }
    set statusBarIconBrightness(value) {
      super.statusBarIconBrightness = value;
    }
    [_toMap]() {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      return new (T.IdentityMapOfString$dynamic()).from(["systemNavigationBarColor", (t0 = this.systemNavigationBarColor, t0 == null ? null : t0.value), "systemNavigationBarDividerColor", (t0$ = this.systemNavigationBarDividerColor, t0$ == null ? null : t0$.value), "statusBarColor", (t0$0 = this.statusBarColor, t0$0 == null ? null : t0$0.value), "statusBarBrightness", (t0$1 = this.statusBarBrightness, t0$1 == null ? null : dart.toString(t0$1)), "statusBarIconBrightness", (t0$2 = this.statusBarIconBrightness, t0$2 == null ? null : dart.toString(t0$2)), "systemNavigationBarIconBrightness", (t0$3 = this.systemNavigationBarIconBrightness, t0$3 == null ? null : dart.toString(t0$3))]);
    }
    toString() {
      return this[_toMap]()[$toString]();
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let systemNavigationBarColor = opts && 'systemNavigationBarColor' in opts ? opts.systemNavigationBarColor : null;
      let systemNavigationBarDividerColor = opts && 'systemNavigationBarDividerColor' in opts ? opts.systemNavigationBarDividerColor : null;
      let statusBarColor = opts && 'statusBarColor' in opts ? opts.statusBarColor : null;
      let statusBarBrightness = opts && 'statusBarBrightness' in opts ? opts.statusBarBrightness : null;
      let statusBarIconBrightness = opts && 'statusBarIconBrightness' in opts ? opts.statusBarIconBrightness : null;
      let systemNavigationBarIconBrightness = opts && 'systemNavigationBarIconBrightness' in opts ? opts.systemNavigationBarIconBrightness : null;
      return new system_chrome.SystemUiOverlayStyle.new({systemNavigationBarColor: (t0 = systemNavigationBarColor, t0 == null ? this.systemNavigationBarColor : t0), systemNavigationBarDividerColor: (t0$ = systemNavigationBarDividerColor, t0$ == null ? this.systemNavigationBarDividerColor : t0$), statusBarColor: (t0$0 = statusBarColor, t0$0 == null ? this.statusBarColor : t0$0), statusBarIconBrightness: (t0$1 = statusBarIconBrightness, t0$1 == null ? this.statusBarIconBrightness : t0$1), statusBarBrightness: (t0$2 = statusBarBrightness, t0$2 == null ? this.statusBarBrightness : t0$2), systemNavigationBarIconBrightness: (t0$3 = systemNavigationBarIconBrightness, t0$3 == null ? this.systemNavigationBarIconBrightness : t0$3)});
    }
    get hashCode() {
      return ui.hashValues(this.systemNavigationBarColor, this.systemNavigationBarDividerColor, this.statusBarColor, this.statusBarBrightness, this.statusBarIconBrightness, this.systemNavigationBarIconBrightness);
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return system_chrome.SystemUiOverlayStyle.is(other) && dart.equals(other.systemNavigationBarColor, this.systemNavigationBarColor) && dart.equals(other.systemNavigationBarDividerColor, this.systemNavigationBarDividerColor) && dart.equals(other.statusBarColor, this.statusBarColor) && other.statusBarIconBrightness == this.statusBarIconBrightness && other.statusBarBrightness == this.statusBarBrightness && other.systemNavigationBarIconBrightness == this.systemNavigationBarIconBrightness;
    }
  };
  (system_chrome.SystemUiOverlayStyle.new = function(opts) {
    let systemNavigationBarColor = opts && 'systemNavigationBarColor' in opts ? opts.systemNavigationBarColor : null;
    let systemNavigationBarDividerColor = opts && 'systemNavigationBarDividerColor' in opts ? opts.systemNavigationBarDividerColor : null;
    let systemNavigationBarIconBrightness = opts && 'systemNavigationBarIconBrightness' in opts ? opts.systemNavigationBarIconBrightness : null;
    let statusBarColor = opts && 'statusBarColor' in opts ? opts.statusBarColor : null;
    let statusBarBrightness = opts && 'statusBarBrightness' in opts ? opts.statusBarBrightness : null;
    let statusBarIconBrightness = opts && 'statusBarIconBrightness' in opts ? opts.statusBarIconBrightness : null;
    this[systemNavigationBarColor$] = systemNavigationBarColor;
    this[systemNavigationBarDividerColor$] = systemNavigationBarDividerColor;
    this[systemNavigationBarIconBrightness$] = systemNavigationBarIconBrightness;
    this[statusBarColor$] = statusBarColor;
    this[statusBarBrightness$] = statusBarBrightness;
    this[statusBarIconBrightness$] = statusBarIconBrightness;
    ;
  }).prototype = system_chrome.SystemUiOverlayStyle.prototype;
  dart.addTypeTests(system_chrome.SystemUiOverlayStyle);
  dart.addTypeCaches(system_chrome.SystemUiOverlayStyle);
  dart.setMethodSignature(system_chrome.SystemUiOverlayStyle, () => ({
    __proto__: dart.getMethods(system_chrome.SystemUiOverlayStyle.__proto__),
    [_toMap]: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copyWith: dart.fnType(system_chrome.SystemUiOverlayStyle, [], {statusBarBrightness: dart.nullable(ui.Brightness), statusBarColor: dart.nullable(ui.Color), statusBarIconBrightness: dart.nullable(ui.Brightness), systemNavigationBarColor: dart.nullable(ui.Color), systemNavigationBarDividerColor: dart.nullable(ui.Color), systemNavigationBarIconBrightness: dart.nullable(ui.Brightness)}, {})
  }));
  dart.setLibraryUri(system_chrome.SystemUiOverlayStyle, I[0]);
  dart.setFieldSignature(system_chrome.SystemUiOverlayStyle, () => ({
    __proto__: dart.getFields(system_chrome.SystemUiOverlayStyle.__proto__),
    systemNavigationBarColor: dart.finalFieldType(dart.nullable(ui.Color)),
    systemNavigationBarDividerColor: dart.finalFieldType(dart.nullable(ui.Color)),
    systemNavigationBarIconBrightness: dart.finalFieldType(dart.nullable(ui.Brightness)),
    statusBarColor: dart.finalFieldType(dart.nullable(ui.Color)),
    statusBarBrightness: dart.finalFieldType(dart.nullable(ui.Brightness)),
    statusBarIconBrightness: dart.finalFieldType(dart.nullable(ui.Brightness))
  }));
  dart.defineExtensionMethods(system_chrome.SystemUiOverlayStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(system_chrome.SystemUiOverlayStyle, ['hashCode']);
  dart.defineLazy(system_chrome.SystemUiOverlayStyle, {
    /*system_chrome.SystemUiOverlayStyle.light*/get light() {
      return C[8] || CT.C8;
    },
    /*system_chrome.SystemUiOverlayStyle.dark*/get dark() {
      return C[12] || CT.C12;
    }
  }, false);
  system_chrome.SystemChrome = class SystemChrome extends core.Object {
    static setPreferredOrientations(orientations) {
      return async.async(dart.void, function* setPreferredOrientations() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.setPreferredOrientations", system_chrome._stringify(orientations));
      });
    }
    static setApplicationSwitcherDescription(description) {
      return async.async(dart.void, function* setApplicationSwitcherDescription() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.setApplicationSwitcherDescription", new (T.IdentityMapOfString$dynamic()).from(["label", description.label, "primaryColor", description.primaryColor]));
      });
    }
    static setEnabledSystemUIOverlays(overlays) {
      return async.async(dart.void, function* setEnabledSystemUIOverlays() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.setEnabledSystemUIOverlays", system_chrome._stringify(overlays));
      });
    }
    static restoreSystemUIOverlays() {
      return async.async(dart.void, function* restoreSystemUIOverlays() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.restoreSystemUIOverlays", null);
      });
    }
    static setSystemUIOverlayStyle(style) {
      if (!(style !== null)) dart.assertFailed(null, I[1], 395, 12, "style != null");
      if (system_chrome.SystemChrome._pendingStyle != null) {
        system_chrome.SystemChrome._pendingStyle = style;
        return;
      }
      if (style._equals(system_chrome.SystemChrome._latestStyle)) {
        return;
      }
      system_chrome.SystemChrome._pendingStyle = style;
      async.scheduleMicrotask(dart.fn(() => {
        if (!(system_chrome.SystemChrome._pendingStyle != null)) dart.assertFailed(null, I[1], 408, 14, "_pendingStyle != null");
        if (!dart.equals(system_chrome.SystemChrome._pendingStyle, system_chrome.SystemChrome._latestStyle)) {
          system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.setSystemUIOverlayStyle", dart.nullCheck(system_chrome.SystemChrome._pendingStyle)[_toMap]());
          system_chrome.SystemChrome._latestStyle = system_chrome.SystemChrome._pendingStyle;
        }
        system_chrome.SystemChrome._pendingStyle = null;
      }, T.VoidTovoid()));
    }
    static get latestStyle() {
      return system_chrome.SystemChrome._latestStyle;
    }
  };
  (system_chrome.SystemChrome.__ = function() {
    ;
  }).prototype = system_chrome.SystemChrome.prototype;
  dart.addTypeTests(system_chrome.SystemChrome);
  dart.addTypeCaches(system_chrome.SystemChrome);
  dart.setLibraryUri(system_chrome.SystemChrome, I[0]);
  dart.defineLazy(system_chrome.SystemChrome, {
    /*system_chrome.SystemChrome._pendingStyle*/get _pendingStyle() {
      return null;
    },
    set _pendingStyle(_) {},
    /*system_chrome.SystemChrome._latestStyle*/get _latestStyle() {
      return null;
    },
    set _latestStyle(_) {}
  }, false);
  system_chrome._stringify = function _stringify(list) {
    return (() => {
      let t0 = T.JSArrayOfString().of([]);
      for (let item of list)
        t0[$add](dart.toString(item));
      return t0;
    })();
  };
  dart.trackLibraries("packages/flutter/src/services/system_chrome.dart", {
    "package:flutter/src/services/system_chrome.dart": system_chrome
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["system_chrome.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgDA;;yDAlBK;;;;EAkBL;;;;;;;;;;;;;;;;;;IAagB;;;;;;IAMH;;;;;;;;QATiC;QAAY;IAAZ;IAAY;;EAAe;;;;;;;;;;;;IAuBzE;;uDARK;;;;EAQL;;;;;;;;;;;;;;;;;;;;;;;IAoBe;;;;;;IAKA;;;;;;IAOK;;;;;;IAKL;;;;;;IAKK;;;;;;IAKA;;;;;;;;AA0BhB,YAAwB,6CACtB,8EAA4B,OAA0B,WACtD,8FAAmC,OAAiC,YACpE,8DAAkB,OAAgB,aAClC,wEAAuB,OAAqB,sBAC5C,gFAA2B,OAAyB,sBACpD,oGAAqC,OAAmC;IAE5E;;AAGqB,YAAA,AAAS;IAAU;;;UAI/B;UACA;UACA;UACK;UACA;UACA;AAEZ,YAAO,wEAC8C,KAAzB,wBAAwB,EAAxB,aAAiC,uEACM,MAAhC,+BAA+B,EAA/B,cAAwC,8DAC1C,OAAf,cAAc,EAAd,eAAuB,uDACU,OAAxB,uBAAuB,EAAvB,eAAgC,4DAChB,OAApB,mBAAmB,EAAnB,eAA4B,sEACoB,OAAlC,iCAAiC,EAAjC,eAA0C;IAEjF;;AAIE,YAAO,eACL,+BACA,sCACA,qBACA,0BACA,8BACA;IAEJ;;UAGwB;AACtB,WAAI,AAAM,KAAD,uBAAgB,qBACvB,MAAO;AACT,YAAa,AAMT,uCANG,KAAK,KAC0B,YAA/B,AAAM,KAAD,2BAA6B,kCACI,YAAtC,AAAM,KAAD,kCAAoC,yCACpB,YAArB,AAAM,KAAD,iBAAmB,wBACxB,AAAM,AAAwB,KAAzB,4BAA4B,gCACjC,AAAM,AAAoB,KAArB,wBAAwB,4BAC7B,AAAM,AAAkC,KAAnC,sCAAsC;IACpD;;;QAvHO;QACA;QACA;QACA;QACA;QACA;IALA;IACA;IACA;IACA;IACA;IACA;;EACL;;;;;;;;;;;;;;;;;;;;;MAoCgC,wCAAK;;;MAWL,uCAAI;;;;;oCAiG+B;AAAzB;AAIzC,QAHD,MAAqB,AAAS,gEAC5B,yCACA,yBAAW,YAAY;MAE3B;;6CAOqF;AAAhC;AAOlD,QAND,MAAqB,AAAS,gEAC5B,kDACiB,4CACf,SAAS,AAAY,WAAD,QACpB,gBAAgB,AAAY,WAAD;MAGjC;;sCAwBqE;AAAvB;AAI3C,QAHD,MAAqB,AAAS,gEAC5B,2CACA,yBAAW,QAAQ;MAEvB;;;AAW2C;AAIxC,QAHD,MAAqB,AAAS,gEAC5B,wCACA;MAEJ;;mCAwFyD;AACvD,YAAO,AAAM,KAAD;AACZ,UAAI;AAEmB,QAArB,2CAAgB,KAAK;AACrB;;AAEF,UAAI,AAAM,KAAD,SAAI;AAGX;;AAEmB,MAArB,2CAAgB,KAAK;AAWnB,MAVF,wBAAkB;AAChB,cAAO,AAAc;AACrB,yBAAI,0CAAiB;AAIlB,UAHc,AAAS,gEACtB,wCACa,AAAE,eAAf;AAE0B,UAA5B,0CAAe;;AAEG,QAApB,2CAAgB;;IAEpB;;AAMgD;IAAY;;;;EA1M5C;;;;;MAsMa,wCAAa;;;;MAKb,uCAAY;;;;;iDApNL;AAAS,UAAQ;;AACrD,eAAmB,OAAQ,KAAI;AAAO,+BAAL,IAAI;;;EACtC","file":"../../../../../../packages/flutter/src/services/system_chrome.dart.lib.js"}');
  // Exports:
  return {
    src__services__system_chrome: system_chrome
  };
}));

//# sourceMappingURL=system_chrome.dart.lib.js.map
>>>>>>> feature-b
