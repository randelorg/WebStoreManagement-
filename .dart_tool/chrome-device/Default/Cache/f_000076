<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__painting__image_cache_dart(dart_sdk, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const developer = dart_sdk.developer;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var image_cache = Object.create(dart.library);
  var $length = dartx.length;
  var $values = dartx.values;
  var $clear = dartx.clear;
  var $remove = dartx.remove;
  var $_set = dartx._set;
  var $putIfAbsent = dartx.putIfAbsent;
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $containsKey = dartx.containsKey;
  var $first = dartx.first;
  var $keys = dartx.keys;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    LinkedMapOfObject$_PendingImage: () => (T.LinkedMapOfObject$_PendingImage = dart.constFn(_js_helper.LinkedMap$(core.Object, image_cache._PendingImage)))(),
    LinkedMapOfObject$_CachedImage: () => (T.LinkedMapOfObject$_CachedImage = dart.constFn(_js_helper.LinkedMap$(core.Object, image_cache._CachedImage)))(),
    LinkedMapOfObject$_LiveImage: () => (T.LinkedMapOfObject$_LiveImage = dart.constFn(_js_helper.LinkedMap$(core.Object, image_cache._LiveImage)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    VoidTo_LiveImage: () => (T.VoidTo_LiveImage = dart.constFn(dart.fnType(image_cache._LiveImage, [])))(),
    ImageInfoN: () => (T.ImageInfoN = dart.constFn(dart.nullable(image_stream.ImageInfo)))(),
    ImageInfoNAndboolTovoid: () => (T.ImageInfoNAndboolTovoid = dart.constFn(dart.fnType(dart.void, [T.ImageInfoN(), core.bool])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    DurationTovoid: () => (T.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))()
=======
define(['dart_sdk', 'packages/get/get_core/src/get_main.dart'], (function load__packages__get__get_utils__src__get_utils__get_utils_dart(dart_sdk, packages__get__get_core__src__get_main$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const get_main = packages__get__get_core__src__get_main$46dart.get_core__src__get_main;
  var get_utils = Object.create(dart.library);
  var $toLowerCase = dartx.toLowerCase;
  var $endsWith = dartx.endsWith;
  var $replaceAll = dartx.replaceAll;
  var $_get = dartx._get;
  var $toString = dartx.toString;
  var $contains = dartx.contains;
  var $split = dartx.split;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $modulo = dartx['%'];
  var $join = dartx.join;
  var $toUpperCase = dartx.toUpperCase;
  var $substring = dartx.substring;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $isEmpty = dartx.isEmpty;
  var $trim = dartx.trim;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    StringToint: () => (T.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    StringToNint: () => (T.StringToNint = dart.constFn(dart.nullable(T.StringToint())))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    String__Toint: () => (T.String__Toint = dart.constFn(dart.fnType(core.int, [core.String], {onError: T.StringToNint(), radix: T.intN()}, {})))(),
    IterableOfint: () => (T.IterableOfint = dart.constFn(core.Iterable$(core.int)))(),
    intToint: () => (T.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    StringToStringN: () => (T.StringToStringN = dart.constFn(dart.fnType(T.StringN(), [core.String])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    StringToString: () => (T.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    dynamicToString: () => (T.dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))(),
    LinkedHashSetOfString: () => (T.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))()
>>>>>>> feature-b
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
<<<<<<< HEAD
  var I = [
    "file:///C:/flutter/packages/flutter/lib/src/painting/image_cache.dart",
    "package:flutter/src/painting/image_cache.dart"
  ];
  var _pendingImages = dart.privateName(image_cache, "_pendingImages");
  var _cache = dart.privateName(image_cache, "_cache");
  var _liveImages = dart.privateName(image_cache, "_liveImages");
  var _maximumSize = dart.privateName(image_cache, "_maximumSize");
  var _maximumSizeBytes = dart.privateName(image_cache, "_maximumSizeBytes");
  var _currentSizeBytes = dart.privateName(image_cache, "_currentSizeBytes");
  var _checkCacheSize = dart.privateName(image_cache, "_checkCacheSize");
  var _touch = dart.privateName(image_cache, "_touch");
  var _trackLiveImage = dart.privateName(image_cache, "_trackLiveImage");
  image_cache.ImageCache = class ImageCache extends core.Object {
    get maximumSize() {
      return this[_maximumSize];
    }
    set maximumSize(value) {
      let t0;
      if (!(value !== null)) dart.assertFailed(null, I[0], 103, 12, "value != null");
      if (!(value >= 0)) dart.assertFailed(null, I[0], 104, 12, "value >= 0");
      if (value === this.maximumSize) return;
      let timelineTask = null;
      if (!false) {
        timelineTask = (t0 = new developer.TimelineTask.new(), (() => {
          t0.start("ImageCache.setMaximumSize", {arguments: new (T.IdentityMapOfString$dynamic()).from(["value", value])});
          return t0;
        })());
      }
      this[_maximumSize] = value;
      if (this.maximumSize === 0) {
        this.clear();
      } else {
        this[_checkCacheSize](timelineTask);
      }
      if (!false) {
        dart.nullCheck(timelineTask).finish();
      }
    }
    get currentSize() {
      return this[_cache][$length];
    }
    get maximumSizeBytes() {
      return this[_maximumSizeBytes];
    }
    set maximumSizeBytes(value) {
      let t0;
      if (!(value !== null)) dart.assertFailed(null, I[0], 142, 12, "value != null");
      if (!(value >= 0)) dart.assertFailed(null, I[0], 143, 12, "value >= 0");
      if (value === this[_maximumSizeBytes]) return;
      let timelineTask = null;
      if (!false) {
        timelineTask = (t0 = new developer.TimelineTask.new(), (() => {
          t0.start("ImageCache.setMaximumSizeBytes", {arguments: new (T.IdentityMapOfString$dynamic()).from(["value", value])});
          return t0;
        })());
      }
      this[_maximumSizeBytes] = value;
      if (this[_maximumSizeBytes] === 0) {
        this.clear();
      } else {
        this[_checkCacheSize](timelineTask);
      }
      if (!false) {
        dart.nullCheck(timelineTask).finish();
      }
    }
    get currentSizeBytes() {
      return this[_currentSizeBytes];
    }
    clear() {
      if (!false) {
        developer.Timeline.instantSync("ImageCache.clear", {arguments: new (T.IdentityMapOfString$dynamic()).from(["pendingImages", this[_pendingImages][$length], "keepAliveImages", this[_cache][$length], "liveImages", this[_liveImages][$length], "currentSizeInBytes", this[_currentSizeBytes]])});
      }
      for (let image of this[_cache][$values]) {
        image.dispose();
      }
      this[_cache][$clear]();
      this[_pendingImages][$clear]();
      this[_currentSizeBytes] = 0;
    }
    evict(key, opts) {
      let t0;
      let includeLive = opts && 'includeLive' in opts ? opts.includeLive : true;
      if (!(includeLive !== null)) dart.assertFailed(null, I[0], 239, 12, "includeLive != null");
      if (includeLive) {
        let image = this[_liveImages][$remove](key);
        t0 = image;
        t0 == null ? null : t0.dispose();
      }
      let pendingImage = this[_pendingImages][$remove](key);
      if (pendingImage != null) {
        if (!false) {
          developer.Timeline.instantSync("ImageCache.evict", {arguments: new (T.IdentityMapOfString$dynamic()).from(["type", "pending"])});
        }
        pendingImage.removeListener();
        return true;
      }
      let image = this[_cache][$remove](key);
      if (image != null) {
        if (!false) {
          developer.Timeline.instantSync("ImageCache.evict", {arguments: new (T.IdentityMapOfString$dynamic()).from(["type", "keepAlive", "sizeInBytes", image.sizeBytes])});
        }
        this[_currentSizeBytes] = this[_currentSizeBytes] - dart.nullCheck(image.sizeBytes);
        image.dispose();
        return true;
      }
      if (!false) {
        developer.Timeline.instantSync("ImageCache.evict", {arguments: new (T.IdentityMapOfString$dynamic()).from(["type", "miss"])});
      }
      return false;
    }
    [_touch](key, image, timelineTask) {
      if (!(timelineTask != null)) dart.assertFailed(null, I[0], 285, 12, "timelineTask != null");
      if (image.sizeBytes != null && dart.nullCheck(image.sizeBytes) <= this.maximumSizeBytes && this.maximumSize > 0) {
        this[_currentSizeBytes] = this[_currentSizeBytes] + dart.nullCheck(image.sizeBytes);
        this[_cache][$_set](key, image);
        this[_checkCacheSize](timelineTask);
      } else {
        image.dispose();
      }
    }
    [_trackLiveImage](key, completer, sizeBytes) {
      let t0;
      t0 = this[_liveImages][$putIfAbsent](key, dart.fn(() => new image_cache._LiveImage.new(completer, dart.fn(() => {
        this[_liveImages][$remove](key);
      }, T.VoidTovoid())), T.VoidTo_LiveImage()));
      t0.sizeBytes == null ? t0.sizeBytes = sizeBytes : null;
    }
    putIfAbsent(key, loader, opts) {
      let t0, t0$, t1;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      if (!(key !== null)) dart.assertFailed(null, I[0], 323, 12, "key != null");
      if (!(loader !== null)) dart.assertFailed(null, I[0], 324, 12, "loader != null");
      let timelineTask = null;
      let listenerTask = null;
      if (!false) {
        timelineTask = (t0 = new developer.TimelineTask.new(), (() => {
          t0.start("ImageCache.putIfAbsent", {arguments: new (T.IdentityMapOfString$dynamic()).from(["key", key[$toString]()])});
          return t0;
        })());
      }
      let result = (t0$ = this[_pendingImages][$_get](key), t0$ == null ? null : t0$.completer);
      if (result != null) {
        if (!false) {
          dart.nullCheck(timelineTask).finish({arguments: new (T.IdentityMapOfString$dynamic()).from(["result", "pending"])});
        }
        return result;
      }
      let image = this[_cache][$remove](key);
      if (image != null) {
        if (!false) {
          dart.nullCheck(timelineTask).finish({arguments: new (T.IdentityMapOfString$dynamic()).from(["result", "keepAlive"])});
        }
        this[_trackLiveImage](key, image.completer, image.sizeBytes);
        this[_cache][$_set](key, image);
        return image.completer;
      }
      let liveImage = this[_liveImages][$_get](key);
      if (liveImage != null) {
        this[_touch](key, new image_cache._CachedImage.new(liveImage.completer, {sizeBytes: liveImage.sizeBytes}), timelineTask);
        if (!false) {
          dart.nullCheck(timelineTask).finish({arguments: new (T.IdentityMapOfString$dynamic()).from(["result", "keepAlive"])});
        }
        return liveImage.completer;
      }
      try {
        result = loader();
        this[_trackLiveImage](key, result, null);
      } catch (e) {
        let error = dart.getThrown(e);
        let stackTrace = dart.stackTrace(e);
        if (core.Object.is(error)) {
          if (!false) {
            dart.nullCheck(timelineTask).finish({arguments: new (T.IdentityMapOfString$dynamic()).from(["result", "error", "error", error[$toString](), "stackTrace", stackTrace.toString()])});
          }
          if (onError != null) {
            onError(error, stackTrace);
            return null;
          } else {
            dart.rethrow(e);
          }
        } else
          throw e;
      }
      if (!false) {
        listenerTask = (t1 = new developer.TimelineTask.new({parent: timelineTask}), (() => {
          t1.start("listener");
          return t1;
        })());
      }
      let listenedOnce = false;
      let untrackedPendingImage = null;
      const listener = (info, syncCall) => {
        let t1;
        let sizeBytes = null;
        if (info != null) {
          sizeBytes = info.image.height * info.image.width * 4;
          info.dispose();
        }
        let image = new image_cache._CachedImage.new(dart.nullCheck(result), {sizeBytes: sizeBytes});
        this[_trackLiveImage](key, result, sizeBytes);
        if (untrackedPendingImage == null) {
          this[_touch](key, image, listenerTask);
        } else {
          image.dispose();
        }
        let pendingImage = (t1 = untrackedPendingImage, t1 == null ? this[_pendingImages][$remove](key) : t1);
        if (pendingImage != null) {
          pendingImage.removeListener();
        }
        if (!false && !listenedOnce) {
          dart.nullCheck(listenerTask).finish({arguments: new (T.IdentityMapOfString$dynamic()).from(["syncCall", syncCall, "sizeInBytes", sizeBytes])});
          dart.nullCheck(timelineTask).finish({arguments: new (T.IdentityMapOfString$dynamic()).from(["currentSizeBytes", this.currentSizeBytes, "currentSize", this.currentSize])});
        }
        listenedOnce = true;
      };
      dart.fn(listener, T.ImageInfoNAndboolTovoid());
      let streamListener = new image_stream.ImageStreamListener.new(listener);
      if (this.maximumSize > 0 && this.maximumSizeBytes > 0) {
        this[_pendingImages][$_set](key, new image_cache._PendingImage.new(result, streamListener));
      } else {
        untrackedPendingImage = new image_cache._PendingImage.new(result, streamListener);
      }
      result.addListener(streamListener);
      return result;
    }
    statusForKey(key) {
      return new image_cache.ImageCacheStatus.__({pending: this[_pendingImages][$containsKey](key), keepAlive: this[_cache][$containsKey](key), live: this[_liveImages][$containsKey](key)});
    }
    containsKey(key) {
      return this[_pendingImages][$_get](key) != null || this[_cache][$_get](key) != null;
    }
    get liveImageCount() {
      return this[_liveImages][$length];
    }
    get pendingImageCount() {
      return this[_pendingImages][$length];
    }
    clearLiveImages() {
      for (let image of this[_liveImages][$values]) {
        image.dispose();
      }
      this[_liveImages][$clear]();
    }
    [_checkCacheSize](timelineTask) {
      let t1;
      let finishArgs = new (T.IdentityMapOfString$dynamic()).new();
      let checkCacheTask = null;
      if (!false) {
        checkCacheTask = (t1 = new developer.TimelineTask.new({parent: timelineTask}), (() => {
          t1.start("checkCacheSize");
          return t1;
        })());
        finishArgs[$_set]("evictedKeys", T.JSArrayOfString().of([]));
        finishArgs[$_set]("currentSize", this.currentSize);
        finishArgs[$_set]("currentSizeBytes", this.currentSizeBytes);
      }
      while (this[_currentSizeBytes] > this[_maximumSizeBytes] || this[_cache][$length] > this[_maximumSize]) {
        let key = this[_cache][$keys][$first];
        let image = dart.nullCheck(this[_cache][$_get](key));
        this[_currentSizeBytes] = this[_currentSizeBytes] - dart.nullCheck(image.sizeBytes);
        image.dispose();
        this[_cache][$remove](key);
        if (!false) {
          dart.dsend(finishArgs[$_get]("evictedKeys"), 'add', [key[$toString]()]);
        }
      }
      if (!false) {
        finishArgs[$_set]("endSize", this.currentSize);
        finishArgs[$_set]("endSizeBytes", this.currentSizeBytes);
        dart.nullCheck(checkCacheTask).finish({arguments: finishArgs});
      }
      if (!(this[_currentSizeBytes] >= 0)) dart.assertFailed(null, I[0], 528, 12, "_currentSizeBytes >= 0");
      if (!(this[_cache][$length] <= this.maximumSize)) dart.assertFailed(null, I[0], 529, 12, "_cache.length <= maximumSize");
      if (!(this[_currentSizeBytes] <= this.maximumSizeBytes)) dart.assertFailed(null, I[0], 530, 12, "_currentSizeBytes <= maximumSizeBytes");
    }
  };
  (image_cache.ImageCache.new = function() {
    this[_pendingImages] = new (T.LinkedMapOfObject$_PendingImage()).new();
    this[_cache] = new (T.LinkedMapOfObject$_CachedImage()).new();
    this[_liveImages] = new (T.LinkedMapOfObject$_LiveImage()).new();
    this[_maximumSize] = 1000;
    this[_maximumSizeBytes] = 104857600;
    this[_currentSizeBytes] = 0;
    ;
  }).prototype = image_cache.ImageCache.prototype;
  dart.addTypeTests(image_cache.ImageCache);
  dart.addTypeCaches(image_cache.ImageCache);
  dart.setMethodSignature(image_cache.ImageCache, () => ({
    __proto__: dart.getMethods(image_cache.ImageCache.__proto__),
    clear: dart.fnType(dart.void, []),
    evict: dart.fnType(core.bool, [core.Object], {includeLive: core.bool}, {}),
    [_touch]: dart.fnType(dart.void, [core.Object, image_cache._CachedImage, dart.nullable(developer.TimelineTask)]),
    [_trackLiveImage]: dart.fnType(dart.void, [core.Object, image_stream.ImageStreamCompleter, dart.nullable(core.int)]),
    putIfAbsent: dart.fnType(dart.nullable(image_stream.ImageStreamCompleter), [core.Object, dart.fnType(image_stream.ImageStreamCompleter, [])], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)]))}, {}),
    statusForKey: dart.fnType(image_cache.ImageCacheStatus, [core.Object]),
    containsKey: dart.fnType(core.bool, [core.Object]),
    clearLiveImages: dart.fnType(dart.void, []),
    [_checkCacheSize]: dart.fnType(dart.void, [dart.nullable(developer.TimelineTask)])
  }));
  dart.setGetterSignature(image_cache.ImageCache, () => ({
    __proto__: dart.getGetters(image_cache.ImageCache.__proto__),
    maximumSize: core.int,
    currentSize: core.int,
    maximumSizeBytes: core.int,
    currentSizeBytes: core.int,
    liveImageCount: core.int,
    pendingImageCount: core.int
  }));
  dart.setSetterSignature(image_cache.ImageCache, () => ({
    __proto__: dart.getSetters(image_cache.ImageCache.__proto__),
    maximumSize: core.int,
    maximumSizeBytes: core.int
  }));
  dart.setLibraryUri(image_cache.ImageCache, I[1]);
  dart.setFieldSignature(image_cache.ImageCache, () => ({
    __proto__: dart.getFields(image_cache.ImageCache.__proto__),
    [_pendingImages]: dart.finalFieldType(core.Map$(core.Object, image_cache._PendingImage)),
    [_cache]: dart.finalFieldType(core.Map$(core.Object, image_cache._CachedImage)),
    [_liveImages]: dart.finalFieldType(core.Map$(core.Object, image_cache._LiveImage)),
    [_maximumSize]: dart.fieldType(core.int),
    [_maximumSizeBytes]: dart.fieldType(core.int),
    [_currentSizeBytes]: dart.fieldType(core.int)
  }));
  var pending$ = dart.privateName(image_cache, "ImageCacheStatus.pending");
  var keepAlive$ = dart.privateName(image_cache, "ImageCacheStatus.keepAlive");
  var live$ = dart.privateName(image_cache, "ImageCacheStatus.live");
  image_cache.ImageCacheStatus = class ImageCacheStatus extends core.Object {
    get pending() {
      return this[pending$];
    }
    set pending(value) {
      super.pending = value;
    }
    get keepAlive() {
      return this[keepAlive$];
    }
    set keepAlive(value) {
      super.keepAlive = value;
    }
    get live() {
      return this[live$];
    }
    set live(value) {
      super.live = value;
    }
    get tracked() {
      return this.pending || this.keepAlive || this.live;
    }
    get untracked() {
      return !this.pending && !this.keepAlive && !this.live;
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return image_cache.ImageCacheStatus.is(other) && other.pending === this.pending && other.keepAlive === this.keepAlive && other.live === this.live;
    }
    get hashCode() {
      return ui.hashValues(this.pending, this.keepAlive, this.live);
    }
    toString() {
      return object.objectRuntimeType(this, "ImageCacheStatus") + "(pending: " + dart.str(this.pending) + ", live: " + dart.str(this.live) + ", keepAlive: " + dart.str(this.keepAlive) + ")";
    }
  };
  (image_cache.ImageCacheStatus.__ = function(opts) {
    let pending = opts && 'pending' in opts ? opts.pending : false;
    let keepAlive = opts && 'keepAlive' in opts ? opts.keepAlive : false;
    let live = opts && 'live' in opts ? opts.live : false;
    this[pending$] = pending;
    this[keepAlive$] = keepAlive;
    this[live$] = live;
    if (!(!pending || !keepAlive)) dart.assertFailed(null, I[0], 557, 15, "!pending || !keepAlive");
    ;
  }).prototype = image_cache.ImageCacheStatus.prototype;
  dart.addTypeTests(image_cache.ImageCacheStatus);
  dart.addTypeCaches(image_cache.ImageCacheStatus);
  dart.setGetterSignature(image_cache.ImageCacheStatus, () => ({
    __proto__: dart.getGetters(image_cache.ImageCacheStatus.__proto__),
    tracked: core.bool,
    untracked: core.bool
  }));
  dart.setLibraryUri(image_cache.ImageCacheStatus, I[1]);
  dart.setFieldSignature(image_cache.ImageCacheStatus, () => ({
    __proto__: dart.getFields(image_cache.ImageCacheStatus.__proto__),
    pending: dart.finalFieldType(core.bool),
    keepAlive: dart.finalFieldType(core.bool),
    live: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(image_cache.ImageCacheStatus, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_cache.ImageCacheStatus, ['hashCode']);
  image_cache._CachedImageBase = class _CachedImageBase extends core.Object {
    dispose() {
      if (!(this.handle != null)) dart.assertFailed(null, I[0], 622, 12, "handle != null");
      dart.nullCheck(binding.SchedulerBinding.instance).addPostFrameCallback(dart.fn(timeStamp => {
        let t1;
        if (!(this.handle != null)) dart.assertFailed(null, I[0], 626, 14, "handle != null");
        t1 = this.handle;
        t1 == null ? null : t1.dispose();
        this.handle = null;
      }, T.DurationTovoid()));
    }
  };
  (image_cache._CachedImageBase.new = function(completer, opts) {
    let sizeBytes = opts && 'sizeBytes' in opts ? opts.sizeBytes : null;
    this.completer = completer;
    this.sizeBytes = sizeBytes;
    if (!(completer !== null)) dart.assertFailed(null, I[0], 613, 15, "completer != null");
    this.handle = completer.keepAlive();
    ;
  }).prototype = image_cache._CachedImageBase.prototype;
  dart.addTypeTests(image_cache._CachedImageBase);
  dart.addTypeCaches(image_cache._CachedImageBase);
  dart.setMethodSignature(image_cache._CachedImageBase, () => ({
    __proto__: dart.getMethods(image_cache._CachedImageBase.__proto__),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(image_cache._CachedImageBase, I[1]);
  dart.setFieldSignature(image_cache._CachedImageBase, () => ({
    __proto__: dart.getFields(image_cache._CachedImageBase.__proto__),
    completer: dart.finalFieldType(image_stream.ImageStreamCompleter),
    sizeBytes: dart.fieldType(dart.nullable(core.int)),
    handle: dart.fieldType(dart.nullable(image_stream.ImageStreamCompleterHandle))
  }));
  image_cache._CachedImage = class _CachedImage extends image_cache._CachedImageBase {};
  (image_cache._CachedImage.new = function(completer, opts) {
    let sizeBytes = opts && 'sizeBytes' in opts ? opts.sizeBytes : null;
    image_cache._CachedImage.__proto__.new.call(this, completer, {sizeBytes: sizeBytes});
    ;
  }).prototype = image_cache._CachedImage.prototype;
  dart.addTypeTests(image_cache._CachedImage);
  dart.addTypeCaches(image_cache._CachedImage);
  dart.setLibraryUri(image_cache._CachedImage, I[1]);
  var ___LiveImage__handleRemove = dart.privateName(image_cache, "_#_LiveImage#_handleRemove");
  var _handleRemove = dart.privateName(image_cache, "_handleRemove");
  image_cache._LiveImage = class _LiveImage extends image_cache._CachedImageBase {
    get [_handleRemove]() {
      let t1;
      t1 = this[___LiveImage__handleRemove];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_handleRemove")) : t1;
    }
    set [_handleRemove](t1) {
      this[___LiveImage__handleRemove] = t1;
    }
    dispose() {
      this.completer.removeOnLastListenerRemovedCallback(this[_handleRemove]);
      super.dispose();
    }
    toString() {
      return diagnostics.describeIdentity(this);
    }
  };
  (image_cache._LiveImage.new = function(completer, handleRemove, opts) {
    let sizeBytes = opts && 'sizeBytes' in opts ? opts.sizeBytes : null;
    this[___LiveImage__handleRemove] = null;
    image_cache._LiveImage.__proto__.new.call(this, completer, {sizeBytes: sizeBytes});
    this[_handleRemove] = dart.fn(() => {
      handleRemove();
      this.dispose();
    }, T.VoidTovoid());
    completer.addOnLastListenerRemovedCallback(this[_handleRemove]);
  }).prototype = image_cache._LiveImage.prototype;
  dart.addTypeTests(image_cache._LiveImage);
  dart.addTypeCaches(image_cache._LiveImage);
  dart.setGetterSignature(image_cache._LiveImage, () => ({
    __proto__: dart.getGetters(image_cache._LiveImage.__proto__),
    [_handleRemove]: dart.fnType(dart.void, [])
  }));
  dart.setSetterSignature(image_cache._LiveImage, () => ({
    __proto__: dart.getSetters(image_cache._LiveImage.__proto__),
    [_handleRemove]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(image_cache._LiveImage, I[1]);
  dart.setFieldSignature(image_cache._LiveImage, () => ({
    __proto__: dart.getFields(image_cache._LiveImage.__proto__),
    [___LiveImage__handleRemove]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  dart.defineExtensionMethods(image_cache._LiveImage, ['toString']);
  image_cache._PendingImage = class _PendingImage extends core.Object {
    removeListener() {
      this.completer.removeListener(this.listener);
    }
  };
  (image_cache._PendingImage.new = function(completer, listener) {
    this.completer = completer;
    this.listener = listener;
    ;
  }).prototype = image_cache._PendingImage.prototype;
  dart.addTypeTests(image_cache._PendingImage);
  dart.addTypeCaches(image_cache._PendingImage);
  dart.setMethodSignature(image_cache._PendingImage, () => ({
    __proto__: dart.getMethods(image_cache._PendingImage.__proto__),
    removeListener: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(image_cache._PendingImage, I[1]);
  dart.setFieldSignature(image_cache._PendingImage, () => ({
    __proto__: dart.getFields(image_cache._PendingImage.__proto__),
    completer: dart.finalFieldType(image_stream.ImageStreamCompleter),
    listener: dart.finalFieldType(image_stream.ImageStreamListener)
  }));
  dart.defineLazy(image_cache, {
    /*image_cache._kDefaultSize*/get _kDefaultSize() {
      return 1000;
    },
    /*image_cache._kDefaultSizeBytes*/get _kDefaultSizeBytes() {
      return 104857600;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/painting/image_cache.dart", {
    "package:flutter/src/painting/image_cache.dart": image_cache
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["image_cache.dart"],"names":[],"mappings":"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","file":"../../../../../../../E:/packages/flutter/src/painting/image_cache.dart.lib.js"}');
  // Exports:
  return {
    src__painting__image_cache: image_cache
  };
}));

//# sourceMappingURL=image_cache.dart.lib.js.map
=======
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(core.int.parse, T.String__Toint());
    },
    get C1() {
      return C[1] = dart.fn(get_utils.GetUtils.capitalizeFirst, T.StringToStringN());
    }
  }, false);
  var C = Array(2).fill(void 0);
  var I = ["package:get/get_utils/src/get_utils/get_utils.dart"];
  get_utils.GetUtils = class GetUtils extends core.Object {
    static isNull(value) {
      return value == null;
    }
    static nil(s) {
      return s == null ? null : s;
    }
    static isNullOrBlank(value) {
      if (get_utils.GetUtils.isNull(value)) {
        return true;
      }
      return get_utils._isEmpty(value);
    }
    static isBlank(value) {
      return get_utils._isEmpty(value);
    }
    static isNum(value) {
      if (get_utils.GetUtils.isNull(value)) {
        return false;
      }
      return typeof core.num.tryParse(value) == 'number';
    }
    static isNumericOnly(s) {
      return get_utils.GetUtils.hasMatch(s, "^\\d+$");
    }
    static isAlphabetOnly(s) {
      return get_utils.GetUtils.hasMatch(s, "^[a-zA-Z]+$");
    }
    static hasCapitalletter(s) {
      return get_utils.GetUtils.hasMatch(s, "[A-Z]");
    }
    static isBool(value) {
      if (get_utils.GetUtils.isNull(value)) {
        return false;
      }
      return value === "true" || value === "false";
    }
    static isVideo(filePath) {
      let ext = filePath[$toLowerCase]();
      return ext[$endsWith](".mp4") || ext[$endsWith](".avi") || ext[$endsWith](".wmv") || ext[$endsWith](".rmvb") || ext[$endsWith](".mpg") || ext[$endsWith](".mpeg") || ext[$endsWith](".3gp");
    }
    static isImage(filePath) {
      let ext = filePath[$toLowerCase]();
      return ext[$endsWith](".jpg") || ext[$endsWith](".jpeg") || ext[$endsWith](".png") || ext[$endsWith](".gif") || ext[$endsWith](".bmp");
    }
    static isAudio(filePath) {
      let ext = filePath[$toLowerCase]();
      return ext[$endsWith](".mp3") || ext[$endsWith](".wav") || ext[$endsWith](".wma") || ext[$endsWith](".amr") || ext[$endsWith](".ogg");
    }
    static isPPT(filePath) {
      let ext = filePath[$toLowerCase]();
      return ext[$endsWith](".ppt") || ext[$endsWith](".pptx");
    }
    static isWord(filePath) {
      let ext = filePath[$toLowerCase]();
      return ext[$endsWith](".doc") || ext[$endsWith](".docx");
    }
    static isExcel(filePath) {
      let ext = filePath[$toLowerCase]();
      return ext[$endsWith](".xls") || ext[$endsWith](".xlsx");
    }
    static isAPK(filePath) {
      return filePath[$toLowerCase]()[$endsWith](".apk");
    }
    static isPDF(filePath) {
      return filePath[$toLowerCase]()[$endsWith](".pdf");
    }
    static isTxt(filePath) {
      return filePath[$toLowerCase]()[$endsWith](".txt");
    }
    static isChm(filePath) {
      return filePath[$toLowerCase]()[$endsWith](".chm");
    }
    static isVector(filePath) {
      return filePath[$toLowerCase]()[$endsWith](".svg");
    }
    static isHTML(filePath) {
      return filePath[$toLowerCase]()[$endsWith](".html");
    }
    static isUsername(s) {
      return get_utils.GetUtils.hasMatch(s, "^[a-zA-Z0-9][a-zA-Z0-9_.]+[a-zA-Z0-9]$");
    }
    static isURL(s) {
      return get_utils.GetUtils.hasMatch(s, "^((((H|h)(T|t)|(F|f))(T|t)(P|p)((S|s)?))\\://)?(www.|[a-zA-Z0-9].)[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,6}(\\:[0-9]{1,5})*(/($|[a-zA-Z0-9\\.\\,\\;\\?\\'\\\\\\+&amp;%\\$#\\=~_\\-]+))*$");
    }
    static isEmail(s) {
      return get_utils.GetUtils.hasMatch(s, "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$");
    }
    static isPhoneNumber(s) {
      if (s.length > 16 || s.length < 9) return false;
      return get_utils.GetUtils.hasMatch(s, "^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$");
    }
    static isDateTime(s) {
      return get_utils.GetUtils.hasMatch(s, "^\\d{4}-\\d{2}-\\d{2}[ T]\\d{2}:\\d{2}:\\d{2}.\\d{3}Z?$");
    }
    static isMD5(s) {
      return get_utils.GetUtils.hasMatch(s, "^[a-f0-9]{32}$");
    }
    static isSHA1(s) {
      return get_utils.GetUtils.hasMatch(s, "(([A-Fa-f0-9]{2}\\:){19}[A-Fa-f0-9]{2}|[A-Fa-f0-9]{40})");
    }
    static isSHA256(s) {
      return get_utils.GetUtils.hasMatch(s, "([A-Fa-f0-9]{2}\\:){31}[A-Fa-f0-9]{2}|[A-Fa-f0-9]{64}");
    }
    static isSSN(s) {
      return get_utils.GetUtils.hasMatch(s, "^(?!0{3}|6{3}|9[0-9]{2})[0-9]{3}-?(?!0{2})[0-9]{2}-?(?!0{4})[0-9]{4}$");
    }
    static isBinary(s) {
      return get_utils.GetUtils.hasMatch(s, "^[0-1]+$");
    }
    static isIPv4(s) {
      return get_utils.GetUtils.hasMatch(s, "^(?:(?:^|\\.)(?:2(?:5[0-5]|[0-4]\\d)|1?\\d?\\d)){4}$");
    }
    static isIPv6(s) {
      return get_utils.GetUtils.hasMatch(s, "^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$");
    }
    static isHexadecimal(s) {
      return get_utils.GetUtils.hasMatch(s, "^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$");
    }
    static isPalindrom(string) {
      let cleanString = string[$toLowerCase]()[$replaceAll](core.RegExp.new("\\s+"), "")[$replaceAll](core.RegExp.new("[^0-9a-zA-Z]+"), "");
      for (let i = 0; i < cleanString.length; i = i + 1) {
        if (cleanString[$_get](i) !== cleanString[$_get](cleanString.length - i - 1)) {
          return false;
        }
      }
      return true;
    }
    static isOneAKind(value) {
      if ((typeof value == 'string' || core.List.is(value)) && !dart.nullCheck(get_utils.GetUtils.isNullOrBlank(value))) {
        let first = dart.dsend(value, '_get', [0]);
        let len = core.num.as(dart.dload(value, 'length'));
        for (let i = 0; i < len; i = i + 1) {
          if (!dart.equals(dart.dsend(value, '_get', [i]), first)) {
            return false;
          }
        }
        return true;
      }
      if (core.int.is(value)) {
        let stringValue = dart.toString(value);
        let first = stringValue[$_get](0);
        for (let i = 0; i < stringValue.length; i = i + 1) {
          if (stringValue[$_get](i) !== first) {
            return false;
          }
        }
        return true;
      }
      return false;
    }
    static isPassport(s) {
      return get_utils.GetUtils.hasMatch(s, "^(?!^0+$)[a-zA-Z0-9]{6,9}$");
    }
    static isCurrency(s) {
      return get_utils.GetUtils.hasMatch(s, "^(S?\\$|\\₩|Rp|\\¥|\\€|\\₹|\\₽|fr|R\\$|R)?[ ]?[-]?([0-9]{1,3}[,.]([0-9]{3}[,.])*[0-9]{3}|[0-9]+)([,.][0-9]{1,2})?( ?(USD?|AUD|NZD|CAD|CHF|GBP|CNY|EUR|JPY|IDR|MXN|NOK|KRW|TRY|INR|RUB|BRL|ZAR|SGD|MYR))?$");
    }
    static isLengthGreaterThan(value, maxLength) {
      let length = get_utils._obtainDynamicLength(value);
      if (length == null) {
        return false;
      }
      return dart.notNull(length) > maxLength;
    }
    static isLengthGreaterOrEqual(value, maxLength) {
      let length = get_utils._obtainDynamicLength(value);
      if (length == null) {
        return false;
      }
      return dart.notNull(length) >= maxLength;
    }
    static isLengthLowerThan(value, maxLength) {
      return get_utils.GetUtils.isLengthLessThan(value, maxLength);
    }
    static isLengthLessThan(value, maxLength) {
      let length = get_utils._obtainDynamicLength(value);
      if (length == null) {
        return false;
      }
      return dart.notNull(length) < maxLength;
    }
    static isLengthLowerOrEqual(value, maxLength) {
      return get_utils.GetUtils.isLengthLessOrEqual(value, maxLength);
    }
    static isLengthLessOrEqual(value, maxLength) {
      let length = get_utils._obtainDynamicLength(value);
      if (length == null) {
        return false;
      }
      return dart.notNull(length) <= maxLength;
    }
    static isLengthEqualTo(value, otherLength) {
      let length = get_utils._obtainDynamicLength(value);
      if (length == null) {
        return false;
      }
      return length === otherLength;
    }
    static isLengthBetween(value, minLength, maxLength) {
      if (get_utils.GetUtils.isNull(value)) {
        return false;
      }
      return get_utils.GetUtils.isLengthGreaterOrEqual(value, minLength) && get_utils.GetUtils.isLengthLessOrEqual(value, maxLength);
    }
    static isCaseInsensitiveContains(a, b) {
      return a[$toLowerCase]()[$contains](b[$toLowerCase]());
    }
    static isCaseInsensitiveContainsAny(a, b) {
      let lowA = a[$toLowerCase]();
      let lowB = b[$toLowerCase]();
      return lowA[$contains](lowB) || lowB[$contains](lowA);
    }
    static isLowerThan(a, b) {
      return a < b;
    }
    static isGreaterThan(a, b) {
      return a > b;
    }
    static isEqual(a, b) {
      return a === b;
    }
    static isCnpj(cnpj) {
      let t0, t0$;
      let numbers = cnpj[$replaceAll](core.RegExp.new("[^0-9]"), "");
      if (numbers.length !== 14) {
        return false;
      }
      if (core.RegExp.new("^(\\d)\\1*$").hasMatch(numbers)) {
        return false;
      }
      let digits = numbers[$split]("")[$map](core.int, C[0] || CT.C0)[$toList]();
      let calcDv1 = 0;
      let j = 0;
      let iter = T.IterableOfint().generate(12, dart.fn(i => i < 4 ? 5 - i : 13 - i, T.intToint()));
      for (let i of iter) {
        calcDv1 = calcDv1 + digits[$_get]((t0 = j, j = t0 + 1, t0)) * i;
      }
      calcDv1 = calcDv1[$modulo](11);
      let dv1 = calcDv1 < 2 ? 0 : 11 - calcDv1;
      if (digits[$_get](12) !== dv1) {
        return false;
      }
      let calcDv2 = 0;
      j = 0;
      let iter$ = T.IterableOfint().generate(13, dart.fn(i => i < 5 ? 6 - i : 14 - i, T.intToint()));
      for (let i of iter$) {
        calcDv2 = calcDv2 + digits[$_get]((t0$ = j, j = t0$ + 1, t0$)) * i;
      }
      calcDv2 = calcDv2[$modulo](11);
      let dv2 = calcDv2 < 2 ? 0 : 11 - calcDv2;
      if (digits[$_get](13) !== dv2) {
        return false;
      }
      return true;
    }
    static isCpf(cpf) {
      let numbers = cpf[$replaceAll](core.RegExp.new("[^0-9]"), "");
      if (numbers.length !== 11) {
        return false;
      }
      if (core.RegExp.new("^(\\d)\\1*$").hasMatch(numbers)) {
        return false;
      }
      let digits = numbers[$split]("")[$map](core.int, C[0] || CT.C0)[$toList]();
      let calcDv1 = 0;
      let iter = T.IterableOfint().generate(9, dart.fn(i => 10 - i, T.intToint()));
      for (let i of iter) {
        calcDv1 = calcDv1 + digits[$_get](10 - i) * i;
      }
      calcDv1 = calcDv1[$modulo](11);
      let dv1 = calcDv1 < 2 ? 0 : 11 - calcDv1;
      if (digits[$_get](9) !== dv1) {
        return false;
      }
      let calcDv2 = 0;
      let iter$ = T.IterableOfint().generate(10, dart.fn(i => 11 - i, T.intToint()));
      for (let i of iter$) {
        calcDv2 = calcDv2 + digits[$_get](11 - i) * i;
      }
      calcDv2 = calcDv2[$modulo](11);
      let dv2 = calcDv2 < 2 ? 0 : 11 - calcDv2;
      if (digits[$_get](10) !== dv2) {
        return false;
      }
      return true;
    }
    static capitalize(value) {
      if (get_utils.GetUtils.isNull(value)) return null;
      if (dart.nullCheck(get_utils.GetUtils.isBlank(value))) return value;
      return value[$split](" ")[$map](T.StringN(), C[1] || CT.C1)[$join](" ");
    }
    static capitalizeFirst(s) {
      if (get_utils.GetUtils.isNull(s)) return null;
      if (dart.nullCheck(get_utils.GetUtils.isBlank(s))) return s;
      return s[$_get](0)[$toUpperCase]() + s[$substring](1)[$toLowerCase]();
    }
    static removeAllWhitespace(value) {
      return value[$replaceAll](" ", "");
    }
    static camelCase(value) {
      if (dart.nullCheck(get_utils.GetUtils.isNullOrBlank(value))) {
        return null;
      }
      let separatedWords = value[$split](core.RegExp.new("[!@#<>?\":`~;[\\]\\\\|=+)(*&^%-\\s_]+"));
      let newString = "";
      for (let word of separatedWords) {
        newString = newString + (word[$_get](0)[$toUpperCase]() + word[$substring](1)[$toLowerCase]());
      }
      return newString[$_get](0)[$toLowerCase]() + newString[$substring](1);
    }
    static _groupIntoWords(text) {
      let sb = new core.StringBuffer.new();
      let words = T.JSArrayOfString().of([]);
      let isAllCaps = text[$toUpperCase]() === text;
      for (let i = 0; i < text.length; i = i + 1) {
        let char = text[$_get](i);
        let nextChar = i + 1 === text.length ? null : text[$_get](i + 1);
        if (get_utils.GetUtils._symbolSet.contains(char)) {
          continue;
        }
        sb.write(char);
        let isEndOfWord = nextChar == null || get_utils.GetUtils._upperAlphaRegex.hasMatch(nextChar) && !isAllCaps || get_utils.GetUtils._symbolSet.contains(nextChar);
        if (isEndOfWord) {
          words[$add](dart.str(sb));
          sb.clear();
        }
      }
      return words;
    }
    static snakeCase(text, opts) {
      let separator = opts && 'separator' in opts ? opts.separator : "_";
      if (dart.nullCheck(get_utils.GetUtils.isNullOrBlank(text))) {
        return null;
      }
      return get_utils.GetUtils._groupIntoWords(dart.nullCheck(text))[$map](core.String, dart.fn(word => word[$toLowerCase](), T.StringToString()))[$join](separator);
    }
    static paramCase(text) {
      return get_utils.GetUtils.snakeCase(text, {separator: "-"});
    }
    static numericOnly(s, opts) {
      let firstWordOnly = opts && 'firstWordOnly' in opts ? opts.firstWordOnly : false;
      let numericOnlyStr = "";
      for (let i = 0; i < s.length; i = i + 1) {
        if (get_utils.GetUtils.isNumericOnly(s[$_get](i))) {
          numericOnlyStr = numericOnlyStr + s[$_get](i);
        }
        if (firstWordOnly && numericOnlyStr[$isNotEmpty] && s[$_get](i) === " ") {
          break;
        }
      }
      return numericOnlyStr;
    }
    static hasMatch(value, pattern) {
      return value == null ? false : core.RegExp.new(pattern).hasMatch(value);
    }
    static createPath(path, segments = null) {
      if (segments == null || segments[$isEmpty]) {
        return path;
      }
      let list = segments[$map](core.String, dart.fn(e => "/" + dart.str(e), T.dynamicToString()));
      return path + list[$join]();
    }
    static printFunction(prefix, value, info, opts) {
      let t2, t1, t0;
      let isError = opts && 'isError' in opts ? opts.isError : false;
      t0 = get_main.Get;
      t1 = (prefix + " " + dart.str(value) + " " + info)[$trim]();
      t2 = isError;
      t0.log(t1, {isError: t2});
    }
  };
  (get_utils.GetUtils.__ = function() {
    ;
  }).prototype = get_utils.GetUtils.prototype;
  dart.addTypeTests(get_utils.GetUtils);
  dart.addTypeCaches(get_utils.GetUtils);
  dart.setLibraryUri(get_utils.GetUtils, I[0]);
  dart.defineLazy(get_utils.GetUtils, {
    /*get_utils.GetUtils._upperAlphaRegex*/get _upperAlphaRegex() {
      return core.RegExp.new("[A-Z]");
    },
    /*get_utils.GetUtils._symbolSet*/get _symbolSet() {
      return T.LinkedHashSetOfString().from([" ", ".", "/", "_", "\\", "-"]);
    }
  }, false);
  get_utils._isEmpty = function _isEmpty(value) {
    if (typeof value == 'string') {
      return dart.toString(value)[$trim]()[$isEmpty];
    }
    if (core.Iterable.is(value) || core.Map.is(value)) {
      return T.boolN().as(dart.dload(value, 'isEmpty'));
    }
    return false;
  };
  get_utils._hasLength = function _hasLength(value) {
    return core.Iterable.is(value) || typeof value == 'string' || core.Map.is(value);
  };
  get_utils._obtainDynamicLength = function _obtainDynamicLength(value) {
    if (value == null) {
      return null;
    }
    if (get_utils._hasLength(value)) {
      return T.intN().as(dart.dload(value, 'length'));
    }
    if (core.int.is(value)) {
      return dart.toString(value).length;
    }
    if (typeof value == 'number') {
      return dart.toString(value)[$replaceAll](".", "").length;
    }
    return null;
  };
  dart.trackLibraries("packages/get/get_utils/src/get_utils/get_utils.dart", {
    "package:get/get_utils/src/get_utils/get_utils.dart": get_utils
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["get_utils.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../../packages/get/get_utils/src/get_utils/get_utils.dart.lib.js"}');
  // Exports:
  return {
    get_utils__src__get_utils__get_utils: get_utils
  };
}));

//# sourceMappingURL=get_utils.dart.lib.js.map
>>>>>>> feature-b
