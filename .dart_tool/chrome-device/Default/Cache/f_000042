<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/widgets/scroll_metrics.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/physics/spring_simulation.dart', 'packages/flutter/src/physics/tolerance.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/rendering/sliver.dart', 'packages/flutter/src/widgets/sliver_fill.dart', 'packages/flutter/src/rendering/viewport_offset.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__widgets__page_view_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__widgets__scroll_metrics$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__physics__spring_simulation$46dart, packages__flutter__src__physics__tolerance$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__rendering__sliver$46dart, packages__flutter__src__widgets__sliver_fill$46dart, packages__flutter__src__rendering__viewport_offset$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const math = dart_sdk.math;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const scroll_controller = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_controller;
  const scroll_position = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_position;
  const page_storage = packages__flutter__src__widgets__widget_span$46dart.src__widgets__page_storage;
  const scroll_position_with_single_context = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_position_with_single_context;
  const scroll_physics = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_physics;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const sliver = packages__flutter__src__widgets__widget_span$46dart.src__widgets__sliver;
  const scroll_configuration = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_configuration;
  const debug = packages__flutter__src__widgets__widget_span$46dart.src__widgets__debug;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const notification_listener = packages__flutter__src__widgets__widget_span$46dart.src__widgets__notification_listener;
  const scroll_notification = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_notification;
  const scrollable = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scrollable;
  const viewport = packages__flutter__src__widgets__widget_span$46dart.src__widgets__viewport;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const scroll_metrics = packages__flutter__src__widgets__scroll_metrics$46dart.src__widgets__scroll_metrics;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const spring_simulation = packages__flutter__src__physics__spring_simulation$46dart.src__physics__spring_simulation;
  const tolerance = packages__flutter__src__physics__tolerance$46dart.src__physics__tolerance;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const viewport$ = packages__flutter__src__rendering__sliver$46dart.src__rendering__viewport;
  const sliver_fill = packages__flutter__src__widgets__sliver_fill$46dart.src__widgets__sliver_fill;
  const viewport_offset = packages__flutter__src__rendering__viewport_offset$46dart.src__rendering__viewport_offset;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var page_view = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  var $length = dartx.length;
  var $toDouble = dartx.toDouble;
  var $round = dartx.round;
  var $clamp = dartx.clamp;
  var $roundToDouble = dartx.roundToDouble;
  var $abs = dartx.abs;
  var $noSuchMethod = dartx.noSuchMethod;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    NotificationListenerOfScrollNotification: () => (T.NotificationListenerOfScrollNotification = dart.constFn(notification_listener.NotificationListener$(scroll_notification.ScrollNotification)))(),
    ScrollNotificationTobool: () => (T.ScrollNotificationTobool = dart.constFn(dart.fnType(core.bool, [scroll_notification.ScrollNotification])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    BuildContextAndViewportOffsetToViewport: () => (T.BuildContextAndViewportOffsetToViewport = dart.constFn(dart.fnType(viewport.Viewport, [framework.BuildContext, viewport_offset.ViewportOffset])))(),
    EnumPropertyOfAxis: () => (T.EnumPropertyOfAxis = dart.constFn(diagnostics.EnumProperty$(basic_types.Axis)))(),
    DiagnosticsPropertyOfPageController: () => (T.DiagnosticsPropertyOfPageController = dart.constFn(diagnostics.DiagnosticsProperty$(page_view.PageController)))(),
    DiagnosticsPropertyOfScrollPhysics: () => (T.DiagnosticsPropertyOfScrollPhysics = dart.constFn(diagnostics.DiagnosticsProperty$(scroll_physics.ScrollPhysics)))()
=======
define(['dart_sdk', 'packages/flutter/src/foundation/serialization.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/foundation/licenses.dart', 'packages/flutter/src/scheduler/priority.dart', 'packages/flutter/src/foundation/_isolates_web.dart', 'packages/flutter/src/foundation/binding.dart', 'packages/flutter/src/foundation/consolidate_response.dart'], (function load__packages__flutter__src__services__system_channels_dart(dart_sdk, packages__flutter__src__foundation__serialization$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__foundation__licenses$46dart, packages__flutter__src__scheduler__priority$46dart, packages__flutter__src__foundation___isolates_web$46dart, packages__flutter__src__foundation__binding$46dart, packages__flutter__src__foundation__consolidate_response$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const typed_data = dart_sdk.typed_data;
  const convert = dart_sdk.convert;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const ui = dart_sdk.ui;
  const _http = dart_sdk._http;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const serialization = packages__flutter__src__foundation__serialization$46dart.src__foundation__serialization;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const licenses$ = packages__flutter__src__foundation__licenses$46dart.src__foundation__licenses;
  const priority = packages__flutter__src__scheduler__priority$46dart.src__scheduler__priority;
  const isolates = packages__flutter__src__foundation___isolates_web$46dart.src__foundation__isolates;
  const binding$ = packages__flutter__src__foundation__binding$46dart.src__foundation__binding;
  const consolidate_response = packages__flutter__src__foundation__consolidate_response$46dart.src__foundation__consolidate_response;
  var system_channels = Object.create(dart.library);
  var message_codecs = Object.create(dart.library);
  var platform_channel = Object.create(dart.library);
  var message_codec = Object.create(dart.library);
  var restoration = Object.create(dart.library);
  var binary_messenger = Object.create(dart.library);
  var binding$0 = Object.create(dart.library);
  var asset_bundle = Object.create(dart.library);
  var $buffer = dartx.buffer;
  var $offsetInBytes = dartx.offsetInBytes;
  var $lengthInBytes = dartx.lengthInBytes;
  var $asUint8List = dartx.asUint8List;
  var $asByteData = dartx.asByteData;
  var $_get = dartx._get;
  var $length = dartx.length;
  var $forEach = dartx.forEach;
  var $_set = dartx._set;
  var $cast = dartx.cast;
  var $toString = dartx.toString;
  var $runtimeType = dartx.runtimeType;
  var $putIfAbsent = dartx.putIfAbsent;
  var $containsKey = dartx.containsKey;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $entries = dartx.entries;
  var $isNotEmpty = dartx.isNotEmpty;
  var $map = dartx.map;
  var $addAll = dartx.addAll;
  var $add = dartx.add;
  var $removeLast = dartx.removeLast;
  var $values = dartx.values;
  var $expand = dartx.expand;
  var $followedBy = dartx.followedBy;
  var $toList = dartx.toList;
  var $clear = dartx.clear;
  var $times = dartx['*'];
  var $split = dartx.split;
  var $indexOf = dartx.indexOf;
  var $substring = dartx.substring;
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    BasicMessageChannelOfStringN: () => (T$.BasicMessageChannelOfStringN = dart.constFn(platform_channel.BasicMessageChannel$(T$.StringN())))(),
    ByteDataN: () => (T$.ByteDataN = dart.constFn(dart.nullable(typed_data.ByteData)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    JSArrayOfObjectN: () => (T$.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T$.ObjectN())))(),
    ObjectNAndObjectNTovoid: () => (T$.ObjectNAndObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN(), T$.ObjectN()])))(),
    ListOfObjectN: () => (T$.ListOfObjectN = dart.constFn(core.List$(T$.ObjectN())))(),
    LinkedMapOfObjectN$ObjectN: () => (T$.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    FutureOfByteDataN: () => (T$.FutureOfByteDataN = dart.constFn(async.Future$(T$.ByteDataN())))(),
    ByteDataNToFutureOfByteDataN: () => (T$.ByteDataNToFutureOfByteDataN = dart.constFn(dart.fnType(T$.FutureOfByteDataN(), [T$.ByteDataN()])))(),
    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),
    MapN: () => (T$.MapN = dart.constFn(dart.nullable(core.Map)))(),
    VoidToStreamController: () => (T$.VoidToStreamController = dart.constFn(dart.fnType(async.StreamController, [])))(),
    StreamControllerTodynamic: () => (T$.StreamControllerTodynamic = dart.constFn(dart.fnType(dart.dynamic, [async.StreamController])))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    ByteDataNToFutureOfNull: () => (T$.ByteDataNToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [T$.ByteDataN()])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    ExpandoOfObject: () => (T$.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    LinkedHashSetOfRestorationBucket: () => (T$.LinkedHashSetOfRestorationBucket = dart.constFn(collection.LinkedHashSet$(restoration.RestorationBucket)))(),
    RestorationBucketN: () => (T$.RestorationBucketN = dart.constFn(dart.nullable(restoration.RestorationBucket)))(),
    SynchronousFutureOfRestorationBucketN: () => (T$.SynchronousFutureOfRestorationBucketN = dart.constFn(synchronous_future.SynchronousFuture$(T$.RestorationBucketN())))(),
    CompleterOfRestorationBucketN: () => (T$.CompleterOfRestorationBucketN = dart.constFn(async.Completer$(T$.RestorationBucketN())))(),
    MapOfObjectN$ObjectN: () => (T$.MapOfObjectN$ObjectN = dart.constFn(core.Map$(T$.ObjectN(), T$.ObjectN())))(),
    Uint8ListN: () => (T$.Uint8ListN = dart.constFn(dart.nullable(typed_data.Uint8List)))(),
    DurationTovoid: () => (T$.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    MapNOfObjectN$ObjectN: () => (T$.MapNOfObjectN$ObjectN = dart.constFn(dart.nullable(T$.MapOfObjectN$ObjectN())))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    IdentityMapOfString$RestorationBucket: () => (T$.IdentityMapOfString$RestorationBucket = dart.constFn(_js_helper.IdentityMap$(core.String, restoration.RestorationBucket)))(),
    ListOfRestorationBucket: () => (T$.ListOfRestorationBucket = dart.constFn(core.List$(restoration.RestorationBucket)))(),
    IdentityMapOfString$ListOfRestorationBucket: () => (T$.IdentityMapOfString$ListOfRestorationBucket = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfRestorationBucket())))(),
    VoidToMapOfObjectN$ObjectN: () => (T$.VoidToMapOfObjectN$ObjectN = dart.constFn(dart.fnType(T$.MapOfObjectN$ObjectN(), [])))(),
    JSArrayOfDiagnosticsNode: () => (T$.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    RestorationBucketToErrorDescription: () => (T$.RestorationBucketToErrorDescription = dart.constFn(dart.fnType(assertions.ErrorDescription, [restoration.RestorationBucket])))(),
    JSArrayOfRestorationBucket: () => (T$.JSArrayOfRestorationBucket = dart.constFn(_interceptors.JSArray$(restoration.RestorationBucket)))(),
    VoidToListOfRestorationBucket: () => (T$.VoidToListOfRestorationBucket = dart.constFn(dart.fnType(T$.ListOfRestorationBucket(), [])))(),
    ListOfRestorationBucketToListOfRestorationBucket: () => (T$.ListOfRestorationBucketToListOfRestorationBucket = dart.constFn(dart.fnType(T$.ListOfRestorationBucket(), [T$.ListOfRestorationBucket()])))(),
    dynamicToFutureOfvoid: () => (T$.dynamicToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [dart.dynamic])))(),
    MapOfString$dynamic: () => (T$.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    CompleterOfString: () => (T$.CompleterOfString = dart.constFn(async.Completer$(core.String)))(),
    VoidToFutureOfNull: () => (T$.VoidToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [])))(),
    ListOfLicenseEntry: () => (T$.ListOfLicenseEntry = dart.constFn(core.List$(licenses$.LicenseEntry)))(),
    CompleterOfListOfLicenseEntry: () => (T$.CompleterOfListOfLicenseEntry = dart.constFn(async.Completer$(T$.ListOfLicenseEntry())))(),
    StringToListOfLicenseEntry: () => (T$.StringToListOfLicenseEntry = dart.constFn(dart.fnType(T$.ListOfLicenseEntry(), [core.String])))(),
    StreamOfLicenseEntry: () => (T$.StreamOfLicenseEntry = dart.constFn(async.Stream$(licenses$.LicenseEntry)))(),
    _AsyncStarImplOfLicenseEntry: () => (T$._AsyncStarImplOfLicenseEntry = dart.constFn(async._AsyncStarImpl$(licenses$.LicenseEntry)))(),
    JSArrayOfLicenseEntry: () => (T$.JSArrayOfLicenseEntry = dart.constFn(_interceptors.JSArray$(licenses$.LicenseEntry)))(),
    FutureOfString: () => (T$.FutureOfString = dart.constFn(async.Future$(core.String)))(),
    VoidToFutureOfString: () => (T$.VoidToFutureOfString = dart.constFn(dart.fnType(T$.FutureOfString(), [])))(),
    StringToFutureOfvoid: () => (T$.StringToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [core.String])))(),
    CompleterOfByteDataN: () => (T$.CompleterOfByteDataN = dart.constFn(async.Completer$(T$.ByteDataN())))(),
    ByteDataNTovoid: () => (T$.ByteDataNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ByteDataN()])))(),
    ByteDataNAndFnToFutureOfvoid: () => (T$.ByteDataNAndFnToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [T$.ByteDataN(), T$.ByteDataNTovoid()])))(),
    FutureNOfByteDataN: () => (T$.FutureNOfByteDataN = dart.constFn(dart.nullable(T$.FutureOfByteDataN())))(),
    ByteDataNToFutureNOfByteDataN: () => (T$.ByteDataNToFutureNOfByteDataN = dart.constFn(dart.fnType(T$.FutureNOfByteDataN(), [T$.ByteDataN()])))(),
    IdentityMapOfString$ByteDataNToFutureNOfByteDataN: () => (T$.IdentityMapOfString$ByteDataNToFutureNOfByteDataN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ByteDataNToFutureNOfByteDataN())))(),
    ByteDataToString: () => (T$.ByteDataToString = dart.constFn(dart.fnType(core.String, [typed_data.ByteData])))(),
    IdentityMapOfString$FutureOfString: () => (T$.IdentityMapOfString$FutureOfString = dart.constFn(_js_helper.IdentityMap$(core.String, T$.FutureOfString())))(),
    IdentityMapOfString$Future: () => (T$.IdentityMapOfString$Future = dart.constFn(_js_helper.IdentityMap$(core.String, async.Future)))()
>>>>>>> feature-b
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
<<<<<<< HEAD
    get C0() {
      return C[0] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 0.25,
        [Cubic_b]: 0.1,
        [Cubic_a]: 0.25
=======
    get C1() {
      return C[1] = dart.const({
        __proto__: message_codecs.JSONMethodCodec.prototype
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "flutter/navigation"
>>>>>>> feature-b
      });
    },
    get C2() {
      return C[2] = dart.const({
<<<<<<< HEAD
        __proto__: scroll_position.ScrollPositionAlignmentPolicy.prototype,
        [_name]: "ScrollPositionAlignmentPolicy.explicit",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const(new _js_helper.PrivateSymbol.new('_maxScrollExtent', _maxScrollExtent));
    },
    get C4() {
      return C[4] = dart.const(new _js_helper.PrivateSymbol.new('_minScrollExtent', _minScrollExtent));
    },
    get C5() {
      return C[5] = dart.const(new _js_helper.PrivateSymbol.new('_viewportDimension', _viewportDimension));
    },
    get C6() {
      return C[6] = dart.const(new _js_helper.PrivateSymbol.new('_pixels', _pixels));
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name$]: "Axis.horizontal",
        index: 0
      });
    },
    get C8() {
      return C[8] = dart.constList([], framework.Widget);
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_name$0]: "DragStartBehavior.start",
        index: 1
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$1]: "Clip.hardEdge",
        index: 1
=======
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "flutter/platform"
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "flutter/textinput"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: message_codecs.JSONMessageCodec.prototype
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C[5] || CT.C5,
        [BasicMessageChannel_name]: "flutter/keyevent"
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: message_codecs.StringCodec.prototype
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: T$.BasicMessageChannelOfStringN().prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C[7] || CT.C7,
        [BasicMessageChannel_name]: "flutter/lifecycle"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C[5] || CT.C5,
        [BasicMessageChannel_name]: "flutter/system"
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C[10] || CT.C10,
        [BasicMessageChannel_name]: "flutter/accessibility"
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[10] || CT.C10
>>>>>>> feature-b
      });
    },
    get C11() {
      return C[11] = dart.const({
<<<<<<< HEAD
        __proto__: basic_types.Axis.prototype,
        [_name$]: "Axis.vertical",
        index: 1
=======
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[12] || CT.C12,
        [MethodChannel_name]: "flutter/platform_views"
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "flutter/skia"
>>>>>>> feature-b
      });
    },
    get C14() {
      return C[14] = dart.const({
<<<<<<< HEAD
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewportFraction",
        [_Location_column]: 17,
        [_Location_line]: 943,
        [_Location_file]: null
=======
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[12] || CT.C12,
        [MethodChannel_name]: "flutter/mousecursor"
>>>>>>> feature-b
      });
    },
    get C15() {
      return C[15] = dart.const({
<<<<<<< HEAD
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "delegate",
        [_Location_column]: 17,
        [_Location_line]: 944,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.constList([C[14] || CT.C14, C[15] || CT.C15], widget_inspector._Location);
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[13] || CT.C13,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 942,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/widgets/page_view.dart"
=======
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[12] || CT.C12,
        [MethodChannel_name]: "flutter/restoration"
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[12] || CT.C12,
        [MethodChannel_name]: "flutter/deferredcomponent"
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "flutter/localization"
>>>>>>> feature-b
      });
    },
    get C18() {
      return C[18] = dart.const({
<<<<<<< HEAD
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cacheExtent",
        [_Location_column]: 13,
        [_Location_line]: 936,
        [_Location_file]: null
=======
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Message corrupted"
>>>>>>> feature-b
      });
    },
    get C19() {
      return C[19] = dart.const({
<<<<<<< HEAD
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cacheExtentStyle",
        [_Location_column]: 13,
        [_Location_line]: 937,
        [_Location_file]: null
=======
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Invalid method call"
>>>>>>> feature-b
      });
    },
    get C20() {
      return C[20] = dart.const({
<<<<<<< HEAD
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "axisDirection",
        [_Location_column]: 13,
        [_Location_line]: 938,
        [_Location_file]: null
=======
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Expected envelope, got nothing"
>>>>>>> feature-b
      });
    },
    get C21() {
      return C[21] = dart.const({
<<<<<<< HEAD
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "offset",
        [_Location_column]: 13,
        [_Location_line]: 939,
        [_Location_file]: null
=======
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Invalid envelope"
>>>>>>> feature-b
      });
    },
    get C22() {
      return C[22] = dart.const({
<<<<<<< HEAD
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "clipBehavior",
        [_Location_column]: 13,
        [_Location_line]: 940,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "slivers",
        [_Location_column]: 13,
        [_Location_line]: 941,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.constList([C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23], widget_inspector._Location);
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[17] || CT.C17,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 932,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/widgets/page_view.dart"
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dragStartBehavior",
        [_Location_column]: 9,
        [_Location_line]: 925,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "axisDirection",
        [_Location_column]: 9,
        [_Location_line]: 926,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 9,
        [_Location_line]: 927,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "physics",
        [_Location_column]: 9,
        [_Location_line]: 928,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "restorationId",
        [_Location_column]: 9,
        [_Location_line]: 929,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "scrollBehavior",
        [_Location_column]: 9,
        [_Location_line]: 930,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewportBuilder",
        [_Location_column]: 9,
        [_Location_line]: 931,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.constList([C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32], widget_inspector._Location);
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[25] || CT.C25,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 924,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/widgets/page_view.dart"
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onNotification",
        [_Location_column]: 7,
        [_Location_line]: 913,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 924,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.constList([C[35] || CT.C35, C[36] || CT.C36], widget_inspector._Location);
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[34] || CT.C34,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 912,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/widgets/page_view.dart"
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: page_view.PageScrollPhysics.prototype,
        [ScrollPhysics_parent]: null
      });
    }
  }, false);
  var C = Array(38).fill(void 0);
  var I = [
    "file:///C:/flutter/packages/flutter/lib/src/widgets/page_view.dart",
    "package:flutter/src/widgets/page_view.dart"
  ];
  var initialPage$ = dart.privateName(page_view, "PageController.initialPage");
  var keepPage$ = dart.privateName(page_view, "PageController.keepPage");
  var viewportFraction$ = dart.privateName(page_view, "PageController.viewportFraction");
  page_view.PageController = class PageController extends scroll_controller.ScrollController {
    get initialPage() {
      return this[initialPage$];
    }
    set initialPage(value) {
      super.initialPage = value;
    }
    get keepPage() {
      return this[keepPage$];
    }
    set keepPage(value) {
      super.keepPage = value;
    }
    get viewportFraction() {
      return this[viewportFraction$];
    }
    set viewportFraction(value) {
      super.viewportFraction = value;
    }
    get page() {
      if (!this.positions[$isNotEmpty]) dart.assertFailed("PageController.page cannot be accessed before a PageView is built with it.", I[0], 172, 7, "positions.isNotEmpty");
      if (!(this.positions[$length] === 1)) dart.assertFailed("The page property cannot be read when multiple PageViews are attached to " + "the same PageController.", I[0], 176, 7, "positions.length == 1");
      let position = page_view._PagePosition.as(this.position);
      return position.page;
    }
    animateToPage(page, opts) {
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let curve = opts && 'curve' in opts ? opts.curve : null;
      let position = page_view._PagePosition.as(this.position);
      return position.animateTo(position.getPixelsFromPage(page[$toDouble]()), {duration: duration, curve: curve});
    }
    jumpToPage(page) {
      let position = page_view._PagePosition.as(this.position);
      position.jumpTo(position.getPixelsFromPage(page[$toDouble]()));
    }
    nextPage(opts) {
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let curve = opts && 'curve' in opts ? opts.curve : null;
      return this.animateToPage(dart.nullCheck(this.page)[$round]() + 1, {duration: duration, curve: curve});
    }
    previousPage(opts) {
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let curve = opts && 'curve' in opts ? opts.curve : null;
      return this.animateToPage(dart.nullCheck(this.page)[$round]() - 1, {duration: duration, curve: curve});
    }
    createScrollPosition(physics, context, oldPosition) {
      return new page_view._PagePosition.new({physics: physics, context: context, initialPage: this.initialPage, keepPage: this.keepPage, viewportFraction: this.viewportFraction, oldPosition: oldPosition});
    }
    attach(position) {
      super.attach(position);
      let pagePosition = page_view._PagePosition.as(position);
      pagePosition.viewportFraction = this.viewportFraction;
    }
  };
  (page_view.PageController.new = function(opts) {
    let initialPage = opts && 'initialPage' in opts ? opts.initialPage : 0;
    let keepPage = opts && 'keepPage' in opts ? opts.keepPage : true;
    let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : 1;
    this[initialPage$] = initialPage;
    this[keepPage$] = keepPage;
    this[viewportFraction$] = viewportFraction;
    if (!(initialPage !== null)) dart.assertFailed(null, I[0], 122, 15, "initialPage != null");
    if (!(keepPage !== null)) dart.assertFailed(null, I[0], 123, 15, "keepPage != null");
    if (!(viewportFraction !== null)) dart.assertFailed(null, I[0], 124, 15, "viewportFraction != null");
    if (!(viewportFraction > 0.0)) dart.assertFailed(null, I[0], 125, 15, "viewportFraction > 0.0");
    page_view.PageController.__proto__.new.call(this);
    ;
  }).prototype = page_view.PageController.prototype;
  dart.addTypeTests(page_view.PageController);
  dart.addTypeCaches(page_view.PageController);
  dart.setMethodSignature(page_view.PageController, () => ({
    __proto__: dart.getMethods(page_view.PageController.__proto__),
    animateToPage: dart.fnType(async.Future$(dart.void), [core.int], {}, {curve: curves.Curve, duration: core.Duration}),
    jumpToPage: dart.fnType(dart.void, [core.int]),
    nextPage: dart.fnType(async.Future$(dart.void), [], {}, {curve: curves.Curve, duration: core.Duration}),
    previousPage: dart.fnType(async.Future$(dart.void), [], {}, {curve: curves.Curve, duration: core.Duration})
  }));
  dart.setGetterSignature(page_view.PageController, () => ({
    __proto__: dart.getGetters(page_view.PageController.__proto__),
    page: dart.nullable(core.double)
  }));
  dart.setLibraryUri(page_view.PageController, I[1]);
  dart.setFieldSignature(page_view.PageController, () => ({
    __proto__: dart.getFields(page_view.PageController.__proto__),
    initialPage: dart.finalFieldType(core.int),
    keepPage: dart.finalFieldType(core.bool),
    viewportFraction: dart.finalFieldType(core.double)
  }));
  var viewportFraction$0 = dart.privateName(page_view, "PageMetrics.viewportFraction");
  page_view.PageMetrics = class PageMetrics extends scroll_metrics.FixedScrollMetrics {
    get viewportFraction() {
      return this[viewportFraction$0];
    }
    set viewportFraction(value) {
      super.viewportFraction = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let minScrollExtent = opts && 'minScrollExtent' in opts ? opts.minScrollExtent : null;
      let maxScrollExtent = opts && 'maxScrollExtent' in opts ? opts.maxScrollExtent : null;
      let pixels = opts && 'pixels' in opts ? opts.pixels : null;
      let viewportDimension = opts && 'viewportDimension' in opts ? opts.viewportDimension : null;
      let axisDirection = opts && 'axisDirection' in opts ? opts.axisDirection : null;
      let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : null;
      return new page_view.PageMetrics.new({minScrollExtent: (t0 = minScrollExtent, t0 == null ? this.hasContentDimensions ? this.minScrollExtent : null : t0), maxScrollExtent: (t0$ = maxScrollExtent, t0$ == null ? this.hasContentDimensions ? this.maxScrollExtent : null : t0$), pixels: (t0$0 = pixels, t0$0 == null ? this.hasPixels ? this.pixels : null : t0$0), viewportDimension: (t0$1 = viewportDimension, t0$1 == null ? this.hasViewportDimension ? this.viewportDimension : null : t0$1), axisDirection: (t0$2 = axisDirection, t0$2 == null ? this.axisDirection : t0$2), viewportFraction: (t0$3 = viewportFraction, t0$3 == null ? this.viewportFraction : t0$3)});
    }
    get page() {
      return math.max(core.double, 0.0, this.pixels[$clamp](this.minScrollExtent, this.maxScrollExtent)) / math.max(core.num, 1.0, this.viewportDimension * this.viewportFraction);
    }
  };
  (page_view.PageMetrics.new = function(opts) {
    let minScrollExtent = opts && 'minScrollExtent' in opts ? opts.minScrollExtent : null;
    let maxScrollExtent = opts && 'maxScrollExtent' in opts ? opts.maxScrollExtent : null;
    let pixels = opts && 'pixels' in opts ? opts.pixels : null;
    let viewportDimension = opts && 'viewportDimension' in opts ? opts.viewportDimension : null;
    let axisDirection = opts && 'axisDirection' in opts ? opts.axisDirection : null;
    let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : null;
    this[viewportFraction$0] = viewportFraction;
    page_view.PageMetrics.__proto__.new.call(this, {minScrollExtent: minScrollExtent, maxScrollExtent: maxScrollExtent, pixels: pixels, viewportDimension: viewportDimension, axisDirection: axisDirection});
    ;
  }).prototype = page_view.PageMetrics.prototype;
  dart.addTypeTests(page_view.PageMetrics);
  dart.addTypeCaches(page_view.PageMetrics);
  dart.setMethodSignature(page_view.PageMetrics, () => ({
    __proto__: dart.getMethods(page_view.PageMetrics.__proto__),
    copyWith: dart.fnType(page_view.PageMetrics, [], {axisDirection: dart.nullable(basic_types.AxisDirection), maxScrollExtent: dart.nullable(core.double), minScrollExtent: dart.nullable(core.double), pixels: dart.nullable(core.double), viewportDimension: dart.nullable(core.double), viewportFraction: dart.nullable(core.double)}, {})
  }));
  dart.setGetterSignature(page_view.PageMetrics, () => ({
    __proto__: dart.getGetters(page_view.PageMetrics.__proto__),
    page: dart.nullable(core.double)
  }));
  dart.setLibraryUri(page_view.PageMetrics, I[1]);
  dart.setFieldSignature(page_view.PageMetrics, () => ({
    __proto__: dart.getFields(page_view.PageMetrics.__proto__),
    viewportFraction: dart.finalFieldType(core.double)
  }));
  var _viewportFraction = dart.privateName(page_view, "_viewportFraction");
  var _pageToUseOnStartup = dart.privateName(page_view, "_pageToUseOnStartup");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var Cubic_d = dart.privateName(curves, "Cubic.d");
  var Cubic_c = dart.privateName(curves, "Cubic.c");
  var Cubic_b = dart.privateName(curves, "Cubic.b");
  var Cubic_a = dart.privateName(curves, "Cubic.a");
  var _name = dart.privateName(scroll_position, "_name");
  var _initialPageOffset = dart.privateName(page_view, "_initialPageOffset");
  var _maxScrollExtent = dart.privateName(page_view, "_maxScrollExtent");
  var _maxScrollExtent$ = dart.privateName(scroll_metrics, "_maxScrollExtent");
  var _minScrollExtent = dart.privateName(page_view, "_minScrollExtent");
  var _minScrollExtent$ = dart.privateName(scroll_metrics, "_minScrollExtent");
  var _viewportDimension = dart.privateName(page_view, "_viewportDimension");
  var _viewportDimension$ = dart.privateName(scroll_metrics, "_viewportDimension");
  var _pixels = dart.privateName(page_view, "_pixels");
  var _pixels$ = dart.privateName(scroll_metrics, "_pixels");
  page_view._PagePosition = class _PagePosition extends scroll_position_with_single_context.ScrollPositionWithSingleContext {
    ensureVisible(object, opts) {
      let alignment = opts && 'alignment' in opts ? opts.alignment : 0;
      let duration = opts && 'duration' in opts ? opts.duration : C[0] || CT.C0;
      let curve = opts && 'curve' in opts ? opts.curve : C[1] || CT.C1;
      let alignmentPolicy = opts && 'alignmentPolicy' in opts ? opts.alignmentPolicy : C[2] || CT.C2;
      let targetRenderObject = opts && 'targetRenderObject' in opts ? opts.targetRenderObject : null;
      return super.ensureVisible(object, {alignment: alignment, duration: duration, curve: curve, alignmentPolicy: alignmentPolicy, targetRenderObject: null});
    }
    get viewportFraction() {
      return this[_viewportFraction];
    }
    set viewportFraction(value) {
      if (this[_viewportFraction] === value) return;
      let oldPage = this.page;
      this[_viewportFraction] = value;
      if (oldPage != null) this.forcePixels(this.getPixelsFromPage(oldPage));
    }
    get [_initialPageOffset]() {
      return math.max(core.double, 0.0, this.viewportDimension * (this.viewportFraction - 1) / 2);
    }
    getPageFromPixels(pixels, viewportDimension) {
      let actual = math.max(core.double, 0.0, pixels - this[_initialPageOffset]) / math.max(core.num, 1.0, viewportDimension * this.viewportFraction);
      let round = actual[$roundToDouble]();
      if ((actual - round)[$abs]() < 1e-10) {
        return round;
      }
      return actual;
    }
    getPixelsFromPage(page) {
      return page * this.viewportDimension * this.viewportFraction + this[_initialPageOffset];
    }
    get page() {
      if (!(!this.hasPixels || this.minScrollExtent !== null && this.maxScrollExtent !== null)) dart.assertFailed("Page value is only available after content dimensions are established.", I[0], 388, 7, "!hasPixels || (minScrollExtent != null && maxScrollExtent != null)");
      return !this.hasPixels ? null : this.getPageFromPixels(this.pixels[$clamp](this.minScrollExtent, this.maxScrollExtent), this.viewportDimension);
    }
    saveScrollOffset() {
      let t0;
      t0 = page_storage.PageStorage.of(this.context.storageContext);
      t0 == null ? null : t0.writeState(this.context.storageContext, this.getPageFromPixels(this.pixels, this.viewportDimension));
    }
    restoreScrollOffset() {
      let t0;
      if (!this.hasPixels) {
        let value = T.doubleN().as((t0 = page_storage.PageStorage.of(this.context.storageContext), t0 == null ? null : t0.readState(this.context.storageContext)));
        if (value != null) this[_pageToUseOnStartup] = value;
      }
    }
    saveOffset() {
      this.context.saveOffset(this.getPageFromPixels(this.pixels, this.viewportDimension));
    }
    restoreOffset(offset, opts) {
      let initialRestore = opts && 'initialRestore' in opts ? opts.initialRestore : false;
      if (!(initialRestore !== null)) dart.assertFailed(null, I[0], 415, 12, "initialRestore != null");
      if (!(offset !== null)) dart.assertFailed(null, I[0], 416, 12, "offset != null");
      if (initialRestore) {
        this[_pageToUseOnStartup] = offset;
      } else {
        this.jumpTo(this.getPixelsFromPage(offset));
      }
    }
    applyViewportDimension(viewportDimension) {
      let oldViewportDimensions = this.hasViewportDimension ? this.viewportDimension : null;
      if (viewportDimension === oldViewportDimensions) {
        return true;
      }
      let result = super.applyViewportDimension(viewportDimension);
      let oldPixels = this.hasPixels ? this.pixels : null;
      let page = oldPixels == null || oldViewportDimensions === 0.0 ? this[_pageToUseOnStartup] : this.getPageFromPixels(oldPixels, dart.nullCheck(oldViewportDimensions));
      let newPixels = this.getPixelsFromPage(page);
      if (newPixels !== oldPixels) {
        this.correctPixels(newPixels);
        return false;
      }
      return result;
    }
    applyContentDimensions(minScrollExtent, maxScrollExtent) {
      let newMinScrollExtent = minScrollExtent + this[_initialPageOffset];
      return super.applyContentDimensions(newMinScrollExtent, math.max(core.double, newMinScrollExtent, maxScrollExtent - this[_initialPageOffset]));
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let minScrollExtent = opts && 'minScrollExtent' in opts ? opts.minScrollExtent : null;
      let maxScrollExtent = opts && 'maxScrollExtent' in opts ? opts.maxScrollExtent : null;
      let pixels = opts && 'pixels' in opts ? opts.pixels : null;
      let viewportDimension = opts && 'viewportDimension' in opts ? opts.viewportDimension : null;
      let axisDirection = opts && 'axisDirection' in opts ? opts.axisDirection : null;
      let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : null;
      return new page_view.PageMetrics.new({minScrollExtent: (t0 = minScrollExtent, t0 == null ? this.hasContentDimensions ? this.minScrollExtent : null : t0), maxScrollExtent: (t0$ = maxScrollExtent, t0$ == null ? this.hasContentDimensions ? this.maxScrollExtent : null : t0$), pixels: (t0$0 = pixels, t0$0 == null ? this.hasPixels ? this.pixels : null : t0$0), viewportDimension: (t0$1 = viewportDimension, t0$1 == null ? this.hasViewportDimension ? this.viewportDimension : null : t0$1), axisDirection: (t0$2 = axisDirection, t0$2 == null ? this.axisDirection : t0$2), viewportFraction: (t0$3 = viewportFraction, t0$3 == null ? this.viewportFraction : t0$3)});
    }
    get [_maxScrollExtent$]() {
      return T.doubleN().as(this[$noSuchMethod](new core._Invocation.getter(C[3] || CT.C3)));
    }
    get [_minScrollExtent$]() {
      return T.doubleN().as(this[$noSuchMethod](new core._Invocation.getter(C[4] || CT.C4)));
    }
    get [_viewportDimension$]() {
      return T.doubleN().as(this[$noSuchMethod](new core._Invocation.getter(C[5] || CT.C5)));
    }
    get [_pixels$]() {
      return T.doubleN().as(this[$noSuchMethod](new core._Invocation.getter(C[6] || CT.C6)));
    }
  };
  (page_view._PagePosition.new = function(opts) {
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let initialPage = opts && 'initialPage' in opts ? opts.initialPage : 0;
    let keepPage = opts && 'keepPage' in opts ? opts.keepPage : true;
    let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : 1;
    let oldPosition = opts && 'oldPosition' in opts ? opts.oldPosition : null;
    this.initialPage = initialPage;
    if (!(initialPage !== null)) dart.assertFailed(null, I[0], 312, 15, "initialPage != null");
    if (!(keepPage !== null)) dart.assertFailed(null, I[0], 313, 15, "keepPage != null");
    if (!(viewportFraction !== null)) dart.assertFailed(null, I[0], 314, 15, "viewportFraction != null");
    if (!(viewportFraction > 0.0)) dart.assertFailed(null, I[0], 315, 15, "viewportFraction > 0.0");
    this[_viewportFraction] = viewportFraction;
    this[_pageToUseOnStartup] = initialPage[$toDouble]();
    page_view._PagePosition.__proto__.new.call(this, {physics: physics, context: context, initialPixels: null, keepScrollOffset: keepPage, oldPosition: oldPosition});
    ;
  }).prototype = page_view._PagePosition.prototype;
  dart.addTypeTests(page_view._PagePosition);
  dart.addTypeCaches(page_view._PagePosition);
  page_view._PagePosition[dart.implements] = () => [page_view.PageMetrics];
  dart.setMethodSignature(page_view._PagePosition, () => ({
    __proto__: dart.getMethods(page_view._PagePosition.__proto__),
    getPageFromPixels: dart.fnType(core.double, [core.double, core.double]),
    getPixelsFromPage: dart.fnType(core.double, [core.double]),
    copyWith: dart.fnType(page_view.PageMetrics, [], {axisDirection: dart.nullable(basic_types.AxisDirection), maxScrollExtent: dart.nullable(core.double), minScrollExtent: dart.nullable(core.double), pixels: dart.nullable(core.double), viewportDimension: dart.nullable(core.double), viewportFraction: dart.nullable(core.double)}, {})
  }));
  dart.setGetterSignature(page_view._PagePosition, () => ({
    __proto__: dart.getGetters(page_view._PagePosition.__proto__),
    viewportFraction: core.double,
    [_initialPageOffset]: core.double,
    page: dart.nullable(core.double),
    [_maxScrollExtent$]: dart.nullable(core.double),
    [_minScrollExtent$]: dart.nullable(core.double),
    [_viewportDimension$]: dart.nullable(core.double),
    [_pixels$]: dart.nullable(core.double)
  }));
  dart.setSetterSignature(page_view._PagePosition, () => ({
    __proto__: dart.getSetters(page_view._PagePosition.__proto__),
    viewportFraction: core.double
  }));
  dart.setLibraryUri(page_view._PagePosition, I[1]);
  dart.setFieldSignature(page_view._PagePosition, () => ({
    __proto__: dart.getFields(page_view._PagePosition.__proto__),
    initialPage: dart.finalFieldType(core.int),
    [_pageToUseOnStartup]: dart.fieldType(core.double),
    [_viewportFraction]: dart.fieldType(core.double)
  }));
  var allowImplicitScrolling$ = dart.privateName(page_view, "_ForceImplicitScrollPhysics.allowImplicitScrolling");
  page_view._ForceImplicitScrollPhysics = class _ForceImplicitScrollPhysics extends scroll_physics.ScrollPhysics {
    get allowImplicitScrolling() {
      return this[allowImplicitScrolling$];
    }
    set allowImplicitScrolling(value) {
      super.allowImplicitScrolling = value;
    }
    applyTo(ancestor) {
      return new page_view._ForceImplicitScrollPhysics.new({allowImplicitScrolling: this.allowImplicitScrolling, parent: this.buildParent(ancestor)});
    }
  };
  (page_view._ForceImplicitScrollPhysics.new = function(opts) {
    let allowImplicitScrolling = opts && 'allowImplicitScrolling' in opts ? opts.allowImplicitScrolling : null;
    let parent = opts && 'parent' in opts ? opts.parent : null;
    this[allowImplicitScrolling$] = allowImplicitScrolling;
    if (!(allowImplicitScrolling !== null)) dart.assertFailed(null, I[0], 475, 15, "allowImplicitScrolling != null");
    page_view._ForceImplicitScrollPhysics.__proto__.new.call(this, {parent: parent});
    ;
  }).prototype = page_view._ForceImplicitScrollPhysics.prototype;
  dart.addTypeTests(page_view._ForceImplicitScrollPhysics);
  dart.addTypeCaches(page_view._ForceImplicitScrollPhysics);
  dart.setMethodSignature(page_view._ForceImplicitScrollPhysics, () => ({
    __proto__: dart.getMethods(page_view._ForceImplicitScrollPhysics.__proto__),
    applyTo: dart.fnType(page_view._ForceImplicitScrollPhysics, [dart.nullable(scroll_physics.ScrollPhysics)])
  }));
  dart.setLibraryUri(page_view._ForceImplicitScrollPhysics, I[1]);
  dart.setFieldSignature(page_view._ForceImplicitScrollPhysics, () => ({
    __proto__: dart.getFields(page_view._ForceImplicitScrollPhysics.__proto__),
    allowImplicitScrolling: dart.finalFieldType(core.bool)
  }));
  var _getPage = dart.privateName(page_view, "_getPage");
  var _getPixels = dart.privateName(page_view, "_getPixels");
  var _getTargetPixels = dart.privateName(page_view, "_getTargetPixels");
  page_view.PageScrollPhysics = class PageScrollPhysics extends scroll_physics.ScrollPhysics {
    applyTo(ancestor) {
      return new page_view.PageScrollPhysics.new({parent: this.buildParent(ancestor)});
    }
    [_getPage](position) {
      if (page_view._PagePosition.is(position)) return dart.nullCheck(position.page);
      return position.pixels / position.viewportDimension;
    }
    [_getPixels](position, page) {
      if (page_view._PagePosition.is(position)) return position.getPixelsFromPage(page);
      return page * position.viewportDimension;
    }
    [_getTargetPixels](position, tolerance, velocity) {
      let page = this[_getPage](position);
      if (velocity < -tolerance.velocity)
        page = page - 0.5;
      else if (velocity > tolerance.velocity) page = page + 0.5;
      return this[_getPixels](position, page[$roundToDouble]());
    }
    createBallisticSimulation(position, velocity) {
      if (velocity <= 0.0 && position.pixels <= position.minScrollExtent || velocity >= 0.0 && position.pixels >= position.maxScrollExtent) return super.createBallisticSimulation(position, velocity);
      let tolerance = this.tolerance;
      let target = this[_getTargetPixels](position, tolerance, velocity);
      if (target !== position.pixels) return new spring_simulation.ScrollSpringSimulation.new(this.spring, position.pixels, target, velocity, {tolerance: tolerance});
      return null;
    }
    get allowImplicitScrolling() {
      return false;
    }
  };
  (page_view.PageScrollPhysics.new = function(opts) {
    let parent = opts && 'parent' in opts ? opts.parent : null;
    page_view.PageScrollPhysics.__proto__.new.call(this, {parent: parent});
    ;
  }).prototype = page_view.PageScrollPhysics.prototype;
  dart.addTypeTests(page_view.PageScrollPhysics);
  dart.addTypeCaches(page_view.PageScrollPhysics);
  dart.setMethodSignature(page_view.PageScrollPhysics, () => ({
    __proto__: dart.getMethods(page_view.PageScrollPhysics.__proto__),
    applyTo: dart.fnType(page_view.PageScrollPhysics, [dart.nullable(scroll_physics.ScrollPhysics)]),
    [_getPage]: dart.fnType(core.double, [scroll_metrics.ScrollMetrics]),
    [_getPixels]: dart.fnType(core.double, [scroll_metrics.ScrollMetrics, core.double]),
    [_getTargetPixels]: dart.fnType(core.double, [scroll_metrics.ScrollMetrics, tolerance.Tolerance, core.double])
  }));
  dart.setLibraryUri(page_view.PageScrollPhysics, I[1]);
  var allowImplicitScrolling$0 = dart.privateName(page_view, "PageView.allowImplicitScrolling");
  var restorationId$ = dart.privateName(page_view, "PageView.restorationId");
  var scrollDirection$ = dart.privateName(page_view, "PageView.scrollDirection");
  var reverse$ = dart.privateName(page_view, "PageView.reverse");
  var controller$ = dart.privateName(page_view, "PageView.controller");
  var physics$ = dart.privateName(page_view, "PageView.physics");
  var pageSnapping$ = dart.privateName(page_view, "PageView.pageSnapping");
  var onPageChanged$ = dart.privateName(page_view, "PageView.onPageChanged");
  var childrenDelegate$ = dart.privateName(page_view, "PageView.childrenDelegate");
  var dragStartBehavior$ = dart.privateName(page_view, "PageView.dragStartBehavior");
  var clipBehavior$ = dart.privateName(page_view, "PageView.clipBehavior");
  var scrollBehavior$ = dart.privateName(page_view, "PageView.scrollBehavior");
  var _name$ = dart.privateName(basic_types, "_name");
  var _name$0 = dart.privateName(recognizer, "_name");
  var _name$1 = dart.privateName(ui, "_name");
  page_view.PageView = class PageView extends framework.StatefulWidget {
    get allowImplicitScrolling() {
      return this[allowImplicitScrolling$0];
    }
    set allowImplicitScrolling(value) {
      super.allowImplicitScrolling = value;
    }
    get restorationId() {
      return this[restorationId$];
    }
    set restorationId(value) {
      super.restorationId = value;
    }
    get scrollDirection() {
      return this[scrollDirection$];
    }
    set scrollDirection(value) {
      super.scrollDirection = value;
    }
    get reverse() {
      return this[reverse$];
    }
    set reverse(value) {
      super.reverse = value;
    }
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get physics() {
      return this[physics$];
    }
    set physics(value) {
      super.physics = value;
    }
    get pageSnapping() {
      return this[pageSnapping$];
    }
    set pageSnapping(value) {
      super.pageSnapping = value;
    }
    get onPageChanged() {
      return this[onPageChanged$];
    }
    set onPageChanged(value) {
      super.onPageChanged = value;
    }
    get childrenDelegate() {
      return this[childrenDelegate$];
    }
    set childrenDelegate(value) {
      super.childrenDelegate = value;
    }
    get dragStartBehavior() {
      return this[dragStartBehavior$];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    get clipBehavior() {
      return this[clipBehavior$];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    get scrollBehavior() {
      return this[scrollBehavior$];
    }
    set scrollBehavior(value) {
      super.scrollBehavior = value;
    }
    createState() {
      return new page_view._PageViewState.new();
    }
  };
  (page_view.PageView.new = function(opts) {
    let t0;
    let key = opts && 'key' in opts ? opts.key : null;
    let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[7] || CT.C7;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let pageSnapping = opts && 'pageSnapping' in opts ? opts.pageSnapping : true;
    let onPageChanged = opts && 'onPageChanged' in opts ? opts.onPageChanged : null;
    let children = opts && 'children' in opts ? opts.children : C[8] || CT.C8;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[9] || CT.C9;
    let allowImplicitScrolling = opts && 'allowImplicitScrolling' in opts ? opts.allowImplicitScrolling : false;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[10] || CT.C10;
    let scrollBehavior = opts && 'scrollBehavior' in opts ? opts.scrollBehavior : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[scrollDirection$] = scrollDirection;
    this[reverse$] = reverse;
    this[physics$] = physics;
    this[pageSnapping$] = pageSnapping;
    this[onPageChanged$] = onPageChanged;
    this[dragStartBehavior$] = dragStartBehavior;
    this[allowImplicitScrolling$0] = allowImplicitScrolling;
    this[restorationId$] = restorationId;
    this[clipBehavior$] = clipBehavior;
    this[scrollBehavior$] = scrollBehavior;
    if (!(allowImplicitScrolling !== null)) dart.assertFailed(null, I[0], 640, 15, "allowImplicitScrolling != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[0], 641, 15, "clipBehavior != null");
    this[controller$] = (t0 = controller, t0 == null ? page_view._defaultPageController : t0);
    this[childrenDelegate$] = new sliver.SliverChildListDelegate.new(children);
    page_view.PageView.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = page_view.PageView.prototype;
  (page_view.PageView.builder = function(opts) {
    let t0;
    let key = opts && 'key' in opts ? opts.key : null;
    let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[7] || CT.C7;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let pageSnapping = opts && 'pageSnapping' in opts ? opts.pageSnapping : true;
    let onPageChanged = opts && 'onPageChanged' in opts ? opts.onPageChanged : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[9] || CT.C9;
    let allowImplicitScrolling = opts && 'allowImplicitScrolling' in opts ? opts.allowImplicitScrolling : false;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[10] || CT.C10;
    let scrollBehavior = opts && 'scrollBehavior' in opts ? opts.scrollBehavior : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[scrollDirection$] = scrollDirection;
    this[reverse$] = reverse;
    this[physics$] = physics;
    this[pageSnapping$] = pageSnapping;
    this[onPageChanged$] = onPageChanged;
    this[dragStartBehavior$] = dragStartBehavior;
    this[allowImplicitScrolling$0] = allowImplicitScrolling;
    this[restorationId$] = restorationId;
    this[clipBehavior$] = clipBehavior;
    this[scrollBehavior$] = scrollBehavior;
    if (!(allowImplicitScrolling !== null)) dart.assertFailed(null, I[0], 679, 15, "allowImplicitScrolling != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[0], 680, 15, "clipBehavior != null");
    this[controller$] = (t0 = controller, t0 == null ? page_view._defaultPageController : t0);
    this[childrenDelegate$] = new sliver.SliverChildBuilderDelegate.new(itemBuilder, {childCount: itemCount});
    page_view.PageView.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = page_view.PageView.prototype;
  (page_view.PageView.custom = function(opts) {
    let t0;
    let key = opts && 'key' in opts ? opts.key : null;
    let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[7] || CT.C7;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let pageSnapping = opts && 'pageSnapping' in opts ? opts.pageSnapping : true;
    let onPageChanged = opts && 'onPageChanged' in opts ? opts.onPageChanged : null;
    let childrenDelegate = opts && 'childrenDelegate' in opts ? opts.childrenDelegate : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[9] || CT.C9;
    let allowImplicitScrolling = opts && 'allowImplicitScrolling' in opts ? opts.allowImplicitScrolling : false;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[10] || CT.C10;
    let scrollBehavior = opts && 'scrollBehavior' in opts ? opts.scrollBehavior : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[scrollDirection$] = scrollDirection;
    this[reverse$] = reverse;
    this[physics$] = physics;
    this[pageSnapping$] = pageSnapping;
    this[onPageChanged$] = onPageChanged;
    this[childrenDelegate$] = childrenDelegate;
    this[dragStartBehavior$] = dragStartBehavior;
    this[allowImplicitScrolling$0] = allowImplicitScrolling;
    this[restorationId$] = restorationId;
    this[clipBehavior$] = clipBehavior;
    this[scrollBehavior$] = scrollBehavior;
    if (!(childrenDelegate !== null)) dart.assertFailed(null, I[0], 783, 15, "childrenDelegate != null");
    if (!(allowImplicitScrolling !== null)) dart.assertFailed(null, I[0], 784, 15, "allowImplicitScrolling != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[0], 785, 15, "clipBehavior != null");
    this[controller$] = (t0 = controller, t0 == null ? page_view._defaultPageController : t0);
    page_view.PageView.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = page_view.PageView.prototype;
  dart.addTypeTests(page_view.PageView);
  dart.addTypeCaches(page_view.PageView);
  dart.setMethodSignature(page_view.PageView, () => ({
    __proto__: dart.getMethods(page_view.PageView.__proto__),
    createState: dart.fnType(page_view._PageViewState, [])
  }));
  dart.setLibraryUri(page_view.PageView, I[1]);
  dart.setFieldSignature(page_view.PageView, () => ({
    __proto__: dart.getFields(page_view.PageView.__proto__),
    allowImplicitScrolling: dart.finalFieldType(core.bool),
    restorationId: dart.finalFieldType(dart.nullable(core.String)),
    scrollDirection: dart.finalFieldType(basic_types.Axis),
    reverse: dart.finalFieldType(core.bool),
    controller: dart.finalFieldType(page_view.PageController),
    physics: dart.finalFieldType(dart.nullable(scroll_physics.ScrollPhysics)),
    pageSnapping: dart.finalFieldType(core.bool),
    onPageChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int]))),
    childrenDelegate: dart.finalFieldType(sliver.SliverChildDelegate),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    clipBehavior: dart.finalFieldType(ui.Clip),
    scrollBehavior: dart.finalFieldType(dart.nullable(scroll_configuration.ScrollBehavior))
  }));
  var _lastReportedPage = dart.privateName(page_view, "_lastReportedPage");
  var _getDirection = dart.privateName(page_view, "_getDirection");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  page_view._PageViewState = class _PageViewState extends framework.State$(page_view.PageView) {
    initState() {
      super.initState();
      this[_lastReportedPage] = this.widget.controller.initialPage;
    }
    [_getDirection](context) {
      switch (this.widget.scrollDirection) {
        case C[7] || CT.C7:
        {
          if (!debug.debugCheckHasDirectionality(context)) dart.assertFailed(null, I[0], 892, 16, "debugCheckHasDirectionality(context)");
          let textDirection = basic.Directionality.of(context);
          let axisDirection = basic_types.textDirectionToAxisDirection(textDirection);
          return this.widget.reverse ? basic_types.flipAxisDirection(axisDirection) : axisDirection;
        }
        case C[11] || CT.C11:
        {
          return this.widget.reverse ? basic_types.AxisDirection.up : basic_types.AxisDirection.down;
        }
      }
    }
    build(context) {
      let t1, t0, t1$, t0$, t0$0;
      let axisDirection = this[_getDirection](context);
      let physics = new page_view._ForceImplicitScrollPhysics.new({allowImplicitScrolling: this.widget.allowImplicitScrolling}).applyTo(this.widget.pageSnapping ? page_view._kPagePhysics.applyTo((t0 = this.widget.physics, t0 == null ? (t1 = this.widget.scrollBehavior, t1 == null ? null : t1.getScrollPhysics(context)) : t0)) : (t0$ = this.widget.physics, t0$ == null ? (t1$ = this.widget.scrollBehavior, t1$ == null ? null : t1$.getScrollPhysics(context)) : t0$));
      return new (T.NotificationListenerOfScrollNotification()).new({onNotification: dart.fn(notification => {
          if (notification.depth === 0 && this.widget.onPageChanged != null && scroll_notification.ScrollUpdateNotification.is(notification)) {
            let metrics = page_view.PageMetrics.as(notification.metrics);
            let currentPage = dart.nullCheck(metrics.page)[$round]();
            if (currentPage !== this[_lastReportedPage]) {
              this[_lastReportedPage] = currentPage;
              dart.nullCheck(this.widget.onPageChanged)(currentPage);
            }
          }
          return false;
        }, T.ScrollNotificationTobool()), child: new scrollable.Scrollable.new({dragStartBehavior: this.widget.dragStartBehavior, axisDirection: axisDirection, controller: this.widget.controller, physics: physics, restorationId: this.widget.restorationId, scrollBehavior: (t0$0 = this.widget.scrollBehavior, t0$0 == null ? scroll_configuration.ScrollConfiguration.of(context).copyWith({scrollbars: false}) : t0$0), viewportBuilder: dart.fn((context, position) => new viewport.Viewport.new({cacheExtent: this.widget.allowImplicitScrolling ? 1.0 : 0.0, cacheExtentStyle: viewport$.CacheExtentStyle.viewport, axisDirection: axisDirection, offset: position, clipBehavior: this.widget.clipBehavior, slivers: T.JSArrayOfWidget().of([new sliver_fill.SliverFillViewport.new({viewportFraction: this.widget.controller.viewportFraction, delegate: this.widget.childrenDelegate, $creationLocationd_0dea112b090073317d4: C[12] || CT.C12})]), $creationLocationd_0dea112b090073317d4: C[16] || CT.C16}), T.BuildContextAndViewportOffsetToViewport()), $creationLocationd_0dea112b090073317d4: C[24] || CT.C24}), $creationLocationd_0dea112b090073317d4: C[33] || CT.C33});
    }
    debugFillProperties(description) {
      super.debugFillProperties(description);
      description.add(new (T.EnumPropertyOfAxis()).new("scrollDirection", this.widget.scrollDirection));
      description.add(new diagnostics.FlagProperty.new("reverse", {value: this.widget.reverse, ifTrue: "reversed"}));
      description.add(new (T.DiagnosticsPropertyOfPageController()).new("controller", this.widget.controller, {showName: false}));
      description.add(new (T.DiagnosticsPropertyOfScrollPhysics()).new("physics", this.widget.physics, {showName: false}));
      description.add(new diagnostics.FlagProperty.new("pageSnapping", {value: this.widget.pageSnapping, ifFalse: "snapping disabled"}));
      description.add(new diagnostics.FlagProperty.new("allowImplicitScrolling", {value: this.widget.allowImplicitScrolling, ifTrue: "allow implicit scrolling"}));
    }
  };
  (page_view._PageViewState.new = function() {
    this[_lastReportedPage] = 0;
    page_view._PageViewState.__proto__.new.call(this);
    ;
  }).prototype = page_view._PageViewState.prototype;
  dart.addTypeTests(page_view._PageViewState);
  dart.addTypeCaches(page_view._PageViewState);
  dart.setMethodSignature(page_view._PageViewState, () => ({
    __proto__: dart.getMethods(page_view._PageViewState.__proto__),
    [_getDirection]: dart.fnType(basic_types.AxisDirection, [framework.BuildContext]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(page_view._PageViewState, I[1]);
  dart.setFieldSignature(page_view._PageViewState, () => ({
    __proto__: dart.getFields(page_view._PageViewState.__proto__),
    [_lastReportedPage]: dart.fieldType(core.int)
  }));
  var ScrollPhysics_parent = dart.privateName(scroll_physics, "ScrollPhysics.parent");
  dart.defineLazy(page_view, {
    /*page_view._defaultPageController*/get _defaultPageController() {
      return new page_view.PageController.new();
    },
    /*page_view._kPagePhysics*/get _kPagePhysics() {
      return C[37] || CT.C37;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/widgets/page_view.dart", {
    "package:flutter/src/widgets/page_view.dart": page_view
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["page_view.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+HY;;;;;;IAiBC;;;;;;IAME;;;;;;;AAoBX,WACE,AAAU,+CACV;AAEF,YACE,AAAU,AAAO,4BAAG,sBAAC,AACrB,8EACA;AAEkB,qBAAyB,2BAAT;AACpC,YAAO,AAAS,SAAD;IACjB;kBASM;UACc;UACH;AAEK,qBAAyB,2BAAT;AACpC,YAAO,AAAS,SAAD,WACb,AAAS,QAAD,mBAAmB,AAAK,IAAD,2BACrB,QAAQ,SACX,KAAK;IAEhB;eAMoB;AACE,qBAAyB,2BAAT;AACwB,MAA5D,AAAS,QAAD,QAAQ,AAAS,QAAD,mBAAmB,AAAK,IAAD;IACjD;;UAQ0C;UAAyB;AACjE,YAAO,oBAAkB,AAAE,AAAQ,eAAd,uBAAgB,cAAa,QAAQ,SAAS,KAAK;IAC1E;;UAQ8C;UAAyB;AACrE,YAAO,oBAAkB,AAAE,AAAQ,eAAd,uBAAgB,cAAa,QAAQ,SAAS,KAAK;IAC1E;yBAGkD,SAAuB,SAAyB;AAChG,YAAO,2CACI,OAAO,WACP,OAAO,eACH,4BACH,iCACQ,oCACL,WAAW;IAE5B;WAG2B;AACH,MAAhB,aAAO,QAAQ;AACD,yBAAwB,2BAAT,QAAQ;AACK,MAAhD,AAAa,YAAD,oBAAoB;IAClC;;;QAlIO;QACA;QACA;IAFA;IACA;IACA;UACK,AAAY,WAAD;UACX,AAAS,QAAD;UACR,AAAiB,gBAAD;UAChB,AAAiB,gBAAD,GAAG;AAP/B;;EAOmC;;;;;;;;;;;;;;;;;;;;;;;IAgLtB;;;;;;;;UA1BH;UACA;UACA;UACA;UACO;UACP;AAER,YAAO,kDAC4B,KAAhB,eAAe,EAAf,aAAoB,4BAA4B,uBAAkB,8BAClD,MAAhB,eAAe,EAAf,cAAoB,4BAA4B,uBAAkB,sBACpE,OAAP,MAAM,EAAN,eAAW,iBAAiB,cAAS,kCACR,OAAlB,iBAAiB,EAAjB,eAAsB,4BAA4B,yBAAoB,8BAC5D,OAAd,aAAa,EAAb,eAAsB,+CACF,OAAjB,gBAAgB,EAAhB,eAAyB;IAE/C;;AAIE,YAAO,AAA8D,uBAArD,KAAK,AAAO,oBAAM,sBAAiB,yBAC5C,mBAAS,KAAK,AAAkB,yBAAE;IAC3C;;;QArCmB;QACA;QACA;QACA;QACM;QACT;;AACX,qEACmB,eAAe,mBACf,eAAe,UACxB,MAAM,qBACK,iBAAiB,iBACrB,aAAa;;EAC7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBA4DS;UACN;UACE;UACH;UACwB;UAChB;AAMd,YAAa,qBACX,MAAM,cACK,SAAS,YACV,QAAQ,SACX,KAAK,mBACK,eAAe,sBACZ;IAExB;;AAG+B;IAAiB;yBAEpB;AAC1B,UAAI,AAAkB,4BAAG,KAAK,EAC5B;AACY,oBAAU;AACC,MAAzB,0BAAoB,KAAK;AACzB,UAAI,OAAO,UACT,AAAuC,iBAA3B,uBAAkB,OAAO;IACzC;;AAQiC,mCAAS,KAAG,AAAkB,AAAyB,0BAAtB,AAAiB,wBAAE,KAAK;IAAE;sBAE5D,QAAe;AAChC,mBAAS,AAA2C,sBAAlC,KAAK,AAAO,MAAD,GAAG,4BAAsB,mBAAS,KAAK,AAAkB,iBAAD,GAAG;AACxF,kBAAQ,AAAO,MAAD;AAC3B,UAAqB,AAAM,CAAtB,AAAO,MAAD,GAAG,KAAK;AACjB,cAAO,MAAK;;AAEd,YAAO,OAAM;IACf;sBAEgC;AAC9B,YAAO,AAAK,AAAoB,AAAmB,KAAxC,GAAG,yBAAoB,wBAAmB;IACvD;;AAIE,YACa,CAAV,kBAAc,iCAA2B,kDAC1C;AAEF,YAAO,EAAC,iBAAY,OAAO,uBAAkB,AAAO,oBAAM,sBAAiB,uBAAkB;IAC/F;;;AAI0H,WAA5G,4BAAG,AAAQ;mBAAX,OAA4B,cAAW,AAAQ,6BAAgB,uBAAkB,aAAQ;IACvG;;;AAIE,WAAK;AACW,oBAAkF,qBAA9D,4BAAG,AAAQ,2CAAX,OAA4B,aAAU,AAAQ;AAChF,YAAI,KAAK,UACP,AAA2B,4BAAL,KAAK;;IAEjC;;AAIkE,MAAhE,AAAQ,wBAAW,uBAAkB,aAAQ;IAC/C;kBAG0B;UAAc;AACtC,YAAO,AAAe,cAAD;AACrB,YAAO,AAAO,MAAD;AACb,UAAI,cAAc;AACY,QAA5B,4BAAsB,MAAM;;AAEK,QAAjC,YAAO,uBAAkB,MAAM;;IAEnC;2BAGmC;AACnB,kCAAwB,4BAA4B,yBAAoB;AACtF,UAAI,AAAkB,iBAAD,KAAI,qBAAqB;AAC5C,cAAO;;AAEE,mBAAe,6BAAuB,iBAAiB;AACpD,sBAAY,iBAAY,cAAS;AAClC,iBAAQ,AAAU,AAAQ,SAAT,YAAY,AAAsB,qBAAD,KAAI,MAAO,4BAAsB,uBAAkB,SAAS,EAAuB,eAArB,qBAAqB;AACrI,sBAAY,uBAAkB,IAAI;AAE/C,UAAI,SAAS,KAAI,SAAS;AACA,QAAxB,mBAAc,SAAS;AACvB,cAAO;;AAET,YAAO,OAAM;IACf;2BAGmC,iBAAwB;AAC5C,+BAAqB,AAAgB,eAAD,GAAG;AACpD,YAAa,8BACX,kBAAkB,EAClB,sBAAS,kBAAkB,EAAE,AAAgB,eAAD,GAAG;IAEnD;;;UAIU;UACA;UACA;UACA;UACO;UACP;AAER,YAAO,kDAC4B,KAAhB,eAAe,EAAf,aAAoB,4BAA4B,uBAAkB,8BAClD,MAAhB,eAAe,EAAf,cAAoB,4BAA4B,uBAAkB,sBACpE,OAAP,MAAM,EAAN,eAAW,iBAAiB,cAAS,kCACR,OAAlB,iBAAiB,EAAjB,eAAsB,4BAA4B,yBAAoB,8BAC5D,OAAd,aAAa,EAAb,eAAsB,+CACF,OAAjB,gBAAgB,EAAhB,eAAyB;IAE/C;;;;;;;;;;;;;;;QAlKyB;QACA;QAClB;QACA;QACE;QACS;IAHX;UAIK,AAAY,WAAD;UACX,AAAS,QAAD;UACR,AAAiB,gBAAD;UAChB,AAAiB,gBAAD,GAAG;IACR,0BAAE,gBAAgB;IAChB,4BAAE,AAAY,WAAD;AACjC,+DACW,OAAO,WACP,OAAO,iBACD,wBACG,QAAQ,eACb,WAAW;;EACzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmKK;;;;;;YARwC;AACjD,YAAO,wEACmB,qCAChB,iBAAY,QAAQ;IAEhC;;;QAXgB;QACC;IADD;UAEJ,AAAuB,sBAAD;AAC7B,4EAAc,MAAM;;EAAC;;;;;;;;;;;;;;;;YA4Be;AACvC,YAAO,8CAA0B,iBAAY,QAAQ;IACvD;eAE8B;AAC5B,UAAa,2BAAT,QAAQ,GACV,MAAoB,gBAAb,AAAS,QAAD;AACjB,YAAO,AAAS,AAAO,SAAR,UAAU,AAAS,QAAD;IACnC;iBAEgC,UAAiB;AAC/C,UAAa,2BAAT,QAAQ,GACV,MAAO,AAAS,SAAD,mBAAmB,IAAI;AACxC,YAAO,AAAK,KAAD,GAAG,AAAS,QAAD;IACxB;uBAEsC,UAAoB,WAAkB;AACnE,iBAAO,eAAS,QAAQ;AAC/B,UAAI,AAAS,QAAD,GAAG,CAAC,AAAU,SAAD;AACZ,QAAX,OAAA,AAAK,IAAD,GAAI;UACL,KAAI,AAAS,QAAD,GAAG,AAAU,SAAD,WAC3B,AAAW,OAAX,AAAK,IAAD,GAAI;AACV,YAAO,kBAAW,QAAQ,EAAE,AAAK,IAAD;IAClC;8BAGoD,UAAiB;AAGnE,UAAK,AAAS,QAAD,IAAI,OAAO,AAAS,AAAO,QAAR,WAAW,AAAS,QAAD,oBAC9C,AAAS,QAAD,IAAI,OAAO,AAAS,AAAO,QAAR,WAAW,AAAS,QAAD,kBACjD,MAAa,iCAA0B,QAAQ,EAAE,QAAQ;AAC3C,sBAAiB;AACpB,mBAAS,uBAAiB,QAAQ,EAAE,SAAS,EAAE,QAAQ;AACpE,UAAI,MAAM,KAAI,AAAS,QAAD,SACpB,MAAO,kDAAuB,aAAQ,AAAS,QAAD,SAAS,MAAM,EAAE,QAAQ,cAAa,SAAS;AAC/F,YAAO;IACT;;AAGmC;IAAK;;;QA3CC;AAAY,kEAAc,MAAM;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2S/D;;;;;;IAGG;;;;;;IAKH;;;;;;IAcA;;;;;;IAIU;;;;;;IAeA;;;;;;IAGV;;;;;;IAGc;;;;;;IAQC;;;;;;IAGF;;;;;;IAKb;;;;;;IAWW;;;;;;;AAGU;IAAgB;;;;QA1PzC;QACA;QACA;QACW;QACX;QACA;QACA;QACQ;QACR;QACA;QACA;QACA;QACA;;IAXA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;UACK,AAAuB,sBAAD;UACtB,AAAa,YAAD;IACR,qBAAa,KAAX,UAAU,EAAV,aAAc;IACV,0BAAE,uCAAwB,QAAQ;AACnD,sDAAW,GAAG;;EAAC;;;QAqBb;QACA;QACA;QACW;QACX;QACA;QACA;QACyB;QACzB;QACA;QACA;QACA;QACA;QACA;;IAZA;IACA;IAEA;IACA;IACA;IAGA;IACA;IACA;IACA;IACA;UACK,AAAuB,sBAAD;UACtB,AAAa,YAAD;IACR,qBAAa,KAAX,UAAU,EAAV,aAAc;IACV,0BAAE,0CAA2B,WAAW,eAAc,SAAS;AAChF,sDAAW,GAAG;;EAAC;;;QAuFb;QACA;QACA;QACW;QACX;QACA;QACA;QACS;QACT;QACA;QACA;QACA;QACA;;IAXA;IACA;IAEA;IACA;IACA;IACS;IACT;IACA;IACA;IACA;IACA;UACK,AAAiB,gBAAD;UAChB,AAAuB,sBAAD;UACtB,AAAa,YAAD;IACR,qBAAa,KAAX,UAAU,EAAV,aAAc;AAC3B,sDAAW,GAAG;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGD,MAAX;AAC2C,MAAjD,0BAAoB,AAAO,AAAW;IACxC;oBAEyC;AACvC,cAAQ,AAAO;;;AAEX,eAAO,kCAA4B,OAAO;AACtB,8BAA+B,wBAAG,OAAO;AACzC,8BAAgB,yCAA6B,aAAa;AAC9E,gBAAO,AAAO,uBAAU,8BAAkB,aAAa,IAAI,aAAa;;;;AAExE,gBAAO,AAAO,uBAAwB,+BAAmB;;;IAE/D;UAG0B;;AACJ,0BAAgB,oBAAc,OAAO;AACrC,oBAAU,AAE5B,uEADwB,AAAO,6CAE/B,AAAO,2BACH,AAAc,iCAAuB,KAAf,AAAO,qBAAA,mBAAW,AAAO,yCAAA,OAAgB,oBAAiB,OAAO,aACxE,MAAf,AAAO,qBAAA,qBAAW,AAAO,0CAAA,OAAgB,qBAAiB,OAAO;AAGvE,YAAO,yEACW,QAAoB;AAClC,cAAI,AAAa,AAAM,YAAP,WAAU,KAAK,AAAO,qCAAsC,gDAAb,YAAY;AACvD,0BAA+B,yBAArB,AAAa,YAAD;AAC9B,8BAA0B,AAAE,eAAd,AAAQ,OAAD;AAC/B,gBAAI,WAAW,KAAI;AACc,cAA/B,0BAAoB,WAAW;AACG,cAAd,AAAC,eAArB,AAAO,2BAAe,WAAW;;;AAGrC,gBAAO;iDAEF,kDACc,AAAO,8CACX,aAAa,cAChB,AAAO,iCACV,OAAO,iBACD,AAAO,4CACgB,OAAtB,AAAO,4BAAA,eAAsC,AAAY,4CAAT,OAAO,wBAAuB,kCAC7E,SAAc,SAAwB,aAC9C,wCAIQ,AAAO,qCAAyB,MAAM,uBAChB,oDACpB,aAAa,UACpB,QAAQ,gBACF,AAAO,mCACJ,wBACf,0DACoB,AAAO,AAAW,mDAC1B,AAAO;IAO/B;wBAGqD;AACb,MAAhC,0BAAoB,WAAW;AACyC,MAA9E,AAAY,WAAD,KAAK,iCAAmB,mBAAmB,AAAO;AACsB,MAAnF,AAAY,WAAD,KAAK,iCAAa,mBAAkB,AAAO,6BAAiB;AAC+B,MAAtG,AAAY,WAAD,KAAK,kDAAoC,cAAc,AAAO,mCAAsB;AACA,MAA/F,AAAY,WAAD,KAAK,iDAAmC,WAAW,AAAO,gCAAmB;AACe,MAAvG,AAAY,WAAD,KAAK,iCAAa,wBAAuB,AAAO,mCAAuB;AAC+C,MAAjI,AAAY,WAAD,KAAK,iCAAa,kCAAiC,AAAO,4CAAgC;IACvG;;;IAjFI,0BAAoB;;;EAkF1B;;;;;;;;;;;;;;;MA5ZqB,gCAAsB;YAAG;;MACtB,uBAAa","file":"../../../../../../../E:/packages/flutter/src/widgets/page_view.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__page_view: page_view
  };
}));

//# sourceMappingURL=page_view.dart.lib.js.map
=======
        __proto__: binding$0._DefaultBinaryMessenger.prototype
      });
    },
    get C23() {
      return C[23] = dart.fn(binding$0.ServicesBinding._parseLicenses, T$.StringToListOfLicenseEntry());
    },
    get C24() {
      return C[24] = dart.constList([], core.String);
    },
    get C25() {
      return C[25] = dart.fn(asset_bundle.AssetBundle._utf8decode, T$.ByteDataToString());
    }
  }, false);
  var C = Array(26).fill(void 0);
  var I = [
    "package:flutter/src/services/system_channels.dart",
    "package:flutter/src/services/message_codecs.dart",
    "file:///C:/flutter/packages/flutter/lib/src/services/message_codecs.dart",
    "file:///C:/flutter/packages/flutter/lib/src/services/platform_channel.dart",
    "package:flutter/src/services/platform_channel.dart",
    "package:flutter/src/services/message_codec.dart",
    "file:///C:/flutter/packages/flutter/lib/src/services/message_codec.dart",
    "file:///C:/flutter/packages/flutter/lib/src/services/restoration.dart",
    "package:flutter/src/services/restoration.dart",
    "package:flutter/src/services/binary_messenger.dart",
    "file:///C:/flutter/packages/flutter/lib/src/services/binding.dart",
    "package:flutter/src/services/binding.dart",
    "package:flutter/src/services/asset_bundle.dart",
    "file:///C:/flutter/packages/flutter/lib/src/services/asset_bundle.dart"
  ];
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  var BasicMessageChannel__binaryMessenger = dart.privateName(platform_channel, "BasicMessageChannel._binaryMessenger");
  var BasicMessageChannel_codec = dart.privateName(platform_channel, "BasicMessageChannel.codec");
  var BasicMessageChannel_name = dart.privateName(platform_channel, "BasicMessageChannel.name");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  system_channels.SystemChannels = class SystemChannels extends core.Object {};
  (system_channels.SystemChannels.__ = function() {
    ;
  }).prototype = system_channels.SystemChannels.prototype;
  dart.addTypeTests(system_channels.SystemChannels);
  dart.addTypeCaches(system_channels.SystemChannels);
  dart.setLibraryUri(system_channels.SystemChannels, I[0]);
  dart.defineLazy(system_channels.SystemChannels, {
    /*system_channels.SystemChannels.navigation*/get navigation() {
      return C[0] || CT.C0;
    },
    /*system_channels.SystemChannels.platform*/get platform() {
      return C[2] || CT.C2;
    },
    /*system_channels.SystemChannels.textInput*/get textInput() {
      return C[3] || CT.C3;
    },
    /*system_channels.SystemChannels.keyEvent*/get keyEvent() {
      return C[4] || CT.C4;
    },
    /*system_channels.SystemChannels.lifecycle*/get lifecycle() {
      return C[6] || CT.C6;
    },
    /*system_channels.SystemChannels.system*/get system() {
      return C[8] || CT.C8;
    },
    /*system_channels.SystemChannels.accessibility*/get accessibility() {
      return C[9] || CT.C9;
    },
    /*system_channels.SystemChannels.platform_views*/get platform_views() {
      return C[11] || CT.C11;
    },
    /*system_channels.SystemChannels.skia*/get skia() {
      return C[13] || CT.C13;
    },
    /*system_channels.SystemChannels.mouseCursor*/get mouseCursor() {
      return C[14] || CT.C14;
    },
    /*system_channels.SystemChannels.restoration*/get restoration() {
      return C[15] || CT.C15;
    },
    /*system_channels.SystemChannels.deferredComponent*/get deferredComponent() {
      return C[16] || CT.C16;
    },
    /*system_channels.SystemChannels.localization*/get localization() {
      return C[17] || CT.C17;
    }
  }, false);
  message_codecs.BinaryCodec = class BinaryCodec extends core.Object {
    decodeMessage(message) {
      return message;
    }
    encodeMessage(message) {
      T$.ByteDataN().as(message);
      return message;
    }
  };
  (message_codecs.BinaryCodec.new = function() {
    ;
  }).prototype = message_codecs.BinaryCodec.prototype;
  dart.addTypeTests(message_codecs.BinaryCodec);
  dart.addTypeCaches(message_codecs.BinaryCodec);
  message_codecs.BinaryCodec[dart.implements] = () => [message_codec.MessageCodec$(typed_data.ByteData)];
  dart.setMethodSignature(message_codecs.BinaryCodec, () => ({
    __proto__: dart.getMethods(message_codecs.BinaryCodec.__proto__),
    decodeMessage: dart.fnType(dart.nullable(typed_data.ByteData), [dart.nullable(typed_data.ByteData)]),
    encodeMessage: dart.fnType(dart.nullable(typed_data.ByteData), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(message_codecs.BinaryCodec, I[1]);
  message_codecs.StringCodec = class StringCodec extends core.Object {
    decodeMessage(message) {
      if (message == null) return null;
      return convert.utf8.decoder.convert(message[$buffer][$asUint8List](message[$offsetInBytes], message[$lengthInBytes]));
    }
    encodeMessage(message) {
      T$.StringN().as(message);
      if (message == null) return null;
      let encoded = convert.utf8.encoder.convert(message);
      return encoded[$buffer][$asByteData]();
    }
  };
  (message_codecs.StringCodec.new = function() {
    ;
  }).prototype = message_codecs.StringCodec.prototype;
  dart.addTypeTests(message_codecs.StringCodec);
  dart.addTypeCaches(message_codecs.StringCodec);
  message_codecs.StringCodec[dart.implements] = () => [message_codec.MessageCodec$(core.String)];
  dart.setMethodSignature(message_codecs.StringCodec, () => ({
    __proto__: dart.getMethods(message_codecs.StringCodec.__proto__),
    decodeMessage: dart.fnType(dart.nullable(core.String), [dart.nullable(typed_data.ByteData)]),
    encodeMessage: dart.fnType(dart.nullable(typed_data.ByteData), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(message_codecs.StringCodec, I[1]);
  message_codecs.JSONMessageCodec = class JSONMessageCodec extends core.Object {
    encodeMessage(message) {
      if (message == null) return null;
      return (C[7] || CT.C7).encodeMessage(convert.json.encode(message));
    }
    decodeMessage(message) {
      if (message == null) return message;
      return convert.json.decode(dart.nullCheck((C[7] || CT.C7).decodeMessage(message)));
    }
  };
  (message_codecs.JSONMessageCodec.new = function() {
    ;
  }).prototype = message_codecs.JSONMessageCodec.prototype;
  dart.addTypeTests(message_codecs.JSONMessageCodec);
  dart.addTypeCaches(message_codecs.JSONMessageCodec);
  message_codecs.JSONMessageCodec[dart.implements] = () => [message_codec.MessageCodec$(dart.nullable(core.Object))];
  dart.setMethodSignature(message_codecs.JSONMessageCodec, () => ({
    __proto__: dart.getMethods(message_codecs.JSONMessageCodec.__proto__),
    encodeMessage: dart.fnType(dart.nullable(typed_data.ByteData), [dart.nullable(core.Object)]),
    decodeMessage: dart.fnType(dart.dynamic, [dart.nullable(typed_data.ByteData)])
  }));
  dart.setLibraryUri(message_codecs.JSONMessageCodec, I[1]);
  message_codecs.JSONMethodCodec = class JSONMethodCodec extends core.Object {
    encodeMethodCall(call) {
      return dart.nullCheck((C[5] || CT.C5).encodeMessage(new (T$.IdentityMapOfString$ObjectN()).from(["method", call.method, "args", call.arguments])));
    }
    decodeMethodCall(methodCall) {
      let decoded = (C[5] || CT.C5).decodeMessage(methodCall);
      if (!core.Map.is(decoded)) dart.throw(new core.FormatException.new("Expected method call Map, got " + dart.str(decoded)));
      let method = decoded[$_get]("method");
      let $arguments = decoded[$_get]("args");
      if (typeof method == 'string') return new message_codec.MethodCall.new(method, $arguments);
      dart.throw(new core.FormatException.new("Invalid method call: " + dart.str(decoded)));
    }
    decodeEnvelope(envelope) {
      let decoded = (C[5] || CT.C5).decodeMessage(envelope);
      if (!core.List.is(decoded)) dart.throw(new core.FormatException.new("Expected envelope List, got " + dart.str(decoded)));
      if (decoded[$length] === 1) return decoded[$_get](0);
      if (decoded[$length] === 3 && typeof decoded[$_get](0) == 'string' && (decoded[$_get](1) == null || typeof decoded[$_get](1) == 'string')) dart.throw(new message_codec.PlatformException.new({code: core.String.as(decoded[$_get](0)), message: core.String.as(decoded[$_get](1)), details: decoded[$_get](2)}));
      if (decoded[$length] === 4 && typeof decoded[$_get](0) == 'string' && (decoded[$_get](1) == null || typeof decoded[$_get](1) == 'string') && (decoded[$_get](3) == null || typeof decoded[$_get](3) == 'string')) dart.throw(new message_codec.PlatformException.new({code: core.String.as(decoded[$_get](0)), message: core.String.as(decoded[$_get](1)), details: decoded[$_get](2), stacktrace: core.String.as(decoded[$_get](3))}));
      dart.throw(new core.FormatException.new("Invalid envelope: " + dart.str(decoded)));
    }
    encodeSuccessEnvelope(result) {
      return dart.nullCheck((C[5] || CT.C5).encodeMessage(T$.JSArrayOfObjectN().of([result])));
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      if (!(code !== null)) dart.assertFailed(null, I[2], 180, 12, "code != null");
      return dart.nullCheck((C[5] || CT.C5).encodeMessage(T$.JSArrayOfObjectN().of([code, message, details])));
    }
  };
  (message_codecs.JSONMethodCodec.new = function() {
    ;
  }).prototype = message_codecs.JSONMethodCodec.prototype;
  dart.addTypeTests(message_codecs.JSONMethodCodec);
  dart.addTypeCaches(message_codecs.JSONMethodCodec);
  message_codecs.JSONMethodCodec[dart.implements] = () => [message_codec.MethodCodec];
  dart.setMethodSignature(message_codecs.JSONMethodCodec, () => ({
    __proto__: dart.getMethods(message_codecs.JSONMethodCodec.__proto__),
    encodeMethodCall: dart.fnType(typed_data.ByteData, [message_codec.MethodCall]),
    decodeMethodCall: dart.fnType(message_codec.MethodCall, [dart.nullable(typed_data.ByteData)]),
    decodeEnvelope: dart.fnType(dart.dynamic, [typed_data.ByteData]),
    encodeSuccessEnvelope: dart.fnType(typed_data.ByteData, [dart.nullable(core.Object)]),
    encodeErrorEnvelope: dart.fnType(typed_data.ByteData, [], {details: dart.nullable(core.Object), message: dart.nullable(core.String)}, {code: core.String})
  }));
  dart.setLibraryUri(message_codecs.JSONMethodCodec, I[1]);
  var FormatException_offset = dart.privateName(core, "FormatException.offset");
  var FormatException_source = dart.privateName(core, "FormatException.source");
  var FormatException_message = dart.privateName(core, "FormatException.message");
  message_codecs.StandardMessageCodec = class StandardMessageCodec extends core.Object {
    encodeMessage(message) {
      if (message == null) return null;
      let buffer = new serialization.WriteBuffer.new();
      this.writeValue(buffer, message);
      return buffer.done();
    }
    decodeMessage(message) {
      if (message == null) return null;
      let buffer = new serialization.ReadBuffer.new(message);
      let result = this.readValue(buffer);
      if (buffer.hasRemaining) dart.throw(C[18] || CT.C18);
      return result;
    }
    writeValue(buffer, value) {
      if (value == null) {
        buffer.putUint8(0);
      } else if (typeof value == 'boolean') {
        buffer.putUint8(dart.test(value) ? 1 : 2);
      } else if (typeof value == 'number') {
        buffer.putUint8(6);
        buffer.putFloat64(value);
      } else if (core.int.is(value)) {
        if (-2147483647 - 1 <= dart.notNull(value) && dart.notNull(value) <= 2147483647) {
          buffer.putUint8(3);
          buffer.putInt32(value);
        } else {
          buffer.putUint8(4);
          buffer.putInt64(value);
        }
      } else if (typeof value == 'string') {
        buffer.putUint8(7);
        let bytes = convert.utf8.encoder.convert(value);
        this.writeSize(buffer, bytes[$length]);
        buffer.putUint8List(bytes);
      } else if (typed_data.Uint8List.is(value)) {
        buffer.putUint8(8);
        this.writeSize(buffer, value[$length]);
        buffer.putUint8List(value);
      } else if (typed_data.Int32List.is(value)) {
        buffer.putUint8(9);
        this.writeSize(buffer, value[$length]);
        buffer.putInt32List(value);
      } else if (typed_data.Int64List.is(value)) {
        buffer.putUint8(10);
        this.writeSize(buffer, value[$length]);
        buffer.putInt64List(value);
      } else if (typed_data.Float64List.is(value)) {
        buffer.putUint8(11);
        this.writeSize(buffer, value[$length]);
        buffer.putFloat64List(value);
      } else if (core.List.is(value)) {
        buffer.putUint8(12);
        this.writeSize(buffer, value[$length]);
        for (let item of value) {
          this.writeValue(buffer, item);
        }
      } else if (core.Map.is(value)) {
        buffer.putUint8(13);
        this.writeSize(buffer, value[$length]);
        value[$forEach](dart.fn((key, value) => {
          this.writeValue(buffer, key);
          this.writeValue(buffer, value);
        }, T$.ObjectNAndObjectNTovoid()));
      } else {
        dart.throw(new core.ArgumentError.value(value));
      }
    }
    readValue(buffer) {
      if (!buffer.hasRemaining) dart.throw(C[18] || CT.C18);
      let type = buffer.getUint8();
      return this.readValueOfType(type, buffer);
    }
    readValueOfType(type, buffer) {
      switch (type) {
        case 0:
        {
          return null;
        }
        case 1:
        {
          return true;
        }
        case 2:
        {
          return false;
        }
        case 3:
        {
          return buffer.getInt32();
        }
        case 4:
        {
          return buffer.getInt64();
        }
        case 6:
        {
          return buffer.getFloat64();
        }
        case 5:
        case 7:
        {
          let length = this.readSize(buffer);
          return convert.utf8.decoder.convert(buffer.getUint8List(length));
        }
        case 8:
        {
          let length = this.readSize(buffer);
          return buffer.getUint8List(length);
        }
        case 9:
        {
          let length = this.readSize(buffer);
          return buffer.getInt32List(length);
        }
        case 10:
        {
          let length = this.readSize(buffer);
          return buffer.getInt64List(length);
        }
        case 11:
        {
          let length = this.readSize(buffer);
          return buffer.getFloat64List(length);
        }
        case 12:
        {
          let length = this.readSize(buffer);
          let result = T$.ListOfObjectN().filled(length, null, {growable: false});
          for (let i = 0; i < length; i = i + 1)
            result[$_set](i, this.readValue(buffer));
          return result;
        }
        case 13:
        {
          let length = this.readSize(buffer);
          let result = new (T$.LinkedMapOfObjectN$ObjectN()).new();
          for (let i = 0; i < length; i = i + 1)
            result[$_set](this.readValue(buffer), this.readValue(buffer));
          return result;
        }
        default:
        {
          dart.throw(C[18] || CT.C18);
        }
      }
    }
    writeSize(buffer, value) {
      if (!(0 <= value && value <= 4294967295)) dart.assertFailed(null, I[2], 491, 12, "0 <= value && value <= 0xffffffff");
      if (value < 254) {
        buffer.putUint8(value);
      } else if (value <= 65535) {
        buffer.putUint8(254);
        buffer.putUint16(value);
      } else {
        buffer.putUint8(255);
        buffer.putUint32(value);
      }
    }
    readSize(buffer) {
      let value = buffer.getUint8();
      switch (value) {
        case 254:
        {
          return buffer.getUint16();
        }
        case 255:
        {
          return buffer.getUint32();
        }
        default:
        {
          return value;
        }
      }
    }
  };
  (message_codecs.StandardMessageCodec.new = function() {
    ;
  }).prototype = message_codecs.StandardMessageCodec.prototype;
  dart.addTypeTests(message_codecs.StandardMessageCodec);
  dart.addTypeCaches(message_codecs.StandardMessageCodec);
  message_codecs.StandardMessageCodec[dart.implements] = () => [message_codec.MessageCodec$(dart.nullable(core.Object))];
  dart.setMethodSignature(message_codecs.StandardMessageCodec, () => ({
    __proto__: dart.getMethods(message_codecs.StandardMessageCodec.__proto__),
    encodeMessage: dart.fnType(dart.nullable(typed_data.ByteData), [dart.nullable(core.Object)]),
    decodeMessage: dart.fnType(dart.dynamic, [dart.nullable(typed_data.ByteData)]),
    writeValue: dart.fnType(dart.void, [serialization.WriteBuffer, dart.nullable(core.Object)]),
    readValue: dart.fnType(dart.nullable(core.Object), [serialization.ReadBuffer]),
    readValueOfType: dart.fnType(dart.nullable(core.Object), [core.int, serialization.ReadBuffer]),
    writeSize: dart.fnType(dart.void, [serialization.WriteBuffer, core.int]),
    readSize: dart.fnType(core.int, [serialization.ReadBuffer])
  }));
  dart.setLibraryUri(message_codecs.StandardMessageCodec, I[1]);
  dart.defineLazy(message_codecs.StandardMessageCodec, {
    /*message_codecs.StandardMessageCodec._valueNull*/get _valueNull() {
      return 0;
    },
    /*message_codecs.StandardMessageCodec._valueTrue*/get _valueTrue() {
      return 1;
    },
    /*message_codecs.StandardMessageCodec._valueFalse*/get _valueFalse() {
      return 2;
    },
    /*message_codecs.StandardMessageCodec._valueInt32*/get _valueInt32() {
      return 3;
    },
    /*message_codecs.StandardMessageCodec._valueInt64*/get _valueInt64() {
      return 4;
    },
    /*message_codecs.StandardMessageCodec._valueLargeInt*/get _valueLargeInt() {
      return 5;
    },
    /*message_codecs.StandardMessageCodec._valueFloat64*/get _valueFloat64() {
      return 6;
    },
    /*message_codecs.StandardMessageCodec._valueString*/get _valueString() {
      return 7;
    },
    /*message_codecs.StandardMessageCodec._valueUint8List*/get _valueUint8List() {
      return 8;
    },
    /*message_codecs.StandardMessageCodec._valueInt32List*/get _valueInt32List() {
      return 9;
    },
    /*message_codecs.StandardMessageCodec._valueInt64List*/get _valueInt64List() {
      return 10;
    },
    /*message_codecs.StandardMessageCodec._valueFloat64List*/get _valueFloat64List() {
      return 11;
    },
    /*message_codecs.StandardMessageCodec._valueList*/get _valueList() {
      return 12;
    },
    /*message_codecs.StandardMessageCodec._valueMap*/get _valueMap() {
      return 13;
    }
  }, false);
  const messageCodec$ = StandardMethodCodec_messageCodec;
  message_codecs.StandardMethodCodec = class StandardMethodCodec extends core.Object {
    get messageCodec() {
      return this[messageCodec$];
    }
    set messageCodec(value) {
      super.messageCodec = value;
    }
    encodeMethodCall(call) {
      let buffer = new serialization.WriteBuffer.new();
      this.messageCodec.writeValue(buffer, call.method);
      this.messageCodec.writeValue(buffer, call.arguments);
      return buffer.done();
    }
    decodeMethodCall(methodCall) {
      let buffer = new serialization.ReadBuffer.new(dart.nullCheck(methodCall));
      let method = this.messageCodec.readValue(buffer);
      let $arguments = this.messageCodec.readValue(buffer);
      if (typeof method == 'string' && !buffer.hasRemaining)
        return new message_codec.MethodCall.new(method, $arguments);
      else
        dart.throw(C[19] || CT.C19);
    }
    encodeSuccessEnvelope(result) {
      let buffer = new serialization.WriteBuffer.new();
      buffer.putUint8(0);
      this.messageCodec.writeValue(buffer, result);
      return buffer.done();
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      let buffer = new serialization.WriteBuffer.new();
      buffer.putUint8(1);
      this.messageCodec.writeValue(buffer, code);
      this.messageCodec.writeValue(buffer, message);
      this.messageCodec.writeValue(buffer, details);
      return buffer.done();
    }
    decodeEnvelope(envelope) {
      if (envelope[$lengthInBytes] === 0) dart.throw(C[20] || CT.C20);
      let buffer = new serialization.ReadBuffer.new(envelope);
      if (buffer.getUint8() === 0) return this.messageCodec.readValue(buffer);
      let errorCode = this.messageCodec.readValue(buffer);
      let errorMessage = this.messageCodec.readValue(buffer);
      let errorDetails = this.messageCodec.readValue(buffer);
      let errorStacktrace = buffer.hasRemaining ? T$.StringN().as(this.messageCodec.readValue(buffer)) : null;
      if (typeof errorCode == 'string' && (errorMessage == null || typeof errorMessage == 'string') && !buffer.hasRemaining)
        dart.throw(new message_codec.PlatformException.new({code: errorCode, message: T$.StringN().as(errorMessage), details: errorDetails, stacktrace: errorStacktrace}));
      else
        dart.throw(C[21] || CT.C21);
    }
  };
  (message_codecs.StandardMethodCodec.new = function(messageCodec = C[10] || CT.C10) {
    this[messageCodec$] = messageCodec;
    ;
  }).prototype = message_codecs.StandardMethodCodec.prototype;
  dart.addTypeTests(message_codecs.StandardMethodCodec);
  dart.addTypeCaches(message_codecs.StandardMethodCodec);
  message_codecs.StandardMethodCodec[dart.implements] = () => [message_codec.MethodCodec];
  dart.setMethodSignature(message_codecs.StandardMethodCodec, () => ({
    __proto__: dart.getMethods(message_codecs.StandardMethodCodec.__proto__),
    encodeMethodCall: dart.fnType(typed_data.ByteData, [message_codec.MethodCall]),
    decodeMethodCall: dart.fnType(message_codec.MethodCall, [dart.nullable(typed_data.ByteData)]),
    encodeSuccessEnvelope: dart.fnType(typed_data.ByteData, [dart.nullable(core.Object)]),
    encodeErrorEnvelope: dart.fnType(typed_data.ByteData, [], {details: dart.nullable(core.Object), message: dart.nullable(core.String)}, {code: core.String}),
    decodeEnvelope: dart.fnType(dart.dynamic, [typed_data.ByteData])
  }));
  dart.setLibraryUri(message_codecs.StandardMethodCodec, I[1]);
  dart.setFieldSignature(message_codecs.StandardMethodCodec, () => ({
    __proto__: dart.getFields(message_codecs.StandardMethodCodec.__proto__),
    messageCodec: dart.finalFieldType(message_codecs.StandardMessageCodec)
  }));
  var _binaryMessenger = dart.privateName(platform_channel, "_binaryMessenger");
  const _is_BasicMessageChannel_default = Symbol('_is_BasicMessageChannel_default');
  platform_channel.BasicMessageChannel$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
    var TNToFutureOfT = () => (TNToFutureOfT = dart.constFn(dart.fnType(FutureOfT(), [TN()])))();
    var TNToNFutureOfT = () => (TNToNFutureOfT = dart.constFn(dart.nullable(TNToFutureOfT())))();
    const name$ = BasicMessageChannel_name;
    const codec$ = BasicMessageChannel_codec;
    const _binaryMessenger$ = BasicMessageChannel__binaryMessenger;
    class BasicMessageChannel extends core.Object {
      get name() {
        return this[name$];
      }
      set name(value) {
        super.name = value;
      }
      get codec() {
        return this[codec$];
      }
      set codec(value) {
        super.codec = value;
      }
      get [_binaryMessenger]() {
        return this[_binaryMessenger$];
      }
      set [_binaryMessenger](value) {
        super[_binaryMessenger] = value;
      }
      get binaryMessenger() {
        let t0;
        t0 = this[_binaryMessenger];
        return t0 == null ? dart.nullCheck(binding$0.ServicesBinding.instance).defaultBinaryMessenger : t0;
      }
      send(message) {
        T.as(message);
        return async.async(TN(), (function* send() {
          return this.codec.decodeMessage(yield this.binaryMessenger.send(this.name, this.codec.encodeMessage(message)));
        }).bind(this));
      }
      setMessageHandler(handler) {
        TNToNFutureOfT().as(handler);
        if (handler == null) {
          this.binaryMessenger.setMessageHandler(this.name, null);
        } else {
          this.binaryMessenger.setMessageHandler(this.name, dart.fn(message => async.async(T$.ByteDataN(), (function*() {
            return this.codec.encodeMessage(yield handler(this.codec.decodeMessage(message)));
          }).bind(this)), T$.ByteDataNToFutureOfByteDataN()));
        }
      }
      setMockMessageHandler(handler) {
        TNToNFutureOfT().as(handler);
        if (handler == null) {
          this.binaryMessenger.setMockMessageHandler(this.name, null);
        } else {
          this.binaryMessenger.setMockMessageHandler(this.name, dart.fn(message => async.async(T$.ByteDataN(), (function*() {
            return this.codec.encodeMessage(yield handler(this.codec.decodeMessage(message)));
          }).bind(this)), T$.ByteDataNToFutureOfByteDataN()));
        }
      }
    }
    (BasicMessageChannel.new = function(name, codec, opts) {
      let binaryMessenger = opts && 'binaryMessenger' in opts ? opts.binaryMessenger : null;
      this[name$] = name;
      this[codec$] = codec;
      if (!(name !== null)) dart.assertFailed(null, I[3], 37, 16, "name != null");
      if (!(codec !== null)) dart.assertFailed(null, I[3], 38, 16, "codec != null");
      this[_binaryMessenger$] = binaryMessenger;
      ;
    }).prototype = BasicMessageChannel.prototype;
    dart.addTypeTests(BasicMessageChannel);
    BasicMessageChannel.prototype[_is_BasicMessageChannel_default] = true;
    dart.addTypeCaches(BasicMessageChannel);
    dart.setMethodSignature(BasicMessageChannel, () => ({
      __proto__: dart.getMethods(BasicMessageChannel.__proto__),
      send: dart.fnType(async.Future$(dart.nullable(T)), [dart.nullable(core.Object)]),
      setMessageHandler: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      setMockMessageHandler: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(BasicMessageChannel, () => ({
      __proto__: dart.getGetters(BasicMessageChannel.__proto__),
      binaryMessenger: binary_messenger.BinaryMessenger
    }));
    dart.setLibraryUri(BasicMessageChannel, I[4]);
    dart.setFieldSignature(BasicMessageChannel, () => ({
      __proto__: dart.getFields(BasicMessageChannel.__proto__),
      name: dart.finalFieldType(core.String),
      codec: dart.finalFieldType(message_codec.MessageCodec$(T)),
      [_binaryMessenger]: dart.finalFieldType(dart.nullable(binary_messenger.BinaryMessenger))
    }));
    return BasicMessageChannel;
  });
  platform_channel.BasicMessageChannel = platform_channel.BasicMessageChannel$();
  dart.addTypeTests(platform_channel.BasicMessageChannel, _is_BasicMessageChannel_default);
  var _invokeMethod = dart.privateName(platform_channel, "_invokeMethod");
  var _handleAsMethodCall = dart.privateName(platform_channel, "_handleAsMethodCall");
  const name$ = MethodChannel_name;
  const codec$ = MethodChannel_codec;
  const _binaryMessenger$ = MethodChannel__binaryMessenger;
  platform_channel.MethodChannel = class MethodChannel extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get codec() {
      return this[codec$];
    }
    set codec(value) {
      super.codec = value;
    }
    get [_binaryMessenger]() {
      return this[_binaryMessenger$];
    }
    set [_binaryMessenger](value) {
      super[_binaryMessenger] = value;
    }
    get binaryMessenger() {
      let t0;
      t0 = this[_binaryMessenger];
      return t0 == null ? dart.nullCheck(binding$0.ServicesBinding.instance).defaultBinaryMessenger : t0;
    }
    [_invokeMethod](T, method, opts) {
      let missingOk = opts && 'missingOk' in opts ? opts.missingOk : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return async.async(dart.nullable(T), (function* _invokeMethod() {
        if (!(method !== null)) dart.assertFailed(null, I[3], 147, 12, "method != null");
        let result = (yield this.binaryMessenger.send(this.name, this.codec.encodeMethodCall(new message_codec.MethodCall.new(method, $arguments))));
        if (result == null) {
          if (missingOk) {
            return null;
          }
          dart.throw(new message_codec.MissingPluginException.new("No implementation found for method " + method + " on channel " + this.name));
        }
        return dart.nullable(T).as(this.codec.decodeEnvelope(result));
      }).bind(this));
    }
    invokeMethod(T, method, $arguments = null) {
      return this[_invokeMethod](T, method, {missingOk: false, arguments: $arguments});
    }
    invokeListMethod(T, method, $arguments = null) {
      return async.async(dart.nullable(core.List$(T)), (function* invokeListMethod() {
        let t0;
        let result = (yield this.invokeMethod(T$.ListN(), method, $arguments));
        t0 = result;
        return t0 == null ? null : t0[$cast](T);
      }).bind(this));
    }
    invokeMapMethod(K, V, method, $arguments = null) {
      return async.async(dart.nullable(core.Map$(K, V)), (function* invokeMapMethod() {
        let t0;
        let result = (yield this.invokeMethod(T$.MapN(), method, $arguments));
        t0 = result;
        return t0 == null ? null : t0[$cast](K, V);
      }).bind(this));
    }
    setMethodCallHandler(handler) {
      platform_channel._methodChannelHandlers._set(this, handler);
      this.binaryMessenger.setMessageHandler(this.name, handler == null ? null : dart.fn(message => this[_handleAsMethodCall](message, handler), T$.ByteDataNToFutureOfByteDataN()));
    }
    checkMethodCallHandler(handler) {
      return dart.equals(platform_channel._methodChannelHandlers._get(this), handler);
    }
    setMockMethodCallHandler(handler) {
      platform_channel._methodChannelMockHandlers._set(this, handler);
      this.binaryMessenger.setMockMessageHandler(this.name, handler == null ? null : dart.fn(message => this[_handleAsMethodCall](message, handler), T$.ByteDataNToFutureOfByteDataN()));
    }
    checkMockMethodCallHandler(handler) {
      return dart.equals(platform_channel._methodChannelMockHandlers._get(this), handler);
    }
    [_handleAsMethodCall](message, handler) {
      return async.async(T$.ByteDataN(), (function* _handleAsMethodCall() {
        let call = this.codec.decodeMethodCall(message);
        try {
          return this.codec.encodeSuccessEnvelope(yield handler(call));
        } catch (e$) {
          let ex = dart.getThrown(e$);
          if (message_codec.PlatformException.is(ex)) {
            let e = ex;
            return this.codec.encodeErrorEnvelope({code: e.code, message: e.message, details: e.details});
          } else if (message_codec.MissingPluginException.is(ex)) {
            return null;
          } else if (core.Object.is(ex)) {
            let e = ex;
            return this.codec.encodeErrorEnvelope({code: "error", message: e[$toString](), details: null});
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (platform_channel.MethodChannel.new = function(name, codec = C[12] || CT.C12, binaryMessenger = null) {
    this[name$] = name;
    this[codec$] = codec;
    if (!(name !== null)) dart.assertFailed(null, I[3], 129, 16, "name != null");
    if (!(codec !== null)) dart.assertFailed(null, I[3], 130, 16, "codec != null");
    this[_binaryMessenger$] = binaryMessenger;
    ;
  }).prototype = platform_channel.MethodChannel.prototype;
  dart.addTypeTests(platform_channel.MethodChannel);
  dart.addTypeCaches(platform_channel.MethodChannel);
  dart.setMethodSignature(platform_channel.MethodChannel, () => ({
    __proto__: dart.getMethods(platform_channel.MethodChannel.__proto__),
    [_invokeMethod]: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String], {arguments: dart.dynamic}, {missingOk: core.bool}], T => [dart.nullable(core.Object)]),
    invokeMethod: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String], [dart.dynamic]], T => [dart.nullable(core.Object)]),
    invokeListMethod: dart.gFnType(T => [async.Future$(dart.nullable(core.List$(T))), [core.String], [dart.dynamic]], T => [dart.nullable(core.Object)]),
    invokeMapMethod: dart.gFnType((K, V) => [async.Future$(dart.nullable(core.Map$(K, V))), [core.String], [dart.dynamic]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    setMethodCallHandler: dart.fnType(dart.void, [dart.nullable(dart.fnType(async.Future, [message_codec.MethodCall]))]),
    checkMethodCallHandler: dart.fnType(core.bool, [dart.nullable(dart.fnType(async.Future, [message_codec.MethodCall]))]),
    setMockMethodCallHandler: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.nullable(async.Future), [message_codec.MethodCall]))]),
    checkMockMethodCallHandler: dart.fnType(core.bool, [dart.nullable(dart.fnType(async.Future, [message_codec.MethodCall]))]),
    [_handleAsMethodCall]: dart.fnType(async.Future$(dart.nullable(typed_data.ByteData)), [dart.nullable(typed_data.ByteData), dart.fnType(dart.nullable(async.Future), [message_codec.MethodCall])])
  }));
  dart.setGetterSignature(platform_channel.MethodChannel, () => ({
    __proto__: dart.getGetters(platform_channel.MethodChannel.__proto__),
    binaryMessenger: binary_messenger.BinaryMessenger
  }));
  dart.setLibraryUri(platform_channel.MethodChannel, I[4]);
  dart.setFieldSignature(platform_channel.MethodChannel, () => ({
    __proto__: dart.getFields(platform_channel.MethodChannel.__proto__),
    name: dart.finalFieldType(core.String),
    codec: dart.finalFieldType(message_codec.MethodCodec),
    [_binaryMessenger]: dart.finalFieldType(dart.nullable(binary_messenger.BinaryMessenger))
  }));
  const _invokeMethod$ = Symbol("_invokeMethod");
  platform_channel.OptionalMethodChannel = class OptionalMethodChannel extends platform_channel.MethodChannel {
    invokeMethod(T, method, $arguments = null) {
      return async.async(dart.nullable(T), (function* invokeMethod() {
        return this[_invokeMethod$](T, method, {missingOk: true, arguments: $arguments});
      }).bind(this));
    }
    invokeListMethod(T, method, $arguments = null) {
      return async.async(dart.nullable(core.List$(T)), (function* invokeListMethod() {
        let t2;
        let result = (yield this.invokeMethod(core.List, method, $arguments));
        t2 = result;
        return t2 == null ? null : t2[$cast](T);
      }).bind(this));
    }
    invokeMapMethod(K, V, method, $arguments = null) {
      return async.async(dart.nullable(core.Map$(K, V)), (function* invokeMapMethod() {
        let t2;
        let result = (yield this.invokeMethod(core.Map, method, $arguments));
        t2 = result;
        return t2 == null ? null : t2[$cast](K, V);
      }).bind(this));
    }
    [_invokeMethod$](T, method, opts) {
      return super[_invokeMethod](T, method, opts);
    }
  };
  (platform_channel.OptionalMethodChannel.new = function(name, codec = C[12] || CT.C12) {
    platform_channel.OptionalMethodChannel.__proto__.new.call(this, name, codec);
    ;
  }).prototype = platform_channel.OptionalMethodChannel.prototype;
  dart.addTypeTests(platform_channel.OptionalMethodChannel);
  dart.addTypeCaches(platform_channel.OptionalMethodChannel);
  dart.setMethodSignature(platform_channel.OptionalMethodChannel, () => ({
    __proto__: dart.getMethods(platform_channel.OptionalMethodChannel.__proto__),
    invokeMethod: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String], [dart.dynamic]], T => [dart.nullable(core.Object)]),
    invokeListMethod: dart.gFnType(T => [async.Future$(dart.nullable(core.List$(T))), [core.String], [dart.dynamic]], T => [dart.nullable(core.Object)]),
    invokeMapMethod: dart.gFnType((K, V) => [async.Future$(dart.nullable(core.Map$(K, V))), [core.String], [dart.dynamic]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(platform_channel.OptionalMethodChannel, I[4]);
  var name$0 = dart.privateName(platform_channel, "EventChannel.name");
  var codec$0 = dart.privateName(platform_channel, "EventChannel.codec");
  var _binaryMessenger$0 = dart.privateName(platform_channel, "EventChannel._binaryMessenger");
  platform_channel.EventChannel = class EventChannel extends core.Object {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get codec() {
      return this[codec$0];
    }
    set codec(value) {
      super.codec = value;
    }
    get [_binaryMessenger]() {
      return this[_binaryMessenger$0];
    }
    set [_binaryMessenger](value) {
      super[_binaryMessenger] = value;
    }
    get binaryMessenger() {
      let t2;
      t2 = this[_binaryMessenger];
      return t2 == null ? dart.nullCheck(binding$0.ServicesBinding.instance).defaultBinaryMessenger : t2;
    }
    receiveBroadcastStream($arguments = null) {
      let methodChannel = new platform_channel.MethodChannel.new(this.name, this.codec);
      let controller = null;
      function controller$35get() {
        let t3;
        t3 = controller;
        return t3 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t3;
      }
      dart.fn(controller$35get, T$.VoidToStreamController());
      function controller$35set(t4) {
        return controller = t4;
      }
      dart.fn(controller$35set, T$.StreamControllerTodynamic());
      controller$35set(async.StreamController.broadcast({onListen: dart.fn(() => async.async(dart.void, (function*() {
          this.binaryMessenger.setMessageHandler(this.name, dart.fn(reply => async.async(core.Null, (function*() {
            if (reply == null) {
              controller$35get().close();
            } else {
              try {
                controller$35get().add(this.codec.decodeEnvelope(reply));
              } catch (e$) {
                let e = dart.getThrown(e$);
                if (message_codec.PlatformException.is(e)) {
                  controller$35get().addError(e);
                } else
                  throw e$;
              }
            }
            return null;
          }).bind(this)), T$.ByteDataNToFutureOfNull()));
          try {
            yield methodChannel.invokeMethod(dart.void, "listen", $arguments);
          } catch (e) {
            let exception = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            if (core.Object.is(exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("while activating platform stream on channel " + this.name)}));
            } else
              throw e;
          }
        }).bind(this)), T$.VoidToFutureOfvoid()), onCancel: dart.fn(() => async.async(dart.void, (function*() {
          this.binaryMessenger.setMessageHandler(this.name, null);
          try {
            yield methodChannel.invokeMethod(dart.void, "cancel", $arguments);
          } catch (e) {
            let exception = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            if (core.Object.is(exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("while de-activating platform stream on channel " + this.name)}));
            } else
              throw e;
          }
        }).bind(this)), T$.VoidToFutureOfvoid())}));
      return controller$35get().stream;
    }
  };
  (platform_channel.EventChannel.new = function(name, codec = C[12] || CT.C12, binaryMessenger = null) {
    this[name$0] = name;
    this[codec$0] = codec;
    if (!(name !== null)) dart.assertFailed(null, I[3], 501, 16, "name != null");
    if (!(codec !== null)) dart.assertFailed(null, I[3], 502, 16, "codec != null");
    this[_binaryMessenger$0] = binaryMessenger;
    ;
  }).prototype = platform_channel.EventChannel.prototype;
  dart.addTypeTests(platform_channel.EventChannel);
  dart.addTypeCaches(platform_channel.EventChannel);
  dart.setMethodSignature(platform_channel.EventChannel, () => ({
    __proto__: dart.getMethods(platform_channel.EventChannel.__proto__),
    receiveBroadcastStream: dart.fnType(async.Stream, [], [dart.dynamic])
  }));
  dart.setGetterSignature(platform_channel.EventChannel, () => ({
    __proto__: dart.getGetters(platform_channel.EventChannel.__proto__),
    binaryMessenger: binary_messenger.BinaryMessenger
  }));
  dart.setLibraryUri(platform_channel.EventChannel, I[4]);
  dart.setFieldSignature(platform_channel.EventChannel, () => ({
    __proto__: dart.getFields(platform_channel.EventChannel.__proto__),
    name: dart.finalFieldType(core.String),
    codec: dart.finalFieldType(message_codec.MethodCodec),
    [_binaryMessenger]: dart.finalFieldType(dart.nullable(binary_messenger.BinaryMessenger))
  }));
  dart.defineLazy(platform_channel, {
    /*platform_channel._methodChannelHandlers*/get _methodChannelHandlers() {
      return new (T$.ExpandoOfObject()).new();
    },
    set _methodChannelHandlers(_) {},
    /*platform_channel._methodChannelMockHandlers*/get _methodChannelMockHandlers() {
      return new (T$.ExpandoOfObject()).new();
    },
    set _methodChannelMockHandlers(_) {}
  }, false);
  const _is_MessageCodec_default = Symbol('_is_MessageCodec_default');
  message_codec.MessageCodec$ = dart.generic(T => {
    class MessageCodec extends core.Object {}
    (MessageCodec.new = function() {
      ;
    }).prototype = MessageCodec.prototype;
    dart.addTypeTests(MessageCodec);
    MessageCodec.prototype[_is_MessageCodec_default] = true;
    dart.addTypeCaches(MessageCodec);
    dart.setLibraryUri(MessageCodec, I[5]);
    return MessageCodec;
  });
  message_codec.MessageCodec = message_codec.MessageCodec$();
  dart.addTypeTests(message_codec.MessageCodec, _is_MessageCodec_default);
  var method$ = dart.privateName(message_codec, "MethodCall.method");
  var $arguments$ = dart.privateName(message_codec, "MethodCall.arguments");
  message_codec.MethodCall = class MethodCall extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    get arguments() {
      return this[$arguments$];
    }
    set arguments(value) {
      super.arguments = value;
    }
    toString() {
      return object.objectRuntimeType(this, "MethodCall") + "(" + this.method + ", " + dart.str(this.arguments) + ")";
    }
  };
  (message_codec.MethodCall.new = function(method, $arguments = null) {
    this[method$] = method;
    this[$arguments$] = $arguments;
    if (!(method !== null)) dart.assertFailed(null, I[6], 41, 14, "method != null");
    ;
  }).prototype = message_codec.MethodCall.prototype;
  dart.addTypeTests(message_codec.MethodCall);
  dart.addTypeCaches(message_codec.MethodCall);
  dart.setLibraryUri(message_codec.MethodCall, I[5]);
  dart.setFieldSignature(message_codec.MethodCall, () => ({
    __proto__: dart.getFields(message_codec.MethodCall.__proto__),
    method: dart.finalFieldType(core.String),
    arguments: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(message_codec.MethodCall, ['toString']);
  message_codec.MethodCodec = class MethodCodec extends core.Object {};
  (message_codec.MethodCodec.new = function() {
    ;
  }).prototype = message_codec.MethodCodec.prototype;
  dart.addTypeTests(message_codec.MethodCodec);
  dart.addTypeCaches(message_codec.MethodCodec);
  dart.setLibraryUri(message_codec.MethodCodec, I[5]);
  var code$ = dart.privateName(message_codec, "PlatformException.code");
  var message$ = dart.privateName(message_codec, "PlatformException.message");
  var details$ = dart.privateName(message_codec, "PlatformException.details");
  var stacktrace$ = dart.privateName(message_codec, "PlatformException.stacktrace");
  message_codec.PlatformException = class PlatformException extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get details() {
      return this[details$];
    }
    set details(value) {
      super.details = value;
    }
    get stacktrace() {
      return this[stacktrace$];
    }
    set stacktrace(value) {
      super.stacktrace = value;
    }
    toString() {
      return "PlatformException(" + this.code + ", " + dart.str(this.message) + ", " + dart.str(this.details) + ", " + dart.str(this.stacktrace) + ")";
    }
  };
  (message_codec.PlatformException.new = function(opts) {
    let code = opts && 'code' in opts ? opts.code : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let details = opts && 'details' in opts ? opts.details : null;
    let stacktrace = opts && 'stacktrace' in opts ? opts.stacktrace : null;
    this[code$] = code;
    this[message$] = message;
    this[details$] = details;
    this[stacktrace$] = stacktrace;
    if (!(code !== null)) dart.assertFailed(null, I[6], 121, 15, "code != null");
    ;
  }).prototype = message_codec.PlatformException.prototype;
  dart.addTypeTests(message_codec.PlatformException);
  dart.addTypeCaches(message_codec.PlatformException);
  message_codec.PlatformException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(message_codec.PlatformException, I[5]);
  dart.setFieldSignature(message_codec.PlatformException, () => ({
    __proto__: dart.getFields(message_codec.PlatformException.__proto__),
    code: dart.finalFieldType(core.String),
    message: dart.finalFieldType(dart.nullable(core.String)),
    details: dart.finalFieldType(dart.dynamic),
    stacktrace: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(message_codec.PlatformException, ['toString']);
  var message$0 = dart.privateName(message_codec, "MissingPluginException.message");
  message_codec.MissingPluginException = class MissingPluginException extends core.Object {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      return "MissingPluginException(" + dart.str(this.message) + ")";
    }
  };
  (message_codec.MissingPluginException.new = function(message = null) {
    this[message$0] = message;
    ;
  }).prototype = message_codec.MissingPluginException.prototype;
  dart.addTypeTests(message_codec.MissingPluginException);
  dart.addTypeCaches(message_codec.MissingPluginException);
  message_codec.MissingPluginException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(message_codec.MissingPluginException, I[5]);
  dart.setFieldSignature(message_codec.MissingPluginException, () => ({
    __proto__: dart.getFields(message_codec.MissingPluginException.__proto__),
    message: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(message_codec.MissingPluginException, ['toString']);
  var _rootBucket = dart.privateName(restoration, "_rootBucket");
  var _pendingRootBucket = dart.privateName(restoration, "_pendingRootBucket");
  var _rootBucketIsValid = dart.privateName(restoration, "_rootBucketIsValid");
  var _isReplacing = dart.privateName(restoration, "_isReplacing");
  var _debugDoingUpdate = dart.privateName(restoration, "_debugDoingUpdate");
  var _serializationScheduled = dart.privateName(restoration, "_serializationScheduled");
  var _bucketsNeedingSerialization = dart.privateName(restoration, "_bucketsNeedingSerialization");
  var _methodHandler = dart.privateName(restoration, "_methodHandler");
  var _getRootBucketFromEngine = dart.privateName(restoration, "_getRootBucketFromEngine");
  var _parseAndHandleRestorationUpdateFromEngine = dart.privateName(restoration, "_parseAndHandleRestorationUpdateFromEngine");
  var _decodeRestorationData = dart.privateName(restoration, "_decodeRestorationData");
  var _encodeRestorationData = dart.privateName(restoration, "_encodeRestorationData");
  var _manager = dart.privateName(restoration, "_manager");
  var _doSerialization = dart.privateName(restoration, "_doSerialization");
  var _rawData = dart.privateName(restoration, "_rawData");
  restoration.RestorationManager = class RestorationManager extends change_notifier.ChangeNotifier {
    initChannels() {
      if (!!system_channels.SystemChannels.restoration.checkMethodCallHandler(dart.bind(this, _methodHandler))) dart.assertFailed(null, I[7], 169, 12, "!SystemChannels.restoration.checkMethodCallHandler(_methodHandler)");
      system_channels.SystemChannels.restoration.setMethodCallHandler(dart.bind(this, _methodHandler));
    }
    get rootBucket() {
      if (this[_rootBucketIsValid]) {
        return new (T$.SynchronousFutureOfRestorationBucketN()).new(this[_rootBucket]);
      }
      if (this[_pendingRootBucket] == null) {
        this[_pendingRootBucket] = T$.CompleterOfRestorationBucketN().new();
        this[_getRootBucketFromEngine]();
      }
      return dart.nullCheck(this[_pendingRootBucket]).future;
    }
    get isReplacing() {
      return this[_isReplacing];
    }
    [_getRootBucketFromEngine]() {
      return async.async(dart.void, (function* _getRootBucketFromEngine() {
        let config = (yield system_channels.SystemChannels.restoration.invokeMethod(T$.MapOfObjectN$ObjectN(), "get"));
        if (this[_pendingRootBucket] == null) {
          return;
        }
        if (!(this[_rootBucket] == null)) dart.assertFailed(null, I[7], 236, 12, "_rootBucket == null");
        this[_parseAndHandleRestorationUpdateFromEngine](config);
      }).bind(this));
    }
    [_parseAndHandleRestorationUpdateFromEngine](update) {
      this.handleRestorationUpdateFromEngine({enabled: update != null && core.bool.as(dart.nullCheck(update[$_get]("enabled"))), data: update == null ? null : T$.Uint8ListN().as(update[$_get]("data"))});
    }
    handleRestorationUpdateFromEngine(opts) {
      let t9, t9$;
      let enabled = opts && 'enabled' in opts ? opts.enabled : null;
      let data = opts && 'data' in opts ? opts.data : null;
      if (!(enabled !== null)) dart.assertFailed(null, I[7], 263, 12, "enabled != null");
      if (!(enabled || data == null)) dart.assertFailed(null, I[7], 264, 12, "enabled || data == null");
      this[_isReplacing] = this[_rootBucketIsValid] && enabled;
      if (this[_isReplacing]) {
        dart.nullCheck(binding.SchedulerBinding.instance).addPostFrameCallback(dart.fn(_ => {
          this[_isReplacing] = false;
        }, T$.DurationTovoid()));
      }
      let oldRoot = this[_rootBucket];
      this[_rootBucket] = enabled ? new restoration.RestorationBucket.root({manager: this, rawData: this[_decodeRestorationData](data)}) : null;
      this[_rootBucketIsValid] = true;
      if (!(this[_pendingRootBucket] == null || !dart.nullCheck(this[_pendingRootBucket]).isCompleted)) dart.assertFailed(null, I[7], 278, 12, "_pendingRootBucket == null || !_pendingRootBucket!.isCompleted");
      t9 = this[_pendingRootBucket];
      t9 == null ? null : t9.complete(this[_rootBucket]);
      this[_pendingRootBucket] = null;
      if (!dart.equals(this[_rootBucket], oldRoot)) {
        this.notifyListeners();
        t9$ = oldRoot;
        t9$ == null ? null : t9$.dispose();
      }
    }
    sendToEngine(encodedData) {
      if (!(encodedData !== null)) dart.assertFailed(null, I[7], 301, 12, "encodedData != null");
      return system_channels.SystemChannels.restoration.invokeMethod(dart.void, "put", encodedData);
    }
    [_methodHandler](call) {
      return async.async(T$.ObjectN(), (function* _methodHandler() {
        switch (call.method) {
          case "push":
          {
            this[_parseAndHandleRestorationUpdateFromEngine](T$.MapOfObjectN$ObjectN().as(call.arguments));
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new(call.method + " was invoked but isn't implemented by " + dart.str(this[$runtimeType])));
          }
        }
      }).bind(this));
    }
    [_decodeRestorationData](data) {
      if (data == null) {
        return null;
      }
      let encoded = data[$buffer][$asByteData](data[$offsetInBytes], data[$lengthInBytes]);
      return T$.MapNOfObjectN$ObjectN().as((C[10] || CT.C10).decodeMessage(encoded));
    }
    [_encodeRestorationData](data) {
      let encoded = dart.nullCheck((C[10] || CT.C10).encodeMessage(data));
      return encoded[$buffer][$asUint8List](encoded[$offsetInBytes], encoded[$lengthInBytes]);
    }
    scheduleSerializationFor(bucket) {
      if (!(bucket !== null)) dart.assertFailed(null, I[7], 348, 12, "bucket != null");
      if (!dart.equals(bucket[_manager], this)) dart.assertFailed(null, I[7], 349, 12, "bucket._manager == this");
      if (!!this[_debugDoingUpdate]) dart.assertFailed(null, I[7], 350, 12, "!_debugDoingUpdate");
      this[_bucketsNeedingSerialization].add(bucket);
      if (!this[_serializationScheduled]) {
        this[_serializationScheduled] = true;
        dart.nullCheck(binding.SchedulerBinding.instance).addPostFrameCallback(dart.fn(_ => this[_doSerialization](), T$.DurationTovoid()));
      }
    }
    unscheduleSerializationFor(bucket) {
      if (!(bucket !== null)) dart.assertFailed(null, I[7], 370, 12, "bucket != null");
      if (!dart.equals(bucket[_manager], this)) dart.assertFailed(null, I[7], 371, 12, "bucket._manager == this");
      if (!!this[_debugDoingUpdate]) dart.assertFailed(null, I[7], 372, 12, "!_debugDoingUpdate");
      this[_bucketsNeedingSerialization].remove(bucket);
    }
    [_doSerialization]() {
      if (!this[_serializationScheduled]) {
        return;
      }
      if (!dart.fn(() => {
        this[_debugDoingUpdate] = true;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 380, 12, "() {\r\n      _debugDoingUpdate = true;\r\n      return true;\r\n    }()");
      this[_serializationScheduled] = false;
      for (let bucket of this[_bucketsNeedingSerialization]) {
        bucket.finalize();
      }
      this[_bucketsNeedingSerialization].clear();
      this.sendToEngine(this[_encodeRestorationData](dart.nullCheck(this[_rootBucket])[_rawData]));
      if (!dart.fn(() => {
        this[_debugDoingUpdate] = false;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 392, 12, "() {\r\n      _debugDoingUpdate = false;\r\n      return true;\r\n    }()");
    }
    flushData() {
      if (!!this[_debugDoingUpdate]) dart.assertFailed(null, I[7], 416, 12, "!_debugDoingUpdate");
      if (dart.nullCheck(binding.SchedulerBinding.instance).hasScheduledFrame) {
        return;
      }
      this[_doSerialization]();
      if (!!this[_serializationScheduled]) dart.assertFailed(null, I[7], 421, 12, "!_serializationScheduled");
    }
  };
  (restoration.RestorationManager.new = function() {
    this[_rootBucket] = null;
    this[_pendingRootBucket] = null;
    this[_rootBucketIsValid] = false;
    this[_isReplacing] = false;
    this[_debugDoingUpdate] = false;
    this[_serializationScheduled] = false;
    this[_bucketsNeedingSerialization] = T$.LinkedHashSetOfRestorationBucket().new();
    restoration.RestorationManager.__proto__.new.call(this);
    this.initChannels();
  }).prototype = restoration.RestorationManager.prototype;
  dart.addTypeTests(restoration.RestorationManager);
  dart.addTypeCaches(restoration.RestorationManager);
  dart.setMethodSignature(restoration.RestorationManager, () => ({
    __proto__: dart.getMethods(restoration.RestorationManager.__proto__),
    initChannels: dart.fnType(dart.void, []),
    [_getRootBucketFromEngine]: dart.fnType(async.Future$(dart.void), []),
    [_parseAndHandleRestorationUpdateFromEngine]: dart.fnType(dart.void, [dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))]),
    handleRestorationUpdateFromEngine: dart.fnType(dart.void, [], {}, {data: dart.nullable(typed_data.Uint8List), enabled: core.bool}),
    sendToEngine: dart.fnType(async.Future$(dart.void), [typed_data.Uint8List]),
    [_methodHandler]: dart.fnType(async.Future$(dart.nullable(core.Object)), [message_codec.MethodCall]),
    [_decodeRestorationData]: dart.fnType(dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))), [dart.nullable(typed_data.Uint8List)]),
    [_encodeRestorationData]: dart.fnType(typed_data.Uint8List, [core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))]),
    scheduleSerializationFor: dart.fnType(dart.void, [restoration.RestorationBucket]),
    unscheduleSerializationFor: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_doSerialization]: dart.fnType(dart.void, []),
    flushData: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(restoration.RestorationManager, () => ({
    __proto__: dart.getGetters(restoration.RestorationManager.__proto__),
    rootBucket: async.Future$(dart.nullable(restoration.RestorationBucket)),
    isReplacing: core.bool
  }));
  dart.setLibraryUri(restoration.RestorationManager, I[8]);
  dart.setFieldSignature(restoration.RestorationManager, () => ({
    __proto__: dart.getFields(restoration.RestorationManager.__proto__),
    [_rootBucket]: dart.fieldType(dart.nullable(restoration.RestorationBucket)),
    [_pendingRootBucket]: dart.fieldType(dart.nullable(async.Completer$(dart.nullable(restoration.RestorationBucket)))),
    [_rootBucketIsValid]: dart.fieldType(core.bool),
    [_isReplacing]: dart.fieldType(core.bool),
    [_debugDoingUpdate]: dart.fieldType(core.bool),
    [_serializationScheduled]: dart.fieldType(core.bool),
    [_bucketsNeedingSerialization]: dart.finalFieldType(core.Set$(restoration.RestorationBucket))
  }));
  var _debugOwner = dart.privateName(restoration, "_debugOwner");
  var _claimedChildren = dart.privateName(restoration, "_claimedChildren");
  var _childrenToAdd = dart.privateName(restoration, "_childrenToAdd");
  var _needsSerialization = dart.privateName(restoration, "_needsSerialization");
  var _debugDisposed = dart.privateName(restoration, "_debugDisposed");
  var _parent = dart.privateName(restoration, "_parent");
  var _restorationId = dart.privateName(restoration, "_restorationId");
  var _rawChildren = dart.privateName(restoration, "_rawChildren");
  var _debugAssertNotDisposed = dart.privateName(restoration, "_debugAssertNotDisposed");
  var _rawValues = dart.privateName(restoration, "_rawValues");
  var _markNeedsSerialization = dart.privateName(restoration, "_markNeedsSerialization");
  var _removeChildData = dart.privateName(restoration, "_removeChildData");
  var _addChildData = dart.privateName(restoration, "_addChildData");
  var _recursivelyUpdateManager = dart.privateName(restoration, "_recursivelyUpdateManager");
  var _updateManager = dart.privateName(restoration, "_updateManager");
  var _visitChildren = dart.privateName(restoration, "_visitChildren");
  var _dropChild = dart.privateName(restoration, "_dropChild");
  var _debugAssertIntegrity = dart.privateName(restoration, "_debugAssertIntegrity");
  var _finalizeAddChildData = dart.privateName(restoration, "_finalizeAddChildData");
  restoration.RestorationBucket = class RestorationBucket extends core.Object {
    get debugOwner() {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 589, 12, "_debugAssertNotDisposed()");
      return this[_debugOwner];
    }
    get isReplacing() {
      let t9, t9$;
      t9$ = (t9 = this[_manager], t9 == null ? null : t9.isReplacing);
      return t9$ == null ? false : t9$;
    }
    get restorationId() {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 613, 12, "_debugAssertNotDisposed()");
      return this[_restorationId];
    }
    get [_rawChildren]() {
      return T$.MapOfObjectN$ObjectN().as(dart.nullCheck(this[_rawData][$putIfAbsent]("c", dart.fn(() => new (T$.LinkedMapOfObjectN$ObjectN()).new(), T$.VoidToMapOfObjectN$ObjectN()))));
    }
    get [_rawValues]() {
      return T$.MapOfObjectN$ObjectN().as(dart.nullCheck(this[_rawData][$putIfAbsent]("v", dart.fn(() => new (T$.LinkedMapOfObjectN$ObjectN()).new(), T$.VoidToMapOfObjectN$ObjectN()))));
    }
    read(P, restorationId) {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 638, 12, "_debugAssertNotDisposed()");
      if (!(restorationId !== null)) dart.assertFailed(null, I[7], 639, 12, "restorationId != null");
      return dart.nullable(P).as(this[_rawValues][$_get](restorationId));
    }
    write(P, restorationId, value) {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 660, 12, "_debugAssertNotDisposed()");
      if (!(restorationId !== null)) dart.assertFailed(null, I[7], 661, 12, "restorationId != null");
      if (!restoration.debugIsSerializableForRestoration(value)) dart.assertFailed(null, I[7], 662, 12, "debugIsSerializableForRestoration(value)");
      if (!dart.equals(this[_rawValues][$_get](restorationId), value) || !this[_rawValues][$containsKey](restorationId)) {
        this[_rawValues][$_set](restorationId, value);
        this[_markNeedsSerialization]();
      }
    }
    remove(P, restorationId) {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 682, 12, "_debugAssertNotDisposed()");
      if (!(restorationId !== null)) dart.assertFailed(null, I[7], 683, 12, "restorationId != null");
      let needsUpdate = this[_rawValues][$containsKey](restorationId);
      let result = dart.nullable(P).as(this[_rawValues][$remove](restorationId));
      if (this[_rawValues][$isEmpty]) {
        this[_rawData][$remove]("v");
      }
      if (needsUpdate) {
        this[_markNeedsSerialization]();
      }
      return result;
    }
    contains(restorationId) {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 704, 12, "_debugAssertNotDisposed()");
      if (!(restorationId !== null)) dart.assertFailed(null, I[7], 705, 12, "restorationId != null");
      return this[_rawValues][$containsKey](restorationId);
    }
    claimChild(restorationId, opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 740, 12, "_debugAssertNotDisposed()");
      if (!(restorationId !== null)) dart.assertFailed(null, I[7], 741, 12, "restorationId != null");
      if (this[_claimedChildren][$containsKey](restorationId) || !this[_rawChildren][$containsKey](restorationId)) {
        let child = new restoration.RestorationBucket.empty({debugOwner: debugOwner, restorationId: restorationId});
        this.adoptChild(child);
        return child;
      }
      if (!(this[_rawChildren][$_get](restorationId) != null)) dart.assertFailed(null, I[7], 767, 12, "_rawChildren[restorationId] != null");
      let child = new restoration.RestorationBucket.child({restorationId: restorationId, parent: this, debugOwner: debugOwner});
      this[_claimedChildren][$_set](restorationId, child);
      return child;
    }
    adoptChild(child) {
      let t9;
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 790, 12, "_debugAssertNotDisposed()");
      if (!(child !== null)) dart.assertFailed(null, I[7], 791, 12, "child != null");
      if (!dart.equals(child[_parent], this)) {
        t9 = child[_parent];
        t9 == null ? null : t9[_removeChildData](child);
        child[_parent] = this;
        this[_addChildData](child);
        if (!dart.equals(child[_manager], this[_manager])) {
          this[_recursivelyUpdateManager](child);
        }
      }
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[7], 800, 12, "child._parent == this");
      if (!dart.equals(child[_manager], this[_manager])) dart.assertFailed(null, I[7], 801, 12, "child._manager == _manager");
    }
    [_dropChild](child) {
      if (!(child !== null)) dart.assertFailed(null, I[7], 805, 12, "child != null");
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[7], 806, 12, "child._parent == this");
      this[_removeChildData](child);
      child[_parent] = null;
      if (child[_manager] != null) {
        child[_updateManager](null);
        child[_visitChildren](dart.bind(this, _recursivelyUpdateManager));
      }
    }
    [_markNeedsSerialization]() {
      let t9;
      if (!this[_needsSerialization]) {
        this[_needsSerialization] = true;
        t9 = this[_manager];
        t9 == null ? null : t9.scheduleSerializationFor(this);
      }
    }
    finalize() {
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 829, 12, "_debugAssertNotDisposed()");
      if (!this[_needsSerialization]) dart.assertFailed(null, I[7], 830, 12, "_needsSerialization");
      this[_needsSerialization] = false;
      if (!this[_debugAssertIntegrity]()) dart.assertFailed(null, I[7], 832, 12, "_debugAssertIntegrity()");
    }
    [_recursivelyUpdateManager](bucket) {
      bucket[_updateManager](this[_manager]);
      bucket[_visitChildren](dart.bind(this, _recursivelyUpdateManager));
    }
    [_updateManager](newManager) {
      let t9;
      if (dart.equals(this[_manager], newManager)) {
        return;
      }
      if (this[_needsSerialization]) {
        t9 = this[_manager];
        t9 == null ? null : t9.unscheduleSerializationFor(this);
      }
      this[_manager] = newManager;
      if (this[_needsSerialization] && this[_manager] != null) {
        this[_needsSerialization] = false;
        this[_markNeedsSerialization]();
      }
    }
    [_debugAssertIntegrity]() {
      if (!dart.fn(() => {
        if (this[_childrenToAdd][$isEmpty]) {
          return true;
        }
        let error = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Multiple owners claimed child RestorationBuckets with the same IDs."), new assertions.ErrorDescription.new("The following IDs were claimed multiple times from the parent " + dart.str(this) + ":")]);
        for (let child of this[_childrenToAdd][$entries]) {
          let id = child.key;
          let buckets = child.value;
          if (!buckets[$isNotEmpty]) dart.assertFailed(null, I[7], 866, 16, "buckets.isNotEmpty");
          if (!this[_claimedChildren][$containsKey](id)) dart.assertFailed(null, I[7], 867, 16, "_claimedChildren.containsKey(id)");
          error[$addAll]((() => {
            let t9 = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new(" * \"" + id + "\" was claimed by:")]);
            t9[$addAll](buckets[$map](diagnostics.DiagnosticsNode, dart.fn(bucket => new assertions.ErrorDescription.new("   * " + dart.str(bucket.debugOwner)), T$.RestorationBucketToErrorDescription())));
            t9[$add](new assertions.ErrorDescription.new("   * " + dart.str(dart.nullCheck(this[_claimedChildren][$_get](id)).debugOwner) + " (current owner)"));
            return t9;
          })());
        }
        dart.throw(new assertions.FlutterError.fromParts(error));
      }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 855, 12, "() {\r\n      if (_childrenToAdd.isEmpty) {\r\n        return true;\r\n      }\r\n      final List<DiagnosticsNode> error = <DiagnosticsNode>[\r\n        ErrorSummary('Multiple owners claimed child RestorationBuckets with the same IDs.'),\r\n        ErrorDescription('The following IDs were claimed multiple times from the parent $this:'),\r\n      ];\r\n      for (final MapEntry<String, List<RestorationBucket>> child in _childrenToAdd.entries) {\r\n        final String id = child.key;\r\n        final List<RestorationBucket> buckets = child.value;\r\n        assert(buckets.isNotEmpty);\r\n        assert(_claimedChildren.containsKey(id));\r\n        error.addAll(<DiagnosticsNode>[\r\n          ErrorDescription(' * \"$id\" was claimed by:'),\r\n          ...buckets.map((RestorationBucket bucket) => ErrorDescription('   * ${bucket.debugOwner}')),\r\n          ErrorDescription('   * ${_claimedChildren[id]!.debugOwner} (current owner)'),\r\n        ]);\r\n      }\r\n      throw FlutterError.fromParts(error);\r\n    }()");
      return true;
    }
    [_removeChildData](child) {
      let t10, t10$;
      if (!(child !== null)) dart.assertFailed(null, I[7], 880, 12, "child != null");
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[7], 881, 12, "child._parent == this");
      if (dart.equals(this[_claimedChildren][$remove](child.restorationId), child)) {
        this[_rawChildren][$remove](child.restorationId);
        let pendingChildren = this[_childrenToAdd][$_get](child.restorationId);
        if (pendingChildren != null) {
          let toAdd = pendingChildren[$removeLast]();
          this[_finalizeAddChildData](toAdd);
          if (pendingChildren[$isEmpty]) {
            this[_childrenToAdd][$remove](child.restorationId);
          }
        }
        if (this[_rawChildren][$isEmpty]) {
          this[_rawData][$remove]("c");
        }
        this[_markNeedsSerialization]();
        return;
      }
      t10 = this[_childrenToAdd][$_get](child.restorationId);
      t10 == null ? null : t10[$remove](child);
      if ((t10$ = this[_childrenToAdd][$_get](child.restorationId), t10$ == null ? null : t10$[$isEmpty]) === true) {
        this[_childrenToAdd][$remove](child.restorationId);
      }
    }
    [_addChildData](child) {
      if (!(child !== null)) dart.assertFailed(null, I[7], 905, 12, "child != null");
      if (!dart.equals(child[_parent], this)) dart.assertFailed(null, I[7], 906, 12, "child._parent == this");
      if (this[_claimedChildren][$containsKey](child.restorationId)) {
        this[_childrenToAdd][$putIfAbsent](child.restorationId, dart.fn(() => T$.JSArrayOfRestorationBucket().of([]), T$.VoidToListOfRestorationBucket()))[$add](child);
        this[_markNeedsSerialization]();
        return;
      }
      this[_finalizeAddChildData](child);
      this[_markNeedsSerialization]();
    }
    [_finalizeAddChildData](child) {
      if (!(this[_claimedChildren][$_get](child.restorationId) == null)) dart.assertFailed(null, I[7], 920, 12, "_claimedChildren[child.restorationId] == null");
      if (!(this[_rawChildren][$_get](child.restorationId) == null)) dart.assertFailed(null, I[7], 921, 12, "_rawChildren[child.restorationId] == null");
      this[_claimedChildren][$_set](child.restorationId, child);
      this[_rawChildren][$_set](child.restorationId, child[_rawData]);
    }
    [_visitChildren](visitor, opts) {
      let concurrentModification = opts && 'concurrentModification' in opts ? opts.concurrentModification : false;
      let children = this[_claimedChildren][$values][$followedBy](this[_childrenToAdd][$values][$expand](restoration.RestorationBucket, dart.fn(buckets => buckets, T$.ListOfRestorationBucketToListOfRestorationBucket())));
      if (concurrentModification) {
        children = children[$toList]({growable: false});
      }
      children[$forEach](visitor);
    }
    rename(newRestorationId) {
      let t10, t10$;
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 947, 12, "_debugAssertNotDisposed()");
      if (!(newRestorationId !== null)) dart.assertFailed(null, I[7], 948, 12, "newRestorationId != null");
      if (newRestorationId === this.restorationId) {
        return;
      }
      t10 = this[_parent];
      t10 == null ? null : t10[_removeChildData](this);
      this[_restorationId] = newRestorationId;
      t10$ = this[_parent];
      t10$ == null ? null : t10$[_addChildData](this);
    }
    dispose() {
      let t10;
      if (!this[_debugAssertNotDisposed]()) dart.assertFailed(null, I[7], 970, 12, "_debugAssertNotDisposed()");
      this[_visitChildren](dart.bind(this, _dropChild), {concurrentModification: true});
      this[_claimedChildren][$clear]();
      this[_childrenToAdd][$clear]();
      t10 = this[_parent];
      t10 == null ? null : t10[_removeChildData](this);
      this[_parent] = null;
      this[_updateManager](null);
      this[_debugDisposed] = true;
    }
    toString() {
      return object.objectRuntimeType(this, "RestorationBucket") + "(restorationId: " + this.restorationId + ", owner: " + dart.str(this.debugOwner) + ")";
    }
    [_debugAssertNotDisposed]() {
      if (!dart.fn(() => {
        if (this[_debugDisposed]) {
          dart.throw(assertions.FlutterError.new("A " + dart.str(this[$runtimeType]) + " was used after being disposed.\n" + "Once you have called dispose() on a " + dart.str(this[$runtimeType]) + ", it can no longer be used."));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 985, 12, "() {\r\n      if (_debugDisposed) {\r\n        throw FlutterError(\r\n            'A $runtimeType was used after being disposed.\\n'\r\n            'Once you have called dispose() on a $runtimeType, it can no longer be used.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
  };
  (restoration.RestorationBucket.empty = function(opts) {
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    this[_debugOwner] = null;
    this[_claimedChildren] = new (T$.IdentityMapOfString$RestorationBucket()).new();
    this[_childrenToAdd] = new (T$.IdentityMapOfString$ListOfRestorationBucket()).new();
    this[_needsSerialization] = false;
    this[_debugDisposed] = false;
    this[_parent] = null;
    this[_manager] = null;
    if (!(restorationId !== null)) dart.assertFailed(null, I[7], 506, 15, "restorationId != null");
    this[_restorationId] = restorationId;
    this[_rawData] = new (T$.IdentityMapOfString$ObjectN()).new();
    if (!dart.fn(() => {
      this[_debugOwner] = debugOwner;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 509, 12, "() {\r\n      _debugOwner = debugOwner;\r\n      return true;\r\n    }()");
  }).prototype = restoration.RestorationBucket.prototype;
  (restoration.RestorationBucket.root = function(opts) {
    let t9;
    let manager = opts && 'manager' in opts ? opts.manager : null;
    let rawData = opts && 'rawData' in opts ? opts.rawData : null;
    this[_debugOwner] = null;
    this[_claimedChildren] = new (T$.IdentityMapOfString$RestorationBucket()).new();
    this[_childrenToAdd] = new (T$.IdentityMapOfString$ListOfRestorationBucket()).new();
    this[_needsSerialization] = false;
    this[_debugDisposed] = false;
    this[_parent] = null;
    if (!(manager !== null)) dart.assertFailed(null, I[7], 541, 15, "manager != null");
    this[_manager] = manager;
    this[_rawData] = (t9 = rawData, t9 == null ? new (T$.LinkedMapOfObjectN$ObjectN()).new() : t9);
    this[_restorationId] = "root";
    if (!dart.fn(() => {
      this[_debugOwner] = manager;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 545, 12, "() {\r\n      _debugOwner = manager;\r\n      return true;\r\n    }()");
  }).prototype = restoration.RestorationBucket.prototype;
  (restoration.RestorationBucket.child = function(opts) {
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let parent = opts && 'parent' in opts ? opts.parent : null;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    this[_debugOwner] = null;
    this[_claimedChildren] = new (T$.IdentityMapOfString$RestorationBucket()).new();
    this[_childrenToAdd] = new (T$.IdentityMapOfString$ListOfRestorationBucket()).new();
    this[_needsSerialization] = false;
    this[_debugDisposed] = false;
    if (!(restorationId !== null)) dart.assertFailed(null, I[7], 565, 15, "restorationId != null");
    if (!(parent !== null)) dart.assertFailed(null, I[7], 566, 15, "parent != null");
    if (!(parent[_rawChildren][$_get](restorationId) != null)) dart.assertFailed(null, I[7], 567, 15, "parent._rawChildren[restorationId] != null");
    this[_manager] = parent[_manager];
    this[_parent] = parent;
    this[_rawData] = T$.MapOfObjectN$ObjectN().as(dart.nullCheck(parent[_rawChildren][$_get](restorationId)));
    this[_restorationId] = restorationId;
    if (!dart.fn(() => {
      this[_debugOwner] = debugOwner;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 572, 12, "() {\r\n      _debugOwner = debugOwner;\r\n      return true;\r\n    }()");
  }).prototype = restoration.RestorationBucket.prototype;
  dart.addTypeTests(restoration.RestorationBucket);
  dart.addTypeCaches(restoration.RestorationBucket);
  dart.setMethodSignature(restoration.RestorationBucket, () => ({
    __proto__: dart.getMethods(restoration.RestorationBucket.__proto__),
    read: dart.gFnType(P => [dart.nullable(P), [core.String]], P => [dart.nullable(core.Object)]),
    write: dart.gFnType(P => [dart.void, [core.String, P]], P => [dart.nullable(core.Object)]),
    remove: dart.gFnType(P => [dart.nullable(P), [core.String]], P => [dart.nullable(core.Object)]),
    contains: dart.fnType(core.bool, [core.String]),
    claimChild: dart.fnType(restoration.RestorationBucket, [core.String], {}, {debugOwner: dart.nullable(core.Object)}),
    adoptChild: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_dropChild]: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_markNeedsSerialization]: dart.fnType(dart.void, []),
    finalize: dart.fnType(dart.void, []),
    [_recursivelyUpdateManager]: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_updateManager]: dart.fnType(dart.void, [dart.nullable(restoration.RestorationManager)]),
    [_debugAssertIntegrity]: dart.fnType(core.bool, []),
    [_removeChildData]: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_addChildData]: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_finalizeAddChildData]: dart.fnType(dart.void, [restoration.RestorationBucket]),
    [_visitChildren]: dart.fnType(dart.void, [dart.fnType(dart.void, [restoration.RestorationBucket])], {concurrentModification: core.bool}, {}),
    rename: dart.fnType(dart.void, [core.String]),
    dispose: dart.fnType(dart.void, []),
    [_debugAssertNotDisposed]: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(restoration.RestorationBucket, () => ({
    __proto__: dart.getGetters(restoration.RestorationBucket.__proto__),
    debugOwner: dart.nullable(core.Object),
    isReplacing: core.bool,
    restorationId: core.String,
    [_rawChildren]: core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)),
    [_rawValues]: core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))
  }));
  dart.setLibraryUri(restoration.RestorationBucket, I[8]);
  dart.setFieldSignature(restoration.RestorationBucket, () => ({
    __proto__: dart.getFields(restoration.RestorationBucket.__proto__),
    [_rawData]: dart.finalFieldType(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))),
    [_debugOwner]: dart.fieldType(dart.nullable(core.Object)),
    [_manager]: dart.fieldType(dart.nullable(restoration.RestorationManager)),
    [_parent]: dart.fieldType(dart.nullable(restoration.RestorationBucket)),
    [_restorationId]: dart.fieldType(core.String),
    [_claimedChildren]: dart.finalFieldType(core.Map$(core.String, restoration.RestorationBucket)),
    [_childrenToAdd]: dart.finalFieldType(core.Map$(core.String, core.List$(restoration.RestorationBucket))),
    [_needsSerialization]: dart.fieldType(core.bool),
    [_debugDisposed]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(restoration.RestorationBucket, ['toString']);
  dart.defineLazy(restoration.RestorationBucket, {
    /*restoration.RestorationBucket._childrenMapKey*/get _childrenMapKey() {
      return "c";
    },
    /*restoration.RestorationBucket._valuesMapKey*/get _valuesMapKey() {
      return "v";
    }
  }, false);
  restoration.debugIsSerializableForRestoration = function debugIsSerializableForRestoration(object) {
    let result = false;
    if (!dart.fn(() => {
      try {
        (C[10] || CT.C10).encodeMessage(object);
        result = true;
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          result = false;
        } else
          throw e;
      }
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[7], 1006, 10, "() {\r\n    try {\r\n      const StandardMessageCodec().encodeMessage(object);\r\n      result = true;\r\n    } catch (_) {\r\n      result = false;\r\n    }\r\n    return true;\r\n  }()");
    return result;
  };
  binary_messenger.BinaryMessenger = class BinaryMessenger extends core.Object {};
  (binary_messenger.BinaryMessenger.new = function() {
    ;
  }).prototype = binary_messenger.BinaryMessenger.prototype;
  dart.addTypeTests(binary_messenger.BinaryMessenger);
  dart.addTypeCaches(binary_messenger.BinaryMessenger);
  dart.setLibraryUri(binary_messenger.BinaryMessenger, I[9]);
  var __ServicesBinding__defaultBinaryMessenger = dart.privateName(binding$0, "_#ServicesBinding#_defaultBinaryMessenger");
  var __ServicesBinding__restorationManager = dart.privateName(binding$0, "_#ServicesBinding#_restorationManager");
  var _defaultBinaryMessenger = dart.privateName(binding$0, "_defaultBinaryMessenger");
  var _restorationManager = dart.privateName(binding$0, "_restorationManager");
  var _handleLifecycleMessage = dart.privateName(binding$0, "_handleLifecycleMessage");
  var _addLicenses = dart.privateName(binding$0, "_addLicenses");
  binding$0.ServicesBinding = class ServicesBinding extends core.Object {
    static get instance() {
      return binding$0.ServicesBinding._instance;
    }
    static _parseLicenses(rawLicenses) {
      let _licenseSeparator = "\n" + "-"[$times](80) + "\n";
      let result = T$.JSArrayOfLicenseEntry().of([]);
      let licenses = rawLicenses[$split](_licenseSeparator);
      for (let license of licenses) {
        let split = license[$indexOf]("\n\n");
        if (split >= 0) {
          result[$add](new licenses$.LicenseEntryWithLineBreaks.new(license[$substring](0, split)[$split]("\n"), license[$substring](split + 2)));
        } else {
          result[$add](new licenses$.LicenseEntryWithLineBreaks.new(C[24] || CT.C24, license));
        }
      }
      return result;
    }
    static _parseAppLifecycleMessage(message) {
      switch (message) {
        case "AppLifecycleState.paused":
        {
          return ui.AppLifecycleState.paused;
        }
        case "AppLifecycleState.resumed":
        {
          return ui.AppLifecycleState.resumed;
        }
        case "AppLifecycleState.inactive":
        {
          return ui.AppLifecycleState.inactive;
        }
        case "AppLifecycleState.detached":
        {
          return ui.AppLifecycleState.detached;
        }
      }
      return null;
    }
  };
  binding$0.ServicesBinding[dart.mixinOn] = _ServicesBinding$36BindingBase$36SchedulerBinding => class ServicesBinding extends _ServicesBinding$36BindingBase$36SchedulerBinding {
    initInstances() {
      super.initInstances();
      binding$0.ServicesBinding._instance = this;
      this[_defaultBinaryMessenger] = this.createBinaryMessenger();
      this[_restorationManager] = this.createRestorationManager();
      this.window.onPlatformMessage = dart.bind(this.defaultBinaryMessenger, 'handlePlatformMessage');
      this.initLicenses();
      system_channels.SystemChannels.system.setMessageHandler(dart.fn(message => this.handleSystemMessage(core.Object.as(message)), T$.dynamicToFutureOfvoid()));
      system_channels.SystemChannels.lifecycle.setMessageHandler(dart.bind(this, _handleLifecycleMessage));
      this.readInitialLifecycleStateFromNativeWindow();
    }
    get defaultBinaryMessenger() {
      return this[_defaultBinaryMessenger];
    }
    get [_defaultBinaryMessenger]() {
      let t11;
      t11 = this[__ServicesBinding__defaultBinaryMessenger];
      return t11 == null ? dart.throw(new _internal.LateError.fieldNI("_defaultBinaryMessenger")) : t11;
    }
    set [_defaultBinaryMessenger](t11) {
      this[__ServicesBinding__defaultBinaryMessenger] = t11;
    }
    createBinaryMessenger() {
      return C[22] || CT.C22;
    }
    handleMemoryPressure() {
    }
    handleSystemMessage(systemMessage) {
      return async.async(dart.void, (function* handleSystemMessage() {
        let message = T$.MapOfString$dynamic().as(systemMessage);
        let type = core.String.as(message[$_get]("type"));
        switch (type) {
          case "memoryPressure":
          {
            this.handleMemoryPressure();
            break;
          }
        }
        return;
      }).bind(this));
    }
    initLicenses() {
      licenses$.LicenseRegistry.addLicense(dart.bind(this, _addLicenses));
    }
    [_addLicenses]() {
      return new (T$._AsyncStarImplOfLicenseEntry()).new((function* _addLicenses(stream) {
        let rawLicenses = T$.CompleterOfString().new();
        this.scheduleTask(T$.FutureOfNull(), dart.fn(() => async.async(core.Null, function*() {
          rawLicenses.complete(yield asset_bundle.rootBundle.loadString("NOTICES", {cache: false}));
        }), T$.VoidToFutureOfNull()), priority.Priority.animation);
        yield rawLicenses.future;
        let parsedLicenses = T$.CompleterOfListOfLicenseEntry().new();
        this.scheduleTask(T$.FutureOfNull(), dart.fn(() => async.async(core.Null, function*() {
          parsedLicenses.complete(isolates.compute(core.String, T$.ListOfLicenseEntry(), C[23] || CT.C23, yield rawLicenses.future, {debugLabel: "parseLicenses"}));
        }), T$.VoidToFutureOfNull()), priority.Priority.animation);
        yield parsedLicenses.future;
        if (stream.addStream(T$.StreamOfLicenseEntry().fromIterable(yield parsedLicenses.future))) return;
        yield;
      }).bind(this)).stream;
    }
    initServiceExtensions() {
      super.initServiceExtensions();
      if (!dart.fn(() => {
        this.registerStringServiceExtension({name: "evict", getter: dart.fn(() => async.async(core.String, function*() {
            return "";
          }), T$.VoidToFutureOfString()), setter: dart.fn(value => async.async(dart.void, (function*() {
            this.evict(value);
          }).bind(this)), T$.StringToFutureOfvoid())});
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[10], 141, 12, "() {\r\n      registerStringServiceExtension(\r\n        // ext.flutter.evict value=foo.png will cause foo.png to be evicted from\r\n        // the rootBundle cache and cause the entire image cache to be cleared.\r\n        // This is used by hot reload mode to clear out the cache of resources\r\n        // that have changed.\r\n        name: 'evict',\r\n        getter: () async => '',\r\n        setter: (String value) async {\r\n          evict(value);\r\n        },\r\n      );\r\n      return true;\r\n    }()");
    }
    evict(asset) {
      asset_bundle.rootBundle.evict(asset);
    }
    readInitialLifecycleStateFromNativeWindow() {
      if (this.lifecycleState != null) {
        return;
      }
      let state = binding$0.ServicesBinding._parseAppLifecycleMessage(this.window.initialLifecycleState);
      if (state != null) {
        this.handleAppLifecycleStateChanged(state);
      }
    }
    [_handleLifecycleMessage](message) {
      return async.async(T$.StringN(), (function* _handleLifecycleMessage() {
        this.handleAppLifecycleStateChanged(dart.nullCheck(binding$0.ServicesBinding._parseAppLifecycleMessage(dart.nullCheck(message))));
        return null;
      }).bind(this));
    }
    get restorationManager() {
      return this[_restorationManager];
    }
    get [_restorationManager]() {
      let t12;
      t12 = this[__ServicesBinding__restorationManager];
      return t12 == null ? dart.throw(new _internal.LateError.fieldNI("_restorationManager")) : t12;
    }
    set [_restorationManager](t12) {
      this[__ServicesBinding__restorationManager] = t12;
    }
    createRestorationManager() {
      return new restoration.RestorationManager.new();
    }
  };
  (binding$0.ServicesBinding[dart.mixinNew] = function() {
    this[__ServicesBinding__defaultBinaryMessenger] = null;
    this[__ServicesBinding__restorationManager] = null;
  }).prototype = binding$0.ServicesBinding.prototype;
  dart.addTypeTests(binding$0.ServicesBinding);
  dart.addTypeCaches(binding$0.ServicesBinding);
  binding$0.ServicesBinding[dart.implements] = () => [binding.SchedulerBinding, binding$.BindingBase];
  dart.setMethodSignature(binding$0.ServicesBinding, () => ({
    __proto__: dart.getMethods(binding$0.ServicesBinding.__proto__),
    initInstances: dart.fnType(dart.void, []),
    createBinaryMessenger: dart.fnType(binary_messenger.BinaryMessenger, []),
    handleMemoryPressure: dart.fnType(dart.void, []),
    handleSystemMessage: dart.fnType(async.Future$(dart.void), [core.Object]),
    initLicenses: dart.fnType(dart.void, []),
    [_addLicenses]: dart.fnType(async.Stream$(licenses$.LicenseEntry), []),
    initServiceExtensions: dart.fnType(dart.void, []),
    evict: dart.fnType(dart.void, [core.String]),
    readInitialLifecycleStateFromNativeWindow: dart.fnType(dart.void, []),
    [_handleLifecycleMessage]: dart.fnType(async.Future$(dart.nullable(core.String)), [dart.nullable(core.String)]),
    createRestorationManager: dart.fnType(restoration.RestorationManager, [])
  }));
  dart.setGetterSignature(binding$0.ServicesBinding, () => ({
    __proto__: dart.getGetters(binding$0.ServicesBinding.__proto__),
    defaultBinaryMessenger: binary_messenger.BinaryMessenger,
    [_defaultBinaryMessenger]: binary_messenger.BinaryMessenger,
    restorationManager: restoration.RestorationManager,
    [_restorationManager]: restoration.RestorationManager
  }));
  dart.setSetterSignature(binding$0.ServicesBinding, () => ({
    __proto__: dart.getSetters(binding$0.ServicesBinding.__proto__),
    [_defaultBinaryMessenger]: binary_messenger.BinaryMessenger,
    [_restorationManager]: restoration.RestorationManager
  }));
  dart.setLibraryUri(binding$0.ServicesBinding, I[11]);
  dart.setFieldSignature(binding$0.ServicesBinding, () => ({
    __proto__: dart.getFields(binding$0.ServicesBinding.__proto__),
    [__ServicesBinding__defaultBinaryMessenger]: dart.fieldType(dart.nullable(binary_messenger.BinaryMessenger)),
    [__ServicesBinding__restorationManager]: dart.fieldType(dart.nullable(restoration.RestorationManager))
  }));
  dart.defineLazy(binding$0.ServicesBinding, {
    /*binding$0.ServicesBinding._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, false);
  var _sendPlatformMessage = dart.privateName(binding$0, "_sendPlatformMessage");
  binding$0._DefaultBinaryMessenger = class _DefaultBinaryMessenger extends binary_messenger.BinaryMessenger {
    [_sendPlatformMessage](channel, message) {
      let completer = T$.CompleterOfByteDataN().new();
      ui.PlatformDispatcher.instance.sendPlatformMessage(channel, message, dart.fn(reply => {
        try {
          completer.complete(reply);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("during a platform message response callback")}));
          } else
            throw e;
        }
      }, T$.ByteDataNTovoid()));
      return completer.future;
    }
    handlePlatformMessage(channel, data, callback) {
      return async.async(dart.void, function* handlePlatformMessage() {
        let response = null;
        try {
          let handler = binding$0._DefaultBinaryMessenger._handlers[$_get](channel);
          if (handler != null) {
            response = (yield handler(data));
          } else {
            ui.channelBuffers.push(channel, data, dart.nullCheck(callback));
            callback = null;
          }
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("during a platform message callback")}));
          } else
            throw e;
        } finally {
          if (callback != null) {
            callback(response);
          }
        }
      });
    }
    send(channel, message) {
      let handler = binding$0._DefaultBinaryMessenger._mockHandlers[$_get](channel);
      if (handler != null) return handler(message);
      return this[_sendPlatformMessage](channel, message);
    }
    setMessageHandler(channel, handler) {
      if (handler == null) {
        binding$0._DefaultBinaryMessenger._handlers[$remove](channel);
      } else {
        binding$0._DefaultBinaryMessenger._handlers[$_set](channel, handler);
        ui.channelBuffers.drain(channel, dart.fn((data, callback) => async.async(dart.void, (function*() {
          yield this.handlePlatformMessage(channel, data, callback);
        }).bind(this)), T$.ByteDataNAndFnToFutureOfvoid()));
      }
    }
    checkMessageHandler(channel, handler) {
      return dart.equals(binding$0._DefaultBinaryMessenger._handlers[$_get](channel), handler);
    }
    setMockMessageHandler(channel, handler) {
      if (handler == null)
        binding$0._DefaultBinaryMessenger._mockHandlers[$remove](channel);
      else
        binding$0._DefaultBinaryMessenger._mockHandlers[$_set](channel, handler);
    }
    checkMockMessageHandler(channel, handler) {
      return dart.equals(binding$0._DefaultBinaryMessenger._mockHandlers[$_get](channel), handler);
    }
  };
  (binding$0._DefaultBinaryMessenger.__ = function() {
    binding$0._DefaultBinaryMessenger.__proto__.new.call(this);
    ;
  }).prototype = binding$0._DefaultBinaryMessenger.prototype;
  dart.addTypeTests(binding$0._DefaultBinaryMessenger);
  dart.addTypeCaches(binding$0._DefaultBinaryMessenger);
  dart.setMethodSignature(binding$0._DefaultBinaryMessenger, () => ({
    __proto__: dart.getMethods(binding$0._DefaultBinaryMessenger.__proto__),
    [_sendPlatformMessage]: dart.fnType(async.Future$(dart.nullable(typed_data.ByteData)), [core.String, dart.nullable(typed_data.ByteData)]),
    handlePlatformMessage: dart.fnType(async.Future$(dart.void), [core.String, dart.nullable(typed_data.ByteData), dart.nullable(dart.fnType(dart.void, [dart.nullable(typed_data.ByteData)]))]),
    send: dart.fnType(dart.nullable(async.Future$(dart.nullable(typed_data.ByteData))), [core.String, dart.nullable(typed_data.ByteData)]),
    setMessageHandler: dart.fnType(dart.void, [core.String, dart.nullable(dart.fnType(dart.nullable(async.Future$(dart.nullable(typed_data.ByteData))), [dart.nullable(typed_data.ByteData)]))]),
    checkMessageHandler: dart.fnType(core.bool, [core.String, dart.nullable(dart.fnType(dart.nullable(async.Future$(dart.nullable(typed_data.ByteData))), [dart.nullable(typed_data.ByteData)]))]),
    setMockMessageHandler: dart.fnType(dart.void, [core.String, dart.nullable(dart.fnType(dart.nullable(async.Future$(dart.nullable(typed_data.ByteData))), [dart.nullable(typed_data.ByteData)]))]),
    checkMockMessageHandler: dart.fnType(core.bool, [core.String, dart.nullable(dart.fnType(dart.nullable(async.Future$(dart.nullable(typed_data.ByteData))), [dart.nullable(typed_data.ByteData)]))])
  }));
  dart.setLibraryUri(binding$0._DefaultBinaryMessenger, I[11]);
  dart.defineLazy(binding$0._DefaultBinaryMessenger, {
    /*binding$0._DefaultBinaryMessenger._handlers*/get _handlers() {
      return new (T$.IdentityMapOfString$ByteDataNToFutureNOfByteDataN()).new();
    },
    /*binding$0._DefaultBinaryMessenger._mockHandlers*/get _mockHandlers() {
      return new (T$.IdentityMapOfString$ByteDataNToFutureNOfByteDataN()).new();
    }
  }, false);
  asset_bundle.AssetBundle = class AssetBundle extends core.Object {
    loadString(key, opts) {
      let cache = opts && 'cache' in opts ? opts.cache : true;
      return async.async(core.String, (function* loadString() {
        let data = (yield this.load(key));
        if (data === null) dart.throw(assertions.FlutterError.new("Unable to load asset: " + key));
        if (data[$lengthInBytes] < 50 * 1024) {
          return convert.utf8.decode(data[$buffer][$asUint8List]());
        }
        return isolates.compute(typed_data.ByteData, core.String, C[25] || CT.C25, data, {debugLabel: "UTF8 decode for \"" + key + "\""});
      }).bind(this));
    }
    static _utf8decode(data) {
      return convert.utf8.decode(data[$buffer][$asUint8List]());
    }
    evict(key) {
    }
    toString() {
      return diagnostics.describeIdentity(this) + "()";
    }
  };
  (asset_bundle.AssetBundle.new = function() {
    ;
  }).prototype = asset_bundle.AssetBundle.prototype;
  dart.addTypeTests(asset_bundle.AssetBundle);
  dart.addTypeCaches(asset_bundle.AssetBundle);
  dart.setMethodSignature(asset_bundle.AssetBundle, () => ({
    __proto__: dart.getMethods(asset_bundle.AssetBundle.__proto__),
    loadString: dart.fnType(async.Future$(core.String), [core.String], {cache: core.bool}, {}),
    evict: dart.fnType(dart.void, [core.String])
  }));
  dart.setLibraryUri(asset_bundle.AssetBundle, I[12]);
  dart.defineExtensionMethods(asset_bundle.AssetBundle, ['toString']);
  var _baseUrl = dart.privateName(asset_bundle, "_baseUrl");
  var _httpClient = dart.privateName(asset_bundle, "_httpClient");
  var _urlFromKey = dart.privateName(asset_bundle, "_urlFromKey");
  asset_bundle.NetworkAssetBundle = class NetworkAssetBundle extends asset_bundle.AssetBundle {
    [_urlFromKey](key) {
      return this[_baseUrl].resolve(key);
    }
    load(key) {
      return async.async(typed_data.ByteData, (function* load() {
        let request = (yield this[_httpClient].getUrl(this[_urlFromKey](key)));
        let response = (yield request.close());
        if (response.statusCode !== 200) dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Unable to load asset: " + key), new diagnostics.IntProperty.new("HTTP status code", response.statusCode)])));
        let bytes = (yield consolidate_response.consolidateHttpClientResponseBytes(response));
        return bytes[$buffer][$asByteData]();
      }).bind(this));
    }
    loadStructuredData(T, key, parser) {
      return async.async(T, (function* loadStructuredData() {
        if (!(key !== null)) dart.assertFailed(null, I[13], 137, 12, "key != null");
        if (!(parser !== null)) dart.assertFailed(null, I[13], 138, 12, "parser != null");
        return parser(yield this.loadString(key));
      }).bind(this));
    }
    toString() {
      return diagnostics.describeIdentity(this) + "(" + dart.str(this[_baseUrl]) + ")";
    }
  };
  (asset_bundle.NetworkAssetBundle.new = function(baseUrl) {
    this[_baseUrl] = baseUrl;
    this[_httpClient] = _http.HttpClient.new();
    ;
  }).prototype = asset_bundle.NetworkAssetBundle.prototype;
  dart.addTypeTests(asset_bundle.NetworkAssetBundle);
  dart.addTypeCaches(asset_bundle.NetworkAssetBundle);
  dart.setMethodSignature(asset_bundle.NetworkAssetBundle, () => ({
    __proto__: dart.getMethods(asset_bundle.NetworkAssetBundle.__proto__),
    [_urlFromKey]: dart.fnType(core.Uri, [core.String]),
    load: dart.fnType(async.Future$(typed_data.ByteData), [core.String]),
    loadStructuredData: dart.gFnType(T => [async.Future$(T), [core.String, dart.fnType(async.Future$(T), [core.String])]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(asset_bundle.NetworkAssetBundle, I[12]);
  dart.setFieldSignature(asset_bundle.NetworkAssetBundle, () => ({
    __proto__: dart.getFields(asset_bundle.NetworkAssetBundle.__proto__),
    [_baseUrl]: dart.finalFieldType(core.Uri),
    [_httpClient]: dart.finalFieldType(_http.HttpClient)
  }));
  dart.defineExtensionMethods(asset_bundle.NetworkAssetBundle, ['toString']);
  var _stringCache = dart.privateName(asset_bundle, "_stringCache");
  var _structuredDataCache = dart.privateName(asset_bundle, "_structuredDataCache");
  asset_bundle.CachingAssetBundle = class CachingAssetBundle extends asset_bundle.AssetBundle {
    loadString(key, opts) {
      let cache = opts && 'cache' in opts ? opts.cache : true;
      if (cache) return this[_stringCache][$putIfAbsent](key, dart.fn(() => super.loadString(key), T$.VoidToFutureOfString()));
      return super.loadString(key);
    }
    loadStructuredData(T, key, parser) {
      if (!(key !== null)) dart.assertFailed(null, I[13], 181, 12, "key != null");
      if (!(parser !== null)) dart.assertFailed(null, I[13], 182, 12, "parser != null");
      if (this[_structuredDataCache][$containsKey](key)) return async.Future$(T).as(dart.nullCheck(this[_structuredDataCache][$_get](key)));
      let completer = null;
      let result = null;
      this.loadString(key, {cache: false}).then(T, parser).then(dart.void, dart.fn(value => {
        result = new (synchronous_future.SynchronousFuture$(T)).new(value);
        this[_structuredDataCache][$_set](key, dart.nullCheck(result));
        if (completer != null) {
          completer.complete(value);
        }
      }, dart.fnType(core.Null, [T])));
      if (result != null) {
        return dart.nullCheck(result);
      }
      completer = async.Completer$(T).new();
      this[_structuredDataCache][$_set](key, completer.future);
      return completer.future;
    }
    evict(key) {
      this[_stringCache][$remove](key);
      this[_structuredDataCache][$remove](key);
    }
  };
  (asset_bundle.CachingAssetBundle.new = function() {
    this[_stringCache] = new (T$.IdentityMapOfString$FutureOfString()).new();
    this[_structuredDataCache] = new (T$.IdentityMapOfString$Future()).new();
    ;
  }).prototype = asset_bundle.CachingAssetBundle.prototype;
  dart.addTypeTests(asset_bundle.CachingAssetBundle);
  dart.addTypeCaches(asset_bundle.CachingAssetBundle);
  dart.setMethodSignature(asset_bundle.CachingAssetBundle, () => ({
    __proto__: dart.getMethods(asset_bundle.CachingAssetBundle.__proto__),
    loadStructuredData: dart.gFnType(T => [async.Future$(T), [core.String, dart.fnType(async.Future$(T), [core.String])]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(asset_bundle.CachingAssetBundle, I[12]);
  dart.setFieldSignature(asset_bundle.CachingAssetBundle, () => ({
    __proto__: dart.getFields(asset_bundle.CachingAssetBundle.__proto__),
    [_stringCache]: dart.finalFieldType(core.Map$(core.String, async.Future$(core.String))),
    [_structuredDataCache]: dart.finalFieldType(core.Map$(core.String, async.Future))
  }));
  asset_bundle.PlatformAssetBundle = class PlatformAssetBundle extends asset_bundle.CachingAssetBundle {
    load(key) {
      return async.async(typed_data.ByteData, function* load() {
        let encoded = convert.utf8.encoder.convert(core._Uri.new({path: core.Uri.encodeFull(key)}).path);
        let asset = (yield dart.nullCheck(binding$0.ServicesBinding.instance).defaultBinaryMessenger.send("flutter/assets", encoded[$buffer][$asByteData]()));
        if (asset == null) dart.throw(assertions.FlutterError.new("Unable to load asset: " + key));
        return asset;
      });
    }
  };
  (asset_bundle.PlatformAssetBundle.new = function() {
    asset_bundle.PlatformAssetBundle.__proto__.new.call(this);
    ;
  }).prototype = asset_bundle.PlatformAssetBundle.prototype;
  dart.addTypeTests(asset_bundle.PlatformAssetBundle);
  dart.addTypeCaches(asset_bundle.PlatformAssetBundle);
  dart.setMethodSignature(asset_bundle.PlatformAssetBundle, () => ({
    __proto__: dart.getMethods(asset_bundle.PlatformAssetBundle.__proto__),
    load: dart.fnType(async.Future$(typed_data.ByteData), [core.String])
  }));
  dart.setLibraryUri(asset_bundle.PlatformAssetBundle, I[12]);
  asset_bundle._initRootBundle = function _initRootBundle() {
    return new asset_bundle.PlatformAssetBundle.new();
  };
  dart.defineLazy(asset_bundle, {
    /*asset_bundle.rootBundle*/get rootBundle() {
      return asset_bundle._initRootBundle();
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/services/system_channels.dart", {
    "package:flutter/src/services/system_channels.dart": system_channels,
    "package:flutter/src/services/message_codecs.dart": message_codecs,
    "package:flutter/src/services/platform_channel.dart": platform_channel,
    "package:flutter/src/services/message_codec.dart": message_codec,
    "package:flutter/src/services/restoration.dart": restoration,
    "package:flutter/src/services/binary_messenger.dart": binary_messenger,
    "package:flutter/src/services/binding.dart": binding$0,
    "package:flutter/src/services/asset_bundle.dart": asset_bundle
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["system_channels.dart","message_codecs.dart","platform_channel.dart","message_codec.dart","restoration.dart","binary_messenger.dart","binding.dart","asset_bundle.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/services/system_channels.dart.lib.js"}');
  // Exports:
  return {
    src__services__system_channels: system_channels,
    src__services__message_codecs: message_codecs,
    src__services__platform_channel: platform_channel,
    src__services__message_codec: message_codec,
    src__services__restoration: restoration,
    src__services__binary_messenger: binary_messenger,
    src__services__binding: binding$0,
    src__services__asset_bundle: asset_bundle
  };
}));

//# sourceMappingURL=system_channels.dart.lib.js.map
>>>>>>> feature-b
