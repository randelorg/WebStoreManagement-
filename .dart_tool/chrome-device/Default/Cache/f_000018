<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/material/material_state.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/painting/rounded_rectangle_border.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/services/mouse_cursor.dart', 'packages/flutter/src/material/constants.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/rendering/flex.dart'], (function load__packages__flutter__src__material__elevated_button_dart(dart_sdk, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__material__material_state$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__borders$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__painting__rounded_rectangle_border$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__services__mouse_cursor$46dart, packages__flutter__src__material__constants$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__rendering__flex$46dart) {
=======
define(['dart_sdk', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__painting__gradient_dart(dart_sdk, packages__vector_math__vector_math_64$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__foundation__object$46dart) {
>>>>>>> feature-b
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
<<<<<<< HEAD
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const button_style = packages__flutter__src__material__icon_button$46dart.src__material__button_style;
  const button_style_button = packages__flutter__src__material__icon_button$46dart.src__material__button_style_button;
  const theme$ = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const ink_ripple = packages__flutter__src__material__icon_button$46dart.src__material__ink_ripple;
  const elevated_button_theme = packages__flutter__src__material__icon_button$46dart.src__material__elevated_button_theme;
  const material_state = packages__flutter__src__material__material_state$46dart.src__material__material_state;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const rounded_rectangle_border = packages__flutter__src__painting__rounded_rectangle_border$46dart.src__painting__rounded_rectangle_border;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const mouse_cursor = packages__flutter__src__services__mouse_cursor$46dart.src__services__mouse_cursor;
  const constants = packages__flutter__src__material__constants$46dart.src__material__constants;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const flex = packages__flutter__src__rendering__flex$46dart.src__rendering__flex;
  var elevated_button = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  var T = {
    TextStyleN: () => (T.TextStyleN = dart.constFn(dart.nullable(text_style.TextStyle)))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))()
=======
  const typed_data = dart_sdk.typed_data;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var gradient = Object.create(dart.library);
  var $length = dartx.length;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $runtimeType = dartx.runtimeType;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $last = dartx.last;
  var $lastIndexWhere = dartx.lastIndexWhere;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    ListOfdouble: () => (T.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    intTodouble: () => (T.intTodouble = dart.constFn(dart.fnType(core.double, [core.int])))(),
    ColorToColor: () => (T.ColorToColor = dart.constFn(dart.fnType(ui.Color, [ui.Color])))(),
    LinearGradientN: () => (T.LinearGradientN = dart.constFn(dart.nullable(gradient.LinearGradient)))(),
    RadialGradientN: () => (T.RadialGradientN = dart.constFn(dart.nullable(gradient.RadialGradient)))(),
    SweepGradientN: () => (T.SweepGradientN = dart.constFn(dart.nullable(gradient.SweepGradient)))(),
    doubleTobool: () => (T.doubleTobool = dart.constFn(dart.fnType(core.bool, [core.double])))(),
    SplayTreeSetOfdouble: () => (T.SplayTreeSetOfdouble = dart.constFn(collection.SplayTreeSet$(core.double)))(),
    doubleToColor: () => (T.doubleToColor = dart.constFn(dart.fnType(ui.Color, [core.double])))()
>>>>>>> feature-b
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
<<<<<<< HEAD
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.none",
        index: 0
=======
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: -1
>>>>>>> feature-b
      });
    },
    get C1() {
      return C[1] = dart.const({
<<<<<<< HEAD
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 16,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 16
=======
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 1
>>>>>>> feature-b
      });
    },
    get C2() {
      return C[2] = dart.const({
<<<<<<< HEAD
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 8
=======
        __proto__: ui.TileMode.prototype,
        [_name]: "TileMode.clamp",
        index: 0
>>>>>>> feature-b
      });
    },
    get C3() {
      return C[3] = dart.const({
<<<<<<< HEAD
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 4,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 4
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 36,
        [OffsetBase__dx]: 64
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_name$]: "BorderStyle.none",
        index: 0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_style]: C[7] || CT.C7,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[8] || CT.C8
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 4,
        [Radius_x]: 4
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C[10] || CT.C10,
        [BorderRadius_bottomLeft]: C[10] || CT.C10,
        [BorderRadius_topRight]: C[10] || CT.C10,
        [BorderRadius_topLeft]: C[10] || CT.C10
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: rounded_rectangle_border.RoundedRectangleBorder.prototype,
        [OutlinedBorder_side]: C[6] || CT.C6,
        [RoundedRectangleBorder_borderRadius]: C[9] || CT.C9
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "icon",
        [_Location_column]: 46,
        [_Location_line]: 441,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "label",
        [_Location_column]: 58,
        [_Location_line]: 441,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.constList([C[13] || CT.C13, C[14] || CT.C14], widget_inspector._Location);
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[12] || CT.C12,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 441,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/elevated_button.dart"
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: edge_insets.EdgeInsetsDirectional.prototype,
        [EdgeInsetsDirectional_bottom]: 0,
        [EdgeInsetsDirectional_end]: 16,
        [EdgeInsetsDirectional_top]: 0,
        [EdgeInsetsDirectional_start]: 12
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: edge_insets.EdgeInsetsDirectional.prototype,
        [EdgeInsetsDirectional_bottom]: 0,
        [EdgeInsetsDirectional_end]: 4,
        [EdgeInsetsDirectional_top]: 0,
        [EdgeInsetsDirectional_start]: 8
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 41,
        [_Location_line]: 470,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.constList([C[19] || CT.C19], widget_inspector._Location);
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[18] || CT.C18,
        [_Location_name]: null,
        [_Location_column]: 32,
        [_Location_line]: 470,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/elevated_button.dart"
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mainAxisSize",
        [_Location_column]: 7,
        [_Location_line]: 469,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 7,
        [_Location_line]: 470,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.constList([C[22] || CT.C22, C[23] || CT.C23], widget_inspector._Location);
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[21] || CT.C21,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 468,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/elevated_button.dart"
      });
    }
  }, false);
  var C = Array(24).fill(void 0);
  var I = [
    "package:flutter/src/material/elevated_button.dart",
    "file:///C:/flutter/packages/flutter/lib/src/material/elevated_button.dart"
  ];
  var _name = dart.privateName(ui, "_name");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _name$ = dart.privateName(borders, "_name");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var OutlinedBorder_side = dart.privateName(borders, "OutlinedBorder.side");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  var RoundedRectangleBorder_borderRadius = dart.privateName(rounded_rectangle_border, "RoundedRectangleBorder.borderRadius");
  elevated_button.ElevatedButton = class ElevatedButton extends button_style_button.ButtonStyleButton {
    static styleFrom(opts) {
      let primary = opts && 'primary' in opts ? opts.primary : null;
      let onPrimary = opts && 'onPrimary' in opts ? opts.onPrimary : null;
      let onSurface = opts && 'onSurface' in opts ? opts.onSurface : null;
      let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let minimumSize = opts && 'minimumSize' in opts ? opts.minimumSize : null;
      let fixedSize = opts && 'fixedSize' in opts ? opts.fixedSize : null;
      let side = opts && 'side' in opts ? opts.side : null;
      let shape = opts && 'shape' in opts ? opts.shape : null;
      let enabledMouseCursor = opts && 'enabledMouseCursor' in opts ? opts.enabledMouseCursor : null;
      let disabledMouseCursor = opts && 'disabledMouseCursor' in opts ? opts.disabledMouseCursor : null;
      let visualDensity = opts && 'visualDensity' in opts ? opts.visualDensity : null;
      let tapTargetSize = opts && 'tapTargetSize' in opts ? opts.tapTargetSize : null;
      let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : null;
      let enableFeedback = opts && 'enableFeedback' in opts ? opts.enableFeedback : null;
      let alignment = opts && 'alignment' in opts ? opts.alignment : null;
      let splashFactory = opts && 'splashFactory' in opts ? opts.splashFactory : null;
      let backgroundColor = onSurface == null && primary == null ? null : new elevated_button._ElevatedButtonDefaultBackground.new(primary, onSurface);
      let foregroundColor = onSurface == null && onPrimary == null ? null : new elevated_button._ElevatedButtonDefaultForeground.new(onPrimary, onSurface);
      let overlayColor = onPrimary == null ? null : new elevated_button._ElevatedButtonDefaultOverlay.new(onPrimary);
      let elevationValue = elevation == null ? null : new elevated_button._ElevatedButtonDefaultElevation.new(elevation);
      let mouseCursor = enabledMouseCursor == null && disabledMouseCursor == null ? null : new elevated_button._ElevatedButtonDefaultMouseCursor.new(enabledMouseCursor, disabledMouseCursor);
      return new button_style.ButtonStyle.new({textStyle: material_state.MaterialStateProperty.all(T.TextStyleN(), textStyle), backgroundColor: backgroundColor, foregroundColor: foregroundColor, overlayColor: overlayColor, shadowColor: button_style_button.ButtonStyleButton.allOrNull(ui.Color, shadowColor), elevation: elevationValue, padding: button_style_button.ButtonStyleButton.allOrNull(edge_insets.EdgeInsetsGeometry, padding), minimumSize: button_style_button.ButtonStyleButton.allOrNull(ui.Size, minimumSize), fixedSize: button_style_button.ButtonStyleButton.allOrNull(ui.Size, fixedSize), side: button_style_button.ButtonStyleButton.allOrNull(borders.BorderSide, side), shape: button_style_button.ButtonStyleButton.allOrNull(borders.OutlinedBorder, shape), mouseCursor: mouseCursor, visualDensity: visualDensity, tapTargetSize: tapTargetSize, animationDuration: animationDuration, enableFeedback: enableFeedback, alignment: alignment, splashFactory: splashFactory});
    }
    defaultStyleOf(context) {
      let t0, t0$;
      let theme = theme$.Theme.of(context);
      let colorScheme = theme.colorScheme;
      let scaledPadding = button_style_button.ButtonStyleButton.scaledPadding(C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, (t0$ = (t0 = media_query.MediaQuery.maybeOf(context), t0 == null ? null : t0.textScaleFactor), t0$ == null ? 1.0 : t0$));
      return elevated_button.ElevatedButton.styleFrom({primary: colorScheme.primary, onPrimary: colorScheme.onPrimary, onSurface: colorScheme.onSurface, shadowColor: theme.shadowColor, elevation: 2.0, textStyle: theme.textTheme.button, padding: scaledPadding, minimumSize: C[4] || CT.C4, side: null, shape: C[5] || CT.C5, enabledMouseCursor: mouse_cursor.SystemMouseCursors.click, disabledMouseCursor: mouse_cursor.SystemMouseCursors.forbidden, visualDensity: theme.visualDensity, tapTargetSize: theme.materialTapTargetSize, animationDuration: constants.kThemeChangeDuration, enableFeedback: true, alignment: alignment.Alignment.center, splashFactory: ink_ripple.InkRipple.splashFactory});
    }
    themeStyleOf(context) {
      return elevated_button_theme.ElevatedButtonTheme.of(context).style;
    }
  };
  (elevated_button.ElevatedButton.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let onPressed = opts && 'onPressed' in opts ? opts.onPressed : null;
    let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[0] || CT.C0;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    elevated_button.ElevatedButton.__proto__.new.call(this, {key: key, onPressed: onPressed, onLongPress: onLongPress, style: style, focusNode: focusNode, autofocus: autofocus, clipBehavior: clipBehavior, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = elevated_button.ElevatedButton.prototype;
  dart.addTypeTests(elevated_button.ElevatedButton);
  dart.addTypeCaches(elevated_button.ElevatedButton);
  dart.setMethodSignature(elevated_button.ElevatedButton, () => ({
    __proto__: dart.getMethods(elevated_button.ElevatedButton.__proto__),
    defaultStyleOf: dart.fnType(button_style.ButtonStyle, [framework.BuildContext]),
    themeStyleOf: dart.fnType(dart.nullable(button_style.ButtonStyle), [framework.BuildContext])
  }));
  dart.setLibraryUri(elevated_button.ElevatedButton, I[0]);
  const MaterialStateProperty_Diagnosticable$36 = class MaterialStateProperty_Diagnosticable extends material_state.MaterialStateProperty$(dart.nullable(ui.Color)) {};
  (MaterialStateProperty_Diagnosticable$36.new = function() {
  }).prototype = MaterialStateProperty_Diagnosticable$36.prototype;
  dart.applyMixin(MaterialStateProperty_Diagnosticable$36, diagnostics.Diagnosticable);
  elevated_button._ElevatedButtonDefaultBackground = class _ElevatedButtonDefaultBackground extends MaterialStateProperty_Diagnosticable$36 {
    resolve(states) {
      let t0;
      if (states.contains(material_state.MaterialState.disabled)) {
        t0 = this.onSurface;
        return t0 == null ? null : t0.withOpacity(0.12);
      }
      return this.primary;
    }
  };
  (elevated_button._ElevatedButtonDefaultBackground.new = function(primary, onSurface) {
    this.primary = primary;
    this.onSurface = onSurface;
    ;
  }).prototype = elevated_button._ElevatedButtonDefaultBackground.prototype;
  dart.addTypeTests(elevated_button._ElevatedButtonDefaultBackground);
  dart.addTypeCaches(elevated_button._ElevatedButtonDefaultBackground);
  dart.setMethodSignature(elevated_button._ElevatedButtonDefaultBackground, () => ({
    __proto__: dart.getMethods(elevated_button._ElevatedButtonDefaultBackground.__proto__),
    resolve: dart.fnType(dart.nullable(ui.Color), [core.Set$(material_state.MaterialState)])
  }));
  dart.setLibraryUri(elevated_button._ElevatedButtonDefaultBackground, I[0]);
  dart.setFieldSignature(elevated_button._ElevatedButtonDefaultBackground, () => ({
    __proto__: dart.getFields(elevated_button._ElevatedButtonDefaultBackground.__proto__),
    primary: dart.finalFieldType(dart.nullable(ui.Color)),
    onSurface: dart.finalFieldType(dart.nullable(ui.Color))
  }));
  const MaterialStateProperty_Diagnosticable$36$ = class MaterialStateProperty_Diagnosticable extends material_state.MaterialStateProperty$(dart.nullable(ui.Color)) {};
  (MaterialStateProperty_Diagnosticable$36$.new = function() {
  }).prototype = MaterialStateProperty_Diagnosticable$36$.prototype;
  dart.applyMixin(MaterialStateProperty_Diagnosticable$36$, diagnostics.Diagnosticable);
  elevated_button._ElevatedButtonDefaultForeground = class _ElevatedButtonDefaultForeground extends MaterialStateProperty_Diagnosticable$36$ {
    resolve(states) {
      let t0;
      if (states.contains(material_state.MaterialState.disabled)) {
        t0 = this.onSurface;
        return t0 == null ? null : t0.withOpacity(0.38);
      }
      return this.onPrimary;
    }
  };
  (elevated_button._ElevatedButtonDefaultForeground.new = function(onPrimary, onSurface) {
    this.onPrimary = onPrimary;
    this.onSurface = onSurface;
    ;
  }).prototype = elevated_button._ElevatedButtonDefaultForeground.prototype;
  dart.addTypeTests(elevated_button._ElevatedButtonDefaultForeground);
  dart.addTypeCaches(elevated_button._ElevatedButtonDefaultForeground);
  dart.setMethodSignature(elevated_button._ElevatedButtonDefaultForeground, () => ({
    __proto__: dart.getMethods(elevated_button._ElevatedButtonDefaultForeground.__proto__),
    resolve: dart.fnType(dart.nullable(ui.Color), [core.Set$(material_state.MaterialState)])
  }));
  dart.setLibraryUri(elevated_button._ElevatedButtonDefaultForeground, I[0]);
  dart.setFieldSignature(elevated_button._ElevatedButtonDefaultForeground, () => ({
    __proto__: dart.getFields(elevated_button._ElevatedButtonDefaultForeground.__proto__),
    onPrimary: dart.finalFieldType(dart.nullable(ui.Color)),
    onSurface: dart.finalFieldType(dart.nullable(ui.Color))
  }));
  const MaterialStateProperty_Diagnosticable$36$0 = class MaterialStateProperty_Diagnosticable extends material_state.MaterialStateProperty$(dart.nullable(ui.Color)) {};
  (MaterialStateProperty_Diagnosticable$36$0.new = function() {
  }).prototype = MaterialStateProperty_Diagnosticable$36$0.prototype;
  dart.applyMixin(MaterialStateProperty_Diagnosticable$36$0, diagnostics.Diagnosticable);
  elevated_button._ElevatedButtonDefaultOverlay = class _ElevatedButtonDefaultOverlay extends MaterialStateProperty_Diagnosticable$36$0 {
    resolve(states) {
      if (states.contains(material_state.MaterialState.hovered)) return this.onPrimary.withOpacity(0.08);
      if (states.contains(material_state.MaterialState.focused) || states.contains(material_state.MaterialState.pressed)) return this.onPrimary.withOpacity(0.24);
      return null;
    }
  };
  (elevated_button._ElevatedButtonDefaultOverlay.new = function(onPrimary) {
    this.onPrimary = onPrimary;
    ;
  }).prototype = elevated_button._ElevatedButtonDefaultOverlay.prototype;
  dart.addTypeTests(elevated_button._ElevatedButtonDefaultOverlay);
  dart.addTypeCaches(elevated_button._ElevatedButtonDefaultOverlay);
  dart.setMethodSignature(elevated_button._ElevatedButtonDefaultOverlay, () => ({
    __proto__: dart.getMethods(elevated_button._ElevatedButtonDefaultOverlay.__proto__),
    resolve: dart.fnType(dart.nullable(ui.Color), [core.Set$(material_state.MaterialState)])
  }));
  dart.setLibraryUri(elevated_button._ElevatedButtonDefaultOverlay, I[0]);
  dart.setFieldSignature(elevated_button._ElevatedButtonDefaultOverlay, () => ({
    __proto__: dart.getFields(elevated_button._ElevatedButtonDefaultOverlay.__proto__),
    onPrimary: dart.finalFieldType(ui.Color)
  }));
  const MaterialStateProperty_Diagnosticable$36$1 = class MaterialStateProperty_Diagnosticable extends material_state.MaterialStateProperty$(core.double) {};
  (MaterialStateProperty_Diagnosticable$36$1.new = function() {
  }).prototype = MaterialStateProperty_Diagnosticable$36$1.prototype;
  dart.applyMixin(MaterialStateProperty_Diagnosticable$36$1, diagnostics.Diagnosticable);
  elevated_button._ElevatedButtonDefaultElevation = class _ElevatedButtonDefaultElevation extends MaterialStateProperty_Diagnosticable$36$1 {
    resolve(states) {
      if (states.contains(material_state.MaterialState.disabled)) return 0.0;
      if (states.contains(material_state.MaterialState.hovered)) return this.elevation + 2;
      if (states.contains(material_state.MaterialState.focused)) return this.elevation + 2;
      if (states.contains(material_state.MaterialState.pressed)) return this.elevation + 6;
      return this.elevation;
    }
  };
  (elevated_button._ElevatedButtonDefaultElevation.new = function(elevation) {
    this.elevation = elevation;
    ;
  }).prototype = elevated_button._ElevatedButtonDefaultElevation.prototype;
  dart.addTypeTests(elevated_button._ElevatedButtonDefaultElevation);
  dart.addTypeCaches(elevated_button._ElevatedButtonDefaultElevation);
  dart.setMethodSignature(elevated_button._ElevatedButtonDefaultElevation, () => ({
    __proto__: dart.getMethods(elevated_button._ElevatedButtonDefaultElevation.__proto__),
    resolve: dart.fnType(core.double, [core.Set$(material_state.MaterialState)])
  }));
  dart.setLibraryUri(elevated_button._ElevatedButtonDefaultElevation, I[0]);
  dart.setFieldSignature(elevated_button._ElevatedButtonDefaultElevation, () => ({
    __proto__: dart.getFields(elevated_button._ElevatedButtonDefaultElevation.__proto__),
    elevation: dart.finalFieldType(core.double)
  }));
  const MaterialStateProperty_Diagnosticable$36$2 = class MaterialStateProperty_Diagnosticable extends material_state.MaterialStateProperty$(dart.nullable(mouse_cursor.MouseCursor)) {};
  (MaterialStateProperty_Diagnosticable$36$2.new = function() {
  }).prototype = MaterialStateProperty_Diagnosticable$36$2.prototype;
  dart.applyMixin(MaterialStateProperty_Diagnosticable$36$2, diagnostics.Diagnosticable);
  elevated_button._ElevatedButtonDefaultMouseCursor = class _ElevatedButtonDefaultMouseCursor extends MaterialStateProperty_Diagnosticable$36$2 {
    resolve(states) {
      if (states.contains(material_state.MaterialState.disabled)) return this.disabledCursor;
      return this.enabledCursor;
    }
  };
  (elevated_button._ElevatedButtonDefaultMouseCursor.new = function(enabledCursor, disabledCursor) {
    this.enabledCursor = enabledCursor;
    this.disabledCursor = disabledCursor;
    ;
  }).prototype = elevated_button._ElevatedButtonDefaultMouseCursor.prototype;
  dart.addTypeTests(elevated_button._ElevatedButtonDefaultMouseCursor);
  dart.addTypeCaches(elevated_button._ElevatedButtonDefaultMouseCursor);
  dart.setMethodSignature(elevated_button._ElevatedButtonDefaultMouseCursor, () => ({
    __proto__: dart.getMethods(elevated_button._ElevatedButtonDefaultMouseCursor.__proto__),
    resolve: dart.fnType(dart.nullable(mouse_cursor.MouseCursor), [core.Set$(material_state.MaterialState)])
  }));
  dart.setLibraryUri(elevated_button._ElevatedButtonDefaultMouseCursor, I[0]);
  dart.setFieldSignature(elevated_button._ElevatedButtonDefaultMouseCursor, () => ({
    __proto__: dart.getFields(elevated_button._ElevatedButtonDefaultMouseCursor.__proto__),
    enabledCursor: dart.finalFieldType(dart.nullable(mouse_cursor.MouseCursor)),
    disabledCursor: dart.finalFieldType(dart.nullable(mouse_cursor.MouseCursor))
  }));
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var EdgeInsetsDirectional_bottom = dart.privateName(edge_insets, "EdgeInsetsDirectional.bottom");
  var EdgeInsetsDirectional_end = dart.privateName(edge_insets, "EdgeInsetsDirectional.end");
  var EdgeInsetsDirectional_top = dart.privateName(edge_insets, "EdgeInsetsDirectional.top");
  var EdgeInsetsDirectional_start = dart.privateName(edge_insets, "EdgeInsetsDirectional.start");
  elevated_button._ElevatedButtonWithIcon = class _ElevatedButtonWithIcon extends elevated_button.ElevatedButton {
    defaultStyleOf(context) {
      let t0, t0$;
      let scaledPadding = button_style_button.ButtonStyleButton.scaledPadding(C[15] || CT.C15, C[2] || CT.C2, C[16] || CT.C16, (t0$ = (t0 = media_query.MediaQuery.maybeOf(context), t0 == null ? null : t0.textScaleFactor), t0$ == null ? 1.0 : t0$));
      return super.defaultStyleOf(context).copyWith({padding: material_state.MaterialStateProperty.all(edge_insets.EdgeInsetsGeometry, scaledPadding)});
    }
  };
  (elevated_button._ElevatedButtonWithIcon.new = function(opts) {
    let t0, t0$;
    let key = opts && 'key' in opts ? opts.key : null;
    let onPressed = opts && 'onPressed' in opts ? opts.onPressed : null;
    let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    if (!(icon !== null)) dart.assertFailed(null, I[1], 431, 15, "icon != null");
    if (!(label !== null)) dart.assertFailed(null, I[1], 432, 15, "label != null");
    elevated_button._ElevatedButtonWithIcon.__proto__.new.call(this, {key: key, onPressed: onPressed, onLongPress: onLongPress, style: style, focusNode: focusNode, autofocus: (t0 = autofocus, t0 == null ? false : t0), clipBehavior: (t0$ = clipBehavior, t0$ == null ? ui.Clip.none : t0$), child: new elevated_button._ElevatedButtonWithIconChild.new({icon: icon, label: label, $creationLocationd_0dea112b090073317d4: C[11] || CT.C11}), $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = elevated_button._ElevatedButtonWithIcon.prototype;
  dart.addTypeTests(elevated_button._ElevatedButtonWithIcon);
  dart.addTypeCaches(elevated_button._ElevatedButtonWithIcon);
  dart.setLibraryUri(elevated_button._ElevatedButtonWithIcon, I[0]);
  var label$ = dart.privateName(elevated_button, "_ElevatedButtonWithIconChild.label");
  var icon$ = dart.privateName(elevated_button, "_ElevatedButtonWithIconChild.icon");
  elevated_button._ElevatedButtonWithIconChild = class _ElevatedButtonWithIconChild extends framework.StatelessWidget {
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get icon() {
      return this[icon$];
    }
    set icon(value) {
      super.icon = value;
    }
    build(context) {
      let t0, t0$;
      let scale = (t0$ = (t0 = media_query.MediaQuery.maybeOf(context), t0 == null ? null : t0.textScaleFactor), t0$ == null ? 1.0 : t0$);
      let gap = scale <= 1 ? 8.0 : dart.nullCheck(ui.lerpDouble(8, 4, math.min(core.double, scale - 1, 1.0)));
      return new basic.Row.new({mainAxisSize: flex.MainAxisSize.min, children: T.JSArrayOfWidget().of([this.icon, new basic.SizedBox.new({width: gap, $creationLocationd_0dea112b090073317d4: C[17] || CT.C17}), this.label]), $creationLocationd_0dea112b090073317d4: C[20] || CT.C20});
    }
  };
  (elevated_button._ElevatedButtonWithIconChild.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[label$] = label;
    this[icon$] = icon;
    elevated_button._ElevatedButtonWithIconChild.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = elevated_button._ElevatedButtonWithIconChild.prototype;
  dart.addTypeTests(elevated_button._ElevatedButtonWithIconChild);
  dart.addTypeCaches(elevated_button._ElevatedButtonWithIconChild);
  dart.setMethodSignature(elevated_button._ElevatedButtonWithIconChild, () => ({
    __proto__: dart.getMethods(elevated_button._ElevatedButtonWithIconChild.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(elevated_button._ElevatedButtonWithIconChild, I[0]);
  dart.setFieldSignature(elevated_button._ElevatedButtonWithIconChild, () => ({
    __proto__: dart.getFields(elevated_button._ElevatedButtonWithIconChild.__proto__),
    label: dart.finalFieldType(framework.Widget),
    icon: dart.finalFieldType(framework.Widget)
  }));
  dart.trackLibraries("packages/flutter/src/material/elevated_button.dart", {
    "package:flutter/src/material/elevated_button.dart": elevated_button
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["elevated_button.dart"],"names":[],"mappings":"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","file":"../../../../../../../E:/packages/flutter/src/material/elevated_button.dart.lib.js"}');
  // Exports:
  return {
    src__material__elevated_button: elevated_button
  };
}));

//# sourceMappingURL=elevated_button.dart.lib.js.map
=======
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "package:flutter/src/painting/gradient.dart",
    "file:///C:/flutter/packages/flutter/lib/src/painting/gradient.dart"
  ];
  gradient._ColorsAndStops = class _ColorsAndStops extends core.Object {};
  (gradient._ColorsAndStops.new = function(colors, stops) {
    this.colors = colors;
    this.stops = stops;
    ;
  }).prototype = gradient._ColorsAndStops.prototype;
  dart.addTypeTests(gradient._ColorsAndStops);
  dart.addTypeCaches(gradient._ColorsAndStops);
  dart.setLibraryUri(gradient._ColorsAndStops, I[0]);
  dart.setFieldSignature(gradient._ColorsAndStops, () => ({
    __proto__: dart.getFields(gradient._ColorsAndStops.__proto__),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    stops: dart.finalFieldType(core.List$(core.double))
  }));
  gradient.GradientTransform = class GradientTransform extends core.Object {};
  (gradient.GradientTransform.new = function() {
    ;
  }).prototype = gradient.GradientTransform.prototype;
  dart.addTypeTests(gradient.GradientTransform);
  dart.addTypeCaches(gradient.GradientTransform);
  dart.setLibraryUri(gradient.GradientTransform, I[0]);
  var radians$ = dart.privateName(gradient, "GradientRotation.radians");
  gradient.GradientRotation = class GradientRotation extends gradient.GradientTransform {
    get radians() {
      return this[radians$];
    }
    set radians(value) {
      super.radians = value;
    }
    transform(bounds, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (!(bounds !== null)) dart.assertFailed(null, I[1], 110, 12, "bounds != null");
      let sinRadians = math.sin(this.radians);
      let oneMinusCosRadians = 1 - math.cos(this.radians);
      let center = bounds.center;
      let originX = sinRadians * center.dy + oneMinusCosRadians * center.dx;
      let originY = -sinRadians * center.dx + oneMinusCosRadians * center.dy;
      t0 = vector_math_64.Matrix4.identity();
      return (() => {
        t0.translate(originX, originY);
        t0.rotateZ(this.radians);
        return t0;
      })();
    }
  };
  (gradient.GradientRotation.new = function(radians) {
    this[radians$] = radians;
    gradient.GradientRotation.__proto__.new.call(this);
    ;
  }).prototype = gradient.GradientRotation.prototype;
  dart.addTypeTests(gradient.GradientRotation);
  dart.addTypeCaches(gradient.GradientRotation);
  dart.setMethodSignature(gradient.GradientRotation, () => ({
    __proto__: dart.getMethods(gradient.GradientRotation.__proto__),
    transform: dart.fnType(vector_math_64.Matrix4, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {})
  }));
  dart.setLibraryUri(gradient.GradientRotation, I[0]);
  dart.setFieldSignature(gradient.GradientRotation, () => ({
    __proto__: dart.getFields(gradient.GradientRotation.__proto__),
    radians: dart.finalFieldType(core.double)
  }));
  var colors$ = dart.privateName(gradient, "Gradient.colors");
  var stops$ = dart.privateName(gradient, "Gradient.stops");
  var transform$ = dart.privateName(gradient, "Gradient.transform");
  var _impliedStops = dart.privateName(gradient, "_impliedStops");
  var _resolveTransform = dart.privateName(gradient, "_resolveTransform");
  gradient.Gradient = class Gradient extends core.Object {
    get colors() {
      return this[colors$];
    }
    set colors(value) {
      super.colors = value;
    }
    get stops() {
      return this[stops$];
    }
    set stops(value) {
      super.stops = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    [_impliedStops]() {
      if (this.stops != null) return dart.nullCheck(this.stops);
      if (!(this.colors[$length] >= 2)) dart.assertFailed("colors list must have at least two colors", I[1], 190, 12, "colors.length >= 2");
      let separation = 1.0 / (this.colors[$length] - 1);
      return T.ListOfdouble().generate(this.colors[$length], dart.fn(index => index * separation, T.intTodouble()), {growable: false});
    }
    lerpFrom(a, t) {
      if (a == null) return this.scale(t);
      return null;
    }
    lerpTo(b, t) {
      if (b == null) return this.scale(1.0 - t);
      return null;
    }
    static lerp(a, b, t) {
      if (!(t !== null)) dart.assertFailed(null, I[1], 291, 12, "t != null");
      let result = null;
      if (b != null) result = b.lerpFrom(a, t);
      if (result == null && a != null) result = a.lerpTo(b, t);
      if (result != null) return result;
      if (a == null && b == null) return null;
      if (!(a != null && b != null)) dart.assertFailed(null, I[1], 301, 12, "a != null && b != null");
      return t < 0.5 ? dart.nullCheck(a).scale(1.0 - t * 2.0) : dart.nullCheck(b).scale((t - 0.5) * 2.0);
    }
    [_resolveTransform](bounds, textDirection) {
      let t1, t0;
      t0 = this.transform;
      return t0 == null ? null : (t1 = t0.transform(bounds, {textDirection: textDirection}), t1 == null ? null : t1.storage);
    }
  };
  (gradient.Gradient.new = function(opts) {
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[colors$] = colors;
    this[stops$] = stops;
    this[transform$] = transform;
    if (!(colors !== null)) dart.assertFailed(null, I[1], 153, 15, "colors != null");
    ;
  }).prototype = gradient.Gradient.prototype;
  dart.addTypeTests(gradient.Gradient);
  dart.addTypeCaches(gradient.Gradient);
  dart.setMethodSignature(gradient.Gradient, () => ({
    __proto__: dart.getMethods(gradient.Gradient.__proto__),
    [_impliedStops]: dart.fnType(core.List$(core.double), []),
    lerpFrom: dart.fnType(dart.nullable(gradient.Gradient), [dart.nullable(gradient.Gradient), core.double]),
    lerpTo: dart.fnType(dart.nullable(gradient.Gradient), [dart.nullable(gradient.Gradient), core.double]),
    [_resolveTransform]: dart.fnType(dart.nullable(typed_data.Float64List), [ui.Rect, dart.nullable(ui.TextDirection)])
  }));
  dart.setLibraryUri(gradient.Gradient, I[0]);
  dart.setFieldSignature(gradient.Gradient, () => ({
    __proto__: dart.getFields(gradient.Gradient.__proto__),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    stops: dart.finalFieldType(dart.nullable(core.List$(core.double))),
    transform: dart.finalFieldType(dart.nullable(gradient.GradientTransform))
  }));
  var begin$ = dart.privateName(gradient, "LinearGradient.begin");
  var end$ = dart.privateName(gradient, "LinearGradient.end");
  var tileMode$ = dart.privateName(gradient, "LinearGradient.tileMode");
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  var _name = dart.privateName(ui, "_name");
  gradient.LinearGradient = class LinearGradient extends gradient.Gradient {
    get begin() {
      return this[begin$];
    }
    set begin(value) {
      super.begin = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get tileMode() {
      return this[tileMode$];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui.Gradient.linear(this.begin.resolve(textDirection).withinRect(rect), this.end.resolve(textDirection).withinRect(rect), this.colors, this[_impliedStops](), this.tileMode, this[_resolveTransform](rect, textDirection));
    }
    scale(factor) {
      return new gradient.LinearGradient.new({begin: this.begin, end: this.end, colors: this.colors[$map](ui.Color, dart.fn(color => dart.nullCheck(ui.Color.lerp(null, color, factor)), T.ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode});
    }
    lerpFrom(a, t) {
      if (a == null || gradient.LinearGradient.is(a)) return gradient.LinearGradient.lerp(T.LinearGradientN().as(a), this, t);
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || gradient.LinearGradient.is(b)) return gradient.LinearGradient.lerp(this, T.LinearGradientN().as(b), t);
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (!(t !== null)) dart.assertFailed(null, I[1], 477, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return dart.nullCheck(b).scale(t);
      if (b == null) return a.scale(1.0 - t);
      let interpolated = gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new gradient.LinearGradient.new({begin: dart.nullCheck(alignment.AlignmentGeometry.lerp(a.begin, b.begin, t)), end: dart.nullCheck(alignment.AlignmentGeometry.lerp(a.end, b.end, t)), colors: interpolated.colors, stops: interpolated.stops, tileMode: t < 0.5 ? a.tileMode : b.tileMode});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return gradient.LinearGradient.is(other) && other.begin._equals(this.begin) && other.end._equals(this.end) && other.tileMode === this.tileMode && collections.listEquals(ui.Color, other.colors, this.colors) && collections.listEquals(core.double, other.stops, this.stops);
    }
    get hashCode() {
      return ui.hashValues(this.begin, this.end, this.tileMode, ui.hashList(this.colors), ui.hashList(this.stops));
    }
    toString() {
      return object.objectRuntimeType(this, "LinearGradient") + "(" + dart.str(this.begin) + ", " + dart.str(this.end) + ", " + dart.str(this.colors) + ", " + dart.str(this.stops) + ", " + dart.str(this.tileMode) + ")";
    }
  };
  (gradient.LinearGradient.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : C[0] || CT.C0;
    let end = opts && 'end' in opts ? opts.end : C[1] || CT.C1;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[2] || CT.C2;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[begin$] = begin;
    this[end$] = end;
    this[tileMode$] = tileMode;
    if (!(begin !== null)) dart.assertFailed(null, I[1], 374, 15, "begin != null");
    if (!(end !== null)) dart.assertFailed(null, I[1], 375, 15, "end != null");
    if (!(tileMode !== null)) dart.assertFailed(null, I[1], 376, 15, "tileMode != null");
    gradient.LinearGradient.__proto__.new.call(this, {colors: colors, stops: stops, transform: transform});
    ;
  }).prototype = gradient.LinearGradient.prototype;
  dart.addTypeTests(gradient.LinearGradient);
  dart.addTypeCaches(gradient.LinearGradient);
  dart.setMethodSignature(gradient.LinearGradient, () => ({
    __proto__: dart.getMethods(gradient.LinearGradient.__proto__),
    createShader: dart.fnType(ui.Shader, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    scale: dart.fnType(gradient.LinearGradient, [core.double])
  }));
  dart.setLibraryUri(gradient.LinearGradient, I[0]);
  dart.setFieldSignature(gradient.LinearGradient, () => ({
    __proto__: dart.getFields(gradient.LinearGradient.__proto__),
    begin: dart.finalFieldType(alignment.AlignmentGeometry),
    end: dart.finalFieldType(alignment.AlignmentGeometry),
    tileMode: dart.finalFieldType(ui.TileMode)
  }));
  dart.defineExtensionMethods(gradient.LinearGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.LinearGradient, ['hashCode']);
  var center$ = dart.privateName(gradient, "RadialGradient.center");
  var radius$ = dart.privateName(gradient, "RadialGradient.radius");
  var tileMode$0 = dart.privateName(gradient, "RadialGradient.tileMode");
  var focal$ = dart.privateName(gradient, "RadialGradient.focal");
  var focalRadius$ = dart.privateName(gradient, "RadialGradient.focalRadius");
  gradient.RadialGradient = class RadialGradient extends gradient.Gradient {
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get tileMode() {
      return this[tileMode$0];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    get focal() {
      return this[focal$];
    }
    set focal(value) {
      super.focal = value;
    }
    get focalRadius() {
      return this[focalRadius$];
    }
    set focalRadius(value) {
      super.focalRadius = value;
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui.Gradient.radial(this.center.resolve(textDirection).withinRect(rect), this.radius * rect.shortestSide, this.colors, this[_impliedStops](), this.tileMode, this[_resolveTransform](rect, textDirection), this.focal == null ? null : dart.nullCheck(this.focal).resolve(textDirection).withinRect(rect), this.focalRadius * rect.shortestSide);
    }
    scale(factor) {
      return new gradient.RadialGradient.new({center: this.center, radius: this.radius, colors: this.colors[$map](ui.Color, dart.fn(color => dart.nullCheck(ui.Color.lerp(null, color, factor)), T.ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode, focal: this.focal, focalRadius: this.focalRadius});
    }
    lerpFrom(a, t) {
      if (a == null || gradient.RadialGradient.is(a)) return gradient.RadialGradient.lerp(T.RadialGradientN().as(a), this, t);
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || gradient.RadialGradient.is(b)) return gradient.RadialGradient.lerp(this, T.RadialGradientN().as(b), t);
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (!(t !== null)) dart.assertFailed(null, I[1], 735, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return dart.nullCheck(b).scale(t);
      if (b == null) return a.scale(1.0 - t);
      let interpolated = gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new gradient.RadialGradient.new({center: dart.nullCheck(alignment.AlignmentGeometry.lerp(a.center, b.center, t)), radius: math.max(core.double, 0.0, dart.nullCheck(ui.lerpDouble(a.radius, b.radius, t))), colors: interpolated.colors, stops: interpolated.stops, tileMode: t < 0.5 ? a.tileMode : b.tileMode, focal: alignment.AlignmentGeometry.lerp(a.focal, b.focal, t), focalRadius: math.max(core.double, 0.0, dart.nullCheck(ui.lerpDouble(a.focalRadius, b.focalRadius, t)))});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return gradient.RadialGradient.is(other) && other.center._equals(this.center) && other.radius === this.radius && other.tileMode === this.tileMode && collections.listEquals(ui.Color, other.colors, this.colors) && collections.listEquals(core.double, other.stops, this.stops) && dart.equals(other.focal, this.focal) && other.focalRadius === this.focalRadius;
    }
    get hashCode() {
      return ui.hashValues(this.center, this.radius, this.tileMode, ui.hashList(this.colors), ui.hashList(this.stops), this.focal, this.focalRadius);
    }
    toString() {
      return object.objectRuntimeType(this, "RadialGradient") + "(" + dart.str(this.center) + ", " + dart.str(this.radius) + ", " + dart.str(this.colors) + ", " + dart.str(this.stops) + ", " + dart.str(this.tileMode) + ", " + dart.str(this.focal) + ", " + dart.str(this.focalRadius) + ")";
    }
  };
  (gradient.RadialGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : C[3] || CT.C3;
    let radius = opts && 'radius' in opts ? opts.radius : 0.5;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[2] || CT.C2;
    let focal = opts && 'focal' in opts ? opts.focal : null;
    let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[center$] = center;
    this[radius$] = radius;
    this[tileMode$0] = tileMode;
    this[focal$] = focal;
    this[focalRadius$] = focalRadius;
    if (!(center !== null)) dart.assertFailed(null, I[1], 606, 15, "center != null");
    if (!(radius !== null)) dart.assertFailed(null, I[1], 607, 15, "radius != null");
    if (!(tileMode !== null)) dart.assertFailed(null, I[1], 608, 15, "tileMode != null");
    if (!(focalRadius !== null)) dart.assertFailed(null, I[1], 609, 15, "focalRadius != null");
    gradient.RadialGradient.__proto__.new.call(this, {colors: colors, stops: stops, transform: transform});
    ;
  }).prototype = gradient.RadialGradient.prototype;
  dart.addTypeTests(gradient.RadialGradient);
  dart.addTypeCaches(gradient.RadialGradient);
  dart.setMethodSignature(gradient.RadialGradient, () => ({
    __proto__: dart.getMethods(gradient.RadialGradient.__proto__),
    createShader: dart.fnType(ui.Shader, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    scale: dart.fnType(gradient.RadialGradient, [core.double])
  }));
  dart.setLibraryUri(gradient.RadialGradient, I[0]);
  dart.setFieldSignature(gradient.RadialGradient, () => ({
    __proto__: dart.getFields(gradient.RadialGradient.__proto__),
    center: dart.finalFieldType(alignment.AlignmentGeometry),
    radius: dart.finalFieldType(core.double),
    tileMode: dart.finalFieldType(ui.TileMode),
    focal: dart.finalFieldType(dart.nullable(alignment.AlignmentGeometry)),
    focalRadius: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(gradient.RadialGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.RadialGradient, ['hashCode']);
  var center$0 = dart.privateName(gradient, "SweepGradient.center");
  var startAngle$ = dart.privateName(gradient, "SweepGradient.startAngle");
  var endAngle$ = dart.privateName(gradient, "SweepGradient.endAngle");
  var tileMode$1 = dart.privateName(gradient, "SweepGradient.tileMode");
  gradient.SweepGradient = class SweepGradient extends gradient.Gradient {
    get center() {
      return this[center$0];
    }
    set center(value) {
      super.center = value;
    }
    get startAngle() {
      return this[startAngle$];
    }
    set startAngle(value) {
      super.startAngle = value;
    }
    get endAngle() {
      return this[endAngle$];
    }
    set endAngle(value) {
      super.endAngle = value;
    }
    get tileMode() {
      return this[tileMode$1];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui.Gradient.sweep(this.center.resolve(textDirection).withinRect(rect), this.colors, this[_impliedStops](), this.tileMode, this.startAngle, this.endAngle, this[_resolveTransform](rect, textDirection));
    }
    scale(factor) {
      return new gradient.SweepGradient.new({center: this.center, startAngle: this.startAngle, endAngle: this.endAngle, colors: this.colors[$map](ui.Color, dart.fn(color => dart.nullCheck(ui.Color.lerp(null, color, factor)), T.ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode});
    }
    lerpFrom(a, t) {
      if (a == null || gradient.SweepGradient.is(a)) return gradient.SweepGradient.lerp(T.SweepGradientN().as(a), this, t);
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || gradient.SweepGradient.is(b)) return gradient.SweepGradient.lerp(this, T.SweepGradientN().as(b), t);
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (!(t !== null)) dart.assertFailed(null, I[1], 982, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return dart.nullCheck(b).scale(t);
      if (b == null) return a.scale(1.0 - t);
      let interpolated = gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new gradient.SweepGradient.new({center: dart.nullCheck(alignment.AlignmentGeometry.lerp(a.center, b.center, t)), startAngle: math.max(core.double, 0.0, dart.nullCheck(ui.lerpDouble(a.startAngle, b.startAngle, t))), endAngle: math.max(core.double, 0.0, dart.nullCheck(ui.lerpDouble(a.endAngle, b.endAngle, t))), colors: interpolated.colors, stops: interpolated.stops, tileMode: t < 0.5 ? a.tileMode : b.tileMode});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
      return gradient.SweepGradient.is(other) && other.center._equals(this.center) && other.startAngle === this.startAngle && other.endAngle === this.endAngle && other.tileMode === this.tileMode && collections.listEquals(ui.Color, other.colors, this.colors) && collections.listEquals(core.double, other.stops, this.stops);
    }
    get hashCode() {
      return ui.hashValues(this.center, this.startAngle, this.endAngle, this.tileMode, ui.hashList(this.colors), ui.hashList(this.stops));
    }
    toString() {
      return object.objectRuntimeType(this, "SweepGradient") + "(" + dart.str(this.center) + ", " + dart.str(this.startAngle) + ", " + dart.str(this.endAngle) + ", " + dart.str(this.colors) + ", " + dart.str(this.stops) + ", " + dart.str(this.tileMode) + ")";
    }
  };
  (gradient.SweepGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : C[3] || CT.C3;
    let startAngle = opts && 'startAngle' in opts ? opts.startAngle : 0;
    let endAngle = opts && 'endAngle' in opts ? opts.endAngle : 6.283185307179586;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[2] || CT.C2;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[center$0] = center;
    this[startAngle$] = startAngle;
    this[endAngle$] = endAngle;
    this[tileMode$1] = tileMode;
    if (!(center !== null)) dart.assertFailed(null, I[1], 880, 15, "center != null");
    if (!(startAngle !== null)) dart.assertFailed(null, I[1], 881, 15, "startAngle != null");
    if (!(endAngle !== null)) dart.assertFailed(null, I[1], 882, 15, "endAngle != null");
    if (!(tileMode !== null)) dart.assertFailed(null, I[1], 883, 15, "tileMode != null");
    gradient.SweepGradient.__proto__.new.call(this, {colors: colors, stops: stops, transform: transform});
    ;
  }).prototype = gradient.SweepGradient.prototype;
  dart.addTypeTests(gradient.SweepGradient);
  dart.addTypeCaches(gradient.SweepGradient);
  dart.setMethodSignature(gradient.SweepGradient, () => ({
    __proto__: dart.getMethods(gradient.SweepGradient.__proto__),
    createShader: dart.fnType(ui.Shader, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    scale: dart.fnType(gradient.SweepGradient, [core.double])
  }));
  dart.setLibraryUri(gradient.SweepGradient, I[0]);
  dart.setFieldSignature(gradient.SweepGradient, () => ({
    __proto__: dart.getFields(gradient.SweepGradient.__proto__),
    center: dart.finalFieldType(alignment.AlignmentGeometry),
    startAngle: dart.finalFieldType(core.double),
    endAngle: dart.finalFieldType(core.double),
    tileMode: dart.finalFieldType(ui.TileMode)
  }));
  dart.defineExtensionMethods(gradient.SweepGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.SweepGradient, ['hashCode']);
  gradient._sample = function _sample(colors, stops, t) {
    if (!(colors !== null)) dart.assertFailed(null, I[1], 25, 10, "colors != null");
    if (!colors[$isNotEmpty]) dart.assertFailed(null, I[1], 26, 10, "colors.isNotEmpty");
    if (!(stops !== null)) dart.assertFailed(null, I[1], 27, 10, "stops != null");
    if (!stops[$isNotEmpty]) dart.assertFailed(null, I[1], 28, 10, "stops.isNotEmpty");
    if (!(t !== null)) dart.assertFailed(null, I[1], 29, 10, "t != null");
    if (t <= stops[$first]) return colors[$first];
    if (t >= stops[$last]) return colors[$last];
    let index = stops[$lastIndexWhere](dart.fn(s => s <= t, T.doubleTobool()));
    if (!(index !== -1)) dart.assertFailed(null, I[1], 35, 10, "index != -1");
    return dart.nullCheck(ui.Color.lerp(colors[$_get](index), colors[$_get](index + 1), (t - stops[$_get](index)) / (stops[$_get](index + 1) - stops[$_get](index))));
  };
  gradient._interpolateColorsAndStops = function _interpolateColorsAndStops(aColors, aStops, bColors, bStops, t) {
    let t0;
    if (!(aColors[$length] >= 2)) dart.assertFailed(null, I[1], 49, 10, "aColors.length >= 2");
    if (!(bColors[$length] >= 2)) dart.assertFailed(null, I[1], 50, 10, "bColors.length >= 2");
    if (!(aStops[$length] === aColors[$length])) dart.assertFailed(null, I[1], 51, 10, "aStops.length == aColors.length");
    if (!(bStops[$length] === bColors[$length])) dart.assertFailed(null, I[1], 52, 10, "bStops.length == bColors.length");
    let stops = (t0 = new (T.SplayTreeSetOfdouble()).new(), (() => {
      t0.addAll(aStops);
      t0.addAll(bStops);
      return t0;
    })());
    let interpolatedStops = stops.toList({growable: false});
    let interpolatedColors = interpolatedStops[$map](ui.Color, dart.fn(stop => dart.nullCheck(ui.Color.lerp(gradient._sample(aColors, aStops, stop), gradient._sample(bColors, bStops, stop), t)), T.doubleToColor()))[$toList]({growable: false});
    return new gradient._ColorsAndStops.new(interpolatedColors, interpolatedStops);
  };
  dart.trackLibraries("packages/flutter/src/painting/gradient.dart", {
    "package:flutter/src/painting/gradient.dart": gradient
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["gradient.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/painting/gradient.dart.lib.js"}');
  // Exports:
  return {
    src__painting__gradient: gradient
  };
}));

//# sourceMappingURL=gradient.dart.lib.js.map
>>>>>>> feature-b
