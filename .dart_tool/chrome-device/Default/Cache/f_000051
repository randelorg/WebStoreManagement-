<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/rendering/sliver.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/painting/matrix_utils.dart', 'packages/flutter/src/scheduler/ticker.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/rendering/viewport_offset.dart'], (function load__packages__flutter__src__rendering__sliver_persistent_header_dart(dart_sdk, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__rendering__sliver$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__painting__matrix_utils$46dart, packages__flutter__src__scheduler__ticker$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__rendering__viewport_offset$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const sliver = packages__flutter__src__rendering__sliver$46dart.src__rendering__sliver;
  const viewport = packages__flutter__src__rendering__sliver$46dart.src__rendering__viewport;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const matrix_utils = packages__flutter__src__painting__matrix_utils$46dart.src__painting__matrix_utils;
  const ticker = packages__flutter__src__scheduler__ticker$46dart.src__scheduler__ticker;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const viewport_offset = packages__flutter__src__rendering__viewport_offset$46dart.src__rendering__viewport_offset;
  var sliver_persistent_header = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $abs = dartx.abs;
  var $_equals = dartx._equals;
  var $clamp = dartx.clamp;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    SliverConstraintsTovoid: () => (T.SliverConstraintsTovoid = dart.constFn(dart.fnType(dart.void, [sliver.SliverConstraints])))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    VoidTodouble: () => (T.VoidTodouble = dart.constFn(dart.fnType(core.double, [])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    TweenOfdouble: () => (T.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))()
=======
define(['dart_sdk', 'packages/flutter/src/physics/tolerance.dart', 'packages/flutter/src/physics/friction_simulation.dart', 'packages/flutter/src/physics/spring_simulation.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/physics/simulation.dart'], (function load__packages__flutter__src__widgets__scroll_simulation_dart(dart_sdk, packages__flutter__src__physics__tolerance$46dart, packages__flutter__src__physics__friction_simulation$46dart, packages__flutter__src__physics__spring_simulation$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__physics__simulation$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const tolerance = packages__flutter__src__physics__tolerance$46dart.src__physics__tolerance;
  const friction_simulation = packages__flutter__src__physics__friction_simulation$46dart.src__physics__friction_simulation;
  const spring_simulation = packages__flutter__src__physics__spring_simulation$46dart.src__physics__spring_simulation;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const simulation = packages__flutter__src__physics__simulation$46dart.src__physics__simulation;
  var scroll_simulation = Object.create(dart.library);
  var $isFinite = dartx.isFinite;
  var $abs = dartx.abs;
  var $round = dartx.round;
  var $sign = dartx.sign;
  var $clamp = dartx.clamp;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfdouble: () => (T.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))()
>>>>>>> feature-b
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
<<<<<<< HEAD
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.vertical",
        index: 1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.horizontal",
        index: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.up",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.down",
        index: 2
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.left",
        index: 3
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.right",
        index: 1
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: sliver_persistent_header.PersistentHeaderShowOnScreenConfiguration.prototype,
        [maxShowOnScreenExtent$]: 1 / 0,
        [minShowOnScreenExtent$]: -1 / 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 0.25,
        [Cubic_b]: 0.1,
        [Cubic_a]: 0.25
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    }
  }, false);
  var C = Array(10).fill(void 0);
  var I = [
    "file:///C:/flutter/packages/flutter/lib/src/rendering/sliver_persistent_header.dart",
    "package:flutter/src/rendering/sliver_persistent_header.dart"
  ];
  var stretchTriggerOffset$ = dart.privateName(sliver_persistent_header, "OverScrollHeaderStretchConfiguration.stretchTriggerOffset");
  var onStretchTrigger$ = dart.privateName(sliver_persistent_header, "OverScrollHeaderStretchConfiguration.onStretchTrigger");
  sliver_persistent_header.OverScrollHeaderStretchConfiguration = class OverScrollHeaderStretchConfiguration extends core.Object {
    get stretchTriggerOffset() {
      return this[stretchTriggerOffset$];
    }
    set stretchTriggerOffset(value) {
      super.stretchTriggerOffset = value;
    }
    get onStretchTrigger() {
      return this[onStretchTrigger$];
    }
    set onStretchTrigger(value) {
      super.onStretchTrigger = value;
    }
  };
  (sliver_persistent_header.OverScrollHeaderStretchConfiguration.new = function(opts) {
    let stretchTriggerOffset = opts && 'stretchTriggerOffset' in opts ? opts.stretchTriggerOffset : 100;
    let onStretchTrigger = opts && 'onStretchTrigger' in opts ? opts.onStretchTrigger : null;
    this[stretchTriggerOffset$] = stretchTriggerOffset;
    this[onStretchTrigger$] = onStretchTrigger;
    if (!(stretchTriggerOffset !== null)) dart.assertFailed(null, I[0], 40, 15, "stretchTriggerOffset != null");
    ;
  }).prototype = sliver_persistent_header.OverScrollHeaderStretchConfiguration.prototype;
  dart.addTypeTests(sliver_persistent_header.OverScrollHeaderStretchConfiguration);
  dart.addTypeCaches(sliver_persistent_header.OverScrollHeaderStretchConfiguration);
  dart.setLibraryUri(sliver_persistent_header.OverScrollHeaderStretchConfiguration, I[1]);
  dart.setFieldSignature(sliver_persistent_header.OverScrollHeaderStretchConfiguration, () => ({
    __proto__: dart.getFields(sliver_persistent_header.OverScrollHeaderStretchConfiguration.__proto__),
    stretchTriggerOffset: dart.finalFieldType(core.double),
    onStretchTrigger: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.void), [])))
  }));
  var minShowOnScreenExtent$ = dart.privateName(sliver_persistent_header, "PersistentHeaderShowOnScreenConfiguration.minShowOnScreenExtent");
  var maxShowOnScreenExtent$ = dart.privateName(sliver_persistent_header, "PersistentHeaderShowOnScreenConfiguration.maxShowOnScreenExtent");
  sliver_persistent_header.PersistentHeaderShowOnScreenConfiguration = class PersistentHeaderShowOnScreenConfiguration extends core.Object {
    get minShowOnScreenExtent() {
      return this[minShowOnScreenExtent$];
    }
    set minShowOnScreenExtent(value) {
      super.minShowOnScreenExtent = value;
    }
    get maxShowOnScreenExtent() {
      return this[maxShowOnScreenExtent$];
    }
    set maxShowOnScreenExtent(value) {
      super.maxShowOnScreenExtent = value;
    }
  };
  (sliver_persistent_header.PersistentHeaderShowOnScreenConfiguration.new = function(opts) {
    let minShowOnScreenExtent = opts && 'minShowOnScreenExtent' in opts ? opts.minShowOnScreenExtent : -1 / 0;
    let maxShowOnScreenExtent = opts && 'maxShowOnScreenExtent' in opts ? opts.maxShowOnScreenExtent : 1 / 0;
    this[minShowOnScreenExtent$] = minShowOnScreenExtent;
    this[maxShowOnScreenExtent$] = maxShowOnScreenExtent;
    if (!(minShowOnScreenExtent <= maxShowOnScreenExtent)) dart.assertFailed(null, I[0], 61, 15, "minShowOnScreenExtent <= maxShowOnScreenExtent");
    ;
  }).prototype = sliver_persistent_header.PersistentHeaderShowOnScreenConfiguration.prototype;
  dart.addTypeTests(sliver_persistent_header.PersistentHeaderShowOnScreenConfiguration);
  dart.addTypeCaches(sliver_persistent_header.PersistentHeaderShowOnScreenConfiguration);
  dart.setLibraryUri(sliver_persistent_header.PersistentHeaderShowOnScreenConfiguration, I[1]);
  dart.setFieldSignature(sliver_persistent_header.PersistentHeaderShowOnScreenConfiguration, () => ({
    __proto__: dart.getFields(sliver_persistent_header.PersistentHeaderShowOnScreenConfiguration.__proto__),
    minShowOnScreenExtent: dart.finalFieldType(core.double),
    maxShowOnScreenExtent: dart.finalFieldType(core.double)
  }));
  var stretchConfiguration$ = dart.privateName(sliver_persistent_header, "RenderSliverPersistentHeader.stretchConfiguration");
  var __RenderSliverPersistentHeader__lastStretchOffset = dart.privateName(sliver_persistent_header, "_#RenderSliverPersistentHeader#_lastStretchOffset");
  var _needsUpdateChild = dart.privateName(sliver_persistent_header, "_needsUpdateChild");
  var _lastShrinkOffset = dart.privateName(sliver_persistent_header, "_lastShrinkOffset");
  var _lastOverlapsContent = dart.privateName(sliver_persistent_header, "_lastOverlapsContent");
  var _lastStretchOffset = dart.privateName(sliver_persistent_header, "_lastStretchOffset");
  var _name = dart.privateName(basic_types, "_name");
  const RenderSliver_RenderObjectWithChildMixin$36 = class RenderSliver_RenderObjectWithChildMixin extends sliver.RenderSliver {};
  (RenderSliver_RenderObjectWithChildMixin$36.new = function() {
    object.RenderObjectWithChildMixin$(box.RenderBox)[dart.mixinNew].call(this);
    RenderSliver_RenderObjectWithChildMixin$36.__proto__.new.call(this);
  }).prototype = RenderSliver_RenderObjectWithChildMixin$36.prototype;
  dart.applyMixin(RenderSliver_RenderObjectWithChildMixin$36, object.RenderObjectWithChildMixin$(box.RenderBox));
  const RenderSliver_RenderSliverHelpers$36 = class RenderSliver_RenderSliverHelpers extends RenderSliver_RenderObjectWithChildMixin$36 {};
  (RenderSliver_RenderSliverHelpers$36.new = function() {
    RenderSliver_RenderSliverHelpers$36.__proto__.new.call(this);
  }).prototype = RenderSliver_RenderSliverHelpers$36.prototype;
  dart.applyMixin(RenderSliver_RenderSliverHelpers$36, sliver.RenderSliverHelpers);
  sliver_persistent_header.RenderSliverPersistentHeader = class RenderSliverPersistentHeader extends RenderSliver_RenderSliverHelpers$36 {
    get stretchConfiguration() {
      return this[stretchConfiguration$];
    }
    set stretchConfiguration(value) {
      this[stretchConfiguration$] = value;
    }
    get [_lastStretchOffset]() {
      let t0;
      t0 = this[__RenderSliverPersistentHeader__lastStretchOffset];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_lastStretchOffset")) : t0;
    }
    set [_lastStretchOffset](t0) {
      this[__RenderSliverPersistentHeader__lastStretchOffset] = t0;
    }
    get childExtent() {
      if (this.child == null) return 0.0;
      if (!dart.nullCheck(this.child).hasSize) dart.assertFailed(null, I[0], 153, 12, "child!.hasSize");
      if (!(this.constraints.axis !== null)) dart.assertFailed(null, I[0], 154, 12, "constraints.axis != null");
      switch (this.constraints.axis) {
        case C[0] || CT.C0:
        {
          return dart.nullCheck(this.child).size.height;
        }
        case C[1] || CT.C1:
        {
          return dart.nullCheck(this.child).size.width;
        }
      }
    }
    updateChild(shrinkOffset, overlapsContent) {
    }
    markNeedsLayout() {
      this[_needsUpdateChild] = true;
      super.markNeedsLayout();
    }
    layoutChild(scrollOffset, maxExtent, opts) {
      let t1;
      let overlapsContent = opts && 'overlapsContent' in opts ? opts.overlapsContent : false;
      if (!(maxExtent !== null)) dart.assertFailed(null, I[0], 219, 12, "maxExtent != null");
      let shrinkOffset = math.min(core.double, scrollOffset, maxExtent);
      if (this[_needsUpdateChild] || this[_lastShrinkOffset] !== shrinkOffset || this[_lastOverlapsContent] !== overlapsContent) {
        this.invokeLayoutCallback(sliver.SliverConstraints, dart.fn(constraints => {
          if (!constraints._equals(this.constraints)) dart.assertFailed(null, I[0], 223, 16, "constraints == this.constraints");
          this.updateChild(shrinkOffset, overlapsContent);
        }, T.SliverConstraintsTovoid()));
        this[_lastShrinkOffset] = shrinkOffset;
        this[_lastOverlapsContent] = overlapsContent;
        this[_needsUpdateChild] = false;
      }
      if (!(this.minExtent !== null)) dart.assertFailed(null, I[0], 230, 12, "minExtent != null");
      if (!dart.fn(() => {
        if (this.minExtent <= maxExtent) return true;
        dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("The maxExtent for this " + dart.str(this[$runtimeType]) + " is less than its minExtent."), new diagnostics.DoubleProperty.new("The specified maxExtent was", maxExtent), new diagnostics.DoubleProperty.new("The specified minExtent was", this.minExtent)])));
      }, T.VoidTobool())()) dart.assertFailed(null, I[0], 231, 12, "() {\r\n      if (minExtent <= maxExtent)\r\n        return true;\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('The maxExtent for this $runtimeType is less than its minExtent.'),\r\n        DoubleProperty('The specified maxExtent was', maxExtent),\r\n        DoubleProperty('The specified minExtent was', minExtent),\r\n      ]);\r\n    }()");
      let stretchOffset = 0.0;
      if (this.stretchConfiguration != null && this.constraints.scrollOffset === 0.0) {
        stretchOffset = stretchOffset + this.constraints.overlap[$abs]();
      }
      t1 = this.child;
      t1 == null ? null : t1.layout(this.constraints.asBoxConstraints({maxExtent: math.max(core.double, this.minExtent, maxExtent - shrinkOffset) + stretchOffset}), {parentUsesSize: true});
      if (this.stretchConfiguration != null && dart.nullCheck(this.stretchConfiguration).onStretchTrigger != null && stretchOffset >= dart.nullCheck(this.stretchConfiguration).stretchTriggerOffset && this[_lastStretchOffset] <= dart.nullCheck(this.stretchConfiguration).stretchTriggerOffset) {
        dart.nullCheck(dart.nullCheck(this.stretchConfiguration).onStretchTrigger)();
      }
      this[_lastStretchOffset] = stretchOffset;
    }
    childMainAxisPosition(child) {
      object.RenderObject.as(child);
      return super.childMainAxisPosition(child);
    }
    hitTestChildren(result, opts) {
      let mainAxisPosition = opts && 'mainAxisPosition' in opts ? opts.mainAxisPosition : null;
      let crossAxisPosition = opts && 'crossAxisPosition' in opts ? opts.crossAxisPosition : null;
      if (!(dart.nullCheck(this.geometry).hitTestExtent > 0.0)) dart.assertFailed(null, I[0], 286, 12, "geometry!.hitTestExtent > 0.0");
      if (this.child != null) return this.hitTestBoxChild(new box.BoxHitTestResult.wrap(result), dart.nullCheck(this.child), {mainAxisPosition: mainAxisPosition, crossAxisPosition: crossAxisPosition});
      return false;
    }
    applyPaintTransform(child, transform) {
      object.RenderObject.as(child);
      if (!(child !== null)) dart.assertFailed(null, I[0], 294, 12, "child != null");
      if (!child[$_equals](this.child)) dart.assertFailed(null, I[0], 295, 12, "child == this.child");
      this.applyPaintTransformForBoxChild(box.RenderBox.as(child), transform);
    }
    paint(context, offset) {
      if (this.child != null && dart.nullCheck(this.geometry).visible) {
        if (!(this.constraints.axisDirection !== null)) dart.assertFailed(null, I[0], 302, 14, "constraints.axisDirection != null");
        switch (sliver.applyGrowthDirectionToAxisDirection(this.constraints.axisDirection, this.constraints.growthDirection)) {
          case C[2] || CT.C2:
          {
            offset = offset['+'](new ui.Offset.new(0.0, dart.nullCheck(this.geometry).paintExtent - this.childMainAxisPosition(dart.nullCheck(this.child)) - this.childExtent));
            break;
          }
          case C[3] || CT.C3:
          {
            offset = offset['+'](new ui.Offset.new(0.0, this.childMainAxisPosition(dart.nullCheck(this.child))));
            break;
          }
          case C[4] || CT.C4:
          {
            offset = offset['+'](new ui.Offset.new(dart.nullCheck(this.geometry).paintExtent - this.childMainAxisPosition(dart.nullCheck(this.child)) - this.childExtent, 0.0));
            break;
          }
          case C[5] || CT.C5:
          {
            offset = offset['+'](new ui.Offset.new(this.childMainAxisPosition(dart.nullCheck(this.child)), 0.0));
            break;
          }
        }
        context.paintChild(dart.nullCheck(this.child), offset);
      }
    }
    describeSemanticsConfiguration(config) {
      super.describeSemanticsConfiguration(config);
      config.addTagForChildren(viewport.RenderViewport.excludeFromScrolling);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.lazy("maxExtent", dart.fn(() => this.maxExtent, T.VoidTodouble())));
      properties.add(new diagnostics.DoubleProperty.lazy("child position", dart.fn(() => this.childMainAxisPosition(dart.nullCheck(this.child)), T.VoidTodouble())));
    }
  };
  (sliver_persistent_header.RenderSliverPersistentHeader.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let stretchConfiguration = opts && 'stretchConfiguration' in opts ? opts.stretchConfiguration : null;
    this[__RenderSliverPersistentHeader__lastStretchOffset] = null;
    this[_needsUpdateChild] = true;
    this[_lastShrinkOffset] = 0.0;
    this[_lastOverlapsContent] = false;
    this[stretchConfiguration$] = stretchConfiguration;
    sliver_persistent_header.RenderSliverPersistentHeader.__proto__.new.call(this);
    this.child = child;
  }).prototype = sliver_persistent_header.RenderSliverPersistentHeader.prototype;
  dart.addTypeTests(sliver_persistent_header.RenderSliverPersistentHeader);
  dart.addTypeCaches(sliver_persistent_header.RenderSliverPersistentHeader);
  dart.setMethodSignature(sliver_persistent_header.RenderSliverPersistentHeader, () => ({
    __proto__: dart.getMethods(sliver_persistent_header.RenderSliverPersistentHeader.__proto__),
    updateChild: dart.fnType(dart.void, [core.double, core.bool]),
    layoutChild: dart.fnType(dart.void, [core.double, core.double], {overlapsContent: core.bool}, {})
  }));
  dart.setGetterSignature(sliver_persistent_header.RenderSliverPersistentHeader, () => ({
    __proto__: dart.getGetters(sliver_persistent_header.RenderSliverPersistentHeader.__proto__),
    [_lastStretchOffset]: core.double,
    childExtent: core.double
  }));
  dart.setSetterSignature(sliver_persistent_header.RenderSliverPersistentHeader, () => ({
    __proto__: dart.getSetters(sliver_persistent_header.RenderSliverPersistentHeader.__proto__),
    [_lastStretchOffset]: core.double
  }));
  dart.setLibraryUri(sliver_persistent_header.RenderSliverPersistentHeader, I[1]);
  dart.setFieldSignature(sliver_persistent_header.RenderSliverPersistentHeader, () => ({
    __proto__: dart.getFields(sliver_persistent_header.RenderSliverPersistentHeader.__proto__),
    [__RenderSliverPersistentHeader__lastStretchOffset]: dart.fieldType(dart.nullable(core.double)),
    [_needsUpdateChild]: dart.fieldType(core.bool),
    [_lastShrinkOffset]: dart.fieldType(core.double),
    [_lastOverlapsContent]: dart.fieldType(core.bool),
    stretchConfiguration: dart.fieldType(dart.nullable(sliver_persistent_header.OverScrollHeaderStretchConfiguration))
  }));
  var _childPosition = dart.privateName(sliver_persistent_header, "_childPosition");
  sliver_persistent_header.RenderSliverScrollingPersistentHeader = class RenderSliverScrollingPersistentHeader extends sliver_persistent_header.RenderSliverPersistentHeader {
    updateGeometry() {
      let stretchOffset = 0.0;
      if (this.stretchConfiguration != null && this[_childPosition] === 0.0) {
        stretchOffset = stretchOffset + this.constraints.overlap[$abs]();
      }
      let maxExtent = this.maxExtent;
      let paintExtent = maxExtent - this.constraints.scrollOffset;
      this.geometry = new sliver.SliverGeometry.new({scrollExtent: maxExtent, paintOrigin: math.min(core.double, this.constraints.overlap, 0.0), paintExtent: paintExtent[$clamp](0.0, this.constraints.remainingPaintExtent), maxPaintExtent: maxExtent + stretchOffset, hasVisualOverflow: true});
      return stretchOffset > 0 ? 0.0 : math.min(core.double, 0.0, paintExtent - this.childExtent);
    }
    performLayout() {
      let constraints = this.constraints;
      let maxExtent = this.maxExtent;
      this.layoutChild(constraints.scrollOffset, maxExtent);
      let paintExtent = maxExtent - constraints.scrollOffset;
      this.geometry = new sliver.SliverGeometry.new({scrollExtent: maxExtent, paintOrigin: math.min(core.double, constraints.overlap, 0.0), paintExtent: paintExtent[$clamp](0.0, constraints.remainingPaintExtent), maxPaintExtent: maxExtent, hasVisualOverflow: true});
      this[_childPosition] = this.updateGeometry();
    }
    childMainAxisPosition(child) {
      box.RenderBox.as(child);
      if (!child[$_equals](this.child)) dart.assertFailed(null, I[0], 395, 12, "child == this.child");
      if (!(this[_childPosition] != null)) dart.assertFailed(null, I[0], 396, 12, "_childPosition != null");
      return dart.nullCheck(this[_childPosition]);
    }
  };
  (sliver_persistent_header.RenderSliverScrollingPersistentHeader.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let stretchConfiguration = opts && 'stretchConfiguration' in opts ? opts.stretchConfiguration : null;
    this[_childPosition] = null;
    sliver_persistent_header.RenderSliverScrollingPersistentHeader.__proto__.new.call(this, {child: child, stretchConfiguration: stretchConfiguration});
    ;
  }).prototype = sliver_persistent_header.RenderSliverScrollingPersistentHeader.prototype;
  dart.addTypeTests(sliver_persistent_header.RenderSliverScrollingPersistentHeader);
  dart.addTypeCaches(sliver_persistent_header.RenderSliverScrollingPersistentHeader);
  dart.setMethodSignature(sliver_persistent_header.RenderSliverScrollingPersistentHeader, () => ({
    __proto__: dart.getMethods(sliver_persistent_header.RenderSliverScrollingPersistentHeader.__proto__),
    updateGeometry: dart.fnType(core.double, []),
    performLayout: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(sliver_persistent_header.RenderSliverScrollingPersistentHeader, I[1]);
  dart.setFieldSignature(sliver_persistent_header.RenderSliverScrollingPersistentHeader, () => ({
    __proto__: dart.getFields(sliver_persistent_header.RenderSliverScrollingPersistentHeader.__proto__),
    [_childPosition]: dart.fieldType(dart.nullable(core.double))
  }));
  var showOnScreenConfiguration$ = dart.privateName(sliver_persistent_header, "RenderSliverPinnedPersistentHeader.showOnScreenConfiguration");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var Cubic_d = dart.privateName(curves, "Cubic.d");
  var Cubic_c = dart.privateName(curves, "Cubic.c");
  var Cubic_b = dart.privateName(curves, "Cubic.b");
  var Cubic_a = dart.privateName(curves, "Cubic.a");
  sliver_persistent_header.RenderSliverPinnedPersistentHeader = class RenderSliverPinnedPersistentHeader extends sliver_persistent_header.RenderSliverPersistentHeader {
    get showOnScreenConfiguration() {
      return this[showOnScreenConfiguration$];
    }
    set showOnScreenConfiguration(value) {
      this[showOnScreenConfiguration$] = value;
    }
    performLayout() {
      let constraints = this.constraints;
      let maxExtent = this.maxExtent;
      let overlapsContent = constraints.overlap > 0.0;
      this.layoutChild(constraints.scrollOffset, maxExtent, {overlapsContent: overlapsContent});
      let effectiveRemainingPaintExtent = math.max(core.double, 0.0, constraints.remainingPaintExtent - constraints.overlap);
      let layoutExtent = (maxExtent - constraints.scrollOffset)[$clamp](0.0, effectiveRemainingPaintExtent);
      let stretchOffset = this.stretchConfiguration != null ? constraints.overlap[$abs]() : 0.0;
      this.geometry = new sliver.SliverGeometry.new({scrollExtent: maxExtent, paintOrigin: constraints.overlap, paintExtent: math.min(core.double, this.childExtent, effectiveRemainingPaintExtent), layoutExtent: layoutExtent, maxPaintExtent: maxExtent + stretchOffset, maxScrollObstructionExtent: this.minExtent, cacheExtent: layoutExtent > 0.0 ? -constraints.cacheOrigin + layoutExtent : layoutExtent, hasVisualOverflow: true});
    }
    childMainAxisPosition(child) {
      box.RenderBox.as(child);
      return 0.0;
    }
    showOnScreen(opts) {
      let t1;
      let descendant = opts && 'descendant' in opts ? opts.descendant : null;
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let duration = opts && 'duration' in opts ? opts.duration : C[7] || CT.C7;
      let curve = opts && 'curve' in opts ? opts.curve : C[8] || CT.C8;
      let localBounds = descendant != null ? matrix_utils.MatrixUtils.transformRect(descendant.getTransformTo(this), (t1 = rect, t1 == null ? descendant.paintBounds : t1)) : rect;
      let newRect = null;
      switch (sliver.applyGrowthDirectionToAxisDirection(this.constraints.axisDirection, this.constraints.growthDirection)) {
        case C[2] || CT.C2:
        {
          newRect = sliver_persistent_header._trim(localBounds, {bottom: this.childExtent});
          break;
        }
        case C[5] || CT.C5:
        {
          newRect = sliver_persistent_header._trim(localBounds, {left: 0.0});
          break;
        }
        case C[3] || CT.C3:
        {
          newRect = sliver_persistent_header._trim(localBounds, {top: 0.0});
          break;
        }
        case C[4] || CT.C4:
        {
          newRect = sliver_persistent_header._trim(localBounds, {right: this.childExtent});
          break;
        }
      }
      super.showOnScreen({descendant: this, rect: newRect, duration: duration, curve: curve});
    }
  };
  (sliver_persistent_header.RenderSliverPinnedPersistentHeader.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let stretchConfiguration = opts && 'stretchConfiguration' in opts ? opts.stretchConfiguration : null;
    let showOnScreenConfiguration = opts && 'showOnScreenConfiguration' in opts ? opts.showOnScreenConfiguration : C[6] || CT.C6;
    this[showOnScreenConfiguration$] = showOnScreenConfiguration;
    sliver_persistent_header.RenderSliverPinnedPersistentHeader.__proto__.new.call(this, {child: child, stretchConfiguration: stretchConfiguration});
    ;
  }).prototype = sliver_persistent_header.RenderSliverPinnedPersistentHeader.prototype;
  dart.addTypeTests(sliver_persistent_header.RenderSliverPinnedPersistentHeader);
  dart.addTypeCaches(sliver_persistent_header.RenderSliverPinnedPersistentHeader);
  dart.setMethodSignature(sliver_persistent_header.RenderSliverPinnedPersistentHeader, () => ({
    __proto__: dart.getMethods(sliver_persistent_header.RenderSliverPinnedPersistentHeader.__proto__),
    performLayout: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(sliver_persistent_header.RenderSliverPinnedPersistentHeader, I[1]);
  dart.setFieldSignature(sliver_persistent_header.RenderSliverPinnedPersistentHeader, () => ({
    __proto__: dart.getFields(sliver_persistent_header.RenderSliverPinnedPersistentHeader.__proto__),
    showOnScreenConfiguration: dart.fieldType(dart.nullable(sliver_persistent_header.PersistentHeaderShowOnScreenConfiguration))
  }));
  var vsync$ = dart.privateName(sliver_persistent_header, "FloatingHeaderSnapConfiguration.vsync");
  var curve$ = dart.privateName(sliver_persistent_header, "FloatingHeaderSnapConfiguration.curve");
  var duration$ = dart.privateName(sliver_persistent_header, "FloatingHeaderSnapConfiguration.duration");
  sliver_persistent_header.FloatingHeaderSnapConfiguration = class FloatingHeaderSnapConfiguration extends core.Object {
    get vsync() {
      return this[vsync$];
    }
    set vsync(value) {
      super.vsync = value;
    }
    get curve() {
      return this[curve$];
    }
    set curve(value) {
      super.curve = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
  };
  (sliver_persistent_header.FloatingHeaderSnapConfiguration.new = function(opts) {
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    let curve = opts && 'curve' in opts ? opts.curve : C[8] || CT.C8;
    let duration = opts && 'duration' in opts ? opts.duration : C[9] || CT.C9;
    this[vsync$] = vsync;
    this[curve$] = curve;
    this[duration$] = duration;
    if (!(curve !== null)) dart.assertFailed(null, I[0], 507, 15, "curve != null");
    if (!(duration !== null)) dart.assertFailed(null, I[0], 508, 15, "duration != null");
    ;
  }).prototype = sliver_persistent_header.FloatingHeaderSnapConfiguration.prototype;
  dart.addTypeTests(sliver_persistent_header.FloatingHeaderSnapConfiguration);
  dart.addTypeCaches(sliver_persistent_header.FloatingHeaderSnapConfiguration);
  dart.setLibraryUri(sliver_persistent_header.FloatingHeaderSnapConfiguration, I[1]);
  dart.setFieldSignature(sliver_persistent_header.FloatingHeaderSnapConfiguration, () => ({
    __proto__: dart.getFields(sliver_persistent_header.FloatingHeaderSnapConfiguration.__proto__),
    vsync: dart.finalFieldType(dart.nullable(ticker.TickerProvider)),
    curve: dart.finalFieldType(curves.Curve),
    duration: dart.finalFieldType(core.Duration)
  }));
  var snapConfiguration$ = dart.privateName(sliver_persistent_header, "RenderSliverFloatingPersistentHeader.snapConfiguration");
  var showOnScreenConfiguration$0 = dart.privateName(sliver_persistent_header, "RenderSliverFloatingPersistentHeader.showOnScreenConfiguration");
  var _controller = dart.privateName(sliver_persistent_header, "_controller");
  var __RenderSliverFloatingPersistentHeader__animation = dart.privateName(sliver_persistent_header, "_#RenderSliverFloatingPersistentHeader#_animation");
  var _lastActualScrollOffset = dart.privateName(sliver_persistent_header, "_lastActualScrollOffset");
  var _effectiveScrollOffset = dart.privateName(sliver_persistent_header, "_effectiveScrollOffset");
  var _vsync = dart.privateName(sliver_persistent_header, "_vsync");
  var _animation = dart.privateName(sliver_persistent_header, "_animation");
  var _updateAnimation = dart.privateName(sliver_persistent_header, "_updateAnimation");
  sliver_persistent_header.RenderSliverFloatingPersistentHeader = class RenderSliverFloatingPersistentHeader extends sliver_persistent_header.RenderSliverPersistentHeader {
    get snapConfiguration() {
      return this[snapConfiguration$];
    }
    set snapConfiguration(value) {
      this[snapConfiguration$] = value;
    }
    get showOnScreenConfiguration() {
      return this[showOnScreenConfiguration$0];
    }
    set showOnScreenConfiguration(value) {
      this[showOnScreenConfiguration$0] = value;
    }
    get [_animation]() {
      let t1;
      t1 = this[__RenderSliverFloatingPersistentHeader__animation];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_animation")) : t1;
    }
    set [_animation](t1) {
      this[__RenderSliverFloatingPersistentHeader__animation] = t1;
    }
    detach() {
      let t2;
      t2 = this[_controller];
      t2 == null ? null : t2.dispose();
      this[_controller] = null;
      super.detach();
    }
    get vsync() {
      return this[_vsync];
    }
    set vsync(value) {
      let t2, t2$;
      if (dart.equals(value, this[_vsync])) return;
      this[_vsync] = value;
      if (value == null) {
        t2 = this[_controller];
        t2 == null ? null : t2.dispose();
        this[_controller] = null;
      } else {
        t2$ = this[_controller];
        t2$ == null ? null : t2$.resync(value);
      }
    }
    updateGeometry() {
      let stretchOffset = 0.0;
      if (this.stretchConfiguration != null && this[_childPosition] === 0.0) {
        stretchOffset = stretchOffset + this.constraints.overlap[$abs]();
      }
      let maxExtent = this.maxExtent;
      let paintExtent = maxExtent - dart.nullCheck(this[_effectiveScrollOffset]);
      let layoutExtent = maxExtent - this.constraints.scrollOffset;
      this.geometry = new sliver.SliverGeometry.new({scrollExtent: maxExtent, paintOrigin: math.min(core.double, this.constraints.overlap, 0.0), paintExtent: paintExtent[$clamp](0.0, this.constraints.remainingPaintExtent), layoutExtent: layoutExtent[$clamp](0.0, this.constraints.remainingPaintExtent), maxPaintExtent: maxExtent + stretchOffset, hasVisualOverflow: true});
      return stretchOffset > 0 ? 0.0 : math.min(core.double, 0.0, paintExtent - this.childExtent);
    }
    [_updateAnimation](duration, endValue, curve) {
      let t3, t2;
      if (!(duration !== null)) dart.assertFailed(null, I[0], 625, 12, "duration != null");
      if (!(endValue !== null)) dart.assertFailed(null, I[0], 626, 12, "endValue != null");
      if (!(curve !== null)) dart.assertFailed(null, I[0], 627, 12, "curve != null");
      if (!(this.vsync != null)) dart.assertFailed("vsync must not be null if the floating header changes size animatedly.", I[0], 629, 7, "vsync != null");
      let effectiveController = (t2 = this[_controller], t2 == null ? this[_controller] = (t3 = new animation_controller.AnimationController.new({vsync: dart.nullCheck(this.vsync), duration: duration}), (() => {
        t3.addListener(dart.fn(() => {
          if (this[_effectiveScrollOffset] === this[_animation].value) return;
          this[_effectiveScrollOffset] = this[_animation].value;
          this.markNeedsLayout();
        }, T.VoidTovoid()));
        return t3;
      })()) : t2);
      this[_animation] = effectiveController.drive(core.double, new (T.TweenOfdouble()).new({begin: this[_effectiveScrollOffset], end: endValue}).chain(new tween.CurveTween.new({curve: curve})));
    }
    maybeStartSnapAnimation(direction) {
      let t2;
      let snap = this.snapConfiguration;
      if (snap == null) return;
      if (direction === viewport_offset.ScrollDirection.forward && dart.nullCheck(this[_effectiveScrollOffset]) <= 0.0) return;
      if (direction === viewport_offset.ScrollDirection.reverse && dart.nullCheck(this[_effectiveScrollOffset]) >= this.maxExtent) return;
      this[_updateAnimation](snap.duration, direction === viewport_offset.ScrollDirection.forward ? 0.0 : this.maxExtent, snap.curve);
      t2 = this[_controller];
      t2 == null ? null : t2.forward({from: 0.0});
    }
    maybeStopSnapAnimation(direction) {
      let t2;
      t2 = this[_controller];
      t2 == null ? null : t2.stop();
    }
    performLayout() {
      let constraints = this.constraints;
      let maxExtent = this.maxExtent;
      if (this[_lastActualScrollOffset] != null && (constraints.scrollOffset < dart.nullCheck(this[_lastActualScrollOffset]) || dart.nullCheck(this[_effectiveScrollOffset]) < maxExtent)) {
        let delta = dart.nullCheck(this[_lastActualScrollOffset]) - constraints.scrollOffset;
        let allowFloatingExpansion = constraints.userScrollDirection === viewport_offset.ScrollDirection.forward;
        if (allowFloatingExpansion) {
          if (dart.nullCheck(this[_effectiveScrollOffset]) > maxExtent) this[_effectiveScrollOffset] = maxExtent;
        } else {
          if (delta > 0.0) delta = 0.0;
        }
        this[_effectiveScrollOffset] = (dart.nullCheck(this[_effectiveScrollOffset]) - delta)[$clamp](0.0, constraints.scrollOffset);
      } else {
        this[_effectiveScrollOffset] = constraints.scrollOffset;
      }
      let overlapsContent = dart.nullCheck(this[_effectiveScrollOffset]) < constraints.scrollOffset;
      this.layoutChild(dart.nullCheck(this[_effectiveScrollOffset]), maxExtent, {overlapsContent: overlapsContent});
      this[_childPosition] = this.updateGeometry();
      this[_lastActualScrollOffset] = constraints.scrollOffset;
    }
    showOnScreen(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7;
      let descendant = opts && 'descendant' in opts ? opts.descendant : null;
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let duration = opts && 'duration' in opts ? opts.duration : C[7] || CT.C7;
      let curve = opts && 'curve' in opts ? opts.curve : C[8] || CT.C8;
      let showOnScreen = this.showOnScreenConfiguration;
      if (showOnScreen == null) return super.showOnScreen({descendant: descendant, rect: rect, duration: duration, curve: curve});
      if (!(this.child != null || descendant == null)) dart.assertFailed(null, I[0], 717, 12, "child != null || descendant == null");
      let childBounds = descendant != null ? matrix_utils.MatrixUtils.transformRect(descendant.getTransformTo(this.child), (t2 = rect, t2 == null ? descendant.paintBounds : t2)) : rect;
      let targetExtent = null;
      let targetRect = null;
      switch (sliver.applyGrowthDirectionToAxisDirection(this.constraints.axisDirection, this.constraints.growthDirection)) {
        case C[2] || CT.C2:
        {
          targetExtent = this.childExtent - dart.notNull((t2$0 = (t2$ = childBounds, t2$ == null ? null : t2$.top), t2$0 == null ? 0 : t2$0));
          targetRect = sliver_persistent_header._trim(childBounds, {bottom: this.childExtent});
          break;
        }
        case C[5] || CT.C5:
        {
          targetExtent = (t2$2 = (t2$1 = childBounds, t2$1 == null ? null : t2$1.right), t2$2 == null ? this.childExtent : t2$2);
          targetRect = sliver_persistent_header._trim(childBounds, {left: 0.0});
          break;
        }
        case C[3] || CT.C3:
        {
          targetExtent = (t2$4 = (t2$3 = childBounds, t2$3 == null ? null : t2$3.bottom), t2$4 == null ? this.childExtent : t2$4);
          targetRect = sliver_persistent_header._trim(childBounds, {top: 0.0});
          break;
        }
        case C[4] || CT.C4:
        {
          targetExtent = this.childExtent - dart.notNull((t2$6 = (t2$5 = childBounds, t2$5 == null ? null : t2$5.left), t2$6 == null ? 0 : t2$6));
          targetRect = sliver_persistent_header._trim(childBounds, {right: this.childExtent});
          break;
        }
      }
      let effectiveMaxExtent = math.max(core.double, this.childExtent, this.maxExtent);
      targetExtent = targetExtent[$clamp](showOnScreen.minShowOnScreenExtent, showOnScreen.maxShowOnScreenExtent)[$clamp](this.childExtent, effectiveMaxExtent);
      if (dart.notNull(targetExtent) > this.childExtent) {
        let targetScrollOffset = this.maxExtent - dart.notNull(targetExtent);
        if (!(this.vsync != null)) dart.assertFailed("vsync must not be null if the floating header changes size animatedly.", I[0], 764, 9, "vsync != null");
        this[_updateAnimation](duration, targetScrollOffset, curve);
        t2$7 = this[_controller];
        t2$7 == null ? null : t2$7.forward({from: 0.0});
      }
      super.showOnScreen({descendant: descendant == null ? this : this.child, rect: targetRect, duration: duration, curve: curve});
    }
    childMainAxisPosition(child) {
      let t2;
      box.RenderBox.as(child);
      if (!child[$_equals](this.child)) dart.assertFailed(null, I[0], 781, 12, "child == this.child");
      t2 = this[_childPosition];
      return t2 == null ? 0.0 : t2;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("effective scroll offset", this[_effectiveScrollOffset]));
    }
  };
  (sliver_persistent_header.RenderSliverFloatingPersistentHeader.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    let snapConfiguration = opts && 'snapConfiguration' in opts ? opts.snapConfiguration : null;
    let stretchConfiguration = opts && 'stretchConfiguration' in opts ? opts.stretchConfiguration : null;
    let showOnScreenConfiguration = opts && 'showOnScreenConfiguration' in opts ? opts.showOnScreenConfiguration : null;
    this[_controller] = null;
    this[__RenderSliverFloatingPersistentHeader__animation] = null;
    this[_lastActualScrollOffset] = null;
    this[_effectiveScrollOffset] = null;
    this[_childPosition] = null;
    this[snapConfiguration$] = snapConfiguration;
    this[showOnScreenConfiguration$0] = showOnScreenConfiguration;
    this[_vsync] = vsync;
    sliver_persistent_header.RenderSliverFloatingPersistentHeader.__proto__.new.call(this, {child: child, stretchConfiguration: stretchConfiguration});
    ;
  }).prototype = sliver_persistent_header.RenderSliverFloatingPersistentHeader.prototype;
  dart.addTypeTests(sliver_persistent_header.RenderSliverFloatingPersistentHeader);
  dart.addTypeCaches(sliver_persistent_header.RenderSliverFloatingPersistentHeader);
  dart.setMethodSignature(sliver_persistent_header.RenderSliverFloatingPersistentHeader, () => ({
    __proto__: dart.getMethods(sliver_persistent_header.RenderSliverFloatingPersistentHeader.__proto__),
    updateGeometry: dart.fnType(core.double, []),
    [_updateAnimation]: dart.fnType(dart.void, [core.Duration, core.double, curves.Curve]),
    maybeStartSnapAnimation: dart.fnType(dart.void, [viewport_offset.ScrollDirection]),
    maybeStopSnapAnimation: dart.fnType(dart.void, [viewport_offset.ScrollDirection]),
    performLayout: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(sliver_persistent_header.RenderSliverFloatingPersistentHeader, () => ({
    __proto__: dart.getGetters(sliver_persistent_header.RenderSliverFloatingPersistentHeader.__proto__),
    [_animation]: animation.Animation$(core.double),
    vsync: dart.nullable(ticker.TickerProvider)
  }));
  dart.setSetterSignature(sliver_persistent_header.RenderSliverFloatingPersistentHeader, () => ({
    __proto__: dart.getSetters(sliver_persistent_header.RenderSliverFloatingPersistentHeader.__proto__),
    [_animation]: animation.Animation$(core.double),
    vsync: dart.nullable(ticker.TickerProvider)
  }));
  dart.setLibraryUri(sliver_persistent_header.RenderSliverFloatingPersistentHeader, I[1]);
  dart.setFieldSignature(sliver_persistent_header.RenderSliverFloatingPersistentHeader, () => ({
    __proto__: dart.getFields(sliver_persistent_header.RenderSliverFloatingPersistentHeader.__proto__),
    [_controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [__RenderSliverFloatingPersistentHeader__animation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [_lastActualScrollOffset]: dart.fieldType(dart.nullable(core.double)),
    [_effectiveScrollOffset]: dart.fieldType(dart.nullable(core.double)),
    [_childPosition]: dart.fieldType(dart.nullable(core.double)),
    [_vsync]: dart.fieldType(dart.nullable(ticker.TickerProvider)),
    snapConfiguration: dart.fieldType(dart.nullable(sliver_persistent_header.FloatingHeaderSnapConfiguration)),
    showOnScreenConfiguration: dart.fieldType(dart.nullable(sliver_persistent_header.PersistentHeaderShowOnScreenConfiguration))
  }));
  sliver_persistent_header.RenderSliverFloatingPinnedPersistentHeader = class RenderSliverFloatingPinnedPersistentHeader extends sliver_persistent_header.RenderSliverFloatingPersistentHeader {
    updateGeometry() {
      let minExtent = this.minExtent;
      let minAllowedExtent = this.constraints.remainingPaintExtent > minExtent ? minExtent : this.constraints.remainingPaintExtent;
      let maxExtent = this.maxExtent;
      let paintExtent = maxExtent - dart.nullCheck(this[_effectiveScrollOffset]);
      let clampedPaintExtent = paintExtent[$clamp](minAllowedExtent, this.constraints.remainingPaintExtent);
      let layoutExtent = maxExtent - this.constraints.scrollOffset;
      let stretchOffset = this.stretchConfiguration != null ? this.constraints.overlap[$abs]() : 0.0;
      this.geometry = new sliver.SliverGeometry.new({scrollExtent: maxExtent, paintOrigin: math.min(core.double, this.constraints.overlap, 0.0), paintExtent: clampedPaintExtent, layoutExtent: layoutExtent[$clamp](0.0, clampedPaintExtent), maxPaintExtent: maxExtent + stretchOffset, maxScrollObstructionExtent: minExtent, hasVisualOverflow: true});
      return 0.0;
    }
  };
  (sliver_persistent_header.RenderSliverFloatingPinnedPersistentHeader.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    let snapConfiguration = opts && 'snapConfiguration' in opts ? opts.snapConfiguration : null;
    let stretchConfiguration = opts && 'stretchConfiguration' in opts ? opts.stretchConfiguration : null;
    let showOnScreenConfiguration = opts && 'showOnScreenConfiguration' in opts ? opts.showOnScreenConfiguration : null;
    sliver_persistent_header.RenderSliverFloatingPinnedPersistentHeader.__proto__.new.call(this, {child: child, vsync: vsync, snapConfiguration: snapConfiguration, stretchConfiguration: stretchConfiguration, showOnScreenConfiguration: showOnScreenConfiguration});
    ;
  }).prototype = sliver_persistent_header.RenderSliverFloatingPinnedPersistentHeader.prototype;
  dart.addTypeTests(sliver_persistent_header.RenderSliverFloatingPinnedPersistentHeader);
  dart.addTypeCaches(sliver_persistent_header.RenderSliverFloatingPinnedPersistentHeader);
  dart.setLibraryUri(sliver_persistent_header.RenderSliverFloatingPinnedPersistentHeader, I[1]);
  sliver_persistent_header._trim = function _trim(original, opts) {
    let t2;
    let top = opts && 'top' in opts ? opts.top : -1 / 0;
    let right = opts && 'right' in opts ? opts.right : 1 / 0;
    let bottom = opts && 'bottom' in opts ? opts.bottom : 1 / 0;
    let left = opts && 'left' in opts ? opts.left : -1 / 0;
    t2 = original;
    return t2 == null ? null : t2.intersect(new ui.Rect.fromLTRB(left, top, right, bottom));
  };
  dart.trackLibraries("packages/flutter/src/rendering/sliver_persistent_header.dart", {
    "package:flutter/src/rendering/sliver_persistent_header.dart": sliver_persistent_header
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["sliver_persistent_header.dart"],"names":[],"mappings":"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","file":"../../../../../../../E:/packages/flutter/src/rendering/sliver_persistent_header.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__sliver_persistent_header: sliver_persistent_header
  };
}));

//# sourceMappingURL=sliver_persistent_header.dart.lib.js.map
=======
        __proto__: tolerance.Tolerance.prototype,
        [Tolerance_velocity]: 0.001,
        [Tolerance_time]: 0.001,
        [Tolerance_distance]: 0.001
      });
    }
  }, false);
  var C = [void 0];
  var I = [
    "file:///C:/flutter/packages/flutter/lib/src/widgets/scroll_simulation.dart",
    "package:flutter/src/widgets/scroll_simulation.dart"
  ];
  var leadingExtent$ = dart.privateName(scroll_simulation, "BouncingScrollSimulation.leadingExtent");
  var trailingExtent$ = dart.privateName(scroll_simulation, "BouncingScrollSimulation.trailingExtent");
  var spring$ = dart.privateName(scroll_simulation, "BouncingScrollSimulation.spring");
  var Tolerance_velocity = dart.privateName(tolerance, "Tolerance.velocity");
  var Tolerance_time = dart.privateName(tolerance, "Tolerance.time");
  var Tolerance_distance = dart.privateName(tolerance, "Tolerance.distance");
  var __BouncingScrollSimulation__frictionSimulation = dart.privateName(scroll_simulation, "_#BouncingScrollSimulation#_frictionSimulation");
  var __BouncingScrollSimulation__springSimulation = dart.privateName(scroll_simulation, "_#BouncingScrollSimulation#_springSimulation");
  var __BouncingScrollSimulation__springTime = dart.privateName(scroll_simulation, "_#BouncingScrollSimulation#_springTime");
  var _timeOffset = dart.privateName(scroll_simulation, "_timeOffset");
  var _springSimulation = dart.privateName(scroll_simulation, "_springSimulation");
  var _underscrollSimulation = dart.privateName(scroll_simulation, "_underscrollSimulation");
  var _springTime = dart.privateName(scroll_simulation, "_springTime");
  var _overscrollSimulation = dart.privateName(scroll_simulation, "_overscrollSimulation");
  var _frictionSimulation = dart.privateName(scroll_simulation, "_frictionSimulation");
  var _simulation = dart.privateName(scroll_simulation, "_simulation");
  scroll_simulation.BouncingScrollSimulation = class BouncingScrollSimulation extends simulation.Simulation {
    get leadingExtent() {
      return this[leadingExtent$];
    }
    set leadingExtent(value) {
      super.leadingExtent = value;
    }
    get trailingExtent() {
      return this[trailingExtent$];
    }
    set trailingExtent(value) {
      super.trailingExtent = value;
    }
    get spring() {
      return this[spring$];
    }
    set spring(value) {
      super.spring = value;
    }
    get [_frictionSimulation]() {
      let t0;
      t0 = this[__BouncingScrollSimulation__frictionSimulation];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_frictionSimulation")) : t0;
    }
    set [_frictionSimulation](t0) {
      this[__BouncingScrollSimulation__frictionSimulation] = t0;
    }
    get [_springSimulation]() {
      let t1;
      t1 = this[__BouncingScrollSimulation__springSimulation];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_springSimulation")) : t1;
    }
    set [_springSimulation](t1) {
      this[__BouncingScrollSimulation__springSimulation] = t1;
    }
    get [_springTime]() {
      let t2;
      t2 = this[__BouncingScrollSimulation__springTime];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_springTime")) : t2;
    }
    set [_springTime](t2) {
      this[__BouncingScrollSimulation__springTime] = t2;
    }
    [_underscrollSimulation](x, dx) {
      return new spring_simulation.ScrollSpringSimulation.new(this.spring, x, this.leadingExtent, dx);
    }
    [_overscrollSimulation](x, dx) {
      return new spring_simulation.ScrollSpringSimulation.new(this.spring, x, this.trailingExtent, dx);
    }
    [_simulation](time) {
      let t3;
      let simulation = null;
      if (time > this[_springTime]) {
        this[_timeOffset] = this[_springTime][$isFinite] ? this[_springTime] : 0.0;
        simulation = this[_springSimulation];
      } else {
        this[_timeOffset] = 0.0;
        simulation = this[_frictionSimulation];
      }
      t3 = simulation;
      return (() => {
        t3.tolerance = this.tolerance;
        return t3;
      })();
    }
    x(time) {
      return this[_simulation](time).x(time - this[_timeOffset]);
    }
    dx(time) {
      return this[_simulation](time).dx(time - this[_timeOffset]);
    }
    isDone(time) {
      return this[_simulation](time).isDone(time - this[_timeOffset]);
    }
    toString() {
      return object.objectRuntimeType(this, "BouncingScrollSimulation") + "(leadingExtent: " + dart.str(this.leadingExtent) + ", trailingExtent: " + dart.str(this.trailingExtent) + ")";
    }
  };
  (scroll_simulation.BouncingScrollSimulation.new = function(opts) {
    let position = opts && 'position' in opts ? opts.position : null;
    let velocity = opts && 'velocity' in opts ? opts.velocity : null;
    let leadingExtent = opts && 'leadingExtent' in opts ? opts.leadingExtent : null;
    let trailingExtent = opts && 'trailingExtent' in opts ? opts.trailingExtent : null;
    let spring = opts && 'spring' in opts ? opts.spring : null;
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C[0] || CT.C0;
    this[__BouncingScrollSimulation__frictionSimulation] = null;
    this[__BouncingScrollSimulation__springSimulation] = null;
    this[__BouncingScrollSimulation__springTime] = null;
    this[_timeOffset] = 0.0;
    this[leadingExtent$] = leadingExtent;
    this[trailingExtent$] = trailingExtent;
    this[spring$] = spring;
    if (!(position !== null)) dart.assertFailed(null, I[0], 38, 15, "position != null");
    if (!(velocity !== null)) dart.assertFailed(null, I[0], 39, 15, "velocity != null");
    if (!(leadingExtent !== null)) dart.assertFailed(null, I[0], 40, 15, "leadingExtent != null");
    if (!(trailingExtent !== null)) dart.assertFailed(null, I[0], 41, 15, "trailingExtent != null");
    if (!(leadingExtent <= trailingExtent)) dart.assertFailed(null, I[0], 42, 15, "leadingExtent <= trailingExtent");
    if (!(spring !== null)) dart.assertFailed(null, I[0], 43, 15, "spring != null");
    scroll_simulation.BouncingScrollSimulation.__proto__.new.call(this, {tolerance: tolerance});
    if (position < this.leadingExtent) {
      this[_springSimulation] = this[_underscrollSimulation](position, velocity);
      this[_springTime] = -1 / 0;
    } else if (position > this.trailingExtent) {
      this[_springSimulation] = this[_overscrollSimulation](position, velocity);
      this[_springTime] = -1 / 0;
    } else {
      this[_frictionSimulation] = new friction_simulation.FrictionSimulation.new(0.135, position, velocity);
      let finalX = this[_frictionSimulation].finalX;
      if (velocity > 0.0 && finalX > this.trailingExtent) {
        this[_springTime] = this[_frictionSimulation].timeAtX(this.trailingExtent);
        this[_springSimulation] = this[_overscrollSimulation](this.trailingExtent, math.min(core.double, this[_frictionSimulation].dx(this[_springTime]), 5000));
        if (!this[_springTime][$isFinite]) dart.assertFailed(null, I[0], 62, 16, "_springTime.isFinite");
      } else if (velocity < 0.0 && finalX < this.leadingExtent) {
        this[_springTime] = this[_frictionSimulation].timeAtX(this.leadingExtent);
        this[_springSimulation] = this[_underscrollSimulation](this.leadingExtent, math.min(core.double, this[_frictionSimulation].dx(this[_springTime]), 5000));
        if (!this[_springTime][$isFinite]) dart.assertFailed(null, I[0], 69, 16, "_springTime.isFinite");
      } else {
        this[_springTime] = 1 / 0;
      }
    }
    if (!(this[_springTime] !== null)) dart.assertFailed(null, I[0], 74, 12, "_springTime != null");
  }).prototype = scroll_simulation.BouncingScrollSimulation.prototype;
  dart.addTypeTests(scroll_simulation.BouncingScrollSimulation);
  dart.addTypeCaches(scroll_simulation.BouncingScrollSimulation);
  dart.setMethodSignature(scroll_simulation.BouncingScrollSimulation, () => ({
    __proto__: dart.getMethods(scroll_simulation.BouncingScrollSimulation.__proto__),
    [_underscrollSimulation]: dart.fnType(simulation.Simulation, [core.double, core.double]),
    [_overscrollSimulation]: dart.fnType(simulation.Simulation, [core.double, core.double]),
    [_simulation]: dart.fnType(simulation.Simulation, [core.double]),
    x: dart.fnType(core.double, [core.double]),
    dx: dart.fnType(core.double, [core.double]),
    isDone: dart.fnType(core.bool, [core.double])
  }));
  dart.setGetterSignature(scroll_simulation.BouncingScrollSimulation, () => ({
    __proto__: dart.getGetters(scroll_simulation.BouncingScrollSimulation.__proto__),
    [_frictionSimulation]: friction_simulation.FrictionSimulation,
    [_springSimulation]: simulation.Simulation,
    [_springTime]: core.double
  }));
  dart.setSetterSignature(scroll_simulation.BouncingScrollSimulation, () => ({
    __proto__: dart.getSetters(scroll_simulation.BouncingScrollSimulation.__proto__),
    [_frictionSimulation]: friction_simulation.FrictionSimulation,
    [_springSimulation]: simulation.Simulation,
    [_springTime]: core.double
  }));
  dart.setLibraryUri(scroll_simulation.BouncingScrollSimulation, I[1]);
  dart.setFieldSignature(scroll_simulation.BouncingScrollSimulation, () => ({
    __proto__: dart.getFields(scroll_simulation.BouncingScrollSimulation.__proto__),
    leadingExtent: dart.finalFieldType(core.double),
    trailingExtent: dart.finalFieldType(core.double),
    spring: dart.finalFieldType(spring_simulation.SpringDescription),
    [__BouncingScrollSimulation__frictionSimulation]: dart.fieldType(dart.nullable(friction_simulation.FrictionSimulation)),
    [__BouncingScrollSimulation__springSimulation]: dart.fieldType(dart.nullable(simulation.Simulation)),
    [__BouncingScrollSimulation__springTime]: dart.fieldType(dart.nullable(core.double)),
    [_timeOffset]: dart.fieldType(core.double)
  }));
  dart.defineExtensionMethods(scroll_simulation.BouncingScrollSimulation, ['toString']);
  dart.defineLazy(scroll_simulation.BouncingScrollSimulation, {
    /*scroll_simulation.BouncingScrollSimulation.maxSpringTransferVelocity*/get maxSpringTransferVelocity() {
      return 5000;
    }
  }, false);
  var position$ = dart.privateName(scroll_simulation, "ClampingScrollSimulation.position");
  var velocity$ = dart.privateName(scroll_simulation, "ClampingScrollSimulation.velocity");
  var friction$ = dart.privateName(scroll_simulation, "ClampingScrollSimulation.friction");
  var __ClampingScrollSimulation__duration = dart.privateName(scroll_simulation, "_#ClampingScrollSimulation#_duration");
  var __ClampingScrollSimulation__distance = dart.privateName(scroll_simulation, "_#ClampingScrollSimulation#_distance");
  var _duration = dart.privateName(scroll_simulation, "_duration");
  var _splineFlingDuration = dart.privateName(scroll_simulation, "_splineFlingDuration");
  var _distance = dart.privateName(scroll_simulation, "_distance");
  var _splineFlingDistance = dart.privateName(scroll_simulation, "_splineFlingDistance");
  var _splineDeceleration = dart.privateName(scroll_simulation, "_splineDeceleration");
  scroll_simulation.ClampingScrollSimulation = class ClampingScrollSimulation extends simulation.Simulation {
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get velocity() {
      return this[velocity$];
    }
    set velocity(value) {
      super.velocity = value;
    }
    get friction() {
      return this[friction$];
    }
    set friction(value) {
      super.friction = value;
    }
    get [_duration]() {
      let t3;
      t3 = this[__ClampingScrollSimulation__duration];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_duration")) : t3;
    }
    set [_duration](t3) {
      this[__ClampingScrollSimulation__duration] = t3;
    }
    get [_distance]() {
      let t4;
      t4 = this[__ClampingScrollSimulation__distance];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_distance")) : t4;
    }
    set [_distance](t4) {
      this[__ClampingScrollSimulation__distance] = t4;
    }
    static _decelerationForFriction(friction) {
      return 9.80665 * 39.37 * friction * 1.0 * 160.0;
    }
    [_splineDeceleration](velocity) {
      return math.log(0.35 * velocity[$abs]() / (this.friction * scroll_simulation.ClampingScrollSimulation._decelerationForFriction(0.84)));
    }
    [_splineFlingDuration](velocity) {
      let deceleration = this[_splineDeceleration](velocity);
      return (1000 * math.exp(deceleration / (scroll_simulation.ClampingScrollSimulation._kDecelerationRate - 1.0)))[$round]();
    }
    [_splineFlingDistance](velocity) {
      let l = this[_splineDeceleration](velocity);
      let decelMinusOne = scroll_simulation.ClampingScrollSimulation._kDecelerationRate - 1.0;
      return this.friction * scroll_simulation.ClampingScrollSimulation._decelerationForFriction(0.84) * math.exp(scroll_simulation.ClampingScrollSimulation._kDecelerationRate / decelMinusOne * l);
    }
    x(time) {
      if (time === 0) {
        return this.position;
      }
      let sample = new scroll_simulation._NBSample.new(time, this[_duration]);
      return this.position + sample.distanceCoef * this[_distance] * this.velocity[$sign];
    }
    dx(time) {
      if (time === 0) {
        return this.velocity;
      }
      let sample = new scroll_simulation._NBSample.new(time, this[_duration]);
      return sample.velocityCoef * this[_distance] / this[_duration] * this.velocity[$sign] * 1000.0;
    }
    isDone(time) {
      return time * 1000.0 >= this[_duration];
    }
  };
  (scroll_simulation.ClampingScrollSimulation.new = function(opts) {
    let position = opts && 'position' in opts ? opts.position : null;
    let velocity = opts && 'velocity' in opts ? opts.velocity : null;
    let friction = opts && 'friction' in opts ? opts.friction : 0.015;
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C[0] || CT.C0;
    this[__ClampingScrollSimulation__duration] = null;
    this[__ClampingScrollSimulation__distance] = null;
    this[position$] = position;
    this[velocity$] = velocity;
    this[friction$] = friction;
    scroll_simulation.ClampingScrollSimulation.__proto__.new.call(this, {tolerance: tolerance});
    this[_duration] = this[_splineFlingDuration](this.velocity);
    this[_distance] = this[_splineFlingDistance](this.velocity);
  }).prototype = scroll_simulation.ClampingScrollSimulation.prototype;
  dart.addTypeTests(scroll_simulation.ClampingScrollSimulation);
  dart.addTypeCaches(scroll_simulation.ClampingScrollSimulation);
  dart.setMethodSignature(scroll_simulation.ClampingScrollSimulation, () => ({
    __proto__: dart.getMethods(scroll_simulation.ClampingScrollSimulation.__proto__),
    [_splineDeceleration]: dart.fnType(core.double, [core.double]),
    [_splineFlingDuration]: dart.fnType(core.int, [core.double]),
    [_splineFlingDistance]: dart.fnType(core.double, [core.double]),
    x: dart.fnType(core.double, [core.double]),
    dx: dart.fnType(core.double, [core.double]),
    isDone: dart.fnType(core.bool, [core.double])
  }));
  dart.setGetterSignature(scroll_simulation.ClampingScrollSimulation, () => ({
    __proto__: dart.getGetters(scroll_simulation.ClampingScrollSimulation.__proto__),
    [_duration]: core.int,
    [_distance]: core.double
  }));
  dart.setSetterSignature(scroll_simulation.ClampingScrollSimulation, () => ({
    __proto__: dart.getSetters(scroll_simulation.ClampingScrollSimulation.__proto__),
    [_duration]: core.int,
    [_distance]: core.double
  }));
  dart.setLibraryUri(scroll_simulation.ClampingScrollSimulation, I[1]);
  dart.setFieldSignature(scroll_simulation.ClampingScrollSimulation, () => ({
    __proto__: dart.getFields(scroll_simulation.ClampingScrollSimulation.__proto__),
    position: dart.finalFieldType(core.double),
    velocity: dart.finalFieldType(core.double),
    friction: dart.finalFieldType(core.double),
    [__ClampingScrollSimulation__duration]: dart.fieldType(dart.nullable(core.int)),
    [__ClampingScrollSimulation__distance]: dart.fieldType(dart.nullable(core.double))
  }));
  dart.defineLazy(scroll_simulation.ClampingScrollSimulation, {
    /*scroll_simulation.ClampingScrollSimulation._kDecelerationRate*/get _kDecelerationRate() {
      return math.log(0.78) / math.log(0.9);
    }
  }, false);
  var ___NBSample__velocityCoef = dart.privateName(scroll_simulation, "_#_NBSample#_velocityCoef");
  var ___NBSample__distanceCoef = dart.privateName(scroll_simulation, "_#_NBSample#_distanceCoef");
  var _distanceCoef = dart.privateName(scroll_simulation, "_distanceCoef");
  var _velocityCoef = dart.privateName(scroll_simulation, "_velocityCoef");
  scroll_simulation._NBSample = class _NBSample extends core.Object {
    get [_velocityCoef]() {
      let t5;
      t5 = this[___NBSample__velocityCoef];
      return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_velocityCoef")) : t5;
    }
    set [_velocityCoef](t5) {
      this[___NBSample__velocityCoef] = t5;
    }
    get velocityCoef() {
      return this[_velocityCoef];
    }
    get [_distanceCoef]() {
      let t6;
      t6 = this[___NBSample__distanceCoef];
      return t6 == null ? dart.throw(new _internal.LateError.fieldNI("_distanceCoef")) : t6;
    }
    set [_distanceCoef](t6) {
      this[___NBSample__distanceCoef] = t6;
    }
    get distanceCoef() {
      return this[_distanceCoef];
    }
  };
  (scroll_simulation._NBSample.new = function(time, duration) {
    this[___NBSample__velocityCoef] = null;
    this[___NBSample__distanceCoef] = null;
    let t = time * 1000.0 / duration;
    let index = (100 * t)[$clamp](0, 100)[$round]();
    this[_distanceCoef] = 1.0;
    this[_velocityCoef] = 0.0;
    if (index < 100) {
      let tInf = index / 100;
      let tSup = (index + 1) / 100;
      let dInf = scroll_simulation._NBSample._splinePosition[$_get](index);
      let dSup = scroll_simulation._NBSample._splinePosition[$_get](index + 1);
      this[_velocityCoef] = (dSup - dInf) / (tSup - tInf);
      this[_distanceCoef] = dInf + (t - tInf) * this[_velocityCoef];
    }
  }).prototype = scroll_simulation._NBSample.prototype;
  dart.addTypeTests(scroll_simulation._NBSample);
  dart.addTypeCaches(scroll_simulation._NBSample);
  dart.setGetterSignature(scroll_simulation._NBSample, () => ({
    __proto__: dart.getGetters(scroll_simulation._NBSample.__proto__),
    [_velocityCoef]: core.double,
    velocityCoef: core.double,
    [_distanceCoef]: core.double,
    distanceCoef: core.double
  }));
  dart.setSetterSignature(scroll_simulation._NBSample, () => ({
    __proto__: dart.getSetters(scroll_simulation._NBSample.__proto__),
    [_velocityCoef]: core.double,
    [_distanceCoef]: core.double
  }));
  dart.setLibraryUri(scroll_simulation._NBSample, I[1]);
  dart.setFieldSignature(scroll_simulation._NBSample, () => ({
    __proto__: dart.getFields(scroll_simulation._NBSample.__proto__),
    [___NBSample__velocityCoef]: dart.fieldType(dart.nullable(core.double)),
    [___NBSample__distanceCoef]: dart.fieldType(dart.nullable(core.double))
  }));
  dart.defineLazy(scroll_simulation._NBSample, {
    /*scroll_simulation._NBSample._nbSamples*/get _nbSamples() {
      return 100;
    },
    /*scroll_simulation._NBSample._splinePosition*/get _splinePosition() {
      return T.JSArrayOfdouble().of([0.000022888183591973643, 0.028561000304762274, 0.05705195792956655, 0.08538917797618413, 0.11349556286812107, 0.14129881694635613, 0.16877157254923383, 0.19581093511175632, 0.22239649722992452, 0.24843841866631658, 0.2740024733220569, 0.298967680744136, 0.32333234658228116, 0.34709556909569184, 0.3702249257894571, 0.39272483400399893, 0.41456988647721615, 0.43582889025419114, 0.4564192786416, 0.476410299013587, 0.4957560715637827, 0.5145493169954743, 0.5327205670880077, 0.5502846891191615, 0.5673274324802855, 0.583810881323224, 0.5997478744397482, 0.615194045299478, 0.6301165005270208, 0.6445484042257972, 0.6585198219185201, 0.6720397744233084, 0.6850997688076114, 0.6977281404741683, 0.7099506591298411, 0.7217749311525871, 0.7331784038850426, 0.7442308394229518, 0.7549087205105974, 0.7652471277371271, 0.7752251637549381, 0.7848768260203478, 0.7942056937103814, 0.8032299679689082, 0.8119428702388629, 0.8203713516576219, 0.8285187880808974, 0.8363794492831295, 0.8439768562813565, 0.851322799855549, 0.8584111051351724, 0.8652534074722162, 0.8718525580962131, 0.8782333271742155, 0.8843892099362031, 0.8903155590440985, 0.8960465359221951, 0.9015574505919048, 0.9068736766459904, 0.9119951682409297, 0.9169321898723632, 0.9216747065581234, 0.9262420604674766, 0.9306331858366086, 0.9348476990715433, 0.9389007110754832, 0.9427903495057521, 0.9465220679845756, 0.9500943036519721, 0.9535176728088761, 0.9567898524767604, 0.959924306623116, 0.9629127700159108, 0.9657622101750765, 0.9684818726275105, 0.9710676079044347, 0.9735231939498, 0.9758514437576309, 0.9780599066560445, 0.9801485715370128, 0.9821149805689633, 0.9839677526782791, 0.9857085499421516, 0.9873347811966005, 0.9888547171706613, 0.9902689443512227, 0.9915771042095881, 0.9927840651641069, 0.9938913963715834, 0.9948987305580712, 0.9958114963810524, 0.9966274782266875, 0.997352148697352, 0.9979848677523623, 0.9985285021374979, 0.9989844084453229, 0.9993537595844986, 0.999638729860106, 0.9998403888004533, 0.9999602810470701, 1.0]);
    }
  }, false);
  dart.defineLazy(scroll_simulation, {
    /*scroll_simulation._inflexion*/get _inflexion() {
      return 0.35;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/widgets/scroll_simulation.dart", {
    "package:flutter/src/widgets/scroll_simulation.dart": scroll_simulation
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["scroll_simulation.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/widgets/scroll_simulation.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__scroll_simulation: scroll_simulation
  };
}));

//# sourceMappingURL=scroll_simulation.dart.lib.js.map
>>>>>>> feature-b
