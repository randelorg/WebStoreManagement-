<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/gestures/lsq_solver.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__gestures__velocity_tracker_dart(dart_sdk, packages__flutter__src__gestures__lsq_solver$46dart, packages__flutter__src__foundation__debug$46dart) {
=======
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__rendering__flow_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__foundation__debug$46dart) {
>>>>>>> feature-b
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
<<<<<<< HEAD
  const lsq_solver = packages__flutter__src__gestures__lsq_solver$46dart.src__gestures__lsq_solver;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  var velocity_tracker = Object.create(dart.library);
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $toDouble = dartx.toDouble;
  var $abs = dartx.abs;
  var $add = dartx.add;
  var $modulo = dartx['%'];
  dart._checkModuleNullSafetyMode(true);
  var T = {
    _PointAtTimeN: () => (T._PointAtTimeN = dart.constFn(dart.nullable(velocity_tracker._PointAtTime)))(),
    ListOf_PointAtTimeN: () => (T.ListOf_PointAtTimeN = dart.constFn(core.List$(T._PointAtTimeN())))(),
    JSArrayOfdouble: () => (T.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))()
=======
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object$ = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  var flow = Object.create(dart.library);
  var $_equals = dartx._equals;
  var $runtimeType = dartx.runtimeType;
  var $isFinite = dartx.isFinite;
  var $clear = dartx.clear;
  var $add = dartx.add;
  var $length = dartx.length;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfRenderBox: () => (T.JSArrayOfRenderBox = dart.constFn(_interceptors.JSArray$(box.RenderBox)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    PaintingContextAndOffsetTovoid: () => (T.PaintingContextAndOffsetTovoid = dart.constFn(dart.fnType(dart.void, [object$.PaintingContext, ui.Offset])))(),
    OffsetN: () => (T.OffsetN = dart.constFn(dart.nullable(ui.Offset)))(),
    BoxHitTestResultAndOffsetNTobool: () => (T.BoxHitTestResultAndOffsetNTobool = dart.constFn(dart.fnType(core.bool, [box.BoxHitTestResult, T.OffsetN()])))()
>>>>>>> feature-b
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
<<<<<<< HEAD
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: velocity_tracker.Velocity.prototype,
        [pixelsPerSecond$]: C[1] || CT.C1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.touch",
        index: 0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: velocity_tracker.VelocityEstimate.prototype,
        [offset$]: C[1] || CT.C1,
        [duration$]: C[4] || CT.C4,
        [confidence$]: 0,
        [pixelsPerSecond$0]: C[1] || CT.C1
      });
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "file:///C:/flutter/packages/flutter/lib/src/gestures/velocity_tracker.dart",
    "package:flutter/src/gestures/velocity_tracker.dart"
  ];
  var pixelsPerSecond$ = dart.privateName(velocity_tracker, "Velocity.pixelsPerSecond");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  velocity_tracker.Velocity = class Velocity extends core.Object {
    get pixelsPerSecond() {
      return this[pixelsPerSecond$];
    }
    set pixelsPerSecond(value) {
      super.pixelsPerSecond = value;
    }
    _negate() {
      return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond._negate()});
    }
    ['-'](other) {
      return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['-'](other.pixelsPerSecond)});
    }
    ['+'](other) {
      return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['+'](other.pixelsPerSecond)});
    }
    clampMagnitude(minValue, maxValue) {
      if (!(minValue !== null && minValue >= 0.0)) dart.assertFailed(null, I[0], 53, 12, "minValue != null && minValue >= 0.0");
      if (!(maxValue !== null && maxValue >= 0.0 && maxValue >= minValue)) dart.assertFailed(null, I[0], 54, 12, "maxValue != null && maxValue >= 0.0 && maxValue >= minValue");
      let valueSquared = this.pixelsPerSecond.distanceSquared;
      if (valueSquared > maxValue * maxValue) return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['/'](this.pixelsPerSecond.distance)['*'](maxValue)});
      if (valueSquared < minValue * minValue) return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['/'](this.pixelsPerSecond.distance)['*'](minValue)});
      return this;
    }
    _equals(other) {
      if (other == null) return false;
      return velocity_tracker.Velocity.is(other) && other.pixelsPerSecond._equals(this.pixelsPerSecond);
    }
    get hashCode() {
      return this.pixelsPerSecond.hashCode;
    }
    toString() {
      return "Velocity(" + this.pixelsPerSecond.dx[$toStringAsFixed](1) + ", " + this.pixelsPerSecond.dy[$toStringAsFixed](1) + ")";
    }
  };
  (velocity_tracker.Velocity.new = function(opts) {
    let pixelsPerSecond = opts && 'pixelsPerSecond' in opts ? opts.pixelsPerSecond : null;
    this[pixelsPerSecond$] = pixelsPerSecond;
    if (!(pixelsPerSecond !== null)) dart.assertFailed(null, I[0], 21, 15, "pixelsPerSecond != null");
    ;
  }).prototype = velocity_tracker.Velocity.prototype;
  dart.addTypeTests(velocity_tracker.Velocity);
  dart.addTypeCaches(velocity_tracker.Velocity);
  dart.setMethodSignature(velocity_tracker.Velocity, () => ({
    __proto__: dart.getMethods(velocity_tracker.Velocity.__proto__),
    _negate: dart.fnType(velocity_tracker.Velocity, []),
    '-': dart.fnType(velocity_tracker.Velocity, [velocity_tracker.Velocity]),
    '+': dart.fnType(velocity_tracker.Velocity, [velocity_tracker.Velocity]),
    clampMagnitude: dart.fnType(velocity_tracker.Velocity, [core.double, core.double])
  }));
  dart.setLibraryUri(velocity_tracker.Velocity, I[1]);
  dart.setFieldSignature(velocity_tracker.Velocity, () => ({
    __proto__: dart.getFields(velocity_tracker.Velocity.__proto__),
    pixelsPerSecond: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(velocity_tracker.Velocity, ['_equals', 'toString']);
  dart.defineExtensionAccessors(velocity_tracker.Velocity, ['hashCode']);
  dart.defineLazy(velocity_tracker.Velocity, {
    /*velocity_tracker.Velocity.zero*/get zero() {
      return C[0] || CT.C0;
    }
  }, false);
  var pixelsPerSecond$0 = dart.privateName(velocity_tracker, "VelocityEstimate.pixelsPerSecond");
  var confidence$ = dart.privateName(velocity_tracker, "VelocityEstimate.confidence");
  var duration$ = dart.privateName(velocity_tracker, "VelocityEstimate.duration");
  var offset$ = dart.privateName(velocity_tracker, "VelocityEstimate.offset");
  velocity_tracker.VelocityEstimate = class VelocityEstimate extends core.Object {
    get pixelsPerSecond() {
      return this[pixelsPerSecond$0];
    }
    set pixelsPerSecond(value) {
      super.pixelsPerSecond = value;
    }
    get confidence() {
      return this[confidence$];
    }
    set confidence(value) {
      super.confidence = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    toString() {
      return "VelocityEstimate(" + this.pixelsPerSecond.dx[$toStringAsFixed](1) + ", " + this.pixelsPerSecond.dy[$toStringAsFixed](1) + "; offset: " + dart.str(this.offset) + ", duration: " + dart.str(this.duration) + ", confidence: " + this.confidence[$toStringAsFixed](1) + ")";
    }
  };
  (velocity_tracker.VelocityEstimate.new = function(opts) {
    let pixelsPerSecond = opts && 'pixelsPerSecond' in opts ? opts.pixelsPerSecond : null;
    let confidence = opts && 'confidence' in opts ? opts.confidence : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    this[pixelsPerSecond$0] = pixelsPerSecond;
    this[confidence$] = confidence;
    this[duration$] = duration;
    this[offset$] = offset;
    if (!(pixelsPerSecond !== null)) dart.assertFailed(null, I[0], 98, 15, "pixelsPerSecond != null");
    if (!(confidence !== null)) dart.assertFailed(null, I[0], 99, 15, "confidence != null");
    if (!(duration !== null)) dart.assertFailed(null, I[0], 100, 15, "duration != null");
    if (!(offset !== null)) dart.assertFailed(null, I[0], 101, 15, "offset != null");
    ;
  }).prototype = velocity_tracker.VelocityEstimate.prototype;
  dart.addTypeTests(velocity_tracker.VelocityEstimate);
  dart.addTypeCaches(velocity_tracker.VelocityEstimate);
  dart.setLibraryUri(velocity_tracker.VelocityEstimate, I[1]);
  dart.setFieldSignature(velocity_tracker.VelocityEstimate, () => ({
    __proto__: dart.getFields(velocity_tracker.VelocityEstimate.__proto__),
    pixelsPerSecond: dart.finalFieldType(ui.Offset),
    confidence: dart.finalFieldType(core.double),
    duration: dart.finalFieldType(core.Duration),
    offset: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(velocity_tracker.VelocityEstimate, ['toString']);
  var time$ = dart.privateName(velocity_tracker, "_PointAtTime.time");
  var point$ = dart.privateName(velocity_tracker, "_PointAtTime.point");
  velocity_tracker._PointAtTime = class _PointAtTime extends core.Object {
    get time() {
      return this[time$];
    }
    set time(value) {
      super.time = value;
    }
    get point() {
      return this[point$];
    }
    set point(value) {
      super.point = value;
    }
    toString() {
      return "_PointAtTime(" + dart.str(this.point) + " at " + dart.str(this.time) + ")";
    }
  };
  (velocity_tracker._PointAtTime.new = function(point, time) {
    this[point$] = point;
    this[time$] = time;
    if (!(point !== null)) dart.assertFailed(null, I[0], 126, 14, "point != null");
    if (!(time !== null)) dart.assertFailed(null, I[0], 127, 14, "time != null");
    ;
  }).prototype = velocity_tracker._PointAtTime.prototype;
  dart.addTypeTests(velocity_tracker._PointAtTime);
  dart.addTypeCaches(velocity_tracker._PointAtTime);
  dart.setLibraryUri(velocity_tracker._PointAtTime, I[1]);
  dart.setFieldSignature(velocity_tracker._PointAtTime, () => ({
    __proto__: dart.getFields(velocity_tracker._PointAtTime.__proto__),
    time: dart.finalFieldType(core.Duration),
    point: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(velocity_tracker._PointAtTime, ['toString']);
  var kind$ = dart.privateName(velocity_tracker, "VelocityTracker.kind");
  var _name = dart.privateName(ui, "_name");
  var _samples = dart.privateName(velocity_tracker, "_samples");
  var _index = dart.privateName(velocity_tracker, "_index");
  velocity_tracker.VelocityTracker = class VelocityTracker extends core.Object {
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    addPosition(time, position) {
      this[_index] = this[_index] + 1;
      if (this[_index] === 20) this[_index] = 0;
      this[_samples][$_set](this[_index], new velocity_tracker._PointAtTime.new(position, time));
    }
    getVelocityEstimate() {
      let x = T.JSArrayOfdouble().of([]);
      let y = T.JSArrayOfdouble().of([]);
      let w = T.JSArrayOfdouble().of([]);
      let time = T.JSArrayOfdouble().of([]);
      let sampleCount = 0;
      let index = this[_index];
      let newestSample = this[_samples][$_get](index);
      if (newestSample == null) return null;
      let previousSample = newestSample;
      let oldestSample = newestSample;
      do {
        let sample = this[_samples][$_get](index);
        if (sample == null) break;
        let age = newestSample.time['-'](sample.time).inMicroseconds[$toDouble]() / 1000;
        let delta = sample.time['-'](previousSample.time).inMicroseconds[$abs]()[$toDouble]() / 1000;
        previousSample = sample;
        if (age > 100 || delta > 40) break;
        oldestSample = sample;
        let position = sample.point;
        x[$add](position.dx);
        y[$add](position.dy);
        w[$add](1.0);
        time[$add](-age);
        index = (index === 0 ? 20 : index) - 1;
        sampleCount = sampleCount + 1;
      } while (sampleCount < 20);
      if (sampleCount >= 3) {
        let xSolver = new lsq_solver.LeastSquaresSolver.new(time, x, w);
        let xFit = xSolver.solve(2);
        if (xFit != null) {
          let ySolver = new lsq_solver.LeastSquaresSolver.new(time, y, w);
          let yFit = ySolver.solve(2);
          if (yFit != null) {
            return new velocity_tracker.VelocityEstimate.new({pixelsPerSecond: new ui.Offset.new(xFit.coefficients[$_get](1) * 1000, yFit.coefficients[$_get](1) * 1000), confidence: xFit.confidence * yFit.confidence, duration: newestSample.time['-'](oldestSample.time), offset: newestSample.point['-'](oldestSample.point)});
          }
        }
      }
      return new velocity_tracker.VelocityEstimate.new({pixelsPerSecond: ui.Offset.zero, confidence: 1.0, duration: newestSample.time['-'](oldestSample.time), offset: newestSample.point['-'](oldestSample.point)});
    }
    getVelocity() {
      let estimate = this.getVelocityEstimate();
      if (estimate == null || estimate.pixelsPerSecond._equals(ui.Offset.zero)) return velocity_tracker.Velocity.zero;
      return new velocity_tracker.Velocity.new({pixelsPerSecond: estimate.pixelsPerSecond});
    }
  };
  (velocity_tracker.VelocityTracker.new = function(kind = C[2] || CT.C2) {
    this[_samples] = T.ListOf_PointAtTimeN().filled(20, null, {growable: false});
    this[_index] = 0;
    this[kind$] = kind;
    ;
  }).prototype = velocity_tracker.VelocityTracker.prototype;
  (velocity_tracker.VelocityTracker.withKind = function(kind) {
    this[_samples] = T.ListOf_PointAtTimeN().filled(20, null, {growable: false});
    this[_index] = 0;
    this[kind$] = kind;
    ;
  }).prototype = velocity_tracker.VelocityTracker.prototype;
  dart.addTypeTests(velocity_tracker.VelocityTracker);
  dart.addTypeCaches(velocity_tracker.VelocityTracker);
  dart.setMethodSignature(velocity_tracker.VelocityTracker, () => ({
    __proto__: dart.getMethods(velocity_tracker.VelocityTracker.__proto__),
    addPosition: dart.fnType(dart.void, [core.Duration, ui.Offset]),
    getVelocityEstimate: dart.fnType(dart.nullable(velocity_tracker.VelocityEstimate), []),
    getVelocity: dart.fnType(velocity_tracker.Velocity, [])
  }));
  dart.setLibraryUri(velocity_tracker.VelocityTracker, I[1]);
  dart.setFieldSignature(velocity_tracker.VelocityTracker, () => ({
    __proto__: dart.getFields(velocity_tracker.VelocityTracker.__proto__),
    kind: dart.finalFieldType(ui.PointerDeviceKind),
    [_samples]: dart.finalFieldType(core.List$(dart.nullable(velocity_tracker._PointAtTime))),
    [_index]: dart.fieldType(core.int)
  }));
  dart.defineLazy(velocity_tracker.VelocityTracker, {
    /*velocity_tracker.VelocityTracker._assumePointerMoveStoppedMilliseconds*/get _assumePointerMoveStoppedMilliseconds() {
      return 40;
    },
    /*velocity_tracker.VelocityTracker._historySize*/get _historySize() {
      return 20;
    },
    /*velocity_tracker.VelocityTracker._horizonMilliseconds*/get _horizonMilliseconds() {
      return 100;
    },
    /*velocity_tracker.VelocityTracker._minSampleSize*/get _minSampleSize() {
      return 3;
    }
  }, false);
  var _touchSamples = dart.privateName(velocity_tracker, "_touchSamples");
  var _previousVelocityAt = dart.privateName(velocity_tracker, "_previousVelocityAt");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  velocity_tracker.IOSScrollViewFlingVelocityTracker = class IOSScrollViewFlingVelocityTracker extends velocity_tracker.VelocityTracker {
    addPosition(time, position) {
      if (!dart.fn(() => {
        let previousPoint = this[_touchSamples][$_get](this[_index]);
        if (previousPoint == null || previousPoint.time['<='](time)) return true;
        dart.throw(assertions.FlutterError.new("The position being added (" + dart.str(position) + ") has a smaller timestamp (" + dart.str(time) + ") " + "than its predecessor: " + dart.str(previousPoint) + "."));
      }, T.VoidTobool())()) dart.assertFailed(null, I[0], 299, 12, "() {\r\n      final _PointAtTime? previousPoint = _touchSamples[_index];\r\n      if (previousPoint == null || previousPoint.time <= time)\r\n        return true;\r\n      throw FlutterError(\r\n        'The position being added ($position) has a smaller timestamp ($time) '\r\n        'than its predecessor: $previousPoint.',\r\n      );\r\n    }()");
      this[_index] = (this[_index] + 1)[$modulo](20);
      this[_touchSamples][$_set](this[_index], new velocity_tracker._PointAtTime.new(position, time));
    }
    [_previousVelocityAt](index) {
      let endIndex = (this[_index] + index)[$modulo](20);
      let startIndex = (this[_index] + index - 1)[$modulo](20);
      let end = this[_touchSamples][$_get](endIndex);
      let start = this[_touchSamples][$_get](startIndex);
      if (end == null || start == null) {
        return ui.Offset.zero;
      }
      let dt = end.time['-'](start.time).inMicroseconds;
      if (!(dt >= 0)) dart.assertFailed(null, I[0], 326, 12, "dt >= 0");
      return dt > 0 ? end.point['-'](start.point)['*'](1000.0)['/'](dt[$toDouble]() / 1000) : ui.Offset.zero;
    }
    getVelocityEstimate() {
      let estimatedVelocity = this[_previousVelocityAt](-2)['*'](0.6)['+'](this[_previousVelocityAt](-1)['*'](0.35))['+'](this[_previousVelocityAt](0)['*'](0.05));
      let newestSample = this[_touchSamples][$_get](this[_index]);
      let oldestNonNullSample = null;
      for (let i = 1; i <= 20; i = i + 1) {
        oldestNonNullSample = this[_touchSamples][$_get]((this[_index] + i)[$modulo](20));
        if (oldestNonNullSample != null) break;
      }
      if (oldestNonNullSample == null || newestSample == null) {
        if (!false) dart.assertFailed("There must be at least 1 point in _touchSamples: " + dart.str(this[_touchSamples]), I[0], 356, 14, "false");
        return C[3] || CT.C3;
      } else {
        return new velocity_tracker.VelocityEstimate.new({pixelsPerSecond: estimatedVelocity, confidence: 1.0, duration: newestSample.time['-'](oldestNonNullSample.time), offset: newestSample.point['-'](oldestNonNullSample.point)});
      }
    }
  };
  (velocity_tracker.IOSScrollViewFlingVelocityTracker.new = function(kind) {
    this[_touchSamples] = T.ListOf_PointAtTimeN().filled(20, null, {growable: false});
    velocity_tracker.IOSScrollViewFlingVelocityTracker.__proto__.withKind.call(this, kind);
    ;
  }).prototype = velocity_tracker.IOSScrollViewFlingVelocityTracker.prototype;
  dart.addTypeTests(velocity_tracker.IOSScrollViewFlingVelocityTracker);
  dart.addTypeCaches(velocity_tracker.IOSScrollViewFlingVelocityTracker);
  dart.setMethodSignature(velocity_tracker.IOSScrollViewFlingVelocityTracker, () => ({
    __proto__: dart.getMethods(velocity_tracker.IOSScrollViewFlingVelocityTracker.__proto__),
    [_previousVelocityAt]: dart.fnType(ui.Offset, [core.int]),
    getVelocityEstimate: dart.fnType(velocity_tracker.VelocityEstimate, [])
  }));
  dart.setLibraryUri(velocity_tracker.IOSScrollViewFlingVelocityTracker, I[1]);
  dart.setFieldSignature(velocity_tracker.IOSScrollViewFlingVelocityTracker, () => ({
    __proto__: dart.getFields(velocity_tracker.IOSScrollViewFlingVelocityTracker.__proto__),
    [_touchSamples]: dart.finalFieldType(core.List$(dart.nullable(velocity_tracker._PointAtTime)))
  }));
  dart.defineLazy(velocity_tracker.IOSScrollViewFlingVelocityTracker, {
    /*velocity_tracker.IOSScrollViewFlingVelocityTracker._sampleSize*/get _sampleSize() {
      return 20;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/gestures/velocity_tracker.dart", {
    "package:flutter/src/gestures/velocity_tracker.dart": velocity_tracker
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["velocity_tracker.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0Be;;;;;;;AAGY,iEAA0B,AAAC;IAAgB;UAGvC;AAC3B,YAAO,qDAA0B,AAAgB,0BAAE,AAAM,KAAD;IAC1D;UAG6B;AAC3B,YAAO,qDAA0B,AAAgB,0BAAE,AAAM,KAAD;IAC1D;mBAY+B,UAAiB;AAC9C,YAAO,AAAiB,QAAT,aAAY,AAAS,QAAD,IAAI;AACvC,YAAO,AAAoC,QAA5B,aAAY,AAAS,QAAD,IAAI,OAAO,AAAS,QAAD,IAAI,QAAQ;AACrD,yBAAe,AAAgB;AAC5C,UAAI,AAAa,YAAD,GAAG,AAAS,QAAD,GAAG,QAAQ,EACpC,MAAO,qDAA2B,AAAgB,AAA4B,0BAA1B,AAAgB,oCAAY,QAAQ;AAC1F,UAAI,AAAa,YAAD,GAAG,AAAS,QAAD,GAAG,QAAQ,EACpC,MAAO,qDAA2B,AAAgB,AAA4B,0BAA1B,AAAgB,oCAAY,QAAQ;AAC1F,YAAO;IACT;;UAGwB;AACtB,YAAa,AACT,8BADG,KAAK,KACL,AAAM,AAAgB,KAAjB,yBAAoB;IAClC;;AAGoB,YAAA,AAAgB;IAAQ;;AAGvB,YAAA,AAA8F,eAAlF,AAAgB,AAAG,0CAAgB,KAAG,OAAI,AAAgB,AAAG,0CAAgB,KAAG;IAAE;;;QArDnG;;UACJ,AAAgB,eAAD;;EAAS;;;;;;;;;;;;;;;;;;MAGd,8BAAI;;;;;;;;;IAgFb;;;;;;IAMA;;;;;;IAIE;;;;;;IAIF;;;;;;;AAGQ,YAAA,AAA0L,uBAAtK,AAAgB,AAAG,0CAAgB,KAAG,OAAI,AAAgB,AAAG,0CAAgB,KAAG,wBAAW,eAAM,0BAAa,iBAAQ,mBAAgB,AAAW,kCAAgB,KAAG;IAAE;;;QA3B/L;QACA;QACA;QACA;IAHA;IACA;IACA;IACA;UACJ,AAAgB,eAAD;UACf,AAAW,UAAD;UACV,AAAS,QAAD;UACR,AAAO,MAAD;;EAAS;;;;;;;;;;;;;;;IA4BZ;;;;;;IACF;;;;;;;AAGQ,YAAA,AAA+B,4BAAhB,cAAK,kBAAK,aAAI;IAAE;;gDAR5B,OAAY;IAAZ;IAAY;UACzB,AAAM,KAAD;UACL,AAAK,IAAD;;EAAS;;;;;;;;;;;;;;;IAoCA;;;;;;gBAOE,MAAa;AAC1B,MAAX,eAAA,AAAO,eAAG;AACV,UAAI,AAAO,qBACT,AAAU,eAAD;AACoC,MAA/C,AAAQ,sBAAC,cAAU,sCAAa,QAAQ,EAAE,IAAI;IAChD;;AASqB,cAAY;AACZ,cAAY;AACZ,cAAY;AACZ,iBAAe;AAC9B,wBAAc;AACd,kBAAQ;AAEQ,yBAAe,AAAQ,sBAAC,KAAK;AACjD,UAAI,AAAa,YAAD,UACd,MAAO;AAEI,2BAAiB,YAAY;AAC7B,yBAAe,YAAY;AAIxC;AACsB,qBAAS,AAAQ,sBAAC,KAAK;AAC3C,YAAI,AAAO,MAAD,UACR;AAEW,kBAAO,AAAa,AAAK,AAAe,AAAe,AAAW,YAA/C,WAAQ,AAAO,MAAD,qCAAmC;AACpE,oBAAS,AAAO,AAAK,AAAuB,AAAe,AAAM,AAAW,MAA7D,WAAQ,AAAe,cAAD,6CAAyC;AACpE,QAAvB,iBAAiB,MAAM;AACvB,YAAI,AAAI,GAAD,UAA2B,AAAM,KAAD,OACrC;AAEmB,QAArB,eAAe,MAAM;AACR,uBAAW,AAAO,MAAD;AACZ,QAAlB,AAAE,CAAD,OAAK,AAAS,QAAD;AACI,QAAlB,AAAE,CAAD,OAAK,AAAS,QAAD;AACJ,QAAV,AAAE,CAAD,OAAK;AACQ,QAAd,AAAK,IAAD,OAAK,CAAC,GAAG;AACkC,QAA/C,QAA4C,CAAnC,AAAM,KAAD,KAAI,SAAmB,KAAK,IAAI;AAE9B,QAAhB,cAAA,AAAY,WAAD,GAAI;eACR,AAAY,WAAD;AAEpB,UAAI,AAAY,WAAD;AACY,sBAAU,sCAAmB,IAAI,EAAE,CAAC,EAAE,CAAC;AAC3C,mBAAO,AAAQ,OAAD,OAAO;AAC1C,YAAI,IAAI;AACmB,wBAAU,sCAAmB,IAAI,EAAE,CAAC,EAAE,CAAC;AAC3C,qBAAO,AAAQ,OAAD,OAAO;AAC1C,cAAI,IAAI;AACN,kBAAO,6DACY,kBAAO,AAAK,AAAY,AAAI,IAAjB,qBAAc,KAAK,MAAM,AAAK,AAAY,AAAI,IAAjB,qBAAc,KAAK,mBAChE,AAAK,AAAW,IAAZ,cAAc,AAAK,IAAD,uBACxB,AAAa,AAAK,YAAN,WAAQ,AAAa,YAAD,gBAClC,AAAa,AAAM,YAAP,YAAS,AAAa,YAAD;;;;AAQjD,YAAO,6DACmB,4BACZ,eACF,AAAa,AAAK,YAAN,WAAQ,AAAa,YAAD,gBAClC,AAAa,AAAM,YAAP,YAAS,AAAa,YAAD;IAE7C;;AAU0B,qBAAW;AACnC,UAAI,AAAS,QAAD,YAAY,AAAS,AAAgB,QAAjB,yBAA2B,iBACzD,MAAgB;AAClB,YAAO,qDAA0B,AAAS,QAAD;IAC3C;;mDA7GsB;IAcI,iBAAW,mCAAyC,iBAAgB;IAC1F,eAAS;IAfS;;EAAgC;wDAGxB;IAWJ,iBAAW,mCAAyC,iBAAgB;IAC1F,eAAS;IAZiB;;EAAK;;;;;;;;;;;;;;;;;MAElB,sEAAqC;;;MACrC,6CAAY;;;MACZ,qDAAoB;;;MACpB,+CAAc;;;;;;;;gBA0IL,MAAa;AACrC,WAAO,AAQN;AAPqB,4BAAgB,AAAa,2BAAC;AAClD,YAAI,AAAc,aAAD,YAAY,AAAc,AAAK,aAAN,YAAS,IAAI,GACrD,MAAO;AAIR,QAHD,WAAM,4BAAY,AAChB,wCAA4B,QAAQ,6CAA4B,IAAI,WACpE,oCAAwB,aAAa;;AAGN,MAAnC,eAAsB,CAAZ,AAAO,eAAE;AACiC,MAApD,AAAa,2BAAC,cAAU,sCAAa,QAAQ,EAAE,IAAI;IACrD;0BAK+B;AACnB,qBAA4B,CAAhB,AAAO,eAAE,KAAK;AAC1B,uBAAkC,CAApB,AAAO,AAAQ,eAAN,KAAK,GAAG;AACrB,gBAAM,AAAa,2BAAC,QAAQ;AAC5B,kBAAQ,AAAa,2BAAC,UAAU;AAEpD,UAAI,AAAI,GAAD,YAAY,AAAM,KAAD;AACtB,cAAc;;AAGN,eAAM,AAAI,AAAK,AAAc,GAApB,WAAQ,AAAM,KAAD;AAChC,YAAO,AAAG,EAAD,IAAI;AAEb,YAAO,AAAG,GAAD,GAAG,IAEP,AAAI,AAAM,AAAe,AAAO,GAA7B,YAAS,AAAM,KAAD,aAAU,aAAQ,AAAG,AAAW,EAAZ,gBAAc,QAC7C;IACb;;AAUe,8BAAoB,AAAwB,AAC1B,AACA,0BAFsB,CAAC,QAAK,UAC1B,AAAwB,0BAAJ,CAAC,QAAK,YAC1B,AAAuB,0BAAH,QAAK;AAEtC,yBAAe,AAAa,2BAAC;AACnC;AAEd,eAAS,IAAI,GAAG,AAAE,CAAD,QAAiB,IAAA,AAAE,CAAD,GAAI;AAC0B,QAA/D,sBAAsB,AAAa,2BAAc,CAAZ,AAAO,eAAE,CAAC;AAC/C,YAAI,mBAAmB,UACrB;;AAGJ,UAAI,AAAoB,mBAAD,YAAY,AAAa,YAAD;AAC7C,aAAO,yBAAO,AAAiE,+DAAd;AACjE;;AAOA,cAAO,6DACY,iBAAiB,cACtB,eACF,AAAa,AAAK,YAAN,WAAQ,AAAoB,mBAAD,gBACzC,AAAa,AAAM,YAAP,YAAS,AAAoB,mBAAD;;IAGtD;;qEApFoD;IAQ1B,sBAAgB,mCAAwC,iBAAgB;AARhC,qFAAS,IAAI;;EAAC;;;;;;;;;;;;;;MAM/D,8DAAW","file":"../../../../../../../E:/packages/flutter/src/gestures/velocity_tracker.dart.lib.js"}');
  // Exports:
  return {
    src__gestures__velocity_tracker: velocity_tracker
  };
}));

//# sourceMappingURL=velocity_tracker.dart.lib.js.map
=======
    get C0() {
      return C[0] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.hardEdge",
        index: 1
      });
    }
  }, false);
  var C = [void 0];
  var I = [
    "package:flutter/src/rendering/flow.dart",
    "file:///C:/flutter/packages/flutter/lib/src/rendering/flow.dart"
  ];
  flow.FlowPaintingContext = class FlowPaintingContext extends core.Object {};
  (flow.FlowPaintingContext.new = function() {
    ;
  }).prototype = flow.FlowPaintingContext.prototype;
  dart.addTypeTests(flow.FlowPaintingContext);
  dart.addTypeCaches(flow.FlowPaintingContext);
  dart.setLibraryUri(flow.FlowPaintingContext, I[0]);
  var _repaint = dart.privateName(flow, "FlowDelegate._repaint");
  var _repaint$ = dart.privateName(flow, "_repaint");
  flow.FlowDelegate = class FlowDelegate extends core.Object {
    get [_repaint$]() {
      return this[_repaint];
    }
    set [_repaint$](value) {
      super[_repaint$] = value;
    }
    getSize(constraints) {
      return constraints.biggest;
    }
    getConstraintsForChild(i, constraints) {
      return constraints;
    }
    shouldRelayout(oldDelegate) {
      flow.FlowDelegate.as(oldDelegate);
      return false;
    }
    toString() {
      return object.objectRuntimeType(this, "FlowDelegate");
    }
  };
  (flow.FlowDelegate.new = function(opts) {
    let repaint = opts && 'repaint' in opts ? opts.repaint : null;
    this[_repaint] = repaint;
    ;
  }).prototype = flow.FlowDelegate.prototype;
  dart.addTypeTests(flow.FlowDelegate);
  dart.addTypeCaches(flow.FlowDelegate);
  dart.setMethodSignature(flow.FlowDelegate, () => ({
    __proto__: dart.getMethods(flow.FlowDelegate.__proto__),
    getSize: dart.fnType(ui.Size, [box.BoxConstraints]),
    getConstraintsForChild: dart.fnType(box.BoxConstraints, [core.int, box.BoxConstraints]),
    shouldRelayout: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(flow.FlowDelegate, I[0]);
  dart.setFieldSignature(flow.FlowDelegate, () => ({
    __proto__: dart.getFields(flow.FlowDelegate.__proto__),
    [_repaint$]: dart.finalFieldType(dart.nullable(change_notifier.Listenable))
  }));
  dart.defineExtensionMethods(flow.FlowDelegate, ['toString']);
  var _transform = dart.privateName(flow, "_transform");
  flow.FlowParentData = class FlowParentData extends box.ContainerBoxParentData$(box.RenderBox) {};
  (flow.FlowParentData.new = function() {
    this[_transform] = null;
    flow.FlowParentData.__proto__.new.call(this);
    ;
  }).prototype = flow.FlowParentData.prototype;
  dart.addTypeTests(flow.FlowParentData);
  dart.addTypeCaches(flow.FlowParentData);
  dart.setLibraryUri(flow.FlowParentData, I[0]);
  dart.setFieldSignature(flow.FlowParentData, () => ({
    __proto__: dart.getFields(flow.FlowParentData.__proto__),
    [_transform]: dart.fieldType(dart.nullable(vector_math_64.Matrix4))
  }));
  var _name = dart.privateName(ui, "_name");
  var _clipBehavior = dart.privateName(flow, "_clipBehavior");
  var _randomAccessChildren = dart.privateName(flow, "_randomAccessChildren");
  var _lastPaintOrder = dart.privateName(flow, "_lastPaintOrder");
  var _paintingContext = dart.privateName(flow, "_paintingContext");
  var _paintingOffset = dart.privateName(flow, "_paintingOffset");
  var _clipRectLayer = dart.privateName(flow, "_clipRectLayer");
  var _delegate = dart.privateName(flow, "_delegate");
  var _getSize = dart.privateName(flow, "_getSize");
  var _paintWithDelegate = dart.privateName(flow, "_paintWithDelegate");
  const RenderBox_ContainerRenderObjectMixin$36 = class RenderBox_ContainerRenderObjectMixin extends box.RenderBox {};
  (RenderBox_ContainerRenderObjectMixin$36.new = function() {
    object$.ContainerRenderObjectMixin$(box.RenderBox, flow.FlowParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36, object$.ContainerRenderObjectMixin$(box.RenderBox, flow.FlowParentData));
  const RenderBox_RenderBoxContainerDefaultsMixin$36 = class RenderBox_RenderBoxContainerDefaultsMixin extends RenderBox_ContainerRenderObjectMixin$36 {};
  (RenderBox_RenderBoxContainerDefaultsMixin$36.new = function() {
    RenderBox_RenderBoxContainerDefaultsMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderBoxContainerDefaultsMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderBoxContainerDefaultsMixin$36, box.RenderBoxContainerDefaultsMixin$(box.RenderBox, flow.FlowParentData));
  flow.RenderFlow = class RenderFlow extends RenderBox_RenderBoxContainerDefaultsMixin$36 {
    setupParentData(child) {
      box.RenderBox.as(child);
      let childParentData = child.parentData;
      if (flow.FlowParentData.is(childParentData))
        childParentData[_transform] = null;
      else
        child.parentData = new flow.FlowParentData.new();
    }
    get delegate() {
      return this[_delegate];
    }
    set delegate(newDelegate) {
      let t0, t0$;
      if (!(newDelegate !== null)) dart.assertFailed(null, I[1], 211, 12, "newDelegate != null");
      if (this[_delegate][$_equals](newDelegate)) return;
      let oldDelegate = this[_delegate];
      this[_delegate] = newDelegate;
      if (!newDelegate[$runtimeType]._equals(oldDelegate[$runtimeType]) || newDelegate.shouldRelayout(oldDelegate))
        this.markNeedsLayout();
      else if (newDelegate.shouldRepaint(oldDelegate)) this.markNeedsPaint();
      if (this.attached) {
        t0 = oldDelegate[_repaint$];
        t0 == null ? null : t0.removeListener(dart.bind(this, 'markNeedsPaint'));
        t0$ = newDelegate[_repaint$];
        t0$ == null ? null : t0$.addListener(dart.bind(this, 'markNeedsPaint'));
      }
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 234, 12, "value != null");
      if (value !== this[_clipBehavior]) {
        this[_clipBehavior] = value;
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    attach(owner) {
      let t0;
      object$.PipelineOwner.as(owner);
      super.attach(owner);
      t0 = this[_delegate][_repaint$];
      t0 == null ? null : t0.addListener(dart.bind(this, 'markNeedsPaint'));
    }
    detach() {
      let t0;
      t0 = this[_delegate][_repaint$];
      t0 == null ? null : t0.removeListener(dart.bind(this, 'markNeedsPaint'));
      super.detach();
    }
    [_getSize](constraints) {
      if (!constraints.debugAssertIsValid()) dart.assertFailed(null, I[1], 255, 12, "constraints.debugAssertIsValid()");
      return constraints.constrain(this[_delegate].getSize(constraints));
    }
    get isRepaintBoundary() {
      return true;
    }
    computeMinIntrinsicWidth(height) {
      let width = this[_getSize](new box.BoxConstraints.tightForFinite({height: height})).width;
      if (width[$isFinite]) return width;
      return 0.0;
    }
    computeMaxIntrinsicWidth(height) {
      let width = this[_getSize](new box.BoxConstraints.tightForFinite({height: height})).width;
      if (width[$isFinite]) return width;
      return 0.0;
    }
    computeMinIntrinsicHeight(width) {
      let height = this[_getSize](new box.BoxConstraints.tightForFinite({width: width})).height;
      if (height[$isFinite]) return height;
      return 0.0;
    }
    computeMaxIntrinsicHeight(width) {
      let height = this[_getSize](new box.BoxConstraints.tightForFinite({width: width})).height;
      if (height[$isFinite]) return height;
      return 0.0;
    }
    computeDryLayout(constraints) {
      return this[_getSize](constraints);
    }
    performLayout() {
      let constraints = this.constraints;
      this.size = this[_getSize](constraints);
      let i = 0;
      this[_randomAccessChildren][$clear]();
      let child = this.firstChild;
      while (child != null) {
        this[_randomAccessChildren][$add](child);
        let innerConstraints = this[_delegate].getConstraintsForChild(i, constraints);
        child.layout(innerConstraints, {parentUsesSize: true});
        let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
        childParentData.offset = ui.Offset.zero;
        child = childParentData.nextSibling;
        i = i + 1;
      }
    }
    getChildSize(i) {
      if (i < 0 || i >= this[_randomAccessChildren][$length]) return null;
      return this[_randomAccessChildren][$_get](i).size;
    }
    paintChild(i, opts) {
      let transform = opts && 'transform' in opts ? opts.transform : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : 1;
      transform == null ? transform = vector_math_64.Matrix4.identity() : null;
      let child = this[_randomAccessChildren][$_get](i);
      let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
      if (!dart.fn(() => {
        if (childParentData[_transform] != null) {
          dart.throw(assertions.FlutterError.new("Cannot call paintChild twice for the same child.\n" + "The flow delegate of type " + dart.str(this[_delegate][$runtimeType]) + " attempted to " + "paint child " + dart.str(i) + " multiple times, which is not permitted."));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 343, 12, "() {\r\n      if (childParentData._transform != null) {\r\n        throw FlutterError(\r\n          'Cannot call paintChild twice for the same child.\\n'\r\n          'The flow delegate of type ${_delegate.runtimeType} attempted to '\r\n          'paint child $i multiple times, which is not permitted.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      this[_lastPaintOrder][$add](i);
      childParentData[_transform] = transform;
      if (opacity === 0.0) return;
      function painter(context, offset) {
        context.paintChild(child, offset);
      }
      dart.fn(painter, T.PaintingContextAndOffsetTovoid());
      if (opacity === 1.0) {
        dart.nullCheck(this[_paintingContext]).pushTransform(this.needsCompositing, dart.nullCheck(this[_paintingOffset]), transform, painter);
      } else {
        dart.nullCheck(this[_paintingContext]).pushOpacity(dart.nullCheck(this[_paintingOffset]), ui.Color.getAlphaFromOpacity(opacity), dart.fn((context, offset) => {
          context.pushTransform(this.needsCompositing, offset, dart.nullCheck(transform), painter);
        }, T.PaintingContextAndOffsetTovoid()));
      }
    }
    [_paintWithDelegate](context, offset) {
      this[_lastPaintOrder][$clear]();
      this[_paintingContext] = context;
      this[_paintingOffset] = offset;
      for (let child of this[_randomAccessChildren]) {
        let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
        childParentData[_transform] = null;
      }
      try {
        this[_delegate].paintChildren(this);
      } finally {
        this[_paintingContext] = null;
        this[_paintingOffset] = null;
      }
    }
    paint(context, offset) {
      if (this.clipBehavior === ui.Clip.none) {
        this[_clipRectLayer] = null;
        this[_paintWithDelegate](context, offset);
      } else {
        this[_clipRectLayer] = context.pushClipRect(this.needsCompositing, offset, ui.Offset.zero['&'](this.size), dart.bind(this, _paintWithDelegate), {clipBehavior: this.clipBehavior, oldLayer: this[_clipRectLayer]});
      }
    }
    hitTestChildren(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      let children = this.getChildrenAsList();
      for (let i = this[_lastPaintOrder][$length] - 1; i >= 0; i = i - 1) {
        let childIndex = this[_lastPaintOrder][$_get](i);
        if (childIndex >= children[$length]) continue;
        let child = children[$_get](childIndex);
        let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
        let transform = childParentData[_transform];
        if (transform == null) continue;
        let absorbed = result.addWithPaintTransform({transform: transform, position: position, hitTest: dart.fn((result, position) => child.hitTest(result, {position: dart.nullCheck(position)}), T.BoxHitTestResultAndOffsetNTobool())});
        if (absorbed) return true;
      }
      return false;
    }
    applyPaintTransform(child, transform) {
      box.RenderBox.as(child);
      let childParentData = flow.FlowParentData.as(dart.nullCheck(child.parentData));
      if (childParentData[_transform] != null) transform.multiply(dart.nullCheck(childParentData[_transform]));
      super.applyPaintTransform(child, transform);
    }
  };
  (flow.RenderFlow.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[0] || CT.C0;
    this[_clipBehavior] = ui.Clip.hardEdge;
    this[_randomAccessChildren] = T.JSArrayOfRenderBox().of([]);
    this[_lastPaintOrder] = T.JSArrayOfint().of([]);
    this[_paintingContext] = null;
    this[_paintingOffset] = null;
    this[_clipRectLayer] = null;
    if (!(delegate !== null)) dart.assertFailed(null, I[1], 186, 15, "delegate != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[1], 187, 15, "clipBehavior != null");
    this[_delegate] = delegate;
    this[_clipBehavior] = clipBehavior;
    flow.RenderFlow.__proto__.new.call(this);
    this.addAll(children);
  }).prototype = flow.RenderFlow.prototype;
  dart.addTypeTests(flow.RenderFlow);
  dart.addTypeCaches(flow.RenderFlow);
  flow.RenderFlow[dart.implements] = () => [flow.FlowPaintingContext];
  dart.setMethodSignature(flow.RenderFlow, () => ({
    __proto__: dart.getMethods(flow.RenderFlow.__proto__),
    [_getSize]: dart.fnType(ui.Size, [box.BoxConstraints]),
    getChildSize: dart.fnType(dart.nullable(ui.Size), [core.int]),
    paintChild: dart.fnType(dart.void, [core.int], {opacity: core.double, transform: dart.nullable(vector_math_64.Matrix4)}, {}),
    [_paintWithDelegate]: dart.fnType(dart.void, [object$.PaintingContext, ui.Offset])
  }));
  dart.setGetterSignature(flow.RenderFlow, () => ({
    __proto__: dart.getGetters(flow.RenderFlow.__proto__),
    delegate: flow.FlowDelegate,
    clipBehavior: ui.Clip
  }));
  dart.setSetterSignature(flow.RenderFlow, () => ({
    __proto__: dart.getSetters(flow.RenderFlow.__proto__),
    delegate: flow.FlowDelegate,
    clipBehavior: ui.Clip
  }));
  dart.setLibraryUri(flow.RenderFlow, I[0]);
  dart.setFieldSignature(flow.RenderFlow, () => ({
    __proto__: dart.getFields(flow.RenderFlow.__proto__),
    [_delegate]: dart.fieldType(flow.FlowDelegate),
    [_clipBehavior]: dart.fieldType(ui.Clip),
    [_randomAccessChildren]: dart.finalFieldType(core.List$(box.RenderBox)),
    [_lastPaintOrder]: dart.finalFieldType(core.List$(core.int)),
    [_paintingContext]: dart.fieldType(dart.nullable(object$.PaintingContext)),
    [_paintingOffset]: dart.fieldType(dart.nullable(ui.Offset)),
    [_clipRectLayer]: dart.fieldType(dart.nullable(layer.ClipRectLayer))
  }));
  dart.trackLibraries("packages/flutter/src/rendering/flow.dart", {
    "package:flutter/src/rendering/flow.dart": flow
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["flow.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/rendering/flow.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__flow: flow
  };
}));

//# sourceMappingURL=flow.dart.lib.js.map
>>>>>>> feature-b
