define(['dart_sdk', 'packages/charts_common/src/chart/layout/layout_config.dart', 'packages/charts_common/src/common/proxy_gesture_listener.dart', 'packages/charts_common/src/chart/common/chart_context.dart', 'packages/charts_common/src/common/graphics_factory.dart', 'packages/charts_common/src/common/gesture_listener.dart', 'packages/charts_common/src/chart/common/canvas_shapes.dart', 'packages/charts_common/src/common/math.dart', 'packages/charts_common/src/common/color.dart', 'packages/charts_common/src/common/text_element.dart', 'packages/charts_common/src/common/text_utils.dart', 'packages/charts_common/src/common/text_style.dart', 'packages/charts_common/src/common/typed_registry.dart', 'packages/charts_common/src/common/date_time_factory.dart', 'packages/collection/src/iterable_extensions.dart', 'packages/vector_math/vector_math.dart', 'packages/charts_common/src/chart/cartesian/axis/tick.dart', 'packages/charts_common/src/chart/common/behavior/selection/selection_trigger.dart', 'packages/charts_common/src/common/rate_limit_utils.dart', 'packages/intl/src/intl/number_parser.dart', 'packages/charts_common/src/chart/common/behavior/a11y/a11y_node.dart', 'packages/charts_common/src/chart/cartesian/axis/range_tick.dart', 'packages/charts_common/src/chart/cartesian/axis/time/time_tick_formatter_impl.dart', 'packages/charts_common/src/chart/cartesian/axis/time/hour_tick_formatter.dart', 'packages/charts_common/src/chart/cartesian/axis/time/time_tick_formatter.dart', 'packages/charts_common/src/chart/cartesian/axis/axis_tick.dart', 'packages/charts_common/src/chart/cartesian/axis/range_axis_tick.dart', 'packages/charts_common/src/chart/cartesian/axis/time/simple_time_tick_formatter.dart', 'packages/intl/src/intl/date_format.dart', 'packages/charts_common/src/chart/common/unitconverter/identity_converter.dart', 'packages/charts_common/src/chart/common/unitconverter/unit_converter.dart', 'packages/charts_common/src/common/material_palette.dart', 'packages/charts_common/src/chart/cartesian/axis/collision_report.dart', 'packages/charts_common/src/common/line_style.dart', 'packages/collection/src/equality.dart', 'packages/charts_common/src/common/palette.dart'], (function load__packages__charts_common__src__chart__treemap__treemap_chart_dart(dart_sdk, packages__charts_common__src__chart__layout__layout_config$46dart, packages__charts_common__src__common__proxy_gesture_listener$46dart, packages__charts_common__src__chart__common__chart_context$46dart, packages__charts_common__src__common__graphics_factory$46dart, packages__charts_common__src__common__gesture_listener$46dart, packages__charts_common__src__chart__common__canvas_shapes$46dart, packages__charts_common__src__common__math$46dart, packages__charts_common__src__common__color$46dart, packages__charts_common__src__common__text_element$46dart, packages__charts_common__src__common__text_utils$46dart, packages__charts_common__src__common__text_style$46dart, packages__charts_common__src__common__typed_registry$46dart, packages__charts_common__src__common__date_time_factory$46dart, packages__collection__src__iterable_extensions$46dart, packages__vector_math__vector_math$46dart, packages__charts_common__src__chart__cartesian__axis__tick$46dart, packages__charts_common__src__chart__common__behavior__selection__selection_trigger$46dart, packages__charts_common__src__common__rate_limit_utils$46dart, packages__intl__src__intl__number_parser$46dart, packages__charts_common__src__chart__common__behavior__a11y__a11y_node$46dart, packages__charts_common__src__chart__cartesian__axis__range_tick$46dart, packages__charts_common__src__chart__cartesian__axis__time__time_tick_formatter_impl$46dart, packages__charts_common__src__chart__cartesian__axis__time__hour_tick_formatter$46dart, packages__charts_common__src__chart__cartesian__axis__time__time_tick_formatter$46dart, packages__charts_common__src__chart__cartesian__axis__axis_tick$46dart, packages__charts_common__src__chart__cartesian__axis__range_axis_tick$46dart, packages__charts_common__src__chart__cartesian__axis__time__simple_time_tick_formatter$46dart, packages__intl__src__intl__date_format$46dart, packages__charts_common__src__chart__common__unitconverter__identity_converter$46dart, packages__charts_common__src__chart__common__unitconverter__unit_converter$46dart, packages__charts_common__src__common__material_palette$46dart, packages__charts_common__src__chart__cartesian__axis__collision_report$46dart, packages__charts_common__src__common__line_style$46dart, packages__collection__src__equality$46dart, packages__charts_common__src__common__palette$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const layout_config = packages__charts_common__src__chart__layout__layout_config$46dart.src__chart__layout__layout_config;
  const proxy_gesture_listener = packages__charts_common__src__common__proxy_gesture_listener$46dart.src__common__proxy_gesture_listener;
  const chart_context = packages__charts_common__src__chart__common__chart_context$46dart.src__chart__common__chart_context;
  const graphics_factory = packages__charts_common__src__common__graphics_factory$46dart.src__common__graphics_factory;
  const gesture_listener = packages__charts_common__src__common__gesture_listener$46dart.src__common__gesture_listener;
  const chart_canvas = packages__charts_common__src__chart__common__canvas_shapes$46dart.src__chart__common__chart_canvas;
  const canvas_shapes = packages__charts_common__src__chart__common__canvas_shapes$46dart.src__chart__common__canvas_shapes;
  const math$ = packages__charts_common__src__common__math$46dart.src__common__math;
  const color$ = packages__charts_common__src__common__color$46dart.src__common__color;
  const text_element = packages__charts_common__src__common__text_element$46dart.src__common__text_element;
  const text_utils = packages__charts_common__src__common__text_utils$46dart.src__common__text_utils;
  const text_style = packages__charts_common__src__common__text_style$46dart.src__common__text_style;
  const typed_registry = packages__charts_common__src__common__typed_registry$46dart.src__common__typed_registry;
  const date_time_factory = packages__charts_common__src__common__date_time_factory$46dart.src__common__date_time_factory;
  const iterable_extensions = packages__collection__src__iterable_extensions$46dart.src__iterable_extensions;
  const vector_math = packages__vector_math__vector_math$46dart.vector_math;
  const tick = packages__charts_common__src__chart__cartesian__axis__tick$46dart.src__chart__cartesian__axis__tick;
  const selection_trigger = packages__charts_common__src__chart__common__behavior__selection__selection_trigger$46dart.src__chart__common__behavior__selection__selection_trigger;
  const rate_limit_utils = packages__charts_common__src__common__rate_limit_utils$46dart.src__common__rate_limit_utils;
  const number_format = packages__intl__src__intl__number_parser$46dart.src__intl__number_format;
  const a11y_node = packages__charts_common__src__chart__common__behavior__a11y__a11y_node$46dart.src__chart__common__behavior__a11y__a11y_node;
  const range_tick = packages__charts_common__src__chart__cartesian__axis__range_tick$46dart.src__chart__cartesian__axis__range_tick;
  const time_tick_formatter_impl = packages__charts_common__src__chart__cartesian__axis__time__time_tick_formatter_impl$46dart.src__chart__cartesian__axis__time__time_tick_formatter_impl;
  const hour_tick_formatter = packages__charts_common__src__chart__cartesian__axis__time__hour_tick_formatter$46dart.src__chart__cartesian__axis__time__hour_tick_formatter;
  const time_tick_formatter = packages__charts_common__src__chart__cartesian__axis__time__time_tick_formatter$46dart.src__chart__cartesian__axis__time__time_tick_formatter;
  const axis_tick = packages__charts_common__src__chart__cartesian__axis__axis_tick$46dart.src__chart__cartesian__axis__axis_tick;
  const range_axis_tick = packages__charts_common__src__chart__cartesian__axis__range_axis_tick$46dart.src__chart__cartesian__axis__range_axis_tick;
  const simple_time_tick_formatter = packages__charts_common__src__chart__cartesian__axis__time__simple_time_tick_formatter$46dart.src__chart__cartesian__axis__time__simple_time_tick_formatter;
  const date_format = packages__intl__src__intl__date_format$46dart.src__intl__date_format;
  const identity_converter = packages__charts_common__src__chart__common__unitconverter__identity_converter$46dart.src__chart__common__unitconverter__identity_converter;
  const unit_converter = packages__charts_common__src__chart__common__unitconverter__unit_converter$46dart.src__chart__common__unitconverter__unit_converter;
  const material_palette = packages__charts_common__src__common__material_palette$46dart.src__common__material_palette;
  const collision_report = packages__charts_common__src__chart__cartesian__axis__collision_report$46dart.src__chart__cartesian__axis__collision_report;
  const line_style = packages__charts_common__src__common__line_style$46dart.src__common__line_style;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const palette = packages__charts_common__src__common__palette$46dart.src__common__palette;
  var treemap_chart = Object.create(dart.library);
  var slice_treemap_renderer = Object.create(dart.library);
  var slice_dice_treemap_renderer = Object.create(dart.library);
  var dice_treemap_renderer = Object.create(dart.library);
  var treemap_renderer_config = Object.create(dart.library);
  var treemap_renderer_element = Object.create(dart.library);
  var treemap_renderer_decorator = Object.create(dart.library);
  var treemap_label_decorator = Object.create(dart.library);
  var base_treemap_renderer = Object.create(dart.library);
  var squarified_treemap_renderer = Object.create(dart.library);
  var time_series_chart = Object.create(dart.library);
  var sunburst_arc_label_decorator = Object.create(dart.library);
  var symbol_annotation_renderer_config = Object.create(dart.library);
  var symbol_annotation_renderer = Object.create(dart.library);
  var scatter_plot_chart = Object.create(dart.library);
  var pie_chart = Object.create(dart.library);
  var arc_label_decorator = Object.create(dart.library);
  var line_renderer_config = Object.create(dart.library);
  var point_renderer_config = Object.create(dart.library);
  var point_renderer_decorator = Object.create(dart.library);
  var comparison_points_decorator = Object.create(dart.library);
  var point_renderer = Object.create(dart.library);
  var line_renderer = Object.create(dart.library);
  var line_chart = Object.create(dart.library);
  var panning_tick_provider = Object.create(dart.library);
  var pan_behavior = Object.create(dart.library);
  var pan_and_zoom_behavior = Object.create(dart.library);
  var initial_hint_behavior = Object.create(dart.library);
  var sunburst_arc_renderer_config = Object.create(dart.library);
  var base_arc_renderer_config = Object.create(dart.library);
  var arc_renderer = Object.create(dart.library);
  var arc_renderer_config = Object.create(dart.library);
  var base_arc_renderer = Object.create(dart.library);
  var arc_renderer_element = Object.create(dart.library);
  var arc_renderer_decorator = Object.create(dart.library);
  var sunburst_arc_renderer = Object.create(dart.library);
  var tree = Object.create(dart.library);
  var sunburst_chart = Object.create(dart.library);
  var sunburst_ring_expander = Object.create(dart.library);
  var sliding_viewport = Object.create(dart.library);
  var slider = Object.create(dart.library);
  var select_nearest = Object.create(dart.library);
  var lock_selection = Object.create(dart.library);
  var range_annotation = Object.create(dart.library);
  var line_point_highlighter = Object.create(dart.library);
  var per_series_legend_entry_generator = Object.create(dart.library);
  var series_legend = Object.create(dart.library);
  var per_datum_legend_entry_generator = Object.create(dart.library);
  var legend_entry_generator = Object.create(dart.library);
  var legend_entry = Object.create(dart.library);
  var legend = Object.create(dart.library);
  var datum_legend = Object.create(dart.library);
  var initial_selection = Object.create(dart.library);
  var domain_outliner = Object.create(dart.library);
  var domain_highlighter = Object.create(dart.library);
  var chart_title = Object.create(dart.library);
  var percent_injector = Object.create(dart.library);
  var keyboard_domain_navigator = Object.create(dart.library);
  var domain_a11y_explore_behavior = Object.create(dart.library);
  var a11y_explore_behavior = Object.create(dart.library);
  var percent_axis_spec = Object.create(dart.library);
  var range_tick_spec = Object.create(dart.library);
  var range_tick_provider = Object.create(dart.library);
  var ordinal_axis_spec = Object.create(dart.library);
  var end_points_time_axis_spec = Object.create(dart.library);
  var date_time_tick_formatter = Object.create(dart.library);
  var date_time_axis = Object.create(dart.library);
  var year_time_stepper = Object.create(dart.library);
  var time_range_tick_provider_impl = Object.create(dart.library);
  var time_range_tick_provider = Object.create(dart.library);
  var month_time_stepper = Object.create(dart.library);
  var minute_time_stepper = Object.create(dart.library);
  var hour_time_stepper = Object.create(dart.library);
  var time_stepper = Object.create(dart.library);
  var base_time_stepper = Object.create(dart.library);
  var day_time_stepper = Object.create(dart.library);
  var auto_adjusting_date_time_tick_provider = Object.create(dart.library);
  var date_time_axis_spec = Object.create(dart.library);
  var bucketing_numeric_tick_provider = Object.create(dart.library);
  var bucketing_numeric_axis = Object.create(dart.library);
  var bucketing_axis_spec = Object.create(dart.library);
  var range_tick_draw_strategy = Object.create(dart.library);
  var bar_target_line_renderer_config = Object.create(dart.library);
  var bar_target_line_renderer = Object.create(dart.library);
  var bar_lane_renderer = Object.create(dart.library);
  var bar_lane_renderer_config = Object.create(dart.library);
  var bar_label_decorator = Object.create(dart.library);
  var bar_error_decorator = Object.create(dart.library);
  var base_bar_renderer_element = Object.create(dart.library);
  var tick_spec = Object.create(dart.library);
  var static_tick_provider = Object.create(dart.library);
  var date_time_extents = Object.create(dart.library);
  var date_time_scale = Object.create(dart.library);
  var end_points_tick_provider = Object.create(dart.library);
  var numeric_axis_spec = Object.create(dart.library);
  var none_draw_strategy = Object.create(dart.library);
  var gridline_draw_strategy = Object.create(dart.library);
  var cartesian_chart = Object.create(dart.library);
  var cartesian_renderer = Object.create(dart.library);
  var base_bar_renderer = Object.create(dart.library);
  var series_renderer_config = Object.create(dart.library);
  var base_bar_renderer_config = Object.create(dart.library);
  var bar_renderer_decorator = Object.create(dart.library);
  var bar_renderer_config = Object.create(dart.library);
  var simple_ordinal_scale = Object.create(dart.library);
  var ordinal_tick_provider = Object.create(dart.library);
  var ordinal_extents = Object.create(dart.library);
  var ordinal_scale_domain_info = Object.create(dart.library);
  var ordinal_scale = Object.create(dart.library);
  var numeric_tick_provider = Object.create(dart.library);
  var linear_scale_viewport = Object.create(dart.library);
  var linear_scale_function = Object.create(dart.library);
  var linear_scale_domain_info = Object.create(dart.library);
  var numeric_scale = Object.create(dart.library);
  var numeric_extents = Object.create(dart.library);
  var linear_scale = Object.create(dart.library);
  var base_tick_draw_strategy = Object.create(dart.library);
  var small_tick_draw_strategy = Object.create(dart.library);
  var tick_provider = Object.create(dart.library);
  var tick_formatter = Object.create(dart.library);
  var series_renderer = Object.create(dart.library);
  var series_datum = Object.create(dart.library);
  var selection_model = Object.create(dart.library);
  var processed_series = Object.create(dart.library);
  var symbol_renderer = Object.create(dart.library);
  var datum_details = Object.create(dart.library);
  var layout_margin_strategy = Object.create(dart.library);
  var layout_manager_impl = Object.create(dart.library);
  var layout_manager = Object.create(dart.library);
  var base_chart = Object.create(dart.library);
  var chart_behavior = Object.create(dart.library);
  var layout_view = Object.create(dart.library);
  var tick_draw_strategy = Object.create(dart.library);
  var style = Object.create(dart.library);
  var material_style = Object.create(dart.library);
  var style_factory = Object.create(dart.library);
  var scale$ = Object.create(dart.library);
  var axis_spec = Object.create(dart.library);
  var series$ = Object.create(dart.library);
  var axis$ = Object.create(dart.library);
  var bar_renderer = Object.create(dart.library);
  var bar_chart = Object.create(dart.library);
  var common = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    LinkedHashSetOfString: () => (T$.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    LayoutViewTovoid: () => (T$.LayoutViewTovoid = dart.constFn(dart.fnType(dart.void, [layout_view.LayoutView])))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    SeriesRendererOfObjectN: () => (T$.SeriesRendererOfObjectN = dart.constFn(series_renderer.SeriesRenderer$(T$.ObjectN())))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    TreeNodeOfObject: () => (T$.TreeNodeOfObject = dart.constFn(tree.TreeNode$(core.Object)))(),
    TreeMapRendererElementOfObjectN: () => (T$.TreeMapRendererElementOfObjectN = dart.constFn(treemap_renderer_element.TreeMapRendererElement$(T$.ObjectN())))(),
    IterableOfTreeMapRendererElementOfObjectN: () => (T$.IterableOfTreeMapRendererElementOfObjectN = dart.constFn(core.Iterable$(T$.TreeMapRendererElementOfObjectN())))(),
    ListQueueOfTreeNodeOfObject: () => (T$.ListQueueOfTreeNodeOfObject = dart.constFn(collection.ListQueue$(T$.TreeNodeOfObject())))(),
    PointOfdouble: () => (T$.PointOfdouble = dart.constFn(math.Point$(core.double)))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    intNToColor: () => (T$.intNToColor = dart.constFn(dart.fnType(color$.Color, [T$.intN()])))(),
    intNTodouble: () => (T$.intNTodouble = dart.constFn(dart.fnType(core.double, [T$.intN()])))(),
    MutableRectangleOfnum: () => (T$.MutableRectangleOfnum = dart.constFn(math.MutableRectangle$(core.num)))(),
    RectangleOfnum: () => (T$.RectangleOfnum = dart.constFn(math.Rectangle$(core.num)))(),
    IdentityMapOfString$int: () => (T$.IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    ListOfColor: () => (T$.ListOfColor = dart.constFn(core.List$(color$.Color)))(),
    IdentityMapOfString$ListOfColor: () => (T$.IdentityMapOfString$ListOfColor = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfColor())))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    TreeMapRendererElementOfObject: () => (T$.TreeMapRendererElementOfObject = dart.constFn(treemap_renderer_element.TreeMapRendererElement$(core.Object)))(),
    IterableOfTreeMapRendererElementOfObject: () => (T$.IterableOfTreeMapRendererElementOfObject = dart.constFn(core.Iterable$(T$.TreeMapRendererElementOfObject())))(),
    AttributeKeyOfIterableOfTreeMapRendererElementOfObject: () => (T$.AttributeKeyOfIterableOfTreeMapRendererElementOfObject = dart.constFn(series$.AttributeKey$(T$.IterableOfTreeMapRendererElementOfObject())))(),
    JSArrayOfTreeNodeOfObject: () => (T$.JSArrayOfTreeNodeOfObject = dart.constFn(_interceptors.JSArray$(T$.TreeNodeOfObject())))(),
    SmallTickRendererSpecOfDateTime: () => (T$.SmallTickRendererSpecOfDateTime = dart.constFn(small_tick_draw_strategy.SmallTickRendererSpec$(core.DateTime)))(),
    LineRendererOfDateTime: () => (T$.LineRendererOfDateTime = dart.constFn(line_renderer.LineRenderer$(core.DateTime)))(),
    AxisSpecOfDateTime: () => (T$.AxisSpecOfDateTime = dart.constFn(axis_spec.AxisSpec$(core.DateTime)))(),
    IdentityMapOfString$NumericAxis: () => (T$.IdentityMapOfString$NumericAxis = dart.constFn(_js_helper.IdentityMap$(core.String, axis$.NumericAxis)))(),
    GridlineRendererSpecOfnum: () => (T$.GridlineRendererSpecOfnum = dart.constFn(gridline_draw_strategy.GridlineRendererSpec$(core.num)))(),
    NoneDrawStrategyOfnum: () => (T$.NoneDrawStrategyOfnum = dart.constFn(none_draw_strategy.NoneDrawStrategy$(core.num)))(),
    StringAndNumericAxisTovoid: () => (T$.StringAndNumericAxisTovoid = dart.constFn(dart.fnType(dart.void, [core.String, axis$.NumericAxis])))(),
    StringAndNumericAxisSpecTovoid: () => (T$.StringAndNumericAxisSpecTovoid = dart.constFn(dart.fnType(dart.void, [core.String, numeric_axis_spec.NumericAxisSpec])))(),
    intNToint: () => (T$.intNToint = dart.constFn(dart.fnType(core.int, [T$.intN()])))(),
    AxisOfObjectN: () => (T$.AxisOfObjectN = dart.constFn(axis$.Axis$(T$.ObjectN())))(),
    AxisNOfObjectN: () => (T$.AxisNOfObjectN = dart.constFn(dart.nullable(T$.AxisOfObjectN())))(),
    AxisOfObject: () => (T$.AxisOfObject = dart.constFn(axis$.Axis$(core.Object)))(),
    RectangleOfdouble: () => (T$.RectangleOfdouble = dart.constFn(math.Rectangle$(core.double)))(),
    JSArrayOfObject: () => (T$.JSArrayOfObject = dart.constFn(_interceptors.JSArray$(core.Object)))(),
    PointOfnum: () => (T$.PointOfnum = dart.constFn(math.Point$(core.num)))(),
    JSArrayOfPointOfnum: () => (T$.JSArrayOfPointOfnum = dart.constFn(_interceptors.JSArray$(T$.PointOfnum())))(),
    PointRendererDecoratorOfNever: () => (T$.PointRendererDecoratorOfNever = dart.constFn(point_renderer_decorator.PointRendererDecorator$(dart.Never)))(),
    intNToString: () => (T$.intNToString = dart.constFn(dart.fnType(core.String, [T$.intN()])))(),
    RectangleOfint: () => (T$.RectangleOfint = dart.constFn(math.Rectangle$(core.int)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    intNTodoubleN: () => (T$.intNTodoubleN = dart.constFn(dart.fnType(T$.doubleN(), [T$.intN()])))(),
    dynamicAndintNTodynamic: () => (T$.dynamicAndintNTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic, T$.intN()])))(),
    dynamicAndintNToint: () => (T$.dynamicAndintNToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, T$.intN()])))(),
    PointRendererElementOfObjectN: () => (T$.PointRendererElementOfObjectN = dart.constFn(point_renderer.PointRendererElement$(T$.ObjectN())))(),
    ListOfPointRendererElementOfObjectN: () => (T$.ListOfPointRendererElementOfObjectN = dart.constFn(core.List$(T$.PointRendererElementOfObjectN())))(),
    ImmutableAxisOfnum: () => (T$.ImmutableAxisOfnum = dart.constFn(axis$.ImmutableAxis$(core.num)))(),
    PointRendererElementOfObject: () => (T$.PointRendererElementOfObject = dart.constFn(point_renderer.PointRendererElement$(core.Object)))(),
    ListOfPointRendererElementOfObject: () => (T$.ListOfPointRendererElementOfObject = dart.constFn(core.List$(T$.PointRendererElementOfObject())))(),
    dynamicToString: () => (T$.dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))(),
    AxisOfnum: () => (T$.AxisOfnum = dart.constFn(axis$.Axis$(core.num)))(),
    AxisNOfnum: () => (T$.AxisNOfnum = dart.constFn(dart.nullable(T$.AxisOfnum())))(),
    PointRendererOfnum: () => (T$.PointRendererOfnum = dart.constFn(point_renderer.PointRenderer$(core.num)))(),
    SmallTickRendererSpecOfnum: () => (T$.SmallTickRendererSpecOfnum = dart.constFn(small_tick_draw_strategy.SmallTickRendererSpec$(core.num)))(),
    JSArrayOfPointOfdouble: () => (T$.JSArrayOfPointOfdouble = dart.constFn(_interceptors.JSArray$(T$.PointOfdouble())))(),
    AttributeKeyOfListOfPointRendererElementOfObject: () => (T$.AttributeKeyOfListOfPointRendererElementOfObject = dart.constFn(series$.AttributeKey$(T$.ListOfPointRendererElementOfObject())))(),
    AttributeKeyOfintNToString: () => (T$.AttributeKeyOfintNToString = dart.constFn(series$.AttributeKey$(T$.intNToString())))(),
    AttributeKeyOfString: () => (T$.AttributeKeyOfString = dart.constFn(series$.AttributeKey$(core.String)))(),
    AttributeKeyOfdouble: () => (T$.AttributeKeyOfdouble = dart.constFn(series$.AttributeKey$(core.double)))(),
    AttributeKeyOfintNTodoubleN: () => (T$.AttributeKeyOfintNTodoubleN = dart.constFn(series$.AttributeKey$(T$.intNTodoubleN())))(),
    ColorN: () => (T$.ColorN = dart.constFn(dart.nullable(color$.Color)))(),
    intNToColorN: () => (T$.intNToColorN = dart.constFn(dart.fnType(T$.ColorN(), [T$.intN()])))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    ListNOfint: () => (T$.ListNOfint = dart.constFn(dart.nullable(T$.ListOfint())))(),
    intNToListNOfint: () => (T$.intNToListNOfint = dart.constFn(dart.fnType(T$.ListNOfint(), [T$.intN()])))(),
    _LineRendererElementOfObjectN: () => (T$._LineRendererElementOfObjectN = dart.constFn(line_renderer._LineRendererElement$(T$.ObjectN())))(),
    ListOf_LineRendererElementOfObjectN: () => (T$.ListOf_LineRendererElementOfObjectN = dart.constFn(core.List$(T$._LineRendererElementOfObjectN())))(),
    numN: () => (T$.numN = dart.constFn(dart.nullable(core.num)))(),
    intNTonumN: () => (T$.intNTonumN = dart.constFn(dart.fnType(T$.numN(), [T$.intN()])))(),
    _LineRendererElementOfObject: () => (T$._LineRendererElementOfObject = dart.constFn(line_renderer._LineRendererElement$(core.Object)))(),
    ListOf_LineRendererElementOfObject: () => (T$.ListOf_LineRendererElementOfObject = dart.constFn(core.List$(T$._LineRendererElementOfObject())))(),
    _LineRendererElementOfObjectTovoid: () => (T$._LineRendererElementOfObjectTovoid = dart.constFn(dart.fnType(dart.void, [T$._LineRendererElementOfObject()])))(),
    _RangeOfnum: () => (T$._RangeOfnum = dart.constFn(line_renderer._Range$(core.num)))(),
    AttributeKeyOfListOf_LineRendererElementOfObject: () => (T$.AttributeKeyOfListOf_LineRendererElementOfObject = dart.constFn(series$.AttributeKey$(T$.ListOf_LineRendererElementOfObject())))(),
    AttributeKeyOfint: () => (T$.AttributeKeyOfint = dart.constFn(series$.AttributeKey$(core.int)))(),
    LineRendererOfnum: () => (T$.LineRendererOfnum = dart.constFn(line_renderer.LineRenderer$(core.num)))(),
    ArcRendererDecoratorOfNever: () => (T$.ArcRendererDecoratorOfNever = dart.constFn(arc_renderer_decorator.ArcRendererDecorator$(dart.Never)))(),
    JSArrayOfnumN: () => (T$.JSArrayOfnumN = dart.constFn(_interceptors.JSArray$(T$.numN())))(),
    ArcRendererElementOfObjectN: () => (T$.ArcRendererElementOfObjectN = dart.constFn(arc_renderer_element.ArcRendererElement$(T$.ObjectN())))(),
    ListOfArcRendererElementOfObjectN: () => (T$.ListOfArcRendererElementOfObjectN = dart.constFn(core.List$(T$.ArcRendererElementOfObjectN())))(),
    ArcRendererElementOfObject: () => (T$.ArcRendererElementOfObject = dart.constFn(arc_renderer_element.ArcRendererElement$(core.Object)))(),
    ListOfArcRendererElementOfObject: () => (T$.ListOfArcRendererElementOfObject = dart.constFn(core.List$(T$.ArcRendererElementOfObject())))(),
    JSArrayOfCanvasPieSlice: () => (T$.JSArrayOfCanvasPieSlice = dart.constFn(_interceptors.JSArray$(canvas_shapes.CanvasPieSlice)))(),
    AttributeKeyOfListOfArcRendererElementOfObject: () => (T$.AttributeKeyOfListOfArcRendererElementOfObject = dart.constFn(series$.AttributeKey$(T$.ListOfArcRendererElementOfObject())))(),
    _HashSetOfTreeNode: () => (T$._HashSetOfTreeNode = dart.constFn(collection._HashSet$(tree.TreeNode)))(),
    JSArrayOfnum: () => (T$.JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))(),
    SunburstArcRendererElementOfObjectN: () => (T$.SunburstArcRendererElementOfObjectN = dart.constFn(sunburst_arc_renderer.SunburstArcRendererElement$(T$.ObjectN())))(),
    ListOfSunburstArcRendererElementOfObjectN: () => (T$.ListOfSunburstArcRendererElementOfObjectN = dart.constFn(core.List$(T$.SunburstArcRendererElementOfObjectN())))(),
    SunburstArcRendererElementOfObject: () => (T$.SunburstArcRendererElementOfObject = dart.constFn(sunburst_arc_renderer.SunburstArcRendererElement$(core.Object)))(),
    ListOfSunburstArcRendererElementOfObject: () => (T$.ListOfSunburstArcRendererElementOfObject = dart.constFn(core.List$(T$.SunburstArcRendererElementOfObject())))(),
    TreeNodeOfObjectTovoid: () => (T$.TreeNodeOfObjectTovoid = dart.constFn(dart.fnType(dart.void, [T$.TreeNodeOfObject()])))(),
    TreeNodeTobool: () => (T$.TreeNodeTobool = dart.constFn(dart.fnType(core.bool, [tree.TreeNode])))(),
    intAndintToint: () => (T$.intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))(),
    JSArrayOfdouble: () => (T$.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    AttributeKeyOfListOfSunburstArcRendererElementOfObject: () => (T$.AttributeKeyOfListOfSunburstArcRendererElementOfObject = dart.constFn(series$.AttributeKey$(T$.ListOfSunburstArcRendererElementOfObject())))(),
    PointOfint: () => (T$.PointOfint = dart.constFn(math.Point$(core.int)))(),
    RangeAnnotationSegmentOfObject: () => (T$.RangeAnnotationSegmentOfObject = dart.constFn(range_annotation.RangeAnnotationSegment$(core.Object)))(),
    LineAnnotationSegmentOfObject: () => (T$.LineAnnotationSegmentOfObject = dart.constFn(range_annotation.LineAnnotationSegment$(core.Object)))(),
    AnnotationSegmentOfObject: () => (T$.AnnotationSegmentOfObject = dart.constFn(range_annotation.AnnotationSegment$(core.Object)))(),
    AxisOfTAndAnnotationSegmentOfObjectTovoid: () => (T$.AxisOfTAndAnnotationSegmentOfObjectTovoid = dart.constFn(dart.gFnType(T => [dart.void, [axis$.Axis$(T), T$.AnnotationSegmentOfObject()]], T => [T$.ObjectN()])))()
  };
  var T$0 = {
    LinkedMapOf_AnnotationLabelType$StringN: () => (T$0.LinkedMapOf_AnnotationLabelType$StringN = dart.constFn(_js_helper.LinkedMap$(range_annotation._AnnotationLabelType, T$.StringN())))(),
    _AnnotationLabelTypeAndStringNTovoid: () => (T$0._AnnotationLabelTypeAndStringNTovoid = dart.constFn(dart.fnType(dart.void, [range_annotation._AnnotationLabelType, T$.StringN()])))(),
    JSArrayOfint: () => (T$0.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    IdentityMapOfint$int: () => (T$0.IdentityMapOfint$int = dart.constFn(_js_helper.IdentityMap$(core.int, core.int)))(),
    IdentityMapOfString$num: () => (T$0.IdentityMapOfString$num = dart.constFn(_js_helper.IdentityMap$(core.String, core.num)))(),
    _IdentityHashSetOfString: () => (T$0._IdentityHashSetOfString = dart.constFn(collection._IdentityHashSet$(core.String)))(),
    IdentityMapOfString$doubleN: () => (T$0.IdentityMapOfString$doubleN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.doubleN())))(),
    IdentityMapOfString$String: () => (T$0.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    SeriesRendererOfObject: () => (T$0.SeriesRendererOfObject = dart.constFn(series_renderer.SeriesRenderer$(core.Object)))(),
    AttributeKeyOfbool: () => (T$0.AttributeKeyOfbool = dart.constFn(series$.AttributeKey$(core.bool)))(),
    ListOfSeriesDatumOfDToString: () => (T$0.ListOfSeriesDatumOfDToString = dart.constFn(dart.gFnType(D => [core.String, [core.List$(series_datum.SeriesDatum$(D))]], D => [T$.ObjectN()])))(),
    JSArrayOf_DomainA11yNode: () => (T$0.JSArrayOf_DomainA11yNode = dart.constFn(_interceptors.JSArray$(domain_a11y_explore_behavior._DomainA11yNode)))(),
    VoidTovoid: () => (T$0.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    NumericTickProviderSpecN: () => (T$0.NumericTickProviderSpecN = dart.constFn(dart.nullable(numeric_axis_spec.NumericTickProviderSpec)))(),
    NumericTickFormatterSpecN: () => (T$0.NumericTickFormatterSpecN = dart.constFn(dart.nullable(numeric_axis_spec.NumericTickFormatterSpec)))(),
    AxisOfString: () => (T$0.AxisOfString = dart.constFn(axis$.Axis$(core.String)))(),
    StaticTickProviderOfString: () => (T$0.StaticTickProviderOfString = dart.constFn(static_tick_provider.StaticTickProvider$(core.String)))(),
    RangeTickProviderOfString: () => (T$0.RangeTickProviderOfString = dart.constFn(range_tick_provider.RangeTickProvider$(core.String)))(),
    AxisOfDateTime: () => (T$0.AxisOfDateTime = dart.constFn(axis$.Axis$(core.DateTime)))(),
    IdentityMapOfint$TimeTickFormatter: () => (T$0.IdentityMapOfint$TimeTickFormatter = dart.constFn(_js_helper.IdentityMap$(core.int, time_tick_formatter.TimeTickFormatter)))(),
    ListOfDateTime: () => (T$0.ListOfDateTime = dart.constFn(core.List$(core.DateTime)))(),
    MapOfDateTime$String: () => (T$0.MapOfDateTime$String = dart.constFn(core.Map$(core.DateTime, core.String)))(),
    intTobool: () => (T$0.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    VoidToint: () => (T$0.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    intTodynamic: () => (T$0.intTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.int])))(),
    TickFormatterOfDateTime: () => (T$0.TickFormatterOfDateTime = dart.constFn(tick_formatter.TickFormatter$(core.DateTime)))(),
    TickDrawStrategyOfDateTime: () => (T$0.TickDrawStrategyOfDateTime = dart.constFn(tick_draw_strategy.TickDrawStrategy$(core.DateTime)))(),
    TickHintOfDateTime: () => (T$0.TickHintOfDateTime = dart.constFn(tick_provider.TickHint$(core.DateTime)))(),
    TickHintNOfDateTime: () => (T$0.TickHintNOfDateTime = dart.constFn(dart.nullable(T$0.TickHintOfDateTime())))(),
    TickOfDateTime: () => (T$0.TickOfDateTime = dart.constFn(tick.Tick$(core.DateTime)))(),
    ListOfTickOfDateTime: () => (T$0.ListOfTickOfDateTime = dart.constFn(core.List$(T$0.TickOfDateTime())))(),
    VoidToListOfTickOfDateTime: () => (T$0.VoidToListOfTickOfDateTime = dart.constFn(dart.fnType(T$0.ListOfTickOfDateTime(), [])))(),
    ListOfTickOfDateTimeTodynamic: () => (T$0.ListOfTickOfDateTimeTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$0.ListOfTickOfDateTime()])))(),
    JSArrayOfDateTime: () => (T$0.JSArrayOfDateTime = dart.constFn(_interceptors.JSArray$(core.DateTime)))(),
    JSArrayOfTimeRangeTickProvider: () => (T$0.JSArrayOfTimeRangeTickProvider = dart.constFn(_interceptors.JSArray$(time_range_tick_provider.TimeRangeTickProvider)))(),
    JSArrayOfTickOfDateTime: () => (T$0.JSArrayOfTickOfDateTime = dart.constFn(_interceptors.JSArray$(T$0.TickOfDateTime())))(),
    VoidToTimeRangeTickProvider: () => (T$0.VoidToTimeRangeTickProvider = dart.constFn(dart.fnType(time_range_tick_provider.TimeRangeTickProvider, [])))(),
    TimeRangeTickProviderTodynamic: () => (T$0.TimeRangeTickProviderTodynamic = dart.constFn(dart.fnType(dart.dynamic, [time_range_tick_provider.TimeRangeTickProvider])))(),
    EndPointsTickProviderOfDateTime: () => (T$0.EndPointsTickProviderOfDateTime = dart.constFn(end_points_tick_provider.EndPointsTickProvider$(core.DateTime)))(),
    StaticTickProviderOfDateTime: () => (T$0.StaticTickProviderOfDateTime = dart.constFn(static_tick_provider.StaticTickProvider$(core.DateTime)))(),
    TickFormatterOfnum: () => (T$0.TickFormatterOfnum = dart.constFn(tick_formatter.TickFormatter$(core.num)))(),
    MapOfnum$String: () => (T$0.MapOfnum$String = dart.constFn(core.Map$(core.num, core.String)))(),
    TickDrawStrategyOfnum: () => (T$0.TickDrawStrategyOfnum = dart.constFn(tick_draw_strategy.TickDrawStrategy$(core.num)))(),
    TickHintOfnum: () => (T$0.TickHintOfnum = dart.constFn(tick_provider.TickHint$(core.num)))(),
    TickHintNOfnum: () => (T$0.TickHintNOfnum = dart.constFn(dart.nullable(T$0.TickHintOfnum())))(),
    SimpleTickFormatterBaseOfnum: () => (T$0.SimpleTickFormatterBaseOfnum = dart.constFn(tick_formatter.SimpleTickFormatterBase$(core.num)))(),
    TickOfnum: () => (T$0.TickOfnum = dart.constFn(tick.Tick$(core.num)))(),
    JSArrayOfTickOfnum: () => (T$0.JSArrayOfTickOfnum = dart.constFn(_interceptors.JSArray$(T$0.TickOfnum())))(),
    TickOfnumTobool: () => (T$0.TickOfnumTobool = dart.constFn(dart.fnType(core.bool, [T$0.TickOfnum()])))(),
    TickOfnumAndTickOfnumToint: () => (T$0.TickOfnumAndTickOfnumToint = dart.constFn(dart.fnType(core.int, [T$0.TickOfnum(), T$0.TickOfnum()])))(),
    IdentityConverterOfnum: () => (T$0.IdentityConverterOfnum = dart.constFn(identity_converter.IdentityConverter$(core.num)))(),
    LinkedHashSetOfdouble: () => (T$0.LinkedHashSetOfdouble = dart.constFn(collection.LinkedHashSet$(core.double)))(),
    ListOfdouble: () => (T$0.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    StringToTextElement: () => (T$0.StringToTextElement = dart.constFn(dart.fnType(text_element.TextElement, [core.String])))(),
    TextElementTodouble: () => (T$0.TextElementTodouble = dart.constFn(dart.fnType(core.double, [text_element.TextElement])))(),
    TAndTToT: () => (T$0.TAndTToT = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))(),
    ListEqualityOfint: () => (T$0.ListEqualityOfint = dart.constFn(equality.ListEquality$(core.int)))(),
    IterableOf_BarTargetLineRendererElement: () => (T$0.IterableOf_BarTargetLineRendererElement = dart.constFn(core.Iterable$(bar_target_line_renderer._BarTargetLineRendererElement)))(),
    _BarTargetLineRendererElementTovoid: () => (T$0._BarTargetLineRendererElementTovoid = dart.constFn(dart.fnType(dart.void, [bar_target_line_renderer._BarTargetLineRendererElement])))(),
    JSArrayOfPointOfint: () => (T$0.JSArrayOfPointOfint = dart.constFn(_interceptors.JSArray$(T$.PointOfint())))(),
    SetOfString: () => (T$0.SetOfString = dart.constFn(core.Set$(core.String)))(),
    MapOfString$BaseBarRendererElement: () => (T$0.MapOfString$BaseBarRendererElement = dart.constFn(core.Map$(core.String, base_bar_renderer_element.BaseBarRendererElement)))(),
    JSArrayOfBaseBarRendererElement: () => (T$0.JSArrayOfBaseBarRendererElement = dart.constFn(_interceptors.JSArray$(base_bar_renderer_element.BaseBarRendererElement)))(),
    IdentityMapOfString$BaseBarRendererElement: () => (T$0.IdentityMapOfString$BaseBarRendererElement = dart.constFn(_js_helper.IdentityMap$(core.String, base_bar_renderer_element.BaseBarRendererElement)))(),
    VoidToMapOfString$BaseBarRendererElement: () => (T$0.VoidToMapOfString$BaseBarRendererElement = dart.constFn(dart.fnType(T$0.MapOfString$BaseBarRendererElement(), [])))(),
    intNTonum: () => (T$0.intNTonum = dart.constFn(dart.fnType(core.num, [T$.intN()])))(),
    ListOfBaseBarRendererElement: () => (T$0.ListOfBaseBarRendererElement = dart.constFn(core.List$(base_bar_renderer_element.BaseBarRendererElement)))(),
    doubleAnddoubleTodouble: () => (T$0.doubleAnddoubleTodouble = dart.constFn(dart.fnType(core.double, [core.double, core.double])))(),
    VoidToSetOfString: () => (T$0.VoidToSetOfString = dart.constFn(dart.fnType(T$0.SetOfString(), [])))(),
    SetOfStringAndSetOfStringToSetOfString: () => (T$0.SetOfStringAndSetOfStringToSetOfString = dart.constFn(dart.fnType(T$0.SetOfString(), [T$0.SetOfString(), T$0.SetOfString()])))(),
    ListOfPointOfint: () => (T$0.ListOfPointOfint = dart.constFn(core.List$(T$.PointOfint())))(),
    VoidToPointOfint: () => (T$0.VoidToPointOfint = dart.constFn(dart.fnType(T$.PointOfint(), [])))(),
    PointOfintTodynamic: () => (T$0.PointOfintTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.PointOfint()])))(),
    SetOfObjectN: () => (T$0.SetOfObjectN = dart.constFn(core.Set$(T$.ObjectN())))(),
    SetOfObject: () => (T$0.SetOfObject = dart.constFn(core.Set$(core.Object)))(),
    JSArrayOfCanvasRect: () => (T$0.JSArrayOfCanvasRect = dart.constFn(_interceptors.JSArray$(canvas_shapes.CanvasRect)))(),
    AttributeKeyOfSetOfObject: () => (T$0.AttributeKeyOfSetOfObject = dart.constFn(series$.AttributeKey$(T$0.SetOfObject())))(),
    BarLaneRendererOfString: () => (T$0.BarLaneRendererOfString = dart.constFn(bar_lane_renderer.BarLaneRenderer$(core.String)))(),
    TextElementToTextElement: () => (T$0.TextElementToTextElement = dart.constFn(dart.fnType(text_element.TextElement, [text_element.TextElement])))(),
    ListOfString: () => (T$0.ListOfString = dart.constFn(core.List$(core.String)))(),
    VoidToListOfString: () => (T$0.VoidToListOfString = dart.constFn(dart.fnType(T$0.ListOfString(), [])))(),
    ListOfStringTodynamic: () => (T$0.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$0.ListOfString()])))(),
    EndPointsTickProviderOfnum: () => (T$0.EndPointsTickProviderOfnum = dart.constFn(end_points_tick_provider.EndPointsTickProvider$(core.num)))(),
    StaticTickProviderOfnum: () => (T$0.StaticTickProviderOfnum = dart.constFn(static_tick_provider.StaticTickProvider$(core.num)))(),
    SmallTickRendererSpecOfString: () => (T$0.SmallTickRendererSpecOfString = dart.constFn(small_tick_draw_strategy.SmallTickRendererSpec$(core.String)))(),
    IdentityMapOfStringN$ListOfint: () => (T$0.IdentityMapOfStringN$ListOfint = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), T$.ListOfint())))(),
    VoidToListOfint: () => (T$0.VoidToListOfint = dart.constFn(dart.fnType(T$.ListOfint(), [])))(),
    StringNAndListOfintTovoid: () => (T$0.StringNAndListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$.StringN(), T$.ListOfint()])))(),
    AttributeKeyOfListOfdouble: () => (T$0.AttributeKeyOfListOfdouble = dart.constFn(series$.AttributeKey$(T$0.ListOfdouble())))(),
    AttributeKeyOfListOfBaseBarRendererElement: () => (T$0.AttributeKeyOfListOfBaseBarRendererElement = dart.constFn(series$.AttributeKey$(T$0.ListOfBaseBarRendererElement())))(),
    TickFormatterOfString: () => (T$0.TickFormatterOfString = dart.constFn(tick_formatter.TickFormatter$(core.String)))(),
    MapOfString$String: () => (T$0.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    TickDrawStrategyOfString: () => (T$0.TickDrawStrategyOfString = dart.constFn(tick_draw_strategy.TickDrawStrategy$(core.String)))(),
    TickHintOfString: () => (T$0.TickHintOfString = dart.constFn(tick_provider.TickHint$(core.String)))(),
    TickHintNOfString: () => (T$0.TickHintNOfString = dart.constFn(dart.nullable(T$0.TickHintOfString())))(),
    HashSetOfString: () => (T$0.HashSetOfString = dart.constFn(collection.HashSet$(core.String)))(),
    VoidTobool: () => (T$0.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    numNToString: () => (T$0.numNToString = dart.constFn(dart.fnType(core.String, [T$.numN()])))(),
    AttributeKeyOfSeriesRendererOfObject: () => (T$0.AttributeKeyOfSeriesRendererOfObject = dart.constFn(series$.AttributeKey$(T$0.SeriesRendererOfObject())))(),
    JSArrayOfLayoutView: () => (T$0.JSArrayOfLayoutView = dart.constFn(_interceptors.JSArray$(layout_view.LayoutView)))(),
    ListOfLayoutView: () => (T$0.ListOfLayoutView = dart.constFn(core.List$(layout_view.LayoutView)))(),
    LayoutViewAndLayoutViewToint: () => (T$0.LayoutViewAndLayoutViewToint = dart.constFn(dart.fnType(core.int, [layout_view.LayoutView, layout_view.LayoutView])))(),
    LayoutViewTobool: () => (T$0.LayoutViewTobool = dart.constFn(dart.fnType(core.bool, [layout_view.LayoutView])))(),
    intNToFillPatternType: () => (T$0.intNToFillPatternType = dart.constFn(dart.fnType(chart_canvas.FillPatternType, [T$.intN()])))(),
    intNToTextStyleSpec: () => (T$0.intNToTextStyleSpec = dart.constFn(dart.fnType(axis_spec.TextStyleSpec, [T$.intN()])))(),
    intNToFn$2: () => (T$0.intNToFn$2 = dart.constFn(dart.fnType(T$0.numNToString(), [T$.intN()])))(),
    AttributeKeyOfAxisOfObject: () => (T$0.AttributeKeyOfAxisOfObject = dart.constFn(series$.AttributeKey$(T$.AxisOfObject())))(),
    BarRendererOfString: () => (T$0.BarRendererOfString = dart.constFn(bar_renderer.BarRenderer$(core.String)))()
  };
  var S$ = {
    $length: dartx.length,
    $add: dartx.add,
    graphicsFactory: dart.privateName(base_chart, "BaseChart.graphicsFactory"),
    transition: dart.privateName(base_chart, "BaseChart.transition"),
    animationPercent: dart.privateName(base_chart, "BaseChart.animationPercent"),
    __BaseChart_context: dart.privateName(base_chart, "_#BaseChart#context"),
    _chartWidth: dart.privateName(base_chart, "_chartWidth"),
    _chartHeight: dart.privateName(base_chart, "_chartHeight"),
    Duration__duration: dart.privateName(core, "Duration._duration"),
    _animationsTemporarilyDisabled: dart.privateName(base_chart, "_animationsTemporarilyDisabled"),
    __BaseChart__originalSeriesList: dart.privateName(base_chart, "_#BaseChart#_originalSeriesList"),
    _currentSeriesList: dart.privateName(base_chart, "_currentSeriesList"),
    _usingRenderers: dart.privateName(base_chart, "_usingRenderers"),
    _rendererToSeriesList: dart.privateName(base_chart, "_rendererToSeriesList"),
    _seriesRenderers: dart.privateName(base_chart, "_seriesRenderers"),
    _behaviorRoleMap: dart.privateName(base_chart, "_behaviorRoleMap"),
    _behaviorStack: dart.privateName(base_chart, "_behaviorStack"),
    _behaviorTappableMap: dart.privateName(base_chart, "_behaviorTappableMap"),
    _gestureProxy: dart.privateName(base_chart, "_gestureProxy"),
    _selectionModels: dart.privateName(base_chart, "_selectionModels"),
    _lifecycleListeners: dart.privateName(base_chart, "_lifecycleListeners"),
    _chartIsDirty: dart.privateName(base_chart, "_chartIsDirty"),
    _layoutManager: dart.privateName(base_chart, "_layoutManager"),
    _originalSeriesList: dart.privateName(base_chart, "_originalSeriesList"),
    $isNotEmpty: dartx.isNotEmpty,
    $remove: dartx.remove,
    $putIfAbsent: dartx.putIfAbsent,
    $_get: dartx._get,
    $_set: dartx._set,
    $containsPoint: dartx.containsPoint,
    $any: dartx.any,
    $addAll: dartx.addAll,
    $forEach: dartx.forEach,
    $compareTo: dartx.compareTo,
    $sort: dartx.sort,
    $contains: dartx.contains,
    $values: dartx.values,
    $map: dartx.map,
    $toList: dartx.toList,
    $runtimeType: dartx.runtimeType,
    $clear: dartx.clear,
    config: dart.privateName(base_treemap_renderer, "BaseTreeMapRenderer.config"),
    labelDecorator: dart.privateName(base_treemap_renderer, "BaseTreeMapRenderer.labelDecorator"),
    _treeNodeToRendererElement: dart.privateName(base_treemap_renderer, "_treeNodeToRendererElement"),
    _animatedTreeMapRects: dart.privateName(base_treemap_renderer, "_animatedTreeMapRects"),
    _chart: dart.privateName(base_treemap_renderer, "_chart"),
    _ensureSingleTree: dart.privateName(base_treemap_renderer, "_ensureSingleTree"),
    _createRendererElement: dart.privateName(base_treemap_renderer, "_createRendererElement"),
    $first: dartx.first,
    _configureRootRendererElement: dart.privateName(base_treemap_renderer, "_configureRootRendererElement"),
    _getRendererElement: dart.privateName(base_treemap_renderer, "_getRendererElement"),
    _createAnimatedTreeMapRect: dart.privateName(base_treemap_renderer, "_createAnimatedTreeMapRect"),
    $removeWhere: dartx.removeWhere,
    $toDouble: dartx.toDouble,
    $width: dartx.width,
    $height: dartx.height,
    $entries: dartx.entries,
    $left: dartx.left,
    $right: dartx.right,
    $top: dartx.top,
    $modulo: dartx['%'],
    $toInt: dartx.toInt,
    $containsKey: dartx.containsKey,
    layoutConfig: dart.privateName(series_renderer, "BaseSeriesRenderer.layoutConfig"),
    rendererId: dart.privateName(series_renderer, "BaseSeriesRenderer.rendererId"),
    symbolRenderer: dart.privateName(series_renderer, "BaseSeriesRenderer.symbolRenderer"),
    graphicsFactory$1: dart.privateName(series_renderer, "BaseSeriesRenderer.graphicsFactory"),
    _drawAreaBounds: dart.privateName(series_renderer, "_drawAreaBounds"),
    $keys: dartx.keys,
    customRendererId: dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.customRendererId"),
    symbolRenderer$1: dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.symbolRenderer"),
    rendererAttributes: dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.rendererAttributes"),
    tileType: dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.tileType"),
    layoutPaintOrder: dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.layoutPaintOrder"),
    rectPaddingPx: dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.rectPaddingPx"),
    strokeWidthPx: dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.strokeWidthPx"),
    strokeColor: dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.strokeColor"),
    patternStrokeWidthPx: dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.patternStrokeWidthPx"),
    labelDecorator$1: dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.labelDecorator"),
    ViewMargin_leftPx: dart.privateName(layout_view, "ViewMargin.leftPx"),
    ViewMargin_rightPx: dart.privateName(layout_view, "ViewMargin.rightPx"),
    ViewMargin_bottomPx: dart.privateName(layout_view, "ViewMargin.bottomPx"),
    ViewMargin_topPx: dart.privateName(layout_view, "ViewMargin.topPx"),
    _name: dart.privateName(treemap_renderer_config, "_name"),
    id: dart.privateName(layout_view, "LayoutViewConfig.id"),
    paintOrder: dart.privateName(layout_view, "LayoutViewConfig.paintOrder"),
    position: dart.privateName(layout_view, "LayoutViewConfig.position"),
    positionOrder: dart.privateName(layout_view, "LayoutViewConfig.positionOrder"),
    viewMargin: dart.privateName(layout_view, "LayoutViewConfig.viewMargin"),
    fillColor: dart.privateName(treemap_renderer_element, "TreeMapRendererElement.fillColor"),
    fillPattern: dart.privateName(treemap_renderer_element, "TreeMapRendererElement.fillPattern"),
    patternColor: dart.privateName(treemap_renderer_element, "TreeMapRendererElement.patternColor"),
    strokeColor$1: dart.privateName(treemap_renderer_element, "TreeMapRendererElement.strokeColor"),
    isLeaf: dart.privateName(treemap_renderer_element, "TreeMapRendererElement.isLeaf"),
    strokeWidthPx$1: dart.privateName(treemap_renderer_element, "TreeMapRendererElement.strokeWidthPx"),
    index: dart.privateName(treemap_renderer_element, "TreeMapRendererElement.index"),
    series: dart.privateName(treemap_renderer_element, "TreeMapRendererElement.series"),
    domain: dart.privateName(treemap_renderer_element, "TreeMapRendererElement.domain"),
    measure: dart.privateName(treemap_renderer_element, "TreeMapRendererElement.measure"),
    _boundingRect: dart.privateName(treemap_renderer_element, "_boundingRect"),
    _area: dart.privateName(treemap_renderer_element, "_area"),
    $topLeft: dartx.topLeft,
    $bottomRight: dartx.bottomRight,
    $toString: dartx.toString,
    labelStyleSpec: dart.privateName(treemap_label_decorator, "TreeMapLabelDecorator.labelStyleSpec"),
    labelPadding: dart.privateName(treemap_label_decorator, "TreeMapLabelDecorator.labelPadding"),
    allowLabelOverflow: dart.privateName(treemap_label_decorator, "TreeMapLabelDecorator.allowLabelOverflow"),
    enableMultiline: dart.privateName(treemap_label_decorator, "TreeMapLabelDecorator.enableMultiline"),
    _asTextStyle: dart.privateName(treemap_label_decorator, "_asTextStyle"),
    $isEmpty: dartx.isEmpty,
    _datumStyle: dart.privateName(treemap_label_decorator, "_datumStyle"),
    _createLabelSegment: dart.privateName(treemap_label_decorator, "_createLabelSegment"),
    $bottom: dartx.bottom,
    _previousRect: dart.privateName(base_treemap_renderer, "_previousRect"),
    ___AnimatedTreeMapRect__targetRect: dart.privateName(base_treemap_renderer, "_#_AnimatedTreeMapRect#_targetRect"),
    _currentRect: dart.privateName(base_treemap_renderer, "_currentRect"),
    _targetRect: dart.privateName(base_treemap_renderer, "_targetRect"),
    TypedKey_uniqueKey: dart.privateName(typed_registry, "TypedKey.uniqueKey"),
    _ratio: dart.privateName(squarified_treemap_renderer, "_ratio"),
    _layoutArea: dart.privateName(squarified_treemap_renderer, "_layoutArea"),
    _areaFn: dart.privateName(squarified_treemap_renderer, "_areaFn"),
    $removeLast: dartx.removeLast,
    _square: dart.privateName(squarified_treemap_renderer, "_square"),
    dateTimeFactory: dart.privateName(time_series_chart, "TimeSeriesChart.dateTimeFactory"),
    vertical: dart.privateName(cartesian_chart, "CartesianChart.vertical"),
    flipVerticalAxisOutput: dart.privateName(cartesian_chart, "CartesianChart.flipVerticalAxisOutput"),
    _domainAxis: dart.privateName(cartesian_chart, "_domainAxis"),
    _domainAxisSpec: dart.privateName(cartesian_chart, "_domainAxisSpec"),
    _newDomainAxisSpec: dart.privateName(cartesian_chart, "_newDomainAxisSpec"),
    _primaryMeasureAxisSpec: dart.privateName(cartesian_chart, "_primaryMeasureAxisSpec"),
    _newPrimaryMeasureAxisSpec: dart.privateName(cartesian_chart, "_newPrimaryMeasureAxisSpec"),
    _secondaryMeasureAxisSpec: dart.privateName(cartesian_chart, "_secondaryMeasureAxisSpec"),
    _newSecondaryMeasureAxisSpec: dart.privateName(cartesian_chart, "_newSecondaryMeasureAxisSpec"),
    _disjointMeasureAxesSpec: dart.privateName(cartesian_chart, "_disjointMeasureAxesSpec"),
    _newDisjointMeasureAxesSpec: dart.privateName(cartesian_chart, "_newDisjointMeasureAxesSpec"),
    _usePrimaryMeasureAxis: dart.privateName(cartesian_chart, "_usePrimaryMeasureAxis"),
    _useSecondaryMeasureAxis: dart.privateName(cartesian_chart, "_useSecondaryMeasureAxis"),
    _newDomainAxis: dart.privateName(cartesian_chart, "_newDomainAxis"),
    _primaryMeasureAxis: dart.privateName(cartesian_chart, "_primaryMeasureAxis"),
    _secondaryMeasureAxis: dart.privateName(cartesian_chart, "_secondaryMeasureAxis"),
    _disjointMeasureAxes: dart.privateName(cartesian_chart, "_disjointMeasureAxes"),
    innerRingArcLabelPosition: dart.privateName(sunburst_arc_label_decorator, "SunburstArcLabelDecorator.innerRingArcLabelPosition"),
    innerRingLeafArcLabelPosition: dart.privateName(sunburst_arc_label_decorator, "SunburstArcLabelDecorator.innerRingLeafArcLabelPosition"),
    outerRingArcLabelPosition: dart.privateName(sunburst_arc_label_decorator, "SunburstArcLabelDecorator.outerRingArcLabelPosition"),
    _name$1: dart.privateName(arc_label_decorator, "_name"),
    $retainWhere: dartx.retainWhere,
    insideLabelStyleSpec: dart.privateName(arc_label_decorator, "ArcLabelDecorator.insideLabelStyleSpec"),
    outsideLabelStyleSpec: dart.privateName(arc_label_decorator, "ArcLabelDecorator.outsideLabelStyleSpec"),
    leaderLineStyleSpec: dart.privateName(arc_label_decorator, "ArcLabelDecorator.leaderLineStyleSpec"),
    labelPosition: dart.privateName(arc_label_decorator, "ArcLabelDecorator.labelPosition"),
    labelPadding$1: dart.privateName(arc_label_decorator, "ArcLabelDecorator.labelPadding"),
    showLeaderLines: dart.privateName(arc_label_decorator, "ArcLabelDecorator.showLeaderLines"),
    renderAbove: dart.privateName(arc_label_decorator, "ArcLabelDecorator.renderAbove"),
    _getTextStyle: dart.privateName(arc_label_decorator, "_getTextStyle"),
    _getDatumStyle: dart.privateName(arc_label_decorator, "_getDatumStyle"),
    $round: dartx.round,
    _drawInsideLabel: dart.privateName(arc_label_decorator, "_drawInsideLabel"),
    _drawOutsideLabel: dart.privateName(arc_label_decorator, "_drawOutsideLabel"),
    $abs: dartx.abs,
    _detectOutsideLabelCollision: dart.privateName(arc_label_decorator, "_detectOutsideLabelCollision"),
    _drawLeaderLine: dart.privateName(arc_label_decorator, "_drawLeaderLine"),
    showBottomSeparatorLine: dart.privateName(symbol_annotation_renderer_config, "SymbolAnnotationRendererConfig.showBottomSeparatorLine"),
    showSeparatorLines: dart.privateName(symbol_annotation_renderer_config, "SymbolAnnotationRendererConfig.showSeparatorLines"),
    verticalSymbolBottomPaddingPx: dart.privateName(symbol_annotation_renderer_config, "SymbolAnnotationRendererConfig.verticalSymbolBottomPaddingPx"),
    verticalSymbolTopPaddingPx: dart.privateName(symbol_annotation_renderer_config, "SymbolAnnotationRendererConfig.verticalSymbolTopPaddingPx"),
    customRendererId$1: dart.privateName(point_renderer_config, "PointRendererConfig.customRendererId"),
    layoutPaintOrder$1: dart.privateName(point_renderer_config, "PointRendererConfig.layoutPaintOrder"),
    pointRendererDecorators: dart.privateName(point_renderer_config, "PointRendererConfig.pointRendererDecorators"),
    symbolRenderer$2: dart.privateName(point_renderer_config, "PointRendererConfig.symbolRenderer"),
    customSymbolRenderers: dart.privateName(point_renderer_config, "PointRendererConfig.customSymbolRenderers"),
    rendererAttributes$1: dart.privateName(point_renderer_config, "PointRendererConfig.rendererAttributes"),
    radiusPx: dart.privateName(point_renderer_config, "PointRendererConfig.radiusPx"),
    strokeWidthPx$2: dart.privateName(point_renderer_config, "PointRendererConfig.strokeWidthPx"),
    boundsLineRadiusPx: dart.privateName(point_renderer_config, "PointRendererConfig.boundsLineRadiusPx"),
    graphicsFactory$2: dart.privateName(symbol_annotation_renderer, "SymbolAnnotationRenderer.graphicsFactory"),
    __SymbolAnnotationRenderer__componentBounds: dart.privateName(symbol_annotation_renderer, "_#SymbolAnnotationRenderer#_componentBounds"),
    __SymbolAnnotationRenderer__chart: dart.privateName(symbol_annotation_renderer, "_#SymbolAnnotationRenderer#_chart"),
    _currentHeight: dart.privateName(symbol_annotation_renderer, "_currentHeight"),
    _seriesInfo: dart.privateName(symbol_annotation_renderer, "_seriesInfo"),
    _componentBounds: dart.privateName(symbol_annotation_renderer, "_componentBounds"),
    _chart$1: dart.privateName(symbol_annotation_renderer, "_chart"),
    $ceil: dartx.ceil,
    config$1: dart.privateName(point_renderer, "PointRenderer.config"),
    pointRendererDecorators$1: dart.privateName(point_renderer, "PointRenderer.pointRendererDecorators"),
    seriesPointMap: dart.privateName(point_renderer, "PointRenderer.seriesPointMap"),
    _chart$2: dart.privateName(point_renderer, "_chart"),
    _currentKeys: dart.privateName(point_renderer, "_currentKeys"),
    $where: dartx.where,
    _currentPoint: dart.privateName(point_renderer, "_currentPoint"),
    _getDatumDistance: dart.privateName(point_renderer, "_getDatumDistance"),
    _createDatumDetails: dart.privateName(point_renderer, "_createDatumDetails"),
    __BaseCartesianRenderer_chart: dart.privateName(cartesian_renderer, "_#BaseCartesianRenderer#chart"),
    $floor: dartx.floor,
    color: dart.privateName(arc_label_decorator, "ArcLabelLeaderLineStyleSpec.color"),
    length: dart.privateName(arc_label_decorator, "ArcLabelLeaderLineStyleSpec.length"),
    thickness: dart.privateName(arc_label_decorator, "ArcLabelLeaderLineStyleSpec.thickness"),
    $hashCode: dartx.hashCode,
    customRendererId$2: dart.privateName(line_renderer_config, "LineRendererConfig.customRendererId"),
    symbolRenderer$3: dart.privateName(line_renderer_config, "LineRendererConfig.symbolRenderer"),
    rendererAttributes$2: dart.privateName(line_renderer_config, "LineRendererConfig.rendererAttributes"),
    radiusPx$1: dart.privateName(line_renderer_config, "LineRendererConfig.radiusPx"),
    stacked: dart.privateName(line_renderer_config, "LineRendererConfig.stacked"),
    strokeWidthPx$3: dart.privateName(line_renderer_config, "LineRendererConfig.strokeWidthPx"),
    dashPattern: dart.privateName(line_renderer_config, "LineRendererConfig.dashPattern"),
    includeLine: dart.privateName(line_renderer_config, "LineRendererConfig.includeLine"),
    includePoints: dart.privateName(line_renderer_config, "LineRendererConfig.includePoints"),
    includeArea: dart.privateName(line_renderer_config, "LineRendererConfig.includeArea"),
    layoutPaintOrder$2: dart.privateName(line_renderer_config, "LineRendererConfig.layoutPaintOrder"),
    areaOpacity: dart.privateName(line_renderer_config, "LineRendererConfig.areaOpacity"),
    roundEndCaps: dart.privateName(line_renderer_config, "LineRendererConfig.roundEndCaps"),
    symbolRenderer$4: dart.privateName(comparison_points_decorator, "ComparisonPointsDecorator.symbolRenderer"),
    renderAbove$1: dart.privateName(comparison_points_decorator, "ComparisonPointsDecorator.renderAbove"),
    $intersects: dartx.intersects,
    _clampPointAlongLineToBoundingBox: dart.privateName(comparison_points_decorator, "_clampPointAlongLineToBoundingBox"),
    datum: dart.privateName(point_renderer, "DatumPoint.datum"),
    domain$1: dart.privateName(point_renderer, "DatumPoint.domain"),
    series$1: dart.privateName(point_renderer, "DatumPoint.series"),
    xLower: dart.privateName(point_renderer, "DatumPoint.xLower"),
    xUpper: dart.privateName(point_renderer, "DatumPoint.xUpper"),
    yLower: dart.privateName(point_renderer, "DatumPoint.yLower"),
    yUpper: dart.privateName(point_renderer, "DatumPoint.yUpper"),
    point: dart.privateName(point_renderer, "PointRendererElement.point"),
    index$1: dart.privateName(point_renderer, "PointRendererElement.index"),
    color$1: dart.privateName(point_renderer, "PointRendererElement.color"),
    fillColor$1: dart.privateName(point_renderer, "PointRendererElement.fillColor"),
    measureAxisPosition: dart.privateName(point_renderer, "PointRendererElement.measureAxisPosition"),
    radiusPx$2: dart.privateName(point_renderer, "PointRendererElement.radiusPx"),
    boundsLineRadiusPx$1: dart.privateName(point_renderer, "PointRendererElement.boundsLineRadiusPx"),
    strokeWidthPx$4: dart.privateName(point_renderer, "PointRendererElement.strokeWidthPx"),
    symbolRendererId: dart.privateName(point_renderer, "PointRendererElement.symbolRendererId"),
    key: dart.privateName(point_renderer, "AnimatedPoint.key"),
    overlaySeries: dart.privateName(point_renderer, "AnimatedPoint.overlaySeries"),
    animatingOut: dart.privateName(point_renderer, "AnimatedPoint.animatingOut"),
    _previousPoint: dart.privateName(point_renderer, "_previousPoint"),
    __AnimatedPoint__targetPoint: dart.privateName(point_renderer, "_#AnimatedPoint#_targetPoint"),
    _targetPoint: dart.privateName(point_renderer, "_targetPoint"),
    $roundToDouble: dartx.roundToDouble,
    config$2: dart.privateName(line_renderer, "LineRenderer.config"),
    __LineRenderer__pointRenderer: dart.privateName(line_renderer, "_#LineRenderer#_pointRenderer"),
    _chart$3: dart.privateName(line_renderer, "_chart"),
    __LineRenderer__hasMeasureBounds: dart.privateName(line_renderer, "_#LineRenderer#_hasMeasureBounds"),
    _seriesLineMap: dart.privateName(line_renderer, "_seriesLineMap"),
    _currentKeys$1: dart.privateName(line_renderer, "_currentKeys"),
    _pointRenderer: dart.privateName(line_renderer, "_pointRenderer"),
    _hasMeasureBounds: dart.privateName(line_renderer, "_hasMeasureBounds"),
    _createInitialOffsetMap: dart.privateName(line_renderer, "_createInitialOffsetMap"),
    _createStackedMeasureOffsetFunction: dart.privateName(line_renderer, "_createStackedMeasureOffsetFunction"),
    $addEntries: dartx.addEntries,
    _mergeIntoSeriesMap: dart.privateName(line_renderer, "_mergeIntoSeriesMap"),
    $last: dartx.last,
    _createLineAndAreaElements: dart.privateName(line_renderer, "_createLineAndAreaElements"),
    _createPointListForSeries: dart.privateName(line_renderer, "_createPointListForSeries"),
    _createLineAndAreaSegmentsForSeries: dart.privateName(line_renderer, "_createLineAndAreaSegmentsForSeries"),
    _createPositionExtent: dart.privateName(line_renderer, "_createPositionExtent"),
    _getPoint: dart.privateName(line_renderer, "_getPoint"),
    _createLineSegment: dart.privateName(line_renderer, "_createLineSegment"),
    _createAreaSegment: dart.privateName(line_renderer, "_createAreaSegment"),
    $sublist: dartx.sublist,
    _createBoundsSegment: dart.privateName(line_renderer, "_createBoundsSegment"),
    $reversed: dartx.reversed,
    $expand: dartx.expand,
    _getClipBoundsForExtent: dart.privateName(line_renderer, "_getClipBoundsForExtent"),
    points: dart.privateName(line_renderer, "_LineRendererElement.points"),
    domainExtent: dart.privateName(line_renderer, "_LineRendererElement.domainExtent"),
    $removeRange: dartx.removeRange,
    _previousLine: dart.privateName(line_renderer, "_previousLine"),
    ___AnimatedLine__targetLine: dart.privateName(line_renderer, "_#_AnimatedLine#_targetLine"),
    _currentLine: dart.privateName(line_renderer, "_currentLine"),
    _targetLine: dart.privateName(line_renderer, "_targetLine"),
    points$1: dart.privateName(line_renderer, "_AreaRendererElement.points"),
    domainExtent$1: dart.privateName(line_renderer, "_AreaRendererElement.domainExtent"),
    _previousArea: dart.privateName(line_renderer, "_previousArea"),
    ___AnimatedArea__targetArea: dart.privateName(line_renderer, "_#_AnimatedArea#_targetArea"),
    _currentArea: dart.privateName(line_renderer, "_currentArea"),
    _targetArea: dart.privateName(line_renderer, "_targetArea"),
    allPoints: dart.privateName(line_renderer, "_AnimatedElements.allPoints"),
    areas: dart.privateName(line_renderer, "_AnimatedElements.areas"),
    lines: dart.privateName(line_renderer, "_AnimatedElements.lines"),
    bounds: dart.privateName(line_renderer, "_AnimatedElements.bounds"),
    _start: dart.privateName(line_renderer, "_start"),
    _end: dart.privateName(line_renderer, "_end"),
    _includePointAsNum: dart.privateName(line_renderer, "_includePointAsNum"),
    _includePointAsDateTime: dart.privateName(line_renderer, "_includePointAsDateTime"),
    _includePointAsString: dart.privateName(line_renderer, "_includePointAsString"),
    renderer: dart.privateName(line_renderer, "LineRendererTester.renderer"),
    _name$2: dart.privateName(panning_tick_provider, "_name"),
    tickProvider: dart.privateName(panning_tick_provider, "PanningTickProvider.tickProvider"),
    _mode: dart.privateName(panning_tick_provider, "_mode"),
    __PanningTickProvider__ticks: dart.privateName(panning_tick_provider, "_#PanningTickProvider#_ticks"),
    _ticks: dart.privateName(panning_tick_provider, "_ticks"),
    __PanBehavior__listener: dart.privateName(pan_behavior, "_#PanBehavior#_listener"),
    __PanBehavior__domainAxisTickProvider: dart.privateName(pan_behavior, "_#PanBehavior#_domainAxisTickProvider"),
    _chart$4: dart.privateName(pan_behavior, "_chart"),
    _isPanning: dart.privateName(pan_behavior, "_isPanning"),
    _lastPosition: dart.privateName(pan_behavior, "_lastPosition"),
    _panningCompletedCallback: dart.privateName(pan_behavior, "_panningCompletedCallback"),
    _listener: dart.privateName(pan_behavior, "_listener"),
    _domainAxisTickProvider: dart.privateName(pan_behavior, "_domainAxisTickProvider"),
    _isZooming: dart.privateName(pan_and_zoom_behavior, "_isZooming"),
    _scalingFactor: dart.privateName(pan_and_zoom_behavior, "_scalingFactor"),
    _minScalingFactor: dart.privateName(pan_and_zoom_behavior, "_minScalingFactor"),
    _maxScalingFactor: dart.privateName(pan_and_zoom_behavior, "_maxScalingFactor"),
    __InitialHintBehavior__listener: dart.privateName(initial_hint_behavior, "_#InitialHintBehavior#_listener"),
    __InitialHintBehavior__lifecycleListener: dart.privateName(initial_hint_behavior, "_#InitialHintBehavior#_lifecycleListener"),
    _chart$5: dart.privateName(initial_hint_behavior, "_chart"),
    _hintDuration: dart.privateName(initial_hint_behavior, "_hintDuration"),
    _maxHintTranslate: dart.privateName(initial_hint_behavior, "_maxHintTranslate"),
    _maxHintScaleFactor: dart.privateName(initial_hint_behavior, "_maxHintScaleFactor"),
    _hintSetupCompleted: dart.privateName(initial_hint_behavior, "_hintSetupCompleted"),
    _firstAxisConfigured: dart.privateName(initial_hint_behavior, "_firstAxisConfigured"),
    _initialViewportTranslatePx: dart.privateName(initial_hint_behavior, "_initialViewportTranslatePx"),
    _initialViewportScalingFactor: dart.privateName(initial_hint_behavior, "_initialViewportScalingFactor"),
    __InitialHintBehavior__targetViewportTranslatePx: dart.privateName(initial_hint_behavior, "_#InitialHintBehavior#_targetViewportTranslatePx"),
    __InitialHintBehavior__targetViewportScalingFactor: dart.privateName(initial_hint_behavior, "_#InitialHintBehavior#_targetViewportScalingFactor"),
    _listener$1: dart.privateName(initial_hint_behavior, "_listener"),
    _lifecycleListener: dart.privateName(initial_hint_behavior, "_lifecycleListener"),
    _onAxisConfigured: dart.privateName(initial_hint_behavior, "_onAxisConfigured"),
    _onAnimationComplete: dart.privateName(initial_hint_behavior, "_onAnimationComplete"),
    _targetViewportTranslatePx: dart.privateName(initial_hint_behavior, "_targetViewportTranslatePx"),
    _targetViewportScalingFactor: dart.privateName(initial_hint_behavior, "_targetViewportScalingFactor"),
    _lerpDouble: dart.privateName(initial_hint_behavior, "_lerpDouble"),
    arcRatios: dart.privateName(sunburst_arc_renderer_config, "SunburstArcRendererConfig.arcRatios"),
    arcWidths: dart.privateName(sunburst_arc_renderer_config, "SunburstArcRendererConfig.arcWidths"),
    colorAssignmentStrategy: dart.privateName(sunburst_arc_renderer_config, "SunburstArcRendererConfig.colorAssignmentStrategy"),
    initialDisplayLevel: dart.privateName(sunburst_arc_renderer_config, "SunburstArcRendererConfig.initialDisplayLevel"),
    maxDisplayLevel: dart.privateName(sunburst_arc_renderer_config, "SunburstArcRendererConfig.maxDisplayLevel"),
    _name$3: dart.privateName(sunburst_arc_renderer_config, "_name"),
    customRendererId$3: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.customRendererId"),
    arcRendererDecorators: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.arcRendererDecorators"),
    symbolRenderer$5: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.symbolRenderer"),
    rendererAttributes$3: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.rendererAttributes"),
    arcLength: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.arcLength"),
    arcRatio: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.arcRatio"),
    arcWidth: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.arcWidth"),
    layoutPaintOrder$3: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.layoutPaintOrder"),
    minHoleWidthForCenterContent: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.minHoleWidthForCenterContent"),
    startAngle: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.startAngle"),
    strokeWidthPx$5: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.strokeWidthPx"),
    stroke: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.stroke"),
    noDataColor: dart.privateName(base_arc_renderer_config, "BaseArcRendererConfig.noDataColor"),
    config$3: dart.privateName(arc_renderer, "ArcRenderer.config"),
    arcRendererDecorators$1: dart.privateName(arc_renderer, "ArcRenderer.arcRendererDecorators"),
    _seriesArcMap: dart.privateName(arc_renderer, "_seriesArcMap"),
    _currentKeys$2: dart.privateName(arc_renderer, "_currentKeys"),
    _calculateInnerRadius: dart.privateName(arc_renderer, "_calculateInnerRadius"),
    config$4: dart.privateName(base_arc_renderer, "BaseArcRenderer.config"),
    arcRendererDecorators$2: dart.privateName(base_arc_renderer, "BaseArcRenderer.arcRendererDecorators"),
    chart: dart.privateName(base_arc_renderer, "BaseArcRenderer.chart"),
    _getChartPosition: dart.privateName(base_arc_renderer, "_getChartPosition"),
    $isNaN: dartx.isNaN,
    arcs: dart.privateName(arc_renderer_element, "ArcRendererElementList.arcs"),
    center: dart.privateName(arc_renderer_element, "ArcRendererElementList.center"),
    innerRadius: dart.privateName(arc_renderer_element, "ArcRendererElementList.innerRadius"),
    radius: dart.privateName(arc_renderer_element, "ArcRendererElementList.radius"),
    startAngle$1: dart.privateName(arc_renderer_element, "ArcRendererElementList.startAngle"),
    stroke$1: dart.privateName(arc_renderer_element, "ArcRendererElementList.stroke"),
    strokeWidthPx$6: dart.privateName(arc_renderer_element, "ArcRendererElementList.strokeWidthPx"),
    startAngle$2: dart.privateName(arc_renderer_element, "ArcRendererElement.startAngle"),
    endAngle: dart.privateName(arc_renderer_element, "ArcRendererElement.endAngle"),
    color$2: dart.privateName(arc_renderer_element, "ArcRendererElement.color"),
    index$2: dart.privateName(arc_renderer_element, "ArcRendererElement.index"),
    key$1: dart.privateName(arc_renderer_element, "ArcRendererElement.key"),
    domain$2: dart.privateName(arc_renderer_element, "ArcRendererElement.domain"),
    series$2: dart.privateName(arc_renderer_element, "ArcRendererElement.series"),
    arcs$1: dart.privateName(arc_renderer_element, "AnimatedArcList.arcs"),
    center$1: dart.privateName(arc_renderer_element, "AnimatedArcList.center"),
    innerRadius$1: dart.privateName(arc_renderer_element, "AnimatedArcList.innerRadius"),
    radius$1: dart.privateName(arc_renderer_element, "AnimatedArcList.radius"),
    series$3: dart.privateName(arc_renderer_element, "AnimatedArcList.series"),
    stroke$2: dart.privateName(arc_renderer_element, "AnimatedArcList.stroke"),
    strokeWidthPx$7: dart.privateName(arc_renderer_element, "AnimatedArcList.strokeWidthPx"),
    key$2: dart.privateName(arc_renderer_element, "AnimatedArc.key"),
    datum$1: dart.privateName(arc_renderer_element, "AnimatedArc.datum"),
    domain$3: dart.privateName(arc_renderer_element, "AnimatedArc.domain"),
    animatingOut$1: dart.privateName(arc_renderer_element, "AnimatedArc.animatingOut"),
    _previousArc: dart.privateName(arc_renderer_element, "_previousArc"),
    __AnimatedArc__targetArc: dart.privateName(arc_renderer_element, "_#AnimatedArc#_targetArc"),
    _currentArc: dart.privateName(arc_renderer_element, "_currentArc"),
    _targetArc: dart.privateName(arc_renderer_element, "_targetArc"),
    config$5: dart.privateName(sunburst_arc_renderer, "SunburstArcRenderer.config"),
    arcRendererDecorators$3: dart.privateName(sunburst_arc_renderer, "SunburstArcRenderer.arcRendererDecorators"),
    _seriesArcMap$1: dart.privateName(sunburst_arc_renderer, "_seriesArcMap"),
    _nodeToArcRenderElementMap: dart.privateName(sunburst_arc_renderer, "_nodeToArcRenderElementMap"),
    _currentKeys$3: dart.privateName(sunburst_arc_renderer, "_currentKeys"),
    _nodeToExpand: dart.privateName(sunburst_arc_renderer, "_nodeToExpand"),
    _createArcRenderElementForNode: dart.privateName(sunburst_arc_renderer, "_createArcRenderElementForNode"),
    $elementAt: dartx.elementAt,
    $indexOf: dartx.indexOf,
    _getParentStartAngle: dart.privateName(sunburst_arc_renderer, "_getParentStartAngle"),
    _getParentArcLength: dart.privateName(sunburst_arc_renderer, "_getParentArcLength"),
    _calculateRadii: dart.privateName(sunburst_arc_renderer, "_calculateRadii"),
    _isNodeDisplayed: dart.privateName(sunburst_arc_renderer, "_isNodeDisplayed"),
    $_equals: dartx._equals,
    _ensureConfigLengthCoversMaxDisplayLevel: dart.privateName(sunburst_arc_renderer, "_ensureConfigLengthCoversMaxDisplayLevel"),
    $take: dartx.take,
    $reduce: dartx.reduce,
    arcLength$1: dart.privateName(sunburst_arc_renderer, "SunburstArcRendererElement.arcLength"),
    isLeaf$1: dart.privateName(sunburst_arc_renderer, "SunburstArcRendererElement.isLeaf"),
    isOuterMostRing: dart.privateName(sunburst_arc_renderer, "SunburstArcRendererElement.isOuterMostRing"),
    id$1: dart.privateName(tree, "Tree.id"),
    root: dart.privateName(tree, "Tree.root"),
    domainFn: dart.privateName(tree, "Tree.domainFn"),
    measureFn: dart.privateName(tree, "Tree.measureFn"),
    colorFn: dart.privateName(tree, "Tree.colorFn"),
    fillColorFn: dart.privateName(tree, "Tree.fillColorFn"),
    patternColorFn: dart.privateName(tree, "Tree.patternColorFn"),
    fillPatternFn: dart.privateName(tree, "Tree.fillPatternFn"),
    strokeWidthPxFn: dart.privateName(tree, "Tree.strokeWidthPxFn"),
    labelFn: dart.privateName(tree, "Tree.labelFn"),
    labelStyleFn: dart.privateName(tree, "Tree.labelStyleFn"),
    attributes: dart.privateName(tree, "Tree.attributes"),
    data: dart.privateName(tree, "TreeNode.data"),
    parent: dart.privateName(tree, "TreeNode.parent"),
    _children: dart.privateName(tree, "_children"),
    _depth: dart.privateName(tree, "_depth"),
    selectionModelType: dart.privateName(sunburst_ring_expander, "SunburstRingExpander.selectionModelType"),
    _name$4: dart.privateName(selection_model, "_name"),
    __SunburstRingExpander__chart: dart.privateName(sunburst_ring_expander, "_#SunburstRingExpander#_chart"),
    _chart$6: dart.privateName(sunburst_ring_expander, "_chart"),
    _selectionChanged: dart.privateName(sunburst_ring_expander, "_selectionChanged"),
    selectionModelType$1: dart.privateName(sliding_viewport, "SlidingViewport.selectionModelType"),
    __SlidingViewport__chart: dart.privateName(sliding_viewport, "_#SlidingViewport#_chart"),
    _chart$7: dart.privateName(sliding_viewport, "_chart"),
    _selectionChanged$1: dart.privateName(sliding_viewport, "_selectionChanged"),
    layoutPaintOrder$4: dart.privateName(slider, "Slider.layoutPaintOrder"),
    eventTrigger: dart.privateName(slider, "Slider.eventTrigger"),
    snapToDatum: dart.privateName(slider, "Slider.snapToDatum"),
    _name$5: dart.privateName(selection_trigger, "_name"),
    __Slider__view: dart.privateName(slider, "_#Slider#_view"),
    __Slider__gestureListener: dart.privateName(slider, "_#Slider#_gestureListener"),
    __Slider__lifecycleListener: dart.privateName(slider, "_#Slider#_lifecycleListener"),
    __Slider__sliderEventListener: dart.privateName(slider, "_#Slider#_sliderEventListener"),
    _chart$8: dart.privateName(slider, "_chart"),
    _sliderHandle: dart.privateName(slider, "_sliderHandle"),
    _delaySelect: dart.privateName(slider, "_delaySelect"),
    _handleDrag: dart.privateName(slider, "_handleDrag"),
    _domainCenterPoint: dart.privateName(slider, "_domainCenterPoint"),
    _previousDomainCenterPoint: dart.privateName(slider, "_previousDomainCenterPoint"),
    _handleBounds: dart.privateName(slider, "_handleBounds"),
    _dragStateToFireOnPostRender: dart.privateName(slider, "_dragStateToFireOnPostRender"),
    _handleRenderer: dart.privateName(slider, "_handleRenderer"),
    _roleId: dart.privateName(slider, "_roleId"),
    _style: dart.privateName(slider, "_style"),
    _domainValue: dart.privateName(slider, "_domainValue"),
    _gestureListener: dart.privateName(slider, "_gestureListener"),
    _onTapTest: dart.privateName(slider, "_onTapTest"),
    _onSelect: dart.privateName(slider, "_onSelect"),
    _onDragEnd: dart.privateName(slider, "_onDragEnd"),
    _onLongPressSelect: dart.privateName(slider, "_onLongPressSelect"),
    _lifecycleListener$1: dart.privateName(slider, "_lifecycleListener"),
    _setInitialDragState: dart.privateName(slider, "_setInitialDragState"),
    _updateViewData: dart.privateName(slider, "_updateViewData"),
    _fireChangeEvent: dart.privateName(slider, "_fireChangeEvent"),
    _sliderEventListener: dart.privateName(slider, "_sliderEventListener"),
    _view: dart.privateName(slider, "_view"),
    _sliderContainsPoint: dart.privateName(slider, "_sliderContainsPoint"),
    _moveSliderToPoint: dart.privateName(slider, "_moveSliderToPoint"),
    _moveSliderToDomain: dart.privateName(slider, "_moveSliderToDomain"),
    _name$6: dart.privateName(slider, "_name"),
    fillColor$2: dart.privateName(slider, "SliderStyle.fillColor"),
    handleOffset: dart.privateName(slider, "SliderStyle.handleOffset"),
    handlePosition: dart.privateName(slider, "SliderStyle.handlePosition"),
    handleSize: dart.privateName(slider, "SliderStyle.handleSize"),
    strokeWidthPx$8: dart.privateName(slider, "SliderStyle.strokeWidthPx"),
    strokeColor$2: dart.privateName(slider, "SliderStyle.strokeColor"),
    Point_y: dart.privateName(math, "Point.y"),
    Point_x: dart.privateName(math, "Point.x"),
    Rectangle_height: dart.privateName(math, "Rectangle.height"),
    Rectangle_width: dart.privateName(math, "Rectangle.width"),
    Rectangle_top: dart.privateName(math, "Rectangle.top"),
    Rectangle_left: dart.privateName(math, "Rectangle.left"),
    layoutConfig$1: dart.privateName(slider, "_SliderLayoutView.layoutConfig"),
    graphicsFactory$3: dart.privateName(slider, "_SliderLayoutView.graphicsFactory"),
    ___SliderLayoutView__drawAreaBounds: dart.privateName(slider, "_#_SliderLayoutView#_drawAreaBounds"),
    _drawAreaBounds$1: dart.privateName(slider, "_drawAreaBounds"),
    _previousSlider: dart.privateName(slider, "_previousSlider"),
    ___AnimatedSlider__targetSlider: dart.privateName(slider, "_#_AnimatedSlider#_targetSlider"),
    _currentSlider: dart.privateName(slider, "_currentSlider"),
    _targetSlider: dart.privateName(slider, "_targetSlider"),
    onChange: dart.privateName(slider, "SliderEventListener.onChange"),
    behavior: dart.privateName(slider, "SliderTester.behavior"),
    selectionModelType$2: dart.privateName(select_nearest, "SelectNearest.selectionModelType"),
    eventTrigger$1: dart.privateName(select_nearest, "SelectNearest.eventTrigger"),
    selectionMode: dart.privateName(select_nearest, "SelectNearest.selectionMode"),
    selectAcrossAllSeriesRendererComponents: dart.privateName(select_nearest, "SelectNearest.selectAcrossAllSeriesRendererComponents"),
    selectClosestSeries: dart.privateName(select_nearest, "SelectNearest.selectClosestSeries"),
    maximumDomainDistancePx: dart.privateName(select_nearest, "SelectNearest.maximumDomainDistancePx"),
    hoverEventDelay: dart.privateName(select_nearest, "SelectNearest.hoverEventDelay"),
    _name$7: dart.privateName(select_nearest, "_name"),
    __SelectNearest__listener: dart.privateName(select_nearest, "_#SelectNearest#_listener"),
    _chart$9: dart.privateName(select_nearest, "_chart"),
    _delaySelect$1: dart.privateName(select_nearest, "_delaySelect"),
    _listener$2: dart.privateName(select_nearest, "_listener"),
    _onTapTest$1: dart.privateName(select_nearest, "_onTapTest"),
    _onSelect$1: dart.privateName(select_nearest, "_onSelect"),
    _onDeselectAll: dart.privateName(select_nearest, "_onDeselectAll"),
    _onLongPressSelect$1: dart.privateName(select_nearest, "_onLongPressSelect"),
    _extractSeriesFromNearestSelection: dart.privateName(select_nearest, "_extractSeriesFromNearestSelection"),
    _expandToDomain: dart.privateName(select_nearest, "_expandToDomain"),
    selectionModelType$3: dart.privateName(lock_selection, "LockSelection.selectionModelType")
  };
  var S$0 = {
    eventTrigger$2: dart.privateName(lock_selection, "LockSelection.eventTrigger"),
    __LockSelection__listener: dart.privateName(lock_selection, "_#LockSelection#_listener"),
    _chart$10: dart.privateName(lock_selection, "_chart"),
    _listener$3: dart.privateName(lock_selection, "_listener"),
    _onTapTest$2: dart.privateName(lock_selection, "_onTapTest"),
    _onSelect$2: dart.privateName(lock_selection, "_onSelect"),
    annotations: dart.privateName(range_annotation, "RangeAnnotation.annotations"),
    defaultColor: dart.privateName(range_annotation, "RangeAnnotation.defaultColor"),
    defaultLabelAnchor: dart.privateName(range_annotation, "RangeAnnotation.defaultLabelAnchor"),
    defaultLabelDirection: dart.privateName(range_annotation, "RangeAnnotation.defaultLabelDirection"),
    defaultLabelPosition: dart.privateName(range_annotation, "RangeAnnotation.defaultLabelPosition"),
    defaultLabelStyleSpec: dart.privateName(range_annotation, "RangeAnnotation.defaultLabelStyleSpec"),
    defaultStrokeWidthPx: dart.privateName(range_annotation, "RangeAnnotation.defaultStrokeWidthPx"),
    extendAxis: dart.privateName(range_annotation, "RangeAnnotation.extendAxis"),
    labelPadding$2: dart.privateName(range_annotation, "RangeAnnotation.labelPadding"),
    layoutPaintOrder$5: dart.privateName(range_annotation, "RangeAnnotation.layoutPaintOrder"),
    __RangeAnnotation__chart: dart.privateName(range_annotation, "_#RangeAnnotation#_chart"),
    __RangeAnnotation__view: dart.privateName(range_annotation, "_#RangeAnnotation#_view"),
    __RangeAnnotation__lifecycleListener: dart.privateName(range_annotation, "_#RangeAnnotation#_lifecycleListener"),
    _annotationMap: dart.privateName(range_annotation, "_annotationMap"),
    _currentKeys$4: dart.privateName(range_annotation, "_currentKeys"),
    _lifecycleListener$2: dart.privateName(range_annotation, "_lifecycleListener"),
    _updateAxisRange: dart.privateName(range_annotation, "_updateAxisRange"),
    _updateViewData$1: dart.privateName(range_annotation, "_updateViewData"),
    _chart$11: dart.privateName(range_annotation, "_chart"),
    _view$1: dart.privateName(range_annotation, "_view"),
    _name$8: dart.privateName(range_annotation, "_name"),
    _getAnnotationDatum: dart.privateName(range_annotation, "_getAnnotationDatum"),
    layoutConfig$2: dart.privateName(range_annotation, "_RangeAnnotationLayoutView.layoutConfig"),
    chart$1: dart.privateName(range_annotation, "_RangeAnnotationLayoutView.chart"),
    graphicsFactory$4: dart.privateName(range_annotation, "_RangeAnnotationLayoutView.graphicsFactory"),
    ___RangeAnnotationLayoutView__drawAreaBounds: dart.privateName(range_annotation, "_#_RangeAnnotationLayoutView#_drawAreaBounds"),
    _drawAreaBounds$2: dart.privateName(range_annotation, "_drawAreaBounds"),
    _getAnnotationBounds: dart.privateName(range_annotation, "_getAnnotationBounds"),
    _getLineAnnotationPoints: dart.privateName(range_annotation, "_getLineAnnotationPoints"),
    _getTextStyle$1: dart.privateName(range_annotation, "_getTextStyle"),
    _getLabelMaxWidth: dart.privateName(range_annotation, "_getLabelMaxWidth"),
    _getLabelPosition: dart.privateName(range_annotation, "_getLabelPosition"),
    _resolveAutoLabelPosition: dart.privateName(range_annotation, "_resolveAutoLabelPosition"),
    _getDomainLabelPosition: dart.privateName(range_annotation, "_getDomainLabelPosition"),
    _getMeasureLabelPosition: dart.privateName(range_annotation, "_getMeasureLabelPosition"),
    _getDomainLabelPositionVertical: dart.privateName(range_annotation, "_getDomainLabelPositionVertical"),
    _getDomainLabelPositionHorizontal: dart.privateName(range_annotation, "_getDomainLabelPositionHorizontal"),
    _getMeasureLabelPositionVertical: dart.privateName(range_annotation, "_getMeasureLabelPositionVertical"),
    _getMeasureLabelPositionHorizontal: dart.privateName(range_annotation, "_getMeasureLabelPositionHorizontal"),
    _previousAnnotation: dart.privateName(range_annotation, "_previousAnnotation"),
    ___AnimatedAnnotation__targetAnnotation: dart.privateName(range_annotation, "_#_AnimatedAnnotation#_targetAnnotation"),
    _currentAnnotation: dart.privateName(range_annotation, "_currentAnnotation"),
    _targetAnnotation: dart.privateName(range_annotation, "_targetAnnotation"),
    behavior$1: dart.privateName(range_annotation, "RangeAnnotationTester.behavior"),
    axisType: dart.privateName(range_annotation, "AnnotationSegment.axisType"),
    axisId: dart.privateName(range_annotation, "AnnotationSegment.axisId"),
    color$3: dart.privateName(range_annotation, "AnnotationSegment.color"),
    startLabel: dart.privateName(range_annotation, "AnnotationSegment.startLabel"),
    endLabel: dart.privateName(range_annotation, "AnnotationSegment.endLabel"),
    middleLabel: dart.privateName(range_annotation, "AnnotationSegment.middleLabel"),
    labelAnchor: dart.privateName(range_annotation, "AnnotationSegment.labelAnchor"),
    labelDirection: dart.privateName(range_annotation, "AnnotationSegment.labelDirection"),
    labelPosition$1: dart.privateName(range_annotation, "AnnotationSegment.labelPosition"),
    labelStyleSpec$1: dart.privateName(range_annotation, "AnnotationSegment.labelStyleSpec"),
    startValue: dart.privateName(range_annotation, "RangeAnnotationSegment.startValue"),
    endValue: dart.privateName(range_annotation, "RangeAnnotationSegment.endValue"),
    value: dart.privateName(range_annotation, "LineAnnotationSegment.value"),
    dashPattern$1: dart.privateName(range_annotation, "LineAnnotationSegment.dashPattern"),
    strokeWidthPx$9: dart.privateName(range_annotation, "LineAnnotationSegment.strokeWidthPx"),
    selectionModelType$4: dart.privateName(line_point_highlighter, "LinePointHighlighter.selectionModelType"),
    defaultRadiusPx: dart.privateName(line_point_highlighter, "LinePointHighlighter.defaultRadiusPx"),
    radiusPaddingPx: dart.privateName(line_point_highlighter, "LinePointHighlighter.radiusPaddingPx"),
    showHorizontalFollowLine: dart.privateName(line_point_highlighter, "LinePointHighlighter.showHorizontalFollowLine"),
    showVerticalFollowLine: dart.privateName(line_point_highlighter, "LinePointHighlighter.showVerticalFollowLine"),
    dashPattern$2: dart.privateName(line_point_highlighter, "LinePointHighlighter.dashPattern"),
    drawFollowLinesAcrossChart: dart.privateName(line_point_highlighter, "LinePointHighlighter.drawFollowLinesAcrossChart"),
    symbolRenderer$6: dart.privateName(line_point_highlighter, "LinePointHighlighter.symbolRenderer"),
    __LinePointHighlighter__chart: dart.privateName(line_point_highlighter, "_#LinePointHighlighter#_chart"),
    __LinePointHighlighter__view: dart.privateName(line_point_highlighter, "_#LinePointHighlighter#_view"),
    __LinePointHighlighter__lifecycleListener: dart.privateName(line_point_highlighter, "_#LinePointHighlighter#_lifecycleListener"),
    _seriesPointMap: dart.privateName(line_point_highlighter, "_seriesPointMap"),
    _currentKeys$5: dart.privateName(line_point_highlighter, "_currentKeys"),
    _lifecycleListener$3: dart.privateName(line_point_highlighter, "_lifecycleListener"),
    _updateViewData$2: dart.privateName(line_point_highlighter, "_updateViewData"),
    _chart$12: dart.privateName(line_point_highlighter, "_chart"),
    _view$2: dart.privateName(line_point_highlighter, "_view"),
    _selectionChanged$2: dart.privateName(line_point_highlighter, "_selectionChanged"),
    layoutConfig$3: dart.privateName(line_point_highlighter, "_LinePointLayoutView.layoutConfig"),
    graphicsFactory$5: dart.privateName(line_point_highlighter, "_LinePointLayoutView.graphicsFactory"),
    ___LinePointLayoutView__drawAreaBounds: dart.privateName(line_point_highlighter, "_#_LinePointLayoutView#_drawAreaBounds"),
    _drawAreaBounds$3: dart.privateName(line_point_highlighter, "_drawAreaBounds"),
    point$1: dart.privateName(line_point_highlighter, "_PointRendererElement.point"),
    _lerpDouble$1: dart.privateName(line_point_highlighter, "_lerpDouble"),
    _previousPoint$1: dart.privateName(line_point_highlighter, "_previousPoint"),
    ___AnimatedPoint__targetPoint: dart.privateName(line_point_highlighter, "_#_AnimatedPoint#_targetPoint"),
    _currentPoint$1: dart.privateName(line_point_highlighter, "_currentPoint"),
    _targetPoint$1: dart.privateName(line_point_highlighter, "_targetPoint"),
    _name$9: dart.privateName(line_point_highlighter, "_name"),
    behavior$2: dart.privateName(line_point_highlighter, "LinePointHighlighterTester.behavior"),
    entryTextStyle: dart.privateName(per_series_legend_entry_generator, "PerSeriesLegendEntryGenerator.entryTextStyle"),
    measureFormatter: dart.privateName(per_series_legend_entry_generator, "PerSeriesLegendEntryGenerator.measureFormatter"),
    secondaryMeasureFormatter: dart.privateName(per_series_legend_entry_generator, "PerSeriesLegendEntryGenerator.secondaryMeasureFormatter"),
    showOverlaySeries: dart.privateName(per_series_legend_entry_generator, "PerSeriesLegendEntryGenerator.showOverlaySeries"),
    __PerSeriesLegendEntryGenerator_legendDefaultMeasure: dart.privateName(per_series_legend_entry_generator, "_#PerSeriesLegendEntryGenerator#legendDefaultMeasure"),
    _updateFromSeriesList: dart.privateName(per_series_legend_entry_generator, "_updateFromSeriesList"),
    _updateFromSelection: dart.privateName(per_series_legend_entry_generator, "_updateFromSelection"),
    _resetLegendEntryMeasures: dart.privateName(per_series_legend_entry_generator, "_resetLegendEntryMeasures"),
    _name$10: dart.privateName(legend_entry_generator, "_name"),
    _hiddenSeriesList: dart.privateName(series_legend, "_hiddenSeriesList"),
    _defaultHiddenSeries: dart.privateName(series_legend, "_defaultHiddenSeries"),
    _alwaysVisibleSeries: dart.privateName(series_legend, "_alwaysVisibleSeries"),
    __SeriesLegend__showMeasures: dart.privateName(series_legend, "_#SeriesLegend#_showMeasures"),
    _showMeasures: dart.privateName(series_legend, "_showMeasures"),
    selectionModelType$5: dart.privateName(legend, "Legend.selectionModelType"),
    legendState: dart.privateName(legend, "Legend.legendState"),
    legendEntryGenerator: dart.privateName(legend, "Legend.legendEntryGenerator"),
    graphicsFactory$6: dart.privateName(legend, "Legend.graphicsFactory"),
    behaviorPosition: dart.privateName(legend, "Legend.behaviorPosition"),
    outsideJustification: dart.privateName(legend, "Legend.outsideJustification"),
    insideJustification: dart.privateName(legend, "Legend.insideJustification"),
    cellPadding: dart.privateName(legend, "Legend.cellPadding"),
    legendPadding: dart.privateName(legend, "Legend.legendPadding"),
    titleTextStyle: dart.privateName(legend, "Legend.titleTextStyle"),
    legendTapHandling: dart.privateName(legend, "Legend.legendTapHandling"),
    __Legend_title: dart.privateName(legend, "_#Legend#title"),
    __Legend__chart: dart.privateName(legend, "_#Legend#_chart"),
    __Legend__lifecycleListener: dart.privateName(legend, "_#Legend#_lifecycleListener"),
    _componentBounds$1: dart.privateName(legend, "_componentBounds"),
    _drawAreaBounds$4: dart.privateName(legend, "_drawAreaBounds"),
    __Legend__currentSeriesList: dart.privateName(legend, "_#Legend#_currentSeriesList"),
    _customEntryOrder: dart.privateName(legend, "_customEntryOrder"),
    _postProcessSeriesList: dart.privateName(legend, "_postProcessSeriesList"),
    _lifecycleListener$4: dart.privateName(legend, "_lifecycleListener"),
    _postProcess: dart.privateName(legend, "_postProcess"),
    _preProcess: dart.privateName(legend, "_preProcess"),
    _chart$13: dart.privateName(legend, "_chart"),
    _currentSeriesList$1: dart.privateName(legend, "_currentSeriesList"),
    _selectionModel: dart.privateName(legend, "_selectionModel"),
    _legendEntries: dart.privateName(legend, "_legendEntries"),
    _updateLegendEntries: dart.privateName(legend, "_updateLegendEntries"),
    _selectionChanged$3: dart.privateName(legend, "_selectionChanged"),
    _layoutPosition: dart.privateName(legend, "_layoutPosition"),
    entryTextStyle$1: dart.privateName(per_datum_legend_entry_generator, "PerDatumLegendEntryGenerator.entryTextStyle"),
    measureFormatter$1: dart.privateName(per_datum_legend_entry_generator, "PerDatumLegendEntryGenerator.measureFormatter"),
    secondaryMeasureFormatter$1: dart.privateName(per_datum_legend_entry_generator, "PerDatumLegendEntryGenerator.secondaryMeasureFormatter"),
    __PerDatumLegendEntryGenerator_showOverlaySeries: dart.privateName(per_datum_legend_entry_generator, "_#PerDatumLegendEntryGenerator#showOverlaySeries"),
    __PerDatumLegendEntryGenerator_legendDefaultMeasure: dart.privateName(per_datum_legend_entry_generator, "_#PerDatumLegendEntryGenerator#legendDefaultMeasure"),
    _updateEntries: dart.privateName(per_datum_legend_entry_generator, "_updateEntries"),
    _updateFromSelection$1: dart.privateName(per_datum_legend_entry_generator, "_updateFromSelection"),
    _resetLegendEntryMeasures$1: dart.privateName(per_datum_legend_entry_generator, "_resetLegendEntryMeasures"),
    _getFormattedMeasureValue: dart.privateName(per_datum_legend_entry_generator, "_getFormattedMeasureValue"),
    label: dart.privateName(legend_entry, "LegendEntryBase.label"),
    textStyle: dart.privateName(legend_entry, "LegendEntryBase.textStyle"),
    rowNumber: dart.privateName(legend_entry, "LegendEntryBase.rowNumber"),
    columnNumber: dart.privateName(legend_entry, "LegendEntryBase.columnNumber"),
    rowCount: dart.privateName(legend_entry, "LegendEntryBase.rowCount"),
    columnCount: dart.privateName(legend_entry, "LegendEntryBase.columnCount"),
    inFirstRow: dart.privateName(legend_entry, "LegendEntryBase.inFirstRow"),
    inFirstColumn: dart.privateName(legend_entry, "LegendEntryBase.inFirstColumn"),
    inLastRow: dart.privateName(legend_entry, "LegendEntryBase.inLastRow"),
    inLastColumn: dart.privateName(legend_entry, "LegendEntryBase.inLastColumn"),
    entries: dart.privateName(legend_entry, "LegendCategory.entries"),
    series$4: dart.privateName(legend_entry, "LegendEntry.series"),
    datum$2: dart.privateName(legend_entry, "LegendEntry.datum"),
    datumIndex: dart.privateName(legend_entry, "LegendEntry.datumIndex"),
    domain$4: dart.privateName(legend_entry, "LegendEntry.domain"),
    color$4: dart.privateName(legend_entry, "LegendEntry.color"),
    value$1: dart.privateName(legend_entry, "LegendEntry.value"),
    selectedDataIndexes: dart.privateName(legend_entry, "LegendEntry.selectedDataIndexes"),
    formattedValue: dart.privateName(legend_entry, "LegendEntry.formattedValue"),
    isSelected: dart.privateName(legend_entry, "LegendEntry.isSelected"),
    _selectionModel$1: dart.privateName(legend, "LegendState._selectionModel"),
    __LegendState__legendEntries: dart.privateName(legend, "_#LegendState#_legendEntries"),
    bottomPct: dart.privateName(legend, "LegendCellPadding.bottomPct"),
    bottomPx: dart.privateName(legend, "LegendCellPadding.bottomPx"),
    leftPct: dart.privateName(legend, "LegendCellPadding.leftPct"),
    leftPx: dart.privateName(legend, "LegendCellPadding.leftPx"),
    rightPct: dart.privateName(legend, "LegendCellPadding.rightPct"),
    rightPx: dart.privateName(legend, "LegendCellPadding.rightPx"),
    topPct: dart.privateName(legend, "LegendCellPadding.topPct"),
    topPx: dart.privateName(legend, "LegendCellPadding.topPx"),
    _name$11: dart.privateName(legend, "_name"),
    __DatumLegend__showMeasures: dart.privateName(datum_legend, "_#DatumLegend#_showMeasures"),
    _showMeasures$1: dart.privateName(datum_legend, "_showMeasures"),
    selectionModelType$6: dart.privateName(initial_selection, "InitialSelection.selectionModelType"),
    selectedSeriesConfig: dart.privateName(initial_selection, "InitialSelection.selectedSeriesConfig"),
    selectedDataConfig: dart.privateName(initial_selection, "InitialSelection.selectedDataConfig"),
    _chart$14: dart.privateName(initial_selection, "_chart"),
    __InitialSelection__lifecycleListener: dart.privateName(initial_selection, "_#InitialSelection#_lifecycleListener"),
    _firstDraw: dart.privateName(initial_selection, "_firstDraw"),
    _lifecycleListener$5: dart.privateName(initial_selection, "_lifecycleListener"),
    _setInitialSelection: dart.privateName(initial_selection, "_setInitialSelection"),
    selectionType: dart.privateName(domain_outliner, "DomainOutliner.selectionType"),
    defaultStrokePx: dart.privateName(domain_outliner, "DomainOutliner.defaultStrokePx"),
    strokePaddingPx: dart.privateName(domain_outliner, "DomainOutliner.strokePaddingPx"),
    __DomainOutliner__chart: dart.privateName(domain_outliner, "_#DomainOutliner#_chart"),
    __DomainOutliner__lifecycleListener: dart.privateName(domain_outliner, "_#DomainOutliner#_lifecycleListener"),
    _lifecycleListener$6: dart.privateName(domain_outliner, "_lifecycleListener"),
    _outline: dart.privateName(domain_outliner, "_outline"),
    _chart$15: dart.privateName(domain_outliner, "_chart"),
    _selectionChange: dart.privateName(domain_outliner, "_selectionChange"),
    selectionModelType$7: dart.privateName(domain_highlighter, "DomainHighlighter.selectionModelType"),
    __DomainHighlighter__chart: dart.privateName(domain_highlighter, "_#DomainHighlighter#_chart"),
    __DomainHighlighter__lifecycleListener: dart.privateName(domain_highlighter, "_#DomainHighlighter#_lifecycleListener"),
    _lifecycleListener$7: dart.privateName(domain_highlighter, "_lifecycleListener"),
    _updateColorFunctions: dart.privateName(domain_highlighter, "_updateColorFunctions"),
    _chart$16: dart.privateName(domain_highlighter, "_chart"),
    _selectionChanged$4: dart.privateName(domain_highlighter, "_selectionChanged"),
    _chart$17: dart.privateName(chart_title, "_chart"),
    _view$3: dart.privateName(chart_title, "_view"),
    __ChartTitle__lifecycleListener: dart.privateName(chart_title, "_#ChartTitle#_lifecycleListener"),
    _config: dart.privateName(chart_title, "_config"),
    _lifecycleListener$8: dart.privateName(chart_title, "_lifecycleListener"),
    _updateViewData$3: dart.privateName(chart_title, "_updateViewData"),
    _name$12: dart.privateName(chart_behavior, "_name"),
    _name$13: dart.privateName(text_element, "_name"),
    _name$14: dart.privateName(chart_title, "_name"),
    chart$2: dart.privateName(chart_title, "_ChartTitleLayoutView.chart"),
    graphicsFactory$7: dart.privateName(chart_title, "_ChartTitleLayoutView.graphicsFactory"),
    ___ChartTitleLayoutView__layoutConfig: dart.privateName(chart_title, "_#_ChartTitleLayoutView#_layoutConfig"),
    ___ChartTitleLayoutView__componentBounds: dart.privateName(chart_title, "_#_ChartTitleLayoutView#_componentBounds"),
    ___ChartTitleLayoutView__drawAreaBounds: dart.privateName(chart_title, "_#_ChartTitleLayoutView#_drawAreaBounds"),
    _titleTextElement: dart.privateName(chart_title, "_titleTextElement"),
    _subTitleTextElement: dart.privateName(chart_title, "_subTitleTextElement"),
    _layoutConfig: dart.privateName(chart_title, "_layoutConfig"),
    _layoutPosition$1: dart.privateName(chart_title, "_layoutPosition"),
    _componentBounds$2: dart.privateName(chart_title, "_componentBounds"),
    _drawAreaBounds$5: dart.privateName(chart_title, "_drawAreaBounds"),
    _getTextStyle$2: dart.privateName(chart_title, "_getTextStyle"),
    _resolvedTitleDirection: dart.privateName(chart_title, "_resolvedTitleDirection"),
    _resetTextElementCache: dart.privateName(chart_title, "_resetTextElementCache"),
    _getLabelPosition$1: dart.privateName(chart_title, "_getLabelPosition"),
    _getHorizontalLabelPosition: dart.privateName(chart_title, "_getHorizontalLabelPosition"),
    _getVerticalLabelPosition: dart.privateName(chart_title, "_getVerticalLabelPosition"),
    totalType: dart.privateName(percent_injector, "PercentInjector.totalType"),
    _name$15: dart.privateName(percent_injector, "_name"),
    __PercentInjector__lifecycleListener: dart.privateName(percent_injector, "_#PercentInjector#_lifecycleListener"),
    _lifecycleListener$9: dart.privateName(percent_injector, "_lifecycleListener"),
    _preProcess$1: dart.privateName(percent_injector, "_preProcess"),
    _onData: dart.privateName(percent_injector, "_onData"),
    __KeyboardDomainNavigator__chart: dart.privateName(keyboard_domain_navigator, "_#KeyboardDomainNavigator#_chart"),
    __KeyboardDomainNavigator__lifecycleListener: dart.privateName(keyboard_domain_navigator, "_#KeyboardDomainNavigator#_lifecycleListener"),
    _domains: dart.privateName(keyboard_domain_navigator, "_domains"),
    _datumPairs: dart.privateName(keyboard_domain_navigator, "_datumPairs"),
    _currentIndex: dart.privateName(keyboard_domain_navigator, "_currentIndex"),
    _lifecycleListener$10: dart.privateName(keyboard_domain_navigator, "_lifecycleListener"),
    _chart$18: dart.privateName(keyboard_domain_navigator, "_chart"),
    _getActiveHoverDomainIndex: dart.privateName(keyboard_domain_navigator, "_getActiveHoverDomainIndex"),
    _generateSelectionDomains: dart.privateName(keyboard_domain_navigator, "_generateSelectionDomains"),
    _doNavigate: dart.privateName(keyboard_domain_navigator, "_doNavigate"),
    _selectDomainIndex: dart.privateName(keyboard_domain_navigator, "_selectDomainIndex"),
    _getDatumPairs: dart.privateName(keyboard_domain_navigator, "_getDatumPairs"),
    __DomainA11yExploreBehavior__lifecycleListener: dart.privateName(domain_a11y_explore_behavior, "_#DomainA11yExploreBehavior#_lifecycleListener"),
    __DomainA11yExploreBehavior__chart: dart.privateName(domain_a11y_explore_behavior, "_#DomainA11yExploreBehavior#_chart"),
    __DomainA11yExploreBehavior__seriesList: dart.privateName(domain_a11y_explore_behavior, "_#DomainA11yExploreBehavior#_seriesList"),
    _vocalizationCallback: dart.privateName(domain_a11y_explore_behavior, "_vocalizationCallback"),
    _lifecycleListener$11: dart.privateName(domain_a11y_explore_behavior, "_lifecycleListener"),
    _updateSeriesList: dart.privateName(domain_a11y_explore_behavior, "_updateSeriesList"),
    _chart$19: dart.privateName(domain_a11y_explore_behavior, "_chart"),
    _seriesList: dart.privateName(domain_a11y_explore_behavior, "_seriesList"),
    exploreModeTrigger: dart.privateName(a11y_explore_behavior, "A11yExploreBehavior.exploreModeTrigger"),
    minimumWidth: dart.privateName(a11y_explore_behavior, "A11yExploreBehavior.minimumWidth"),
    exploreModeEnabledAnnouncement: dart.privateName(a11y_explore_behavior, "A11yExploreBehavior.exploreModeEnabledAnnouncement"),
    exploreModeDisabledAnnouncement: dart.privateName(a11y_explore_behavior, "A11yExploreBehavior.exploreModeDisabledAnnouncement"),
    _chart$20: dart.privateName(a11y_explore_behavior, "_chart"),
    __A11yExploreBehavior__listener: dart.privateName(a11y_explore_behavior, "_#A11yExploreBehavior#_listener"),
    _exploreModeOn: dart.privateName(a11y_explore_behavior, "_exploreModeOn"),
    _listener$4: dart.privateName(a11y_explore_behavior, "_listener"),
    _toggleExploreMode: dart.privateName(a11y_explore_behavior, "_toggleExploreMode"),
    _name$16: dart.privateName(a11y_explore_behavior, "_name"),
    BasicNumericTickProviderSpec_desiredMaxTickCount: dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.desiredMaxTickCount"),
    BasicNumericTickProviderSpec_desiredMinTickCount: dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.desiredMinTickCount"),
    BasicNumericTickProviderSpec_desiredTickCount: dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.desiredTickCount"),
    BasicNumericTickProviderSpec_dataIsInWholeNumbers: dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.dataIsInWholeNumbers"),
    BasicNumericTickProviderSpec_zeroBound: dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.zeroBound"),
    NumericExtents_max: dart.privateName(numeric_extents, "NumericExtents.max"),
    NumericExtents_min: dart.privateName(numeric_extents, "NumericExtents.min"),
    viewport: dart.privateName(numeric_axis_spec, "NumericAxisSpec.viewport"),
    showAxisLine: dart.privateName(axis_spec, "AxisSpec.showAxisLine"),
    renderSpec: dart.privateName(axis_spec, "AxisSpec.renderSpec"),
    tickProviderSpec: dart.privateName(axis_spec, "AxisSpec.tickProviderSpec"),
    tickFormatterSpec: dart.privateName(axis_spec, "AxisSpec.tickFormatterSpec"),
    scaleSpec: dart.privateName(axis_spec, "AxisSpec.scaleSpec"),
    rangeStartValue: dart.privateName(range_tick_spec, "RangeTickSpec.rangeStartValue"),
    rangeEndValue: dart.privateName(range_tick_spec, "RangeTickSpec.rangeEndValue"),
    value$2: dart.privateName(tick_spec, "TickSpec.value"),
    label$1: dart.privateName(tick_spec, "TickSpec.label"),
    style: dart.privateName(tick_spec, "TickSpec.style"),
    tickSpec: dart.privateName(range_tick_provider, "RangeTickProvider.tickSpec"),
    viewport$1: dart.privateName(ordinal_axis_spec, "OrdinalAxisSpec.viewport"),
    tickSpecs: dart.privateName(ordinal_axis_spec, "StaticOrdinalTickProviderSpec.tickSpecs"),
    tickSpecs$1: dart.privateName(ordinal_axis_spec, "RangeOrdinalTickProviderSpec.tickSpecs"),
    pixelSpaceBetweenBars: dart.privateName(ordinal_axis_spec, "FixedPixelSpaceOrdinalScaleSpec.pixelSpaceBetweenBars"),
    pixels: dart.privateName(ordinal_axis_spec, "FixedPixelOrdinalScaleSpec.pixels"),
    BaseRenderSpec_axisLineStyle: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.axisLineStyle"),
    BaseRenderSpec_labelCollisionRotation: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelCollisionRotation"),
    BaseRenderSpec_labelRotation: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelRotation"),
    BaseRenderSpec_minimumPaddingBetweenLabelsPx: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.minimumPaddingBetweenLabelsPx"),
    BaseRenderSpec_labelCollisionOffsetFromTickPx: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelCollisionOffsetFromTickPx"),
    BaseRenderSpec_labelOffsetFromTickPx: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelOffsetFromTickPx"),
    BaseRenderSpec_labelCollisionOffsetFromAxisPx: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelCollisionOffsetFromAxisPx"),
    BaseRenderSpec_labelOffsetFromAxisPx: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelOffsetFromAxisPx"),
    BaseRenderSpec_labelJustification: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelJustification"),
    _name$17: dart.privateName(axis_spec, "_name"),
    BaseRenderSpec_labelAnchor: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelAnchor"),
    BaseRenderSpec_labelStyle: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelStyle"),
    SmallTickRendererSpec_tickLengthPx: dart.privateName(small_tick_draw_strategy, "SmallTickRendererSpec.tickLengthPx"),
    SmallTickRendererSpec_lineStyle: dart.privateName(small_tick_draw_strategy, "SmallTickRendererSpec.lineStyle"),
    viewport$2: dart.privateName(date_time_axis_spec, "DateTimeAxisSpec.viewport"),
    _timeFormatters: dart.privateName(date_time_tick_formatter, "_timeFormatters"),
    $iterator: dartx.iterator,
    scale: dart.privateName(axis$, "Axis.scale"),
    tickProvider$1: dart.privateName(axis$, "Axis.tickProvider"),
    tickDrawStrategy: dart.privateName(axis$, "Axis.tickDrawStrategy"),
    axisOrientation: dart.privateName(axis$, "Axis.axisOrientation"),
    context: dart.privateName(axis$, "Axis.context"),
    reverseOutputRange: dart.privateName(axis$, "Axis.reverseOutputRange"),
    autoViewport: dart.privateName(axis$, "Axis.autoViewport"),
    forceDrawAxisLine: dart.privateName(axis$, "Axis.forceDrawAxisLine"),
    lockAxis: dart.privateName(axis$, "Axis.lockAxis"),
    layoutPaintOrder$6: dart.privateName(axis$, "Axis.layoutPaintOrder"),
    hasTickCollision: dart.privateName(axis$, "Axis.hasTickCollision"),
    graphicsFactory$8: dart.privateName(axis$, "Axis.graphicsFactory"),
    _previousScale: dart.privateName(axis$, "_previousScale"),
    _formatterValueCache: dart.privateName(axis$, "_formatterValueCache"),
    _providedTicks: dart.privateName(axis$, "_providedTicks"),
    _axisTicks: dart.privateName(axis$, "_axisTicks"),
    _componentBounds$3: dart.privateName(axis$, "_componentBounds"),
    _drawAreaBounds$6: dart.privateName(axis$, "_drawAreaBounds"),
    _defaultScale: dart.privateName(axis$, "_defaultScale"),
    _defaultTickProvider: dart.privateName(axis$, "_defaultTickProvider"),
    _defaultTickFormatter: dart.privateName(axis$, "_defaultTickFormatter"),
    _tickFormatter: dart.privateName(axis$, "_tickFormatter"),
    _updateProvidedTicks: dart.privateName(axis$, "_updateProvidedTicks"),
    _updateProvidedTickWidth: dart.privateName(axis$, "_updateProvidedTickWidth"),
    _updateAxisTicks: dart.privateName(axis$, "_updateAxisTicks"),
    _clampTranslatePx: dart.privateName(axis$, "_clampTranslatePx"),
    _layoutPosition$2: dart.privateName(axis$, "_layoutPosition"),
    _name$18: dart.privateName(axis$, "_name"),
    _measureVerticalAxis: dart.privateName(axis$, "_measureVerticalAxis"),
    _measureHorizontalAxis: dart.privateName(axis$, "_measureHorizontalAxis"),
    _allowedTickIncrements: dart.privateName(year_time_stepper, "_allowedTickIncrements"),
    $every: dartx.every,
    dateTimeFactory$1: dart.privateName(base_time_stepper, "BaseTimeStepper.dateTimeFactory"),
    _stepsIterable: dart.privateName(base_time_stepper, "_stepsIterable"),
    requiredMinimumTicks: dart.privateName(time_range_tick_provider_impl, "TimeRangeTickProviderImpl.requiredMinimumTicks"),
    timeStepper: dart.privateName(time_range_tick_provider_impl, "TimeRangeTickProviderImpl.timeStepper"),
    _getClosestIncrementFromStepSize: dart.privateName(time_range_tick_provider_impl, "_getClosestIncrementFromStepSize"),
    _allowedTickIncrements$1: dart.privateName(month_time_stepper, "_allowedTickIncrements"),
    _allowedTickIncrements$2: dart.privateName(minute_time_stepper, "_allowedTickIncrements"),
    _allowedTickIncrements$3: dart.privateName(hour_time_stepper, "_allowedTickIncrements"),
    _current: dart.privateName(base_time_stepper, "_current"),
    _tickIncrement: dart.privateName(base_time_stepper, "_tickIncrement"),
    _timeStepIterator: dart.privateName(base_time_stepper, "_timeStepIterator"),
    _allowedTickIncrements$4: dart.privateName(day_time_stepper, "_allowedTickIncrements"),
    _potentialTickProviders: dart.privateName(auto_adjusting_date_time_tick_provider, "_potentialTickProviders"),
    _getClosestTickProvider: dart.privateName(auto_adjusting_date_time_tick_provider, "_getClosestTickProvider"),
    includeTime: dart.privateName(date_time_axis_spec, "AutoDateTimeTickProviderSpec.includeTime"),
    increments: dart.privateName(date_time_axis_spec, "DayTickProviderSpec.increments"),
    tickSpecs$2: dart.privateName(date_time_axis_spec, "StaticDateTimeTickProviderSpec.tickSpecs"),
    format: dart.privateName(date_time_axis_spec, "TimeFormatterSpec.format"),
    transitionFormat: dart.privateName(date_time_axis_spec, "TimeFormatterSpec.transitionFormat"),
    noonFormat: dart.privateName(date_time_axis_spec, "TimeFormatterSpec.noonFormat"),
    formatter: dart.privateName(date_time_axis_spec, "BasicDateTimeTickFormatterSpec.formatter"),
    dateFormat: dart.privateName(date_time_axis_spec, "BasicDateTimeTickFormatterSpec.dateFormat"),
    minute: dart.privateName(date_time_axis_spec, "AutoDateTimeTickFormatterSpec.minute"),
    hour: dart.privateName(date_time_axis_spec, "AutoDateTimeTickFormatterSpec.hour"),
    day: dart.privateName(date_time_axis_spec, "AutoDateTimeTickFormatterSpec.day"),
    month: dart.privateName(date_time_axis_spec, "AutoDateTimeTickFormatterSpec.month"),
    year: dart.privateName(date_time_axis_spec, "AutoDateTimeTickFormatterSpec.year"),
    _makeFormatter: dart.privateName(date_time_axis_spec, "_makeFormatter"),
    _threshold: dart.privateName(bucketing_numeric_tick_provider, "_threshold"),
    _showBucket: dart.privateName(bucketing_numeric_tick_provider, "_showBucket"),
    zeroBound: dart.privateName(numeric_tick_provider, "NumericTickProvider.zeroBound"),
    dataIsInWholeNumbers: dart.privateName(numeric_tick_provider, "NumericTickProvider.dataIsInWholeNumbers"),
    dataToAxisUnitConverter: dart.privateName(numeric_tick_provider, "NumericTickProvider.dataToAxisUnitConverter"),
    _desiredMaxTickCount: dart.privateName(numeric_tick_provider, "_desiredMaxTickCount"),
    _desiredMinTickCount: dart.privateName(numeric_tick_provider, "_desiredMinTickCount"),
    _allowedSteps: dart.privateName(numeric_tick_provider, "_allowedSteps"),
    __NumericTickProvider__low: dart.privateName(numeric_tick_provider, "_#NumericTickProvider#_low"),
    __NumericTickProvider__high: dart.privateName(numeric_tick_provider, "_#NumericTickProvider#_high"),
    _minTickCount: dart.privateName(numeric_tick_provider, "_minTickCount"),
    _maxTickCount: dart.privateName(numeric_tick_provider, "_maxTickCount"),
    _low: dart.privateName(numeric_tick_provider, "_low"),
    _high: dart.privateName(numeric_tick_provider, "_high"),
    _getTickValues: dart.privateName(numeric_tick_provider, "_getTickValues"),
    _getTicksFromHint: dart.privateName(numeric_tick_provider, "_getTicksFromHint"),
    _updateDomainExtents: dart.privateName(numeric_tick_provider, "_updateDomainExtents"),
    _updateTickCounts: dart.privateName(numeric_tick_provider, "_updateTickCounts"),
    _getStepsForTickCount: dart.privateName(numeric_tick_provider, "_getStepsForTickCount"),
    $floorToDouble: dartx.floorToDouble,
    _threshold$1: dart.privateName(bucketing_numeric_axis, "_threshold"),
    _showBucket$1: dart.privateName(bucketing_numeric_axis, "_showBucket"),
    threshold: dart.privateName(bucketing_axis_spec, "BucketingAxisSpec.threshold"),
    showBucket: dart.privateName(bucketing_axis_spec, "BucketingAxisSpec.showBucket"),
    zeroBound$1: dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.zeroBound"),
    dataIsInWholeNumbers$1: dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.dataIsInWholeNumbers"),
    desiredTickCount: dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.desiredTickCount"),
    desiredMinTickCount: dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.desiredMinTickCount"),
    desiredMaxTickCount: dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.desiredMaxTickCount"),
    rangeShadeStyle: dart.privateName(range_tick_draw_strategy, "RangeTickRendererSpec.rangeShadeStyle"),
    rangeLabelStyle: dart.privateName(range_tick_draw_strategy, "RangeTickRendererSpec.rangeLabelStyle"),
    rangeTickLengthPx: dart.privateName(range_tick_draw_strategy, "RangeTickRendererSpec.rangeTickLengthPx"),
    rangeShadeHeightPx: dart.privateName(range_tick_draw_strategy, "RangeTickRendererSpec.rangeShadeHeightPx"),
    rangeShadeOffsetFromAxisPx: dart.privateName(range_tick_draw_strategy, "RangeTickRendererSpec.rangeShadeOffsetFromAxisPx"),
    rangeTickOffsetPx: dart.privateName(range_tick_draw_strategy, "RangeTickRendererSpec.rangeTickOffsetPx"),
    defaultLabelStyleSpec$1: dart.privateName(range_tick_draw_strategy, "RangeTickRendererSpec.defaultLabelStyleSpec"),
    lineStyle: dart.privateName(small_tick_draw_strategy, "SmallTickRendererSpec.lineStyle"),
    tickLengthPx: dart.privateName(small_tick_draw_strategy, "SmallTickRendererSpec.tickLengthPx"),
    labelStyle: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelStyle"),
    labelAnchor$1: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelAnchor"),
    labelJustification: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelJustification"),
    labelOffsetFromAxisPx: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelOffsetFromAxisPx"),
    labelCollisionOffsetFromAxisPx: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelCollisionOffsetFromAxisPx"),
    labelOffsetFromTickPx: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelOffsetFromTickPx"),
    labelCollisionOffsetFromTickPx: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelCollisionOffsetFromTickPx"),
    minimumPaddingBetweenLabelsPx: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.minimumPaddingBetweenLabelsPx"),
    labelRotation: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelRotation"),
    labelCollisionRotation: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelCollisionRotation"),
    axisLineStyle: dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.axisLineStyle"),
    rangeTickLengthPx$1: dart.privateName(range_tick_draw_strategy, "RangeTickDrawStrategy.rangeTickLengthPx"),
    rangeShadeHeightPx$1: dart.privateName(range_tick_draw_strategy, "RangeTickDrawStrategy.rangeShadeHeightPx"),
    rangeShadeOffsetFromAxisPx$1: dart.privateName(range_tick_draw_strategy, "RangeTickDrawStrategy.rangeShadeOffsetFromAxisPx"),
    rangeTickOffsetPx$1: dart.privateName(range_tick_draw_strategy, "RangeTickDrawStrategy.rangeTickOffsetPx"),
    __RangeTickDrawStrategy_rangeShadeStyle: dart.privateName(range_tick_draw_strategy, "_#RangeTickDrawStrategy#rangeShadeStyle"),
    __RangeTickDrawStrategy_rangeLabelStyle: dart.privateName(range_tick_draw_strategy, "_#RangeTickDrawStrategy#rangeLabelStyle"),
    $fold: dartx.fold,
    tickLength: dart.privateName(small_tick_draw_strategy, "SmallTickDrawStrategy.tickLength"),
    lineStyle$1: dart.privateName(small_tick_draw_strategy, "SmallTickDrawStrategy.lineStyle"),
    chartContext: dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.chartContext"),
    graphicsFactory$9: dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.graphicsFactory"),
    axisLineStyle$1: dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.axisLineStyle"),
    labelStyle$1: dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelStyle"),
    tickLabelJustification: dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.tickLabelJustification"),
    minimumPaddingBetweenLabelsPx$1: dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.minimumPaddingBetweenLabelsPx"),
    _defaultTickLabelAnchor: dart.privateName(base_tick_draw_strategy, "_defaultTickLabelAnchor"),
    _rotateOnCollision: dart.privateName(base_tick_draw_strategy, "_rotateOnCollision"),
    _labelDefaultOffsetFromAxisPx: dart.privateName(base_tick_draw_strategy, "_labelDefaultOffsetFromAxisPx"),
    _labelDefaultOffsetFromTickPx: dart.privateName(base_tick_draw_strategy, "_labelDefaultOffsetFromTickPx"),
    _labelDefaultRotation: dart.privateName(base_tick_draw_strategy, "_labelDefaultRotation"),
    _labelCollisionOffsetFromAxisPx: dart.privateName(base_tick_draw_strategy, "_labelCollisionOffsetFromAxisPx"),
    _labelCollisionOffsetFromTickPx: dart.privateName(base_tick_draw_strategy, "_labelCollisionOffsetFromTickPx"),
    _labelCollisionRotation: dart.privateName(base_tick_draw_strategy, "_labelCollisionRotation"),
    _normalizeHorizontalAnchor: dart.privateName(base_tick_draw_strategy, "_normalizeHorizontalAnchor"),
    $bottomLeft: dartx.bottomLeft,
    $topRight: dartx.topRight,
    _name$19: dart.privateName(base_tick_draw_strategy, "_name"),
    $split: dartx.split,
    $trim: dartx.trim,
    overDrawOuterPx: dart.privateName(bar_target_line_renderer_config, "BarTargetLineRendererConfig.overDrawOuterPx"),
    overDrawPx: dart.privateName(bar_target_line_renderer_config, "BarTargetLineRendererConfig.overDrawPx"),
    roundEndCaps$1: dart.privateName(bar_target_line_renderer_config, "BarTargetLineRendererConfig.roundEndCaps"),
    _name$20: dart.privateName(base_bar_renderer_config, "_name"),
    customRendererId$4: dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.customRendererId"),
    symbolRenderer$7: dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.symbolRenderer"),
    dashPattern$3: dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.dashPattern"),
    groupingType: dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.groupingType"),
    layoutPaintOrder$7: dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.layoutPaintOrder"),
    minBarLengthPx: dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.minBarLengthPx"),
    maxBarWidthPx: dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.maxBarWidthPx"),
    fillPattern$1: dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.fillPattern"),
    stackedBarPaddingPx: dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.stackedBarPaddingPx"),
    strokeWidthPx$10: dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.strokeWidthPx"),
    weightPattern: dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.weightPattern"),
    rendererAttributes$4: dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.rendererAttributes"),
    _barGroupInnerPadding: dart.privateName(bar_target_line_renderer, "_barGroupInnerPadding"),
    _color: dart.privateName(bar_target_line_renderer, "_color"),
    _getTargetLinePoints: dart.privateName(bar_target_line_renderer, "_getTargetLinePoints"),
    $skip: dartx.skip,
    config$6: dart.privateName(base_bar_renderer, "BaseBarRenderer.config"),
    _lastVertical: dart.privateName(base_bar_renderer, "_lastVertical"),
    _barStackMap: dart.privateName(base_bar_renderer, "_barStackMap"),
    _currentKeys$6: dart.privateName(base_bar_renderer, "_currentKeys"),
    _currentGroupsStackKeys: dart.privateName(base_bar_renderer, "_currentGroupsStackKeys"),
    _prevDomainAxis: dart.privateName(base_bar_renderer, "_prevDomainAxis"),
    _calculateBarWeights: dart.privateName(base_bar_renderer, "_calculateBarWeights"),
    $getRange: dartx.getRange,
    _getVerticalDetailsForDomainValue: dart.privateName(base_bar_renderer, "_getVerticalDetailsForDomainValue"),
    _getHorizontalDetailsForDomainValue: dart.privateName(base_bar_renderer, "_getHorizontalDetailsForDomainValue"),
    _getSegmentsForDomainValue: dart.privateName(base_bar_renderer, "_getSegmentsForDomainValue"),
    _getDistance: dart.privateName(base_bar_renderer, "_getDistance"),
    ___BarTargetLineRendererElement_points: dart.privateName(bar_target_line_renderer, "_#_BarTargetLineRendererElement#points"),
    barStackIndex: dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.barStackIndex"),
    color$5: dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.color"),
    cumulativeTotal: dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.cumulativeTotal"),
    dashPattern$4: dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.dashPattern"),
    fillColor$3: dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.fillColor"),
    fillPattern$2: dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.fillPattern"),
    measureAxisPosition$1: dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.measureAxisPosition"),
    measureOffset: dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.measureOffset"),
    measureOffsetPlusMeasure: dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.measureOffsetPlusMeasure"),
    strokeWidthPx$11: dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.strokeWidthPx"),
    measureIsNull: dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.measureIsNull"),
    measureIsNegative: dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.measureIsNegative"),
    key$3: dart.privateName(base_bar_renderer_element, "BaseAnimatedBar.key"),
    datum$3: dart.privateName(base_bar_renderer_element, "BaseAnimatedBar.datum"),
    series$5: dart.privateName(base_bar_renderer_element, "BaseAnimatedBar.series"),
    domainValue: dart.privateName(base_bar_renderer_element, "BaseAnimatedBar.domainValue"),
    animatingOut$2: dart.privateName(base_bar_renderer_element, "BaseAnimatedBar.animatingOut"),
    _previousBar: dart.privateName(base_bar_renderer_element, "_previousBar"),
    _targetBar: dart.privateName(base_bar_renderer_element, "_targetBar"),
    _currentBar: dart.privateName(base_bar_renderer_element, "_currentBar"),
    _barLaneStackMap: dart.privateName(bar_lane_renderer, "_barLaneStackMap"),
    _allMeasuresForDomainNullMap: dart.privateName(bar_lane_renderer, "_allMeasuresForDomainNullMap")
  };
  var S$1 = {
    _getMaxMeasureValue: dart.privateName(bar_lane_renderer, "_getMaxMeasureValue"),
    barRendererDecorator: dart.privateName(bar_renderer, "BarRenderer.barRendererDecorator"),
    _barGroupInnerPadding$1: dart.privateName(bar_renderer, "_barGroupInnerPadding"),
    _stackedBarPaddingPx: dart.privateName(bar_renderer, "_stackedBarPaddingPx"),
    _getBarBounds: dart.privateName(bar_renderer, "_getBarBounds"),
    _getBarStackBounds: dart.privateName(bar_renderer, "_getBarStackBounds"),
    series$6: dart.privateName(bar_renderer, "BarRendererElement.series"),
    bounds$1: dart.privateName(bar_renderer, "BarRendererElement.bounds"),
    roundPx: dart.privateName(bar_renderer, "BarRendererElement.roundPx"),
    index$3: dart.privateName(bar_renderer, "BarRendererElement.index"),
    _datum: dart.privateName(bar_renderer, "_datum"),
    backgroundBarColor: dart.privateName(bar_lane_renderer_config, "BarLaneRendererConfig.backgroundBarColor"),
    emptyLaneLabel: dart.privateName(bar_lane_renderer_config, "BarLaneRendererConfig.emptyLaneLabel"),
    mergeEmptyLanes: dart.privateName(bar_lane_renderer_config, "BarLaneRendererConfig.mergeEmptyLanes"),
    cornerStrategy: dart.privateName(bar_renderer_config, "BarRendererConfig.cornerStrategy"),
    barRendererDecorator$1: dart.privateName(bar_renderer_config, "BarRendererConfig.barRendererDecorator"),
    ConstCornerStrategy_radius: dart.privateName(bar_renderer_config, "ConstCornerStrategy.radius"),
    insideLabelStyleSpec$1: dart.privateName(bar_label_decorator, "BarLabelDecorator.insideLabelStyleSpec"),
    outsideLabelStyleSpec$1: dart.privateName(bar_label_decorator, "BarLabelDecorator.outsideLabelStyleSpec"),
    labelPosition$2: dart.privateName(bar_label_decorator, "BarLabelDecorator.labelPosition"),
    labelPlacement: dart.privateName(bar_label_decorator, "BarLabelDecorator.labelPlacement"),
    labelAnchor$2: dart.privateName(bar_label_decorator, "BarLabelDecorator.labelAnchor"),
    labelPadding$3: dart.privateName(bar_label_decorator, "BarLabelDecorator.labelPadding"),
    _name$21: dart.privateName(bar_label_decorator, "_name"),
    _decorateVerticalBars: dart.privateName(bar_label_decorator, "_decorateVerticalBars"),
    _decorateHorizontalBars: dart.privateName(bar_label_decorator, "_decorateHorizontalBars"),
    _getTextStyle$3: dart.privateName(bar_label_decorator, "_getTextStyle"),
    _getDatumStyle$1: dart.privateName(bar_label_decorator, "_getDatumStyle"),
    _getTotalLabelHeight: dart.privateName(bar_label_decorator, "_getTotalLabelHeight"),
    _resolveLabelAnchor: dart.privateName(bar_label_decorator, "_resolveLabelAnchor"),
    strokeWidthPx$12: dart.privateName(bar_error_decorator, "BarErrorDecorator.strokeWidthPx"),
    endpointLengthPx: dart.privateName(bar_error_decorator, "BarErrorDecorator.endpointLengthPx"),
    outlineWidthPx: dart.privateName(bar_error_decorator, "BarErrorDecorator.outlineWidthPx"),
    strokeColor$3: dart.privateName(bar_error_decorator, "BarErrorDecorator.strokeColor"),
    outlineColor: dart.privateName(bar_error_decorator, "BarErrorDecorator.outlineColor"),
    Color__lighter: dart.privateName(color$, "Color._lighter"),
    Color__darker: dart.privateName(color$, "Color._darker"),
    Color_a: dart.privateName(color$, "Color.a"),
    Color_b: dart.privateName(color$, "Color.b"),
    Color_g: dart.privateName(color$, "Color.g"),
    Color_r: dart.privateName(color$, "Color.r"),
    tickSpec$1: dart.privateName(static_tick_provider, "StaticTickProvider.tickSpec"),
    start: dart.privateName(date_time_extents, "DateTimeExtents.start"),
    end: dart.privateName(date_time_extents, "DateTimeExtents.end"),
    dateTimeFactory$2: dart.privateName(date_time_scale, "DateTimeScale.dateTimeFactory"),
    _linearScale: dart.privateName(date_time_scale, "_linearScale"),
    _getStartValue: dart.privateName(end_points_tick_provider, "_getStartValue"),
    _getEndValue: dart.privateName(end_points_tick_provider, "_getEndValue"),
    tickSpecs$3: dart.privateName(numeric_axis_spec, "StaticNumericTickProviderSpec.tickSpecs"),
    formatter$1: dart.privateName(numeric_axis_spec, "BasicNumericTickFormatterSpec.formatter"),
    numberFormat: dart.privateName(numeric_axis_spec, "BasicNumericTickFormatterSpec.numberFormat"),
    axisLineStyle$2: dart.privateName(none_draw_strategy, "NoneRenderSpec.axisLineStyle"),
    axisLineStyle$3: dart.privateName(none_draw_strategy, "NoneDrawStrategy.axisLineStyle"),
    noneTextStyle: dart.privateName(none_draw_strategy, "NoneDrawStrategy.noneTextStyle"),
    tickLength$1: dart.privateName(gridline_draw_strategy, "GridlineTickDrawStrategy.tickLength"),
    lineStyle$2: dart.privateName(gridline_draw_strategy, "GridlineTickDrawStrategy.lineStyle"),
    _visitIndex: dart.privateName(base_bar_renderer, "_visitIndex"),
    _current$1: dart.privateName(base_bar_renderer, "_current"),
    _list: dart.privateName(base_bar_renderer, "_list"),
    radius$2: dart.privateName(bar_renderer_config, "ConstCornerStrategy.radius"),
    _stepSizeConfig: dart.privateName(simple_ordinal_scale, "_stepSizeConfig"),
    _range: dart.privateName(simple_ordinal_scale, "_range"),
    _viewportScale: dart.privateName(simple_ordinal_scale, "_viewportScale"),
    _viewportTranslatePx: dart.privateName(simple_ordinal_scale, "_viewportTranslatePx"),
    _rangeBandConfig: dart.privateName(simple_ordinal_scale, "_rangeBandConfig"),
    _scaleChanged: dart.privateName(simple_ordinal_scale, "_scaleChanged"),
    __SimpleOrdinalScale__cachedStepSizePixels: dart.privateName(simple_ordinal_scale, "_#SimpleOrdinalScale#_cachedStepSizePixels"),
    __SimpleOrdinalScale__cachedRangeBandShift: dart.privateName(simple_ordinal_scale, "_#SimpleOrdinalScale#_cachedRangeBandShift"),
    __SimpleOrdinalScale__cachedRangeBandSize: dart.privateName(simple_ordinal_scale, "_#SimpleOrdinalScale#_cachedRangeBandSize"),
    _viewportDataSize: dart.privateName(simple_ordinal_scale, "_viewportDataSize"),
    _viewportStartingDomain: dart.privateName(simple_ordinal_scale, "_viewportStartingDomain"),
    _domain: dart.privateName(simple_ordinal_scale, "_domain"),
    _cachedStepSizePixels: dart.privateName(simple_ordinal_scale, "_cachedStepSizePixels"),
    _cachedRangeBandShift: dart.privateName(simple_ordinal_scale, "_cachedRangeBandShift"),
    _cachedRangeBandSize: dart.privateName(simple_ordinal_scale, "_cachedRangeBandSize"),
    _isVertical: dart.privateName(simple_ordinal_scale, "_isVertical"),
    _updateScale: dart.privateName(simple_ordinal_scale, "_updateScale"),
    _recalculateScale: dart.privateName(simple_ordinal_scale, "_recalculateScale"),
    _updateViewport: dart.privateName(simple_ordinal_scale, "_updateViewport"),
    $truncate: dartx.truncate,
    _updateCachedFields: dart.privateName(simple_ordinal_scale, "_updateCachedFields"),
    _name$22: dart.privateName(scale$, "_name"),
    _range$1: dart.privateName(ordinal_extents, "_range"),
    _index: dart.privateName(ordinal_scale_domain_info, "_index"),
    _domainsToOrder: dart.privateName(ordinal_scale_domain_info, "_domainsToOrder"),
    _domainList: dart.privateName(ordinal_scale_domain_info, "_domainList"),
    range: dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.range"),
    keepViewportWithinData: dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.keepViewportWithinData"),
    scalingFactor: dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.scalingFactor"),
    translatePx: dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.translatePx"),
    _domainExtent: dart.privateName(linear_scale_viewport, "_domainExtent"),
    _manualDomainExtent: dart.privateName(linear_scale_viewport, "_manualDomainExtent"),
    rangeBandPixels: dart.privateName(linear_scale_function, "LinearScaleFunction.rangeBandPixels"),
    domainTranslate: dart.privateName(linear_scale_function, "LinearScaleFunction.domainTranslate"),
    scalingFactor$1: dart.privateName(linear_scale_function, "LinearScaleFunction.scalingFactor"),
    rangeTranslate: dart.privateName(linear_scale_function, "LinearScaleFunction.rangeTranslate"),
    stepSizePixels: dart.privateName(linear_scale_function, "LinearScaleFunction.stepSizePixels"),
    _updateStepSizeAndScaleFactor: dart.privateName(linear_scale_function, "_updateStepSizeAndScaleFactor"),
    _calculateRangeBandSize: dart.privateName(linear_scale_function, "_calculateRangeBandSize"),
    $isFinite: dartx.isFinite,
    domainOverride: dart.privateName(linear_scale_domain_info, "LinearScaleDomainInfo.domainOverride"),
    _dataDomainStart: dart.privateName(linear_scale_domain_info, "_dataDomainStart"),
    _dataDomainEnd: dart.privateName(linear_scale_domain_info, "_dataDomainEnd"),
    _previouslyAddedDomain: dart.privateName(linear_scale_domain_info, "_previouslyAddedDomain"),
    _minimumDetectedDomainStep: dart.privateName(linear_scale_domain_info, "_minimumDetectedDomainStep"),
    min: dart.privateName(numeric_extents, "NumericExtents.min"),
    max: dart.privateName(numeric_extents, "NumericExtents.max"),
    _containsValue: dart.privateName(numeric_extents, "_containsValue"),
    rangeBandConfig: dart.privateName(linear_scale, "LinearScale.rangeBandConfig"),
    stepSizeConfig: dart.privateName(linear_scale, "LinearScale.stepSizeConfig"),
    _scaleFunction: dart.privateName(linear_scale, "_scaleFunction"),
    RangeBandConfig_size: dart.privateName(scale$, "RangeBandConfig.size"),
    RangeBandConfig_type: dart.privateName(scale$, "RangeBandConfig.type"),
    StepSizeConfig_size: dart.privateName(scale$, "StepSizeConfig.size"),
    StepSizeConfig_type: dart.privateName(scale$, "StepSizeConfig.type"),
    _scaleReady: dart.privateName(linear_scale, "_scaleReady"),
    _domainInfo: dart.privateName(linear_scale, "_domainInfo"),
    _viewportSettings: dart.privateName(linear_scale, "_viewportSettings"),
    _configureScale: dart.privateName(linear_scale, "_configureScale"),
    start$1: dart.privateName(tick_provider, "TickHint.start"),
    end$1: dart.privateName(tick_provider, "TickHint.end"),
    tickCount: dart.privateName(tick_provider, "TickHint.tickCount"),
    formatter$2: dart.privateName(tick_formatter, "NumericTickFormatter.formatter"),
    series$7: dart.privateName(series_datum, "SeriesDatum.series"),
    datum$4: dart.privateName(series_datum, "SeriesDatum.datum"),
    _index$1: dart.privateName(series_datum, "_index"),
    seriesId: dart.privateName(series_datum, "SeriesDatumConfig.seriesId"),
    domainValue$1: dart.privateName(series_datum, "SeriesDatumConfig.domainValue"),
    _selectedDatum: dart.privateName(selection_model, "_selectedDatum"),
    _selectedSeries: dart.privateName(selection_model, "_selectedSeries"),
    $toSet: dartx.toSet,
    _changedListeners: dart.privateName(selection_model, "_changedListeners"),
    _updatedListeners: dart.privateName(selection_model, "_updatedListeners"),
    _lockChangedListeners: dart.privateName(selection_model, "_lockChangedListeners"),
    _locked: dart.privateName(selection_model, "_locked"),
    id$2: dart.privateName(processed_series, "MutableSeries.id"),
    displayName: dart.privateName(processed_series, "MutableSeries.displayName"),
    overlaySeries$1: dart.privateName(processed_series, "MutableSeries.overlaySeries"),
    seriesCategory: dart.privateName(processed_series, "MutableSeries.seriesCategory"),
    seriesColor: dart.privateName(processed_series, "MutableSeries.seriesColor"),
    data$1: dart.privateName(processed_series, "MutableSeries.data"),
    keyFn: dart.privateName(processed_series, "MutableSeries.keyFn"),
    domainFn$1: dart.privateName(processed_series, "MutableSeries.domainFn"),
    domainFormatterFn: dart.privateName(processed_series, "MutableSeries.domainFormatterFn"),
    domainLowerBoundFn: dart.privateName(processed_series, "MutableSeries.domainLowerBoundFn"),
    domainUpperBoundFn: dart.privateName(processed_series, "MutableSeries.domainUpperBoundFn"),
    measureFn$1: dart.privateName(processed_series, "MutableSeries.measureFn"),
    measureFormatterFn: dart.privateName(processed_series, "MutableSeries.measureFormatterFn"),
    measureLowerBoundFn: dart.privateName(processed_series, "MutableSeries.measureLowerBoundFn"),
    measureUpperBoundFn: dart.privateName(processed_series, "MutableSeries.measureUpperBoundFn"),
    measureOffsetFn: dart.privateName(processed_series, "MutableSeries.measureOffsetFn"),
    rawMeasureFn: dart.privateName(processed_series, "MutableSeries.rawMeasureFn"),
    rawMeasureLowerBoundFn: dart.privateName(processed_series, "MutableSeries.rawMeasureLowerBoundFn"),
    rawMeasureUpperBoundFn: dart.privateName(processed_series, "MutableSeries.rawMeasureUpperBoundFn"),
    areaColorFn: dart.privateName(processed_series, "MutableSeries.areaColorFn"),
    colorFn$1: dart.privateName(processed_series, "MutableSeries.colorFn"),
    dashPatternFn: dart.privateName(processed_series, "MutableSeries.dashPatternFn"),
    fillColorFn$1: dart.privateName(processed_series, "MutableSeries.fillColorFn"),
    fillPatternFn$1: dart.privateName(processed_series, "MutableSeries.fillPatternFn"),
    patternColorFn$1: dart.privateName(processed_series, "MutableSeries.patternColorFn"),
    radiusPxFn: dart.privateName(processed_series, "MutableSeries.radiusPxFn"),
    strokeWidthPxFn$1: dart.privateName(processed_series, "MutableSeries.strokeWidthPxFn"),
    labelAccessorFn: dart.privateName(processed_series, "MutableSeries.labelAccessorFn"),
    insideLabelStyleAccessorFn: dart.privateName(processed_series, "MutableSeries.insideLabelStyleAccessorFn"),
    outsideLabelStyleAccessorFn: dart.privateName(processed_series, "MutableSeries.outsideLabelStyleAccessorFn"),
    measureAxis: dart.privateName(processed_series, "MutableSeries.measureAxis"),
    domainAxis: dart.privateName(processed_series, "MutableSeries.domainAxis"),
    __MutableSeries_seriesIndex: dart.privateName(processed_series, "_#MutableSeries#seriesIndex"),
    __MutableSeries_seriesMeasureTotal: dart.privateName(processed_series, "_#MutableSeries#seriesMeasureTotal"),
    _attrs: dart.privateName(processed_series, "_attrs"),
    keyFn$1: dart.privateName(processed_series, "ImmutableSeries.keyFn"),
    insideLabelStyleAccessorFn$1: dart.privateName(processed_series, "ImmutableSeries.insideLabelStyleAccessorFn"),
    outsideLabelStyleAccessorFn$1: dart.privateName(processed_series, "ImmutableSeries.outsideLabelStyleAccessorFn"),
    isSolid: dart.privateName(symbol_renderer, "SymbolRenderer.isSolid"),
    radius$3: dart.privateName(symbol_renderer, "RoundedRectSymbolRenderer.radius"),
    strokeWidth: dart.privateName(symbol_renderer, "LineSymbolRenderer.strokeWidth"),
    _dashPattern: dart.privateName(symbol_renderer, "_dashPattern"),
    datum$5: dart.privateName(datum_details, "DatumDetails.datum"),
    index$4: dart.privateName(datum_details, "DatumDetails.index"),
    domain$5: dart.privateName(datum_details, "DatumDetails.domain"),
    domainLowerBound: dart.privateName(datum_details, "DatumDetails.domainLowerBound"),
    domainUpperBound: dart.privateName(datum_details, "DatumDetails.domainUpperBound"),
    measure$1: dart.privateName(datum_details, "DatumDetails.measure"),
    measureLowerBound: dart.privateName(datum_details, "DatumDetails.measureLowerBound"),
    measureUpperBound: dart.privateName(datum_details, "DatumDetails.measureUpperBound"),
    measureOffset$1: dart.privateName(datum_details, "DatumDetails.measureOffset"),
    rawMeasure: dart.privateName(datum_details, "DatumDetails.rawMeasure"),
    rawMeasureLowerBound: dart.privateName(datum_details, "DatumDetails.rawMeasureLowerBound"),
    rawMeasureUpperBound: dart.privateName(datum_details, "DatumDetails.rawMeasureUpperBound"),
    series$8: dart.privateName(datum_details, "DatumDetails.series"),
    color$6: dart.privateName(datum_details, "DatumDetails.color"),
    fillColor$4: dart.privateName(datum_details, "DatumDetails.fillColor"),
    fillPattern$3: dart.privateName(datum_details, "DatumDetails.fillPattern"),
    areaColor: dart.privateName(datum_details, "DatumDetails.areaColor"),
    dashPattern$5: dart.privateName(datum_details, "DatumDetails.dashPattern"),
    chartPosition: dart.privateName(datum_details, "DatumDetails.chartPosition"),
    chartPositionLower: dart.privateName(datum_details, "DatumDetails.chartPositionLower"),
    chartPositionUpper: dart.privateName(datum_details, "DatumDetails.chartPositionUpper"),
    bounds$2: dart.privateName(datum_details, "DatumDetails.bounds"),
    domainDistance: dart.privateName(datum_details, "DatumDetails.domainDistance"),
    measureDistance: dart.privateName(datum_details, "DatumDetails.measureDistance"),
    relativeDistance: dart.privateName(datum_details, "DatumDetails.relativeDistance"),
    radiusPx$3: dart.privateName(datum_details, "DatumDetails.radiusPx"),
    symbolRenderer$8: dart.privateName(datum_details, "DatumDetails.symbolRenderer"),
    strokeWidthPx$13: dart.privateName(datum_details, "DatumDetails.strokeWidthPx"),
    domainFormatter: dart.privateName(datum_details, "DatumDetails.domainFormatter"),
    measureFormatter$2: dart.privateName(datum_details, "DatumDetails.measureFormatter"),
    _sizes: dart.privateName(layout_margin_strategy, "_sizes"),
    _total: dart.privateName(layout_margin_strategy, "_total"),
    config$7: dart.privateName(layout_manager_impl, "LayoutManagerImpl.config"),
    _views: dart.privateName(layout_manager_impl, "_views"),
    __LayoutManagerImpl__paintOrderedViews: dart.privateName(layout_manager_impl, "_#LayoutManagerImpl#_paintOrderedViews"),
    __LayoutManagerImpl__positionOrderedViews: dart.privateName(layout_manager_impl, "_#LayoutManagerImpl#_positionOrderedViews"),
    __LayoutManagerImpl__measurements: dart.privateName(layout_manager_impl, "_#LayoutManagerImpl#_measurements"),
    __LayoutManagerImpl__drawAreaBounds: dart.privateName(layout_manager_impl, "_#LayoutManagerImpl#_drawAreaBounds"),
    _drawAreaBoundsOutdated: dart.privateName(layout_manager_impl, "_drawAreaBoundsOutdated"),
    _viewsNeedPaintSort: dart.privateName(layout_manager_impl, "_viewsNeedPaintSort"),
    _viewsNeedPositionSort: dart.privateName(layout_manager_impl, "_viewsNeedPositionSort"),
    _paintOrderedViews: dart.privateName(layout_manager_impl, "_paintOrderedViews"),
    _positionOrderedViews: dart.privateName(layout_manager_impl, "_positionOrderedViews"),
    _measurements: dart.privateName(layout_manager_impl, "_measurements"),
    _drawAreaBounds$7: dart.privateName(layout_manager_impl, "_drawAreaBounds"),
    $boundingBox: dartx.boundingBox,
    _viewsForPositions: dart.privateName(layout_manager_impl, "_viewsForPositions"),
    _measure: dart.privateName(layout_manager_impl, "_measure"),
    onData: dart.privateName(base_chart, "LifecycleListener.onData"),
    onPreprocess: dart.privateName(base_chart, "LifecycleListener.onPreprocess"),
    onPostprocess: dart.privateName(base_chart, "LifecycleListener.onPostprocess"),
    onAxisConfigured: dart.privateName(base_chart, "LifecycleListener.onAxisConfigured"),
    onPostrender: dart.privateName(base_chart, "LifecycleListener.onPostrender"),
    onAnimationComplete: dart.privateName(base_chart, "LifecycleListener.onAnimationComplete"),
    _name$23: dart.privateName(layout_view, "_name"),
    topPx$1: dart.privateName(layout_view, "ViewMargin.topPx"),
    bottomPx$1: dart.privateName(layout_view, "ViewMargin.bottomPx"),
    rightPx$1: dart.privateName(layout_view, "ViewMargin.rightPx"),
    leftPx$1: dart.privateName(layout_view, "ViewMargin.leftPx"),
    preferredWidth: dart.privateName(layout_view, "ViewMeasuredSizes.preferredWidth"),
    preferredHeight: dart.privateName(layout_view, "ViewMeasuredSizes.preferredHeight"),
    minWidth: dart.privateName(layout_view, "ViewMeasuredSizes.minWidth"),
    minHeight: dart.privateName(layout_view, "ViewMeasuredSizes.minHeight"),
    _style$1: dart.privateName(style_factory, "_style"),
    start$2: dart.privateName(scale$, "ScaleOutputExtent.start"),
    end$2: dart.privateName(scale$, "ScaleOutputExtent.end"),
    type: dart.privateName(scale$, "RangeBandConfig.type"),
    size: dart.privateName(scale$, "RangeBandConfig.size"),
    type$1: dart.privateName(scale$, "StepSizeConfig.type"),
    size$1: dart.privateName(scale$, "StepSizeConfig.size"),
    fontFamily: dart.privateName(axis_spec, "TextStyleSpec.fontFamily"),
    fontSize: dart.privateName(axis_spec, "TextStyleSpec.fontSize"),
    lineHeight: dart.privateName(axis_spec, "TextStyleSpec.lineHeight"),
    color$7: dart.privateName(axis_spec, "TextStyleSpec.color"),
    fontWeight: dart.privateName(axis_spec, "TextStyleSpec.fontWeight"),
    color$8: dart.privateName(axis_spec, "LineStyleSpec.color"),
    dashPattern$6: dart.privateName(axis_spec, "LineStyleSpec.dashPattern"),
    thickness$1: dart.privateName(axis_spec, "LineStyleSpec.thickness"),
    id$3: dart.privateName(series$, "Series.id"),
    displayName$1: dart.privateName(series$, "Series.displayName"),
    overlaySeries$2: dart.privateName(series$, "Series.overlaySeries"),
    seriesCategory$1: dart.privateName(series$, "Series.seriesCategory"),
    seriesColor$1: dart.privateName(series$, "Series.seriesColor"),
    data$2: dart.privateName(series$, "Series.data"),
    keyFn$2: dart.privateName(series$, "Series.keyFn"),
    domainFn$2: dart.privateName(series$, "Series.domainFn"),
    domainFormatterFn$1: dart.privateName(series$, "Series.domainFormatterFn"),
    domainLowerBoundFn$1: dart.privateName(series$, "Series.domainLowerBoundFn"),
    domainUpperBoundFn$1: dart.privateName(series$, "Series.domainUpperBoundFn"),
    measureFn$2: dart.privateName(series$, "Series.measureFn"),
    measureFormatterFn$1: dart.privateName(series$, "Series.measureFormatterFn"),
    measureLowerBoundFn$1: dart.privateName(series$, "Series.measureLowerBoundFn"),
    measureUpperBoundFn$1: dart.privateName(series$, "Series.measureUpperBoundFn"),
    measureOffsetFn$1: dart.privateName(series$, "Series.measureOffsetFn"),
    areaColorFn$1: dart.privateName(series$, "Series.areaColorFn"),
    colorFn$2: dart.privateName(series$, "Series.colorFn"),
    dashPatternFn$1: dart.privateName(series$, "Series.dashPatternFn"),
    fillColorFn$2: dart.privateName(series$, "Series.fillColorFn"),
    patternColorFn$2: dart.privateName(series$, "Series.patternColorFn"),
    fillPatternFn$2: dart.privateName(series$, "Series.fillPatternFn"),
    radiusPxFn$1: dart.privateName(series$, "Series.radiusPxFn"),
    strokeWidthPxFn$2: dart.privateName(series$, "Series.strokeWidthPxFn"),
    labelAccessorFn$1: dart.privateName(series$, "Series.labelAccessorFn"),
    insideLabelStyleAccessorFn$2: dart.privateName(series$, "Series.insideLabelStyleAccessorFn"),
    outsideLabelStyleAccessorFn$2: dart.privateName(series$, "Series.outsideLabelStyleAccessorFn"),
    attributes$1: dart.privateName(series$, "Series.attributes"),
    startingDomain: dart.privateName(axis$, "OrdinalViewport.startingDomain"),
    dataSize: dart.privateName(axis$, "OrdinalViewport.dataSize"),
    _axis: dart.privateName(axis$, "_axis")
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 300000
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: layout_view.ViewMargin.prototype,
        [S$.ViewMargin_leftPx]: 4,
        [S$.ViewMargin_rightPx]: 4,
        [S$.ViewMargin_bottomPx]: 4,
        [S$.ViewMargin_topPx]: 26
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: treemap_renderer_config.TreeMapTileType.prototype,
        [S$._name]: "TreeMapTileType.squarified",
        index: 3
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: treemap_renderer_config.TreeMapTileType.prototype,
        [S$._name]: "TreeMapTileType.dice",
        index: 0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: treemap_renderer_config.TreeMapTileType.prototype,
        [S$._name]: "TreeMapTileType.slice",
        index: 1
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: treemap_renderer_config.TreeMapTileType.prototype,
        [S$._name]: "TreeMapTileType.sliceDice",
        index: 2
      });
    },
    get C6() {
      return C[6] = dart.constList([C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[2] || CT.C2], treemap_renderer_config.TreeMapTileType);
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: T$.AttributeKeyOfIterableOfTreeMapRendererElementOfObject().prototype,
        [S$.TypedKey_uniqueKey]: "TreeMapRenderer.elements"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: date_time_factory.LocalDateTimeFactory.prototype
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: arc_label_decorator.ArcLabelPosition.prototype,
        [S$._name$1]: "ArcLabelPosition.inside",
        index: 2
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: arc_label_decorator.ArcLabelPosition.prototype,
        [S$._name$1]: "ArcLabelPosition.auto",
        index: 0
      });
    },
    get C11() {
      return C[11] = dart.constList([], T$.PointRendererDecoratorOfNever());
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: arc_label_decorator.ArcLabelPosition.prototype,
        [S$._name$1]: "ArcLabelPosition.outside",
        index: 1
      });
    },
    get C13() {
      return C[13] = dart.constList([C[10] || CT.C10, C[12] || CT.C12, C[9] || CT.C9], arc_label_decorator.ArcLabelPosition);
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: T$.AttributeKeyOfListOfPointRendererElementOfObject().prototype,
        [S$.TypedKey_uniqueKey]: "PointRenderer.elements"
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: T$.AttributeKeyOfintNToString().prototype,
        [S$.TypedKey_uniqueKey]: "PointRenderer.symbolRendererFn"
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: T$.AttributeKeyOfString().prototype,
        [S$.TypedKey_uniqueKey]: "PointRenderer.symbolRendererId"
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: T$.AttributeKeyOfdouble().prototype,
        [S$.TypedKey_uniqueKey]: "SymbolAnnotationRenderer.boundsLineRadiusPx"
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: T$.AttributeKeyOfintNTodoubleN().prototype,
        [S$.TypedKey_uniqueKey]: "SymbolAnnotationRenderer.boundsLineRadiusPxFn"
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: T$.AttributeKeyOfListOf_LineRendererElementOfObject().prototype,
        [S$.TypedKey_uniqueKey]: "LineRenderer.styleSegments"
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: T$.AttributeKeyOfint().prototype,
        [S$.TypedKey_uniqueKey]: "LineRenderer.lineStackIndex"
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: panning_tick_provider.PanningTickProviderMode.prototype,
        [S$._name$2]: "PanningTickProviderMode.useCachedTicks",
        index: 0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: panning_tick_provider.PanningTickProviderMode.prototype,
        [S$._name$2]: "PanningTickProviderMode.stepSizeLocked",
        index: 1
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: panning_tick_provider.PanningTickProviderMode.prototype,
        [S$._name$2]: "PanningTickProviderMode.passThrough",
        index: 2
      });
    },
    get C24() {
      return C[24] = dart.constList([C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23], panning_tick_provider.PanningTickProviderMode);
    },
    get C25() {
      return C[25] = dart.constList([], T$.ArcRendererDecoratorOfNever());
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: sunburst_arc_renderer_config.SunburstColorStrategy.prototype,
        [S$._name$3]: "SunburstColorStrategy.newShadePerLevel",
        index: 1
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: sunburst_arc_renderer_config.SunburstColorStrategy.prototype,
        [S$._name$3]: "SunburstColorStrategy.newShadePerArc",
        index: 0
      });
    },
    get C28() {
      return C[28] = dart.constList([C[27] || CT.C27, C[26] || CT.C26], sunburst_arc_renderer_config.SunburstColorStrategy);
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: T$.AttributeKeyOfListOfArcRendererElementOfObject().prototype,
        [S$.TypedKey_uniqueKey]: "ArcRenderer.elements"
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: T$.AttributeKeyOfListOfSunburstArcRendererElementOfObject().prototype,
        [S$.TypedKey_uniqueKey]: "SunburstArcRenderer.elements"
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: selection_model.SelectionModelType.prototype,
        [S$._name$4]: "SelectionModelType.action",
        index: 1
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: selection_model.SelectionModelType.prototype,
        [S$._name$4]: "SelectionModelType.info",
        index: 0
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [S$._name$5]: "SelectionTrigger.tapAndDrag",
        index: 2
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [S$._name$5]: "SelectionTrigger.pressHold",
        index: 3
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [S$._name$5]: "SelectionTrigger.longPressHold",
        index: 4
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: slider.SliderHandlePosition.prototype,
        [S$._name$6]: "SliderHandlePosition.middle",
        index: 0
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: slider.SliderHandlePosition.prototype,
        [S$._name$6]: "SliderHandlePosition.top",
        index: 1
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: slider.SliderHandlePosition.prototype,
        [S$._name$6]: "SliderHandlePosition.manual",
        index: 2
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: T$.PointOfdouble().prototype,
        [S$.Point_y]: 0,
        [S$.Point_x]: 0
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: T$.RectangleOfint().prototype,
        [S$.Rectangle_height]: 20,
        [S$.Rectangle_width]: 10,
        [S$.Rectangle_top]: 0,
        [S$.Rectangle_left]: 0
      });
    },
    get C41() {
      return C[41] = dart.constList([C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38], slider.SliderHandlePosition);
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: slider.SliderListenerDragState.prototype,
        [S$._name$6]: "SliderListenerDragState.initial",
        index: 0
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: slider.SliderListenerDragState.prototype,
        [S$._name$6]: "SliderListenerDragState.drag",
        index: 1
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: slider.SliderListenerDragState.prototype,
        [S$._name$6]: "SliderListenerDragState.end",
        index: 2
      });
    },
    get C45() {
      return C[45] = dart.constList([C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44], slider.SliderListenerDragState);
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: select_nearest.SelectionMode.prototype,
        [S$._name$7]: "SelectionMode.expandToDomain",
        index: 0
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [S$._name$5]: "SelectionTrigger.hover",
        index: 0
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [S$._name$5]: "SelectionTrigger.tap",
        index: 1
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: select_nearest.SelectionMode.prototype,
        [S$._name$7]: "SelectionMode.selectOverlapping",
        index: 1
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: select_nearest.SelectionMode.prototype,
        [S$._name$7]: "SelectionMode.single",
        index: 2
      });
    },
    get C51() {
      return C[51] = dart.constList([C[46] || CT.C46, C[49] || CT.C49, C[50] || CT.C50], select_nearest.SelectionMode);
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: range_annotation.RangeAnnotationAxisType.prototype,
        [S$0._name$8]: "RangeAnnotationAxisType.domain",
        index: 0
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: range_annotation.RangeAnnotationAxisType.prototype,
        [S$0._name$8]: "RangeAnnotationAxisType.measure",
        index: 1
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: range_annotation.AnnotationLabelAnchor.prototype,
        [S$0._name$8]: "AnnotationLabelAnchor.end",
        index: 2
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: range_annotation.AnnotationLabelDirection.prototype,
        [S$0._name$8]: "AnnotationLabelDirection.auto",
        index: 0
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: range_annotation.AnnotationLabelPosition.prototype,
        [S$0._name$8]: "AnnotationLabelPosition.auto",
        index: 0
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: range_annotation.AnnotationLabelAnchor.prototype,
        [S$0._name$8]: "AnnotationLabelAnchor.start",
        index: 0
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: range_annotation.AnnotationLabelAnchor.prototype,
        [S$0._name$8]: "AnnotationLabelAnchor.middle",
        index: 1
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: range_annotation.AnnotationLabelPosition.prototype,
        [S$0._name$8]: "AnnotationLabelPosition.margin",
        index: 3
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: range_annotation._AnnotationLabelType.prototype,
        [S$0._name$8]: "_AnnotationLabelType.start",
        index: 0
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: range_annotation._AnnotationLabelType.prototype,
        [S$0._name$8]: "_AnnotationLabelType.end",
        index: 1
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: range_annotation._AnnotationLabelType.prototype,
        [S$0._name$8]: "_AnnotationLabelType.middle",
        index: 2
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: range_annotation.AnnotationLabelPosition.prototype,
        [S$0._name$8]: "AnnotationLabelPosition.outside",
        index: 1
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: range_annotation.AnnotationLabelPosition.prototype,
        [S$0._name$8]: "AnnotationLabelPosition.inside",
        index: 2
      });
    },
    get C65() {
      return C[65] = dart.constList([C[60] || CT.C60, C[61] || CT.C61, C[62] || CT.C62], range_annotation._AnnotationLabelType);
    },
    get C66() {
      return C[66] = dart.constList([C[52] || CT.C52, C[53] || CT.C53], range_annotation.RangeAnnotationAxisType);
    },
    get C67() {
      return C[67] = dart.constList([C[57] || CT.C57, C[58] || CT.C58, C[54] || CT.C54], range_annotation.AnnotationLabelAnchor);
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: range_annotation.AnnotationLabelDirection.prototype,
        [S$0._name$8]: "AnnotationLabelDirection.horizontal",
        index: 1
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: range_annotation.AnnotationLabelDirection.prototype,
        [S$0._name$8]: "AnnotationLabelDirection.vertical",
        index: 2
      });
    },
    get C70() {
      return C[70] = dart.constList([C[55] || CT.C55, C[68] || CT.C68, C[69] || CT.C69], range_annotation.AnnotationLabelDirection);
    },
    get C71() {
      return C[71] = dart.constList([C[56] || CT.C56, C[63] || CT.C63, C[64] || CT.C64, C[59] || CT.C59], range_annotation.AnnotationLabelPosition);
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: line_point_highlighter.LinePointHighlighterFollowLineType.prototype,
        [S$0._name$9]: "LinePointHighlighterFollowLineType.nearest",
        index: 0
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: line_point_highlighter.LinePointHighlighterFollowLineType.prototype,
        [S$0._name$9]: "LinePointHighlighterFollowLineType.none",
        index: 1
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: line_point_highlighter.LinePointHighlighterFollowLineType.prototype,
        [S$0._name$9]: "LinePointHighlighterFollowLineType.all",
        index: 2
      });
    },
    get C75() {
      return C[75] = dart.constList([C[72] || CT.C72, C[73] || CT.C73, C[74] || CT.C74], line_point_highlighter.LinePointHighlighterFollowLineType);
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: legend_entry_generator.LegendDefaultMeasure.prototype,
        [S$0._name$10]: "LegendDefaultMeasure.sum",
        index: 1
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: legend_entry_generator.LegendDefaultMeasure.prototype,
        [S$0._name$10]: "LegendDefaultMeasure.average",
        index: 2
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: legend_entry_generator.LegendDefaultMeasure.prototype,
        [S$0._name$10]: "LegendDefaultMeasure.firstValue",
        index: 3
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: legend_entry_generator.LegendDefaultMeasure.prototype,
        [S$0._name$10]: "LegendDefaultMeasure.lastValue",
        index: 4
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: legend_entry_generator.LegendDefaultMeasure.prototype,
        [S$0._name$10]: "LegendDefaultMeasure.none",
        index: 0
      });
    },
    get C81() {
      return C[81] = dart.constList([C[80] || CT.C80, C[76] || CT.C76, C[77] || CT.C77, C[78] || CT.C78, C[79] || CT.C79], legend_entry_generator.LegendDefaultMeasure);
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: legend.LegendTapHandling.prototype,
        [S$0._name$11]: "LegendTapHandling.none",
        index: 0
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: legend.LegendTapHandling.prototype,
        [S$0._name$11]: "LegendTapHandling.hide",
        index: 1
      });
    },
    get C84() {
      return C[84] = dart.constList([C[82] || CT.C82, C[83] || CT.C83], legend.LegendTapHandling);
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [S$0._name$12]: "BehaviorPosition.top",
        index: 0
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: text_element.MaxWidthStrategy.prototype,
        [S$0._name$13]: "MaxWidthStrategy.ellipsize",
        index: 1
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: chart_title.ChartTitleDirection.prototype,
        [S$0._name$14]: "ChartTitleDirection.auto",
        index: 0
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [S$0._name$12]: "OutsideJustification.middle",
        index: 3
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [S$0._name$12]: "BehaviorPosition.bottom",
        index: 1
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [S$0._name$12]: "BehaviorPosition.end",
        index: 3
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [S$0._name$12]: "BehaviorPosition.start",
        index: 2
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [S$0._name$12]: "BehaviorPosition.inside",
        index: 4
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [S$0._name$12]: "OutsideJustification.middleDrawArea",
        index: 2
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [S$0._name$12]: "OutsideJustification.end",
        index: 5
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [S$0._name$12]: "OutsideJustification.endDrawArea",
        index: 4
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [S$0._name$12]: "OutsideJustification.start",
        index: 1
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [S$0._name$12]: "OutsideJustification.startDrawArea",
        index: 0
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: chart_title.ChartTitleDirection.prototype,
        [S$0._name$14]: "ChartTitleDirection.horizontal",
        index: 1
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: chart_title.ChartTitleDirection.prototype,
        [S$0._name$14]: "ChartTitleDirection.vertical",
        index: 2
      });
    },
    get C100() {
      return C[100] = dart.constList([C[87] || CT.C87, C[98] || CT.C98, C[99] || CT.C99], chart_title.ChartTitleDirection);
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: percent_injector.PercentInjectorTotalType.prototype,
        [S$0._name$15]: "PercentInjectorTotalType.domain",
        index: 0
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: percent_injector.PercentInjectorTotalType.prototype,
        [S$0._name$15]: "PercentInjectorTotalType.domainBySeriesCategory",
        index: 1
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: percent_injector.PercentInjectorTotalType.prototype,
        [S$0._name$15]: "PercentInjectorTotalType.series",
        index: 2
      });
    },
    get C104() {
      return C[104] = dart.constList([C[101] || CT.C101, C[102] || CT.C102, C[103] || CT.C103], percent_injector.PercentInjectorTotalType);
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: T$0.AttributeKeyOfbool().prototype,
        [S$.TypedKey_uniqueKey]: "PercentInjector.percentInjected"
      });
    },
    get C106() {
      return C[106] = dart.fn(domain_a11y_explore_behavior.domainVocalization, T$0.ListOfSeriesDatumOfDToString());
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: a11y_explore_behavior.ExploreModeTrigger.prototype,
        [S$0._name$16]: "ExploreModeTrigger.pressHold",
        index: 0
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: a11y_explore_behavior.ExploreModeTrigger.prototype,
        [S$0._name$16]: "ExploreModeTrigger.tap",
        index: 1
      });
    },
    get C109() {
      return C[109] = dart.constList([C[107] || CT.C107, C[108] || CT.C108], a11y_explore_behavior.ExploreModeTrigger);
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: numeric_axis_spec.BasicNumericTickProviderSpec.prototype,
        [S$0.BasicNumericTickProviderSpec_desiredMaxTickCount]: null,
        [S$0.BasicNumericTickProviderSpec_desiredMinTickCount]: null,
        [S$0.BasicNumericTickProviderSpec_desiredTickCount]: null,
        [S$0.BasicNumericTickProviderSpec_dataIsInWholeNumbers]: false,
        [S$0.BasicNumericTickProviderSpec_zeroBound]: null
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: numeric_extents.NumericExtents.prototype,
        [S$0.NumericExtents_max]: 1,
        [S$0.NumericExtents_min]: 0
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [S$0._name$17]: "TickLabelAnchor.inside",
        index: 3
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: T$.SmallTickRendererSpecOfDateTime().prototype,
        [S$0.BaseRenderSpec_axisLineStyle]: null,
        [S$0.BaseRenderSpec_labelCollisionRotation]: null,
        [S$0.BaseRenderSpec_labelRotation]: null,
        [S$0.BaseRenderSpec_minimumPaddingBetweenLabelsPx]: null,
        [S$0.BaseRenderSpec_labelCollisionOffsetFromTickPx]: null,
        [S$0.BaseRenderSpec_labelOffsetFromTickPx]: 0,
        [S$0.BaseRenderSpec_labelCollisionOffsetFromAxisPx]: null,
        [S$0.BaseRenderSpec_labelOffsetFromAxisPx]: null,
        [S$0.BaseRenderSpec_labelJustification]: null,
        [S$0.BaseRenderSpec_labelAnchor]: C[113] || CT.C113,
        [S$0.BaseRenderSpec_labelStyle]: null,
        [S$0.SmallTickRendererSpec_tickLengthPx]: null,
        [S$0.SmallTickRendererSpec_lineStyle]: null
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: date_time_axis_spec.DateTimeEndPointsTickProviderSpec.prototype
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: axis$.AxisOrientation.prototype,
        [S$0._name$18]: "AxisOrientation.top",
        index: 0
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: axis$.AxisOrientation.prototype,
        [S$0._name$18]: "AxisOrientation.right",
        index: 1
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: axis$.AxisOrientation.prototype,
        [S$0._name$18]: "AxisOrientation.bottom",
        index: 2
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: axis$.AxisOrientation.prototype,
        [S$0._name$18]: "AxisOrientation.left",
        index: 3
      });
    },
    get C119() {
      return C[119] = dart.constList([1, 2, 5, 10, 50, 100, 500, 1000], core.int);
    },
    get C120() {
      return C[120] = dart.constList([1, 2, 3, 4, 6, 12], core.int);
    },
    get C121() {
      return C[121] = dart.constList([5, 10, 15, 20, 30], core.int);
    },
    get C122() {
      return C[122] = dart.constList([1, 2, 3, 4, 6, 12, 24], core.int);
    },
    get C123() {
      return C[123] = dart.constList([1, 2, 3, 7, 14], core.int);
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: T$0.IdentityConverterOfnum().prototype
      });
    },
    get C125() {
      return C[125] = dart.constList([0.01, 0.02, 0.025, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2, 2.5, 3, 4, 5, 6, 7, 8, 9], core.double);
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: bucketing_axis_spec.BucketingNumericTickProviderSpec.prototype,
        [S$0.BasicNumericTickProviderSpec_desiredMaxTickCount]: null,
        [S$0.BasicNumericTickProviderSpec_desiredMinTickCount]: null,
        [S$0.BasicNumericTickProviderSpec_desiredTickCount]: null,
        [S$0.BasicNumericTickProviderSpec_dataIsInWholeNumbers]: false,
        [S$0.BasicNumericTickProviderSpec_zeroBound]: true
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: text_element.TextDirection.prototype,
        [S$0._name$13]: "TextDirection.ltr",
        index: 0
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: text_element.TextDirection.prototype,
        [S$0._name$13]: "TextDirection.rtl",
        index: 1
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: text_element.TextDirection.prototype,
        [S$0._name$13]: "TextDirection.center",
        index: 2
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: base_tick_draw_strategy._PixelVerticalDirection.prototype,
        [S$0._name$19]: "_PixelVerticalDirection.over",
        index: 0
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: base_tick_draw_strategy._PixelVerticalDirection.prototype,
        [S$0._name$19]: "_PixelVerticalDirection.under",
        index: 2
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: base_tick_draw_strategy._PixelVerticalDirection.prototype,
        [S$0._name$19]: "_PixelVerticalDirection.center",
        index: 1
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [S$0._name$17]: "TickLabelAnchor.before",
        index: 0
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [S$0._name$17]: "TickLabelAnchor.after",
        index: 2
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [S$0._name$17]: "TickLabelAnchor.centered",
        index: 1
      });
    },
    get C136() {
      return C[136] = dart.fn(math.max, T$0.TAndTToT());
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: base_bar_renderer_config.BarGroupingType.prototype,
        [S$0._name$20]: "BarGroupingType.grouped",
        index: 0
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: T$0.AttributeKeyOfSetOfObject().prototype,
        [S$.TypedKey_uniqueKey]: "BarLaneRenderer.domainValues"
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: bar_renderer_config.ConstCornerStrategy.prototype,
        [S$1.ConstCornerStrategy_radius]: 2
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: bar_label_decorator.BarLabelPosition.prototype,
        [S$1._name$21]: "BarLabelPosition.auto",
        index: 0
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: bar_label_decorator.BarLabelPlacement.prototype,
        [S$1._name$21]: "BarLabelPlacement.followMeasureAxis",
        index: 0
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: bar_label_decorator.BarLabelAnchor.prototype,
        [S$1._name$21]: "BarLabelAnchor.end",
        index: 2
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: bar_label_decorator.BarLabelAnchor.prototype,
        [S$1._name$21]: "BarLabelAnchor.middle",
        index: 1
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: bar_label_decorator.BarLabelAnchor.prototype,
        [S$1._name$21]: "BarLabelAnchor.start",
        index: 0
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: bar_label_decorator.BarLabelPosition.prototype,
        [S$1._name$21]: "BarLabelPosition.outside",
        index: 1
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: bar_label_decorator.BarLabelPosition.prototype,
        [S$1._name$21]: "BarLabelPosition.inside",
        index: 2
      });
    },
    get C147() {
      return C[147] = dart.constList([C[140] || CT.C140, C[145] || CT.C145, C[146] || CT.C146], bar_label_decorator.BarLabelPosition);
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: bar_label_decorator.BarLabelPlacement.prototype,
        [S$1._name$21]: "BarLabelPlacement.opposeAxisBaseline",
        index: 1
      });
    },
    get C149() {
      return C[149] = dart.constList([C[141] || CT.C141, C[148] || CT.C148], bar_label_decorator.BarLabelPlacement);
    },
    get C150() {
      return C[150] = dart.constList([C[144] || CT.C144, C[143] || CT.C143, C[142] || CT.C142], bar_label_decorator.BarLabelAnchor);
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: color$.Color.prototype,
        [S$1.Color__lighter]: null,
        [S$1.Color__darker]: null,
        [S$1.Color_a]: 255,
        [S$1.Color_b]: 0,
        [S$1.Color_g]: 0,
        [S$1.Color_r]: 0
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: color$.Color.prototype,
        [S$1.Color__lighter]: null,
        [S$1.Color__darker]: null,
        [S$1.Color_a]: 255,
        [S$1.Color_b]: 255,
        [S$1.Color_g]: 255,
        [S$1.Color_r]: 255
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: T$.AttributeKeyOfint().prototype,
        [S$.TypedKey_uniqueKey]: "BarRenderer.barGroupIndex"
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: T$.AttributeKeyOfint().prototype,
        [S$.TypedKey_uniqueKey]: "BarRenderer.barGroupCount"
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: T$.AttributeKeyOfdouble().prototype,
        [S$.TypedKey_uniqueKey]: "BarRenderer.barGroupWeight"
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: T$.AttributeKeyOfdouble().prototype,
        [S$.TypedKey_uniqueKey]: "BarRenderer.previousBarGroupWeight"
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: T$0.AttributeKeyOfListOfdouble().prototype,
        [S$.TypedKey_uniqueKey]: "BarRenderer.allBarGroupWeights"
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: T$.AttributeKeyOfString().prototype,
        [S$.TypedKey_uniqueKey]: "BarRenderer.stackKey"
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: T$0.AttributeKeyOfListOfBaseBarRendererElement().prototype,
        [S$.TypedKey_uniqueKey]: "BarRenderer.elements"
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: base_bar_renderer_config.BarGroupingType.prototype,
        [S$0._name$20]: "BarGroupingType.groupedStacked",
        index: 1
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: base_bar_renderer_config.BarGroupingType.prototype,
        [S$0._name$20]: "BarGroupingType.stacked",
        index: 2
      });
    },
    get C162() {
      return C[162] = dart.constList([C[137] || CT.C137, C[160] || CT.C160, C[161] || CT.C161], base_bar_renderer_config.BarGroupingType);
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: scale$.RangeBandType.prototype,
        [S$1._name$22]: "RangeBandType.fixedPixel",
        index: 1
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: scale$.RangeBandType.prototype,
        [S$1._name$22]: "RangeBandType.fixedPixelSpaceFromStep",
        index: 5
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: scale$.RangeBandType.prototype,
        [S$1._name$22]: "RangeBandType.styleAssignedPercentOfStep",
        index: 4
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: scale$.RangeBandType.prototype,
        [S$1._name$22]: "RangeBandType.fixedPercentOfStep",
        index: 3
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: scale$.RangeBandType.prototype,
        [S$1._name$22]: "RangeBandType.fixedDomain",
        index: 2
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: scale$.RangeBandType.prototype,
        [S$1._name$22]: "RangeBandType.none",
        index: 0
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: scale$.StepSizeType.prototype,
        [S$1._name$22]: "StepSizeType.autoDetect",
        index: 0
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: scale$.StepSizeType.prototype,
        [S$1._name$22]: "StepSizeType.fixedPixels",
        index: 2
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: scale$.StepSizeType.prototype,
        [S$1._name$22]: "StepSizeType.fixedDomain",
        index: 1
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: numeric_extents.NumericExtents.prototype,
        [S$0.NumericExtents_max]: 1 / 0,
        [S$0.NumericExtents_min]: -1 / 0
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: numeric_extents.NumericExtents.prototype,
        [S$0.NumericExtents_max]: 0,
        [S$0.NumericExtents_min]: 0
      });
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: scale$.RangeBandConfig.prototype,
        [S$1.RangeBandConfig_size]: 0,
        [S$1.RangeBandConfig_type]: C[168] || CT.C168
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: scale$.StepSizeConfig.prototype,
        [S$1.StepSizeConfig_size]: 0,
        [S$1.StepSizeConfig_type]: C[169] || CT.C169
      });
    },
    get C176() {
      return C[176] = dart.constList([C[130] || CT.C130, C[132] || CT.C132, C[131] || CT.C131], base_tick_draw_strategy._PixelVerticalDirection);
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: T$.AttributeKeyOfString().prototype,
        [S$.TypedKey_uniqueKey]: "SeriesRenderer.rendererId"
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: T$0.AttributeKeyOfSeriesRendererOfObject().prototype,
        [S$.TypedKey_uniqueKey]: "SeriesRenderer.renderer"
      });
    },
    get C179() {
      return C[179] = dart.constList([C[32] || CT.C32, C[31] || CT.C31], selection_model.SelectionModelType);
    },
    get C180() {
      return C[180] = dart.constList([C[85] || CT.C85, C[89] || CT.C89, C[91] || CT.C91, C[90] || CT.C90, C[92] || CT.C92], chart_behavior.BehaviorPosition);
    },
    get C181() {
      return C[181] = dart.constList([C[97] || CT.C97, C[96] || CT.C96, C[93] || CT.C93, C[88] || CT.C88, C[95] || CT.C95, C[94] || CT.C94], chart_behavior.OutsideJustification);
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: chart_behavior.InsideJustification.prototype,
        [S$0._name$12]: "InsideJustification.topStart",
        index: 0
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: chart_behavior.InsideJustification.prototype,
        [S$0._name$12]: "InsideJustification.topEnd",
        index: 1
      });
    },
    get C184() {
      return C[184] = dart.constList([C[182] || CT.C182, C[183] || CT.C183], chart_behavior.InsideJustification);
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [S$1._name$23]: "LayoutPosition.Bottom",
        index: 0
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [S$1._name$23]: "LayoutPosition.FullBottom",
        index: 1
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [S$1._name$23]: "LayoutPosition.Top",
        index: 2
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [S$1._name$23]: "LayoutPosition.FullTop",
        index: 3
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [S$1._name$23]: "LayoutPosition.Left",
        index: 4
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [S$1._name$23]: "LayoutPosition.FullLeft",
        index: 5
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [S$1._name$23]: "LayoutPosition.Right",
        index: 6
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [S$1._name$23]: "LayoutPosition.FullRight",
        index: 7
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [S$1._name$23]: "LayoutPosition.DrawArea",
        index: 8
      });
    },
    get C194() {
      return C[194] = dart.constList([C[185] || CT.C185, C[186] || CT.C186, C[187] || CT.C187, C[188] || CT.C188, C[189] || CT.C189, C[190] || CT.C190, C[191] || CT.C191, C[192] || CT.C192, C[193] || CT.C193], layout_view.LayoutPosition);
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: layout_view.ViewMargin.prototype,
        [S$.ViewMargin_leftPx]: 0,
        [S$.ViewMargin_rightPx]: 0,
        [S$.ViewMargin_bottomPx]: 0,
        [S$.ViewMargin_topPx]: 0
      });
    },
    get C196() {
      return C[196] = dart.const({
        __proto__: layout_view.ViewMeasuredSizes.prototype,
        [S$1.minHeight]: 0,
        [S$1.minWidth]: 0,
        [S$1.preferredHeight]: 0,
        [S$1.preferredWidth]: 0
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: material_style.MaterialStyle.prototype
      });
    },
    get C198() {
      return C[198] = dart.constList([C[168] || CT.C168, C[163] || CT.C163, C[167] || CT.C167, C[166] || CT.C166, C[165] || CT.C165, C[164] || CT.C164], scale$.RangeBandType);
    },
    get C199() {
      return C[199] = dart.constList([C[169] || CT.C169, C[171] || CT.C171, C[170] || CT.C170], scale$.StepSizeType);
    },
    get C200() {
      return C[200] = dart.constList([C[133] || CT.C133, C[135] || CT.C135, C[134] || CT.C134, C[113] || CT.C113], axis_spec.TickLabelAnchor);
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: axis_spec.TickLabelJustification.prototype,
        [S$0._name$17]: "TickLabelJustification.inside",
        index: 0
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: axis_spec.TickLabelJustification.prototype,
        [S$0._name$17]: "TickLabelJustification.outside",
        index: 1
      });
    },
    get C203() {
      return C[203] = dart.constList([C[201] || CT.C201, C[202] || CT.C202], axis_spec.TickLabelJustification);
    },
    get C204() {
      return C[204] = dart.constList([C[115] || CT.C115, C[116] || CT.C116, C[117] || CT.C117, C[118] || CT.C118], axis$.AxisOrientation);
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: ordinal_tick_provider.OrdinalTickProvider.prototype
      });
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: tick_formatter.OrdinalTickFormatter.prototype
      });
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: T$.AttributeKeyOfString().prototype,
        [S$.TypedKey_uniqueKey]: "Axis.measureAxisId"
      });
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: T$0.AttributeKeyOfAxisOfObject().prototype,
        [S$.TypedKey_uniqueKey]: "Axis.measureAxis"
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: T$0.AttributeKeyOfAxisOfObject().prototype,
        [S$.TypedKey_uniqueKey]: "Axis.domainAxis"
      });
    }
  }, false);
  var C = Array(210).fill(void 0);
  var I = [
    "package:charts_common/src/chart/common/base_chart.dart",
    "package:charts_common/src/chart/treemap/treemap_chart.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/treemap/base_treemap_renderer.dart",
    "package:charts_common/src/chart/common/series_renderer.dart",
    "package:charts_common/src/chart/treemap/base_treemap_renderer.dart",
    "package:charts_common/src/chart/treemap/slice_treemap_renderer.dart",
    "package:charts_common/src/chart/treemap/slice_dice_treemap_renderer.dart",
    "package:charts_common/src/chart/treemap/dice_treemap_renderer.dart",
    "package:charts_common/src/chart/layout/layout_view.dart",
    "package:charts_common/src/chart/treemap/treemap_renderer_config.dart",
    "package:charts_common/src/chart/treemap/treemap_renderer_element.dart",
    "package:charts_common/src/chart/treemap/treemap_renderer_decorator.dart",
    "package:charts_common/src/chart/treemap/treemap_label_decorator.dart",
    "package:charts_common/src/chart/treemap/squarified_treemap_renderer.dart",
    "package:charts_common/src/chart/cartesian/cartesian_chart.dart",
    "package:charts_common/src/chart/time_series/time_series_chart.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/sunburst/sunburst_arc_label_decorator.dart",
    "package:charts_common/src/chart/pie/arc_renderer_decorator.dart",
    "package:charts_common/src/chart/pie/arc_label_decorator.dart",
    "package:charts_common/src/chart/sunburst/sunburst_arc_label_decorator.dart",
    "package:charts_common/src/chart/scatter_plot/point_renderer_config.dart",
    "package:charts_common/src/chart/scatter_plot/symbol_annotation_renderer_config.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/scatter_plot/symbol_annotation_renderer.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/cartesian_renderer.dart",
    "package:charts_common/src/chart/cartesian/cartesian_renderer.dart",
    "package:charts_common/src/chart/scatter_plot/point_renderer.dart",
    "package:charts_common/src/chart/scatter_plot/symbol_annotation_renderer.dart",
    "package:charts_common/src/chart/scatter_plot/scatter_plot_chart.dart",
    "package:charts_common/src/chart/pie/pie_chart.dart",
    "package:charts_common/src/chart/line/line_renderer_config.dart",
    "package:charts_common/src/chart/scatter_plot/point_renderer_decorator.dart",
    "package:charts_common/src/chart/scatter_plot/comparison_points_decorator.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/line/line_renderer.dart",
    "package:charts_common/src/chart/line/line_renderer.dart",
    "package:charts_common/src/chart/line/line_chart.dart",
    "package:charts_common/src/chart/common/behavior/zoom/panning_tick_provider.dart",
    "package:charts_common/src/chart/common/behavior/zoom/pan_behavior.dart",
    "package:charts_common/src/chart/common/behavior/zoom/pan_and_zoom_behavior.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/common/behavior/zoom/initial_hint_behavior.dart",
    "package:charts_common/src/chart/common/behavior/zoom/initial_hint_behavior.dart",
    "package:charts_common/src/chart/pie/base_arc_renderer_config.dart",
    "package:charts_common/src/chart/sunburst/sunburst_arc_renderer_config.dart",
    "package:charts_common/src/chart/pie/base_arc_renderer.dart",
    "package:charts_common/src/chart/pie/arc_renderer.dart",
    "package:charts_common/src/chart/pie/arc_renderer_config.dart",
    "package:charts_common/src/chart/pie/arc_renderer_element.dart",
    "package:charts_common/src/chart/sunburst/sunburst_arc_renderer.dart",
    "package:charts_common/src/data/tree.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/sunburst/sunburst_chart.dart",
    "package:charts_common/src/chart/sunburst/sunburst_chart.dart",
    "package:charts_common/src/chart/common/behavior/sunburst_ring_expander.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/common/behavior/sliding_viewport.dart",
    "package:charts_common/src/chart/common/behavior/sliding_viewport.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/common/behavior/slider/slider.dart",
    "package:charts_common/src/chart/common/behavior/slider/slider.dart",
    "package:charts_common/src/chart/common/behavior/selection/select_nearest.dart",
    "package:charts_common/src/chart/common/behavior/selection/lock_selection.dart",
    "package:charts_common/src/chart/common/behavior/range_annotation.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/common/behavior/line_point_highlighter.dart",
    "package:charts_common/src/chart/common/behavior/line_point_highlighter.dart",
    "package:charts_common/src/chart/common/behavior/legend/per_series_legend_entry_generator.dart",
    "package:charts_common/src/chart/common/behavior/legend/legend.dart",
    "package:charts_common/src/chart/common/behavior/legend/series_legend.dart",
    "package:charts_common/src/chart/common/behavior/legend/per_datum_legend_entry_generator.dart",
    "package:charts_common/src/chart/common/behavior/legend/legend_entry_generator.dart",
    "package:charts_common/src/chart/common/behavior/legend/legend_entry.dart",
    "package:charts_common/src/chart/common/behavior/legend/datum_legend.dart",
    "package:charts_common/src/chart/common/behavior/initial_selection.dart",
    "package:charts_common/src/chart/common/behavior/domain_outliner.dart",
    "package:charts_common/src/chart/common/behavior/domain_highlighter.dart",
    "package:charts_common/src/chart/common/behavior/chart_title/chart_title.dart",
    "package:charts_common/src/chart/common/behavior/calculation/percent_injector.dart",
    "package:charts_common/src/chart/common/behavior/a11y/keyboard_domain_navigator.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/common/behavior/a11y/domain_a11y_explore_behavior.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/common/behavior/a11y/a11y_explore_behavior.dart",
    "package:charts_common/src/chart/common/behavior/a11y/a11y_explore_behavior.dart",
    "package:charts_common/src/chart/common/behavior/a11y/domain_a11y_explore_behavior.dart",
    "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart",
    "package:charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart",
    "package:charts_common/src/chart/cartesian/axis/spec/percent_axis_spec.dart",
    "package:charts_common/src/chart/cartesian/axis/spec/tick_spec.dart",
    "package:charts_common/src/chart/cartesian/axis/spec/range_tick_spec.dart",
    "package:charts_common/src/chart/cartesian/axis/tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/range_tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/spec/date_time_axis_spec.dart",
    "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart",
    "package:charts_common/src/chart/cartesian/axis/spec/end_points_time_axis_spec.dart",
    "package:charts_common/src/chart/cartesian/axis/time/date_time_tick_formatter.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/axis.dart",
    "package:charts_common/src/chart/cartesian/axis/axis.dart",
    "package:charts_common/src/chart/cartesian/axis/time/date_time_axis.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/time/year_time_stepper.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/time/base_time_stepper.dart",
    "package:charts_common/src/chart/cartesian/axis/time/base_time_stepper.dart",
    "package:charts_common/src/chart/cartesian/axis/time/year_time_stepper.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/time/time_range_tick_provider_impl.dart",
    "package:charts_common/src/chart/cartesian/axis/time/time_range_tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/time/time_range_tick_provider_impl.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/time/month_time_stepper.dart",
    "package:charts_common/src/chart/cartesian/axis/time/month_time_stepper.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/time/minute_time_stepper.dart",
    "package:charts_common/src/chart/cartesian/axis/time/minute_time_stepper.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/time/hour_time_stepper.dart",
    "package:charts_common/src/chart/cartesian/axis/time/hour_time_stepper.dart",
    "package:charts_common/src/chart/cartesian/axis/time/time_stepper.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/time/day_time_stepper.dart",
    "package:charts_common/src/chart/cartesian/axis/time/day_time_stepper.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/time/auto_adjusting_date_time_tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/time/auto_adjusting_date_time_tick_provider.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/numeric_tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/numeric_tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/bucketing_numeric_tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/tick_formatter.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/bucketing_numeric_axis.dart",
    "package:charts_common/src/chart/cartesian/axis/spec/bucketing_axis_spec.dart",
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/base_tick_draw_strategy.dart",
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/small_tick_draw_strategy.dart",
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/range_tick_draw_strategy.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/draw_strategy/range_tick_draw_strategy.dart",
    "package:charts_common/src/chart/bar/base_bar_renderer_config.dart",
    "package:charts_common/src/chart/bar/bar_target_line_renderer_config.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/bar/bar_target_line_renderer.dart",
    "package:charts_common/src/chart/bar/base_bar_renderer.dart",
    "package:charts_common/src/chart/bar/base_bar_renderer_element.dart",
    "package:charts_common/src/chart/bar/bar_target_line_renderer.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/bar/base_bar_renderer_element.dart",
    "package:charts_common/src/chart/bar/bar_renderer.dart",
    "package:charts_common/src/chart/bar/bar_lane_renderer.dart",
    "package:charts_common/src/chart/bar/bar_renderer_config.dart",
    "package:charts_common/src/chart/bar/bar_lane_renderer_config.dart",
    "package:charts_common/src/chart/bar/bar_renderer_decorator.dart",
    "package:charts_common/src/chart/bar/bar_label_decorator.dart",
    "package:charts_common/src/chart/bar/bar_error_decorator.dart",
    "package:charts_common/src/chart/cartesian/axis/static_tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/scale.dart",
    "package:charts_common/src/chart/cartesian/axis/time/date_time_extents.dart",
    "package:charts_common/src/chart/cartesian/axis/time/date_time_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/end_points_tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/none_draw_strategy.dart",
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/gridline_draw_strategy.dart",
    "package:charts_common/src/chart/common/series_renderer_config.dart",
    "package:charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/ordinal_tick_provider.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/ordinal_extents.dart",
    "package:charts_common/src/chart/cartesian/axis/ordinal_extents.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/ordinal_scale_domain_info.dart",
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale_domain_info.dart",
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_viewport.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_function.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_domain_info.dart",
    "package:charts_common/src/chart/cartesian/axis/numeric_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/numeric_extents.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/linear/linear_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale.dart",
    "package:charts_common/src/chart/common/series_datum.dart",
    "package:charts_common/src/chart/common/selection_model/selection_model.dart",
    "package:charts_common/src/chart/common/processed_series.dart",
    "package:charts_common/src/common/symbol_renderer.dart",
    "package:charts_common/src/chart/common/datum_details.dart",
    "package:charts_common/src/chart/layout/layout_margin_strategy.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/layout/layout_manager_impl.dart",
    "package:charts_common/src/chart/layout/layout_manager_impl.dart",
    "package:charts_common/src/chart/layout/layout_manager.dart",
    "package:charts_common/src/chart/common/behavior/chart_behavior.dart",
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/tick_draw_strategy.dart",
    "package:charts_common/src/common/style/style.dart",
    "package:charts_common/src/common/style/material_style.dart",
    "package:charts_common/src/common/style/style_factory.dart",
    "file:///C:/Users/rende/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/charts_common-0.11.0/lib/src/chart/cartesian/axis/scale.dart",
    "package:charts_common/src/data/series.dart",
    "package:charts_common/src/chart/bar/bar_chart.dart"
  ];
  const _is_BaseChart_default = Symbol('_is_BaseChart_default');
  base_chart.BaseChart$ = dart.generic(D => {
    var SeriesRendererOfD = () => (SeriesRendererOfD = dart.constFn(series_renderer.SeriesRenderer$(D)))();
    var IdentityMapOfString$SeriesRendererOfD = () => (IdentityMapOfString$SeriesRendererOfD = dart.constFn(_js_helper.IdentityMap$(core.String, SeriesRendererOfD())))();
    var ChartBehaviorOfD = () => (ChartBehaviorOfD = dart.constFn(chart_behavior.ChartBehavior$(D)))();
    var IdentityMapOfString$ChartBehaviorOfD = () => (IdentityMapOfString$ChartBehaviorOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ChartBehaviorOfD())))();
    var JSArrayOfChartBehaviorOfD = () => (JSArrayOfChartBehaviorOfD = dart.constFn(_interceptors.JSArray$(ChartBehaviorOfD())))();
    var MutableSelectionModelOfD = () => (MutableSelectionModelOfD = dart.constFn(selection_model.MutableSelectionModel$(D)))();
    var LinkedMapOfSelectionModelType$MutableSelectionModelOfD = () => (LinkedMapOfSelectionModelType$MutableSelectionModelOfD = dart.constFn(_js_helper.LinkedMap$(selection_model.SelectionModelType, MutableSelectionModelOfD())))();
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var JSArrayOfLifecycleListenerOfD = () => (JSArrayOfLifecycleListenerOfD = dart.constFn(_interceptors.JSArray$(LifecycleListenerOfD())))();
    var VoidToMutableSelectionModelOfD = () => (VoidToMutableSelectionModelOfD = dart.constFn(dart.fnType(MutableSelectionModelOfD(), [])))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    var DatumDetailsOfDAndDatumDetailsOfDToint = () => (DatumDetailsOfDAndDatumDetailsOfDToint = dart.constFn(dart.fnType(core.int, [DatumDetailsOfD(), DatumDetailsOfD()])))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var ChartBehaviorNOfD = () => (ChartBehaviorNOfD = dart.constFn(dart.nullable(ChartBehaviorOfD())))();
    var ListOfChartBehaviorOfD = () => (ListOfChartBehaviorOfD = dart.constFn(core.List$(ChartBehaviorOfD())))();
    var SeriesOfdynamic$D = () => (SeriesOfdynamic$D = dart.constFn(series$.Series$(dart.dynamic, D)))();
    var ListOfSeriesOfdynamic$D = () => (ListOfSeriesOfdynamic$D = dart.constFn(core.List$(SeriesOfdynamic$D())))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    var MutableSeriesOfDToMutableSeriesOfD = () => (MutableSeriesOfDToMutableSeriesOfD = dart.constFn(dart.fnType(MutableSeriesOfD(), [MutableSeriesOfD()])))();
    var IdentityMapOfStringN$ListOfMutableSeriesOfD = () => (IdentityMapOfStringN$ListOfMutableSeriesOfD = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), ListOfMutableSeriesOfD())))();
    var JSArrayOfMutableSeriesOfD = () => (JSArrayOfMutableSeriesOfD = dart.constFn(_interceptors.JSArray$(MutableSeriesOfD())))();
    var VoidToListOfMutableSeriesOfD = () => (VoidToListOfMutableSeriesOfD = dart.constFn(dart.fnType(ListOfMutableSeriesOfD(), [])))();
    var StringNAndListOfMutableSeriesOfDTovoid = () => (StringNAndListOfMutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [T$.StringN(), ListOfMutableSeriesOfD()])))();
    var IdentityMapOfString$ListOfMutableSeriesOfD = () => (IdentityMapOfString$ListOfMutableSeriesOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfMutableSeriesOfD())))();
    var StringAndListOfMutableSeriesOfDTovoid = () => (StringAndListOfMutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [core.String, ListOfMutableSeriesOfD()])))();
    var MapOfString$ListOfMutableSeriesOfD = () => (MapOfString$ListOfMutableSeriesOfD = dart.constFn(core.Map$(core.String, ListOfMutableSeriesOfD())))();
    var ListOfMutableSeriesOfDTovoid = () => (ListOfMutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [ListOfMutableSeriesOfD()])))();
    var ListOfMutableSeriesOfDToNvoid = () => (ListOfMutableSeriesOfDToNvoid = dart.constFn(dart.nullable(ListOfMutableSeriesOfDTovoid())))();
    var LifecycleListenerOfDTovoid = () => (LifecycleListenerOfDTovoid = dart.constFn(dart.fnType(dart.void, [LifecycleListenerOfD()])))();
    var MutableSelectionModelOfDTovoid = () => (MutableSelectionModelOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSelectionModelOfD()])))();
    class BaseChart extends core.Object {
      get graphicsFactory() {
        return this[S$.graphicsFactory];
      }
      set graphicsFactory(value) {
        this[S$.graphicsFactory] = value;
      }
      get transition() {
        return this[S$.transition];
      }
      set transition(value) {
        this[S$.transition] = value;
      }
      get animationPercent() {
        return this[S$.animationPercent];
      }
      set animationPercent(value) {
        this[S$.animationPercent] = value;
      }
      get context() {
        let t0;
        t0 = this[S$.__BaseChart_context];
        return t0 == null ? dart.throw(new _internal.LateError.fieldNI("context")) : t0;
      }
      set context(t0) {
        this[S$.__BaseChart_context] = t0;
      }
      get [S$._originalSeriesList]() {
        let t1;
        t1 = this[S$.__BaseChart__originalSeriesList];
        return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_originalSeriesList")) : t1;
      }
      set [S$._originalSeriesList](t1) {
        this[S$.__BaseChart__originalSeriesList] = t1;
      }
      get isTappable() {
        return this[S$._behaviorTappableMap][S$.$isNotEmpty];
      }
      get selectExactEventLocation() {
        return false;
      }
      get selectNearestByDomain() {
        return true;
      }
      get selectOverlappingPoints() {
        return false;
      }
      init(context, graphicsFactory) {
        this.context = context;
        if (!dart.equals(this.graphicsFactory, graphicsFactory)) {
          this.graphicsFactory = graphicsFactory;
          this[S$._layoutManager].applyToViews(dart.fn(view => view.graphicsFactory = graphicsFactory, T$.LayoutViewTovoid()));
        }
        this.configurationChanged();
      }
      updateConfig(layoutConfig) {
        this[S$._layoutManager].updateConfig(layoutConfig);
      }
      get chartIsDirty() {
        return this[S$._chartIsDirty];
      }
      resetChartDirtyFlag() {
        this[S$._chartIsDirty] = false;
      }
      markChartDirty() {
        this[S$._chartIsDirty] = true;
      }
      configurationChanged() {
      }
      get chartWidth() {
        return this[S$._chartWidth];
      }
      get chartHeight() {
        return this[S$._chartHeight];
      }
      get gestureProxy() {
        return this[S$._gestureProxy];
      }
      addGestureListener(listener) {
        this[S$._gestureProxy].add(listener);
        return listener;
      }
      removeGestureListener(listener) {
        this[S$._gestureProxy].remove(listener);
      }
      addLifecycleListener(listener) {
        LifecycleListenerOfD().as(listener);
        this[S$._lifecycleListeners][S$.$add](listener);
        return listener;
      }
      removeLifecycleListener(listener) {
        LifecycleListenerOfD().as(listener);
        return this[S$._lifecycleListeners][S$.$remove](listener);
      }
      getSelectionModel(type) {
        return this[S$._selectionModels][S$.$putIfAbsent](type, dart.fn(() => new (MutableSelectionModelOfD()).new(), VoidToMutableSelectionModelOfD()));
      }
      set defaultRenderer(renderer) {
        SeriesRendererOfD().as(renderer);
        renderer.rendererId = "default";
        this.addSeriesRenderer(renderer);
      }
      get defaultRenderer() {
        return this.getSeriesRenderer("default");
      }
      addSeriesRenderer(renderer) {
        SeriesRendererOfD().as(renderer);
        let rendererId = renderer.rendererId;
        let previousRenderer = this[S$._seriesRenderers][S$.$_get](rendererId);
        if (previousRenderer != null) {
          this.removeView(previousRenderer);
          previousRenderer.onDetach(this);
        }
        this.addView(renderer);
        renderer.onAttach(this);
        this[S$._seriesRenderers][S$.$_set](rendererId, renderer);
      }
      getSeriesRenderer(rendererId) {
        let renderer = this[S$._seriesRenderers][S$.$_get](rendererId);
        if (renderer == null) {
          renderer = this.makeDefaultRenderer();
          this.defaultRenderer = renderer;
        }
        return renderer;
      }
      pointWithinRenderer(chartPosition) {
        return this[S$._usingRenderers][S$.$any](dart.fn(rendererId => dart.nullCheck(this.getSeriesRenderer(rendererId).componentBounds)[S$.$containsPoint](chartPosition), T$.StringTobool()));
      }
      getNearestDatumDetailPerSeries(drawAreaPoint, selectAcrossAllDrawAreaComponents) {
        let boundsOverride = selectAcrossAllDrawAreaComponents ? this.drawableLayoutAreaBounds : null;
        let details = JSArrayOfDatumDetailsOfD().of([]);
        this[S$._usingRenderers][S$.$forEach](dart.fn(rendererId => {
          details[S$.$addAll](this.getSeriesRenderer(rendererId).getNearestDatumDetailPerSeries(drawAreaPoint, this.selectNearestByDomain, boundsOverride, {selectOverlappingPoints: this.selectOverlappingPoints, selectExactEventLocation: this.selectExactEventLocation}));
        }, T$.StringTovoid()));
        details[S$.$sort](dart.fn((a, b) => {
          if (this.selectNearestByDomain) {
            let domainDiff = dart.nullCheck(a.domainDistance)[S$.$compareTo](dart.nullCheck(b.domainDistance));
            if (domainDiff === 0) {
              return dart.nullCheck(a.measureDistance)[S$.$compareTo](dart.nullCheck(b.measureDistance));
            }
            return domainDiff;
          } else {
            return dart.nullCheck(a.relativeDistance)[S$.$compareTo](dart.nullCheck(b.relativeDistance));
          }
        }, DatumDetailsOfDAndDatumDetailsOfDToint()));
        return details;
      }
      getSelectedDatumDetails(selectionModelType) {
        let details = JSArrayOfDatumDetailsOfD().of([]);
        if (this[S$._currentSeriesList] == null) {
          return details;
        }
        let selectionModel = this.getSelectionModel(selectionModelType);
        if (!selectionModel.hasDatumSelection) {
          return details;
        }
        for (let seriesDatum of selectionModel.selectedDatum) {
          let rendererId = seriesDatum.series.getAttr(core.String, series_renderer.rendererIdKey);
          details[S$.$add](this.getSeriesRenderer(rendererId).getDetailsForSeriesDatum(seriesDatum));
        }
        return details;
      }
      getAllDatumDetails(opts) {
        let includeOverlaySeries = opts && 'includeOverlaySeries' in opts ? opts.includeOverlaySeries : false;
        let details = JSArrayOfDatumDetailsOfD().of([]);
        if (this[S$._currentSeriesList] == null) {
          return details;
        }
        for (let series of dart.nullCheck(this[S$._currentSeriesList])) {
          let rendererId = series.getAttr(core.String, series_renderer.rendererIdKey);
          if (!includeOverlaySeries && series.overlaySeries) {
            continue;
          }
          for (let datum of series.data) {
            details[S$.$add](this.getSeriesRenderer(rendererId).getDetailsForSeriesDatum(new (SeriesDatumOfD()).new(series, datum)));
          }
        }
        return details;
      }
      createBehavior(creator) {
        return creator(D);
      }
      addBehavior(behavior) {
        ChartBehaviorOfD().as(behavior);
        let role = behavior.role;
        if (role !== null && !dart.equals(this[S$._behaviorRoleMap][S$.$_get](role), behavior)) {
          this.removeBehavior(this[S$._behaviorRoleMap][S$.$_get](role));
          this[S$._behaviorRoleMap][S$.$_set](role, behavior);
        }
        if (!this[S$._behaviorStack][S$.$contains](behavior)) {
          this[S$._behaviorStack][S$.$add](behavior);
          behavior.attachTo(this);
        }
      }
      removeBehavior(behavior) {
        ChartBehaviorNOfD().as(behavior);
        if (behavior == null) {
          return false;
        }
        let role = behavior.role;
        if (role !== null && dart.equals(this[S$._behaviorRoleMap][S$.$_get](role), behavior)) {
          this[S$._behaviorRoleMap][S$.$remove](role);
        }
        this.unregisterTappable(behavior);
        let wasAttached = this[S$._behaviorStack][S$.$remove](behavior);
        behavior.removeFrom(this);
        return wasAttached;
      }
      registerTappable(behavior) {
        ChartBehaviorOfD().as(behavior);
        let role = behavior.role;
        if (role !== null && dart.equals(this[S$._behaviorRoleMap][S$.$_get](role), behavior) && !dart.equals(this[S$._behaviorTappableMap][S$.$_get](role), behavior)) {
          this[S$._behaviorTappableMap][S$.$_set](role, behavior);
        }
      }
      unregisterTappable(behavior) {
        ChartBehaviorOfD().as(behavior);
        let role = behavior.role;
        if (role !== null && dart.equals(this[S$._behaviorTappableMap][S$.$_get](role), behavior)) {
          this[S$._behaviorTappableMap][S$.$remove](role);
        }
      }
      get behaviors() {
        return ListOfChartBehaviorOfD().unmodifiable(this[S$._behaviorStack]);
      }
      measure(width, height) {
        if (this[S$._rendererToSeriesList] != null) {
          this[S$._layoutManager].measure(width, height);
        }
      }
      layout(width, height) {
        if (this[S$._rendererToSeriesList] != null) {
          this.layoutInternal(width, height);
          this.onPostLayout(dart.nullCheck(this[S$._rendererToSeriesList]));
        }
      }
      layoutInternal(width, height) {
        this[S$._chartWidth] = width;
        this[S$._chartHeight] = height;
        this[S$._layoutManager].layout(width, height);
      }
      addView(view) {
        if (!this[S$._layoutManager].isAttached(view)) {
          view.graphicsFactory = this.graphicsFactory;
          this[S$._layoutManager].addView(view);
        }
      }
      removeView(view) {
        this[S$._layoutManager].removeView(view);
      }
      withinDrawArea(point) {
        return this[S$._layoutManager].withinDrawArea(point);
      }
      get drawAreaBounds() {
        return this[S$._layoutManager].drawAreaBounds;
      }
      get marginBottom() {
        return this[S$._layoutManager].marginBottom;
      }
      get marginLeft() {
        return this[S$._layoutManager].marginLeft;
      }
      get marginRight() {
        return this[S$._layoutManager].marginRight;
      }
      get marginTop() {
        return this[S$._layoutManager].marginTop;
      }
      get drawableLayoutAreaBounds() {
        return this[S$._layoutManager].drawableLayoutAreaBounds;
      }
      draw(seriesList) {
        ListOfSeriesOfdynamic$D().as(seriesList);
        for (let selectionModel of this[S$._selectionModels][S$.$values]) {
          selectionModel.clearSelection({notifyListeners: false});
        }
        let processedSeriesList = ListOfMutableSeriesOfD().of(seriesList[S$.$map](MutableSeriesOfD(), dart.bind(this, 'makeSeries')));
        this.fireOnDraw(processedSeriesList);
        let seriesIndex = 0;
        processedSeriesList[S$.$forEach](dart.fn(series => {
          let t2;
          return series.seriesIndex = (t2 = seriesIndex, seriesIndex = t2 + 1, t2);
        }, MutableSeriesOfDTovoid()));
        this[S$._currentSeriesList] = processedSeriesList;
        this[S$._originalSeriesList] = processedSeriesList;
        this.drawInternal(processedSeriesList, {skipAnimation: false, skipLayout: false});
      }
      redraw(opts) {
        let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : false;
        let skipLayout = opts && 'skipLayout' in opts ? opts.skipLayout : false;
        this.drawInternal(this[S$._originalSeriesList], {skipAnimation: skipAnimation, skipLayout: skipLayout});
        if (!skipLayout) {
          this.measure(dart.nullCheck(this[S$._chartWidth]), dart.nullCheck(this[S$._chartHeight]));
          this.layout(dart.nullCheck(this[S$._chartWidth]), dart.nullCheck(this[S$._chartHeight]));
        } else {
          this.onSkipLayout();
        }
      }
      drawInternal(seriesList, opts) {
        ListOfMutableSeriesOfD().as(seriesList);
        let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : null;
        let skipLayout = opts && 'skipLayout' in opts ? opts.skipLayout : null;
        seriesList = seriesList[S$.$map](MutableSeriesOfD(), dart.fn(series => new (MutableSeriesOfD()).clone(series), MutableSeriesOfDToMutableSeriesOfD()))[S$.$toList]();
        if (skipAnimation != null) {
          this[S$._animationsTemporarilyDisabled] = skipAnimation;
        }
        this.configureSeries(seriesList);
        this.fireOnPreprocess(seriesList);
        this[S$._rendererToSeriesList] = this.preprocessSeries(seriesList);
        this.fireOnPostprocess(seriesList);
        this[S$._currentSeriesList] = seriesList;
      }
      get currentSeriesList() {
        return dart.nullCheck(this[S$._currentSeriesList]);
      }
      makeSeries(series) {
        let t2;
        SeriesOfdynamic$D().as(series);
        let s = new (MutableSeriesOfD()).new(series);
        let rendererId = (t2 = series.getAttribute(core.String, series_renderer.rendererIdKey), t2 == null ? "default" : t2);
        s.setAttr(core.String, series_renderer.rendererIdKey, rendererId);
        s.setAttr(T$.SeriesRendererOfObjectN(), series_renderer.rendererKey, this.getSeriesRenderer(rendererId));
        return s;
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        let rendererToSeriesList = new (IdentityMapOfStringN$ListOfMutableSeriesOfD()).new();
        seriesList[S$.$forEach](dart.fn(series => {
          let rendererId = series.getAttr(core.String, series_renderer.rendererIdKey);
          rendererToSeriesList[S$.$putIfAbsent](rendererId, dart.fn(() => JSArrayOfMutableSeriesOfD().of([]), VoidToListOfMutableSeriesOfD()))[S$.$add](series);
        }, MutableSeriesOfDTovoid()));
        rendererToSeriesList[S$.$forEach](dart.fn((rendererId, seriesList) => {
          this.getSeriesRenderer(rendererId).configureSeries(seriesList);
        }, StringNAndListOfMutableSeriesOfDTovoid()));
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        let rendererToSeriesList = new (IdentityMapOfString$ListOfMutableSeriesOfD()).new();
        let unusedRenderers = this[S$._usingRenderers];
        this[S$._usingRenderers] = T$.LinkedHashSetOfString().new();
        seriesList[S$.$forEach](dart.fn(series => {
          let rendererId = dart.nullCheck(series.getAttr(core.String, series_renderer.rendererIdKey));
          rendererToSeriesList[S$.$putIfAbsent](rendererId, dart.fn(() => JSArrayOfMutableSeriesOfD().of([]), VoidToListOfMutableSeriesOfD()))[S$.$add](series);
          this[S$._usingRenderers].add(rendererId);
          unusedRenderers.remove(rendererId);
        }, MutableSeriesOfDTovoid()));
        unusedRenderers[S$.$forEach](dart.fn(rendererId => {
          let t3, t2;
          t2 = rendererId;
          t3 = JSArrayOfMutableSeriesOfD().of([]);
          rendererToSeriesList[S$.$_set](t2, t3);
          return t3;
        }, T$.StringTovoid()));
        rendererToSeriesList[S$.$forEach](dart.fn((rendererId, seriesList) => {
          this.getSeriesRenderer(rendererId).preprocessSeries(seriesList);
        }, StringAndListOfMutableSeriesOfDTovoid()));
        return rendererToSeriesList;
      }
      onSkipLayout() {
        this.onPostLayout(dart.nullCheck(this[S$._rendererToSeriesList]));
      }
      onPostLayout(rendererToSeriesList) {
        MapOfString$ListOfMutableSeriesOfD().as(rendererToSeriesList);
        rendererToSeriesList[S$.$forEach](dart.fn((rendererId, seriesList) => {
          this.getSeriesRenderer(rendererId).update(seriesList, this.animatingThisDraw);
        }, StringAndListOfMutableSeriesOfDTovoid()));
        if (this.animatingThisDraw) {
          this.animationPercent = 0.0;
          this.context.requestAnimation(this.transition);
        } else {
          this.animationPercent = 1.0;
          this.context.requestPaint();
        }
        this[S$._animationsTemporarilyDisabled] = false;
      }
      paint(canvas) {
        canvas.drawingView = "BaseView";
        this[S$._layoutManager].paintOrderedViews[S$.$forEach](dart.fn(view => {
          canvas.drawingView = view[S$.$runtimeType].toString();
          view.paint(canvas, this.animatingThisDraw ? this.animationPercent : 1.0);
        }, T$.LayoutViewTovoid()));
        canvas.drawingView = "PostRender";
        this.fireOnPostrender(canvas);
        canvas.drawingView = null;
        if (this.animationPercent === 1.0) {
          this.fireOnAnimationComplete();
        }
      }
      get animatingThisDraw() {
        return this.transition !== null && this.transition.inMilliseconds > 0 && !this[S$._animationsTemporarilyDisabled];
      }
      fireOnDraw(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        this[S$._lifecycleListeners][S$.$forEach](dart.fn(listener => {
          let t2;
          t2 = ListOfMutableSeriesOfDToNvoid().as(listener.onData);
          t2 == null ? null : t2(seriesList);
        }, LifecycleListenerOfDTovoid()));
      }
      fireOnPreprocess(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        this[S$._lifecycleListeners][S$.$forEach](dart.fn(listener => {
          let t2;
          t2 = ListOfMutableSeriesOfDToNvoid().as(listener.onPreprocess);
          t2 == null ? null : t2(seriesList);
        }, LifecycleListenerOfDTovoid()));
      }
      fireOnPostprocess(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        this[S$._lifecycleListeners][S$.$forEach](dart.fn(listener => {
          let t2;
          t2 = ListOfMutableSeriesOfDToNvoid().as(listener.onPostprocess);
          t2 == null ? null : t2(seriesList);
        }, LifecycleListenerOfDTovoid()));
      }
      fireOnAxisConfigured() {
        this[S$._lifecycleListeners][S$.$forEach](dart.fn(listener => {
          let t2;
          t2 = listener.onAxisConfigured;
          t2 == null ? null : t2();
        }, LifecycleListenerOfDTovoid()));
      }
      fireOnPostrender(canvas) {
        this[S$._lifecycleListeners][S$.$forEach](dart.fn(listener => {
          let t2;
          t2 = listener.onPostrender;
          t2 == null ? null : t2(canvas);
        }, LifecycleListenerOfDTovoid()));
      }
      fireOnAnimationComplete() {
        this[S$._lifecycleListeners][S$.$forEach](dart.fn(listener => {
          let t2;
          t2 = listener.onAnimationComplete;
          t2 == null ? null : t2();
        }, LifecycleListenerOfDTovoid()));
      }
      destroy() {
        for (let i = 0; i < this[S$._behaviorStack][S$.$length]; i = i + 1) {
          this[S$._behaviorStack][S$.$_get](i).removeFrom(this);
        }
        this[S$._behaviorStack][S$.$clear]();
        this[S$._behaviorRoleMap][S$.$clear]();
        this[S$._selectionModels][S$.$values][S$.$forEach](dart.fn(selectionModel => selectionModel.clearAllListeners(), MutableSelectionModelOfDTovoid()));
      }
    }
    (BaseChart.new = function(opts) {
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      this[S$.__BaseChart_context] = null;
      this[S$.graphicsFactory] = null;
      this[S$._chartWidth] = null;
      this[S$._chartHeight] = null;
      this[S$.transition] = C[0] || CT.C0;
      this[S$.animationPercent] = 0.0;
      this[S$._animationsTemporarilyDisabled] = false;
      this[S$.__BaseChart__originalSeriesList] = null;
      this[S$._currentSeriesList] = null;
      this[S$._usingRenderers] = T$.LinkedHashSetOfString().new();
      this[S$._rendererToSeriesList] = null;
      this[S$._seriesRenderers] = new (IdentityMapOfString$SeriesRendererOfD()).new();
      this[S$._behaviorRoleMap] = new (IdentityMapOfString$ChartBehaviorOfD()).new();
      this[S$._behaviorStack] = JSArrayOfChartBehaviorOfD().of([]);
      this[S$._behaviorTappableMap] = new (IdentityMapOfString$ChartBehaviorOfD()).new();
      this[S$._gestureProxy] = new proxy_gesture_listener.ProxyGestureListener.new();
      this[S$._selectionModels] = new (LinkedMapOfSelectionModelType$MutableSelectionModelOfD()).new();
      this[S$._lifecycleListeners] = JSArrayOfLifecycleListenerOfD().of([]);
      this[S$._chartIsDirty] = false;
      this[S$._layoutManager] = new layout_manager_impl.LayoutManagerImpl.new({config: layoutConfig});
      ;
    }).prototype = BaseChart.prototype;
    dart.addTypeTests(BaseChart);
    BaseChart.prototype[_is_BaseChart_default] = true;
    dart.addTypeCaches(BaseChart);
    dart.setMethodSignature(BaseChart, () => ({
      __proto__: dart.getMethods(BaseChart.__proto__),
      init: dart.fnType(dart.void, [chart_context.ChartContext, graphics_factory.GraphicsFactory]),
      updateConfig: dart.fnType(dart.void, [layout_config.LayoutConfig]),
      resetChartDirtyFlag: dart.fnType(dart.void, []),
      markChartDirty: dart.fnType(dart.void, []),
      configurationChanged: dart.fnType(dart.void, []),
      addGestureListener: dart.fnType(gesture_listener.GestureListener, [gesture_listener.GestureListener]),
      removeGestureListener: dart.fnType(dart.void, [gesture_listener.GestureListener]),
      addLifecycleListener: dart.fnType(base_chart.LifecycleListener$(D), [dart.nullable(core.Object)]),
      removeLifecycleListener: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      getSelectionModel: dart.fnType(selection_model.MutableSelectionModel$(D), [selection_model.SelectionModelType]),
      addSeriesRenderer: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      getSeriesRenderer: dart.fnType(series_renderer.SeriesRenderer$(D), [dart.nullable(core.String)]),
      pointWithinRenderer: dart.fnType(core.bool, [math.Point$(core.double)]),
      getNearestDatumDetailPerSeries: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [math.Point$(core.double), core.bool]),
      getSelectedDatumDetails: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [selection_model.SelectionModelType]),
      getAllDatumDetails: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [], {includeOverlaySeries: core.bool}, {}),
      createBehavior: dart.fnType(chart_behavior.ChartBehavior$(D), [dart.gFnType(D => [chart_behavior.ChartBehavior$(D), []], D => [dart.nullable(core.Object)])]),
      addBehavior: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeBehavior: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      registerTappable: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      unregisterTappable: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      measure: dart.fnType(dart.void, [core.int, core.int]),
      layout: dart.fnType(dart.void, [core.int, core.int]),
      layoutInternal: dart.fnType(dart.void, [core.int, core.int]),
      addView: dart.fnType(dart.void, [layout_view.LayoutView]),
      removeView: dart.fnType(dart.void, [layout_view.LayoutView]),
      withinDrawArea: dart.fnType(core.bool, [math.Point$(core.num)]),
      draw: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      redraw: dart.fnType(dart.void, [], {skipAnimation: core.bool, skipLayout: core.bool}, {}),
      drawInternal: dart.fnType(dart.void, [dart.nullable(core.Object)], {skipAnimation: dart.nullable(core.bool), skipLayout: dart.nullable(core.bool)}, {}),
      makeSeries: dart.fnType(processed_series.MutableSeries$(D), [dart.nullable(core.Object)]),
      configureSeries: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      preprocessSeries: dart.fnType(core.Map$(core.String, core.List$(processed_series.MutableSeries$(D))), [dart.nullable(core.Object)]),
      onSkipLayout: dart.fnType(dart.void, []),
      onPostLayout: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas]),
      fireOnDraw: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      fireOnPreprocess: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      fireOnPostprocess: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      fireOnAxisConfigured: dart.fnType(dart.void, []),
      fireOnPostrender: dart.fnType(dart.void, [chart_canvas.ChartCanvas]),
      fireOnAnimationComplete: dart.fnType(dart.void, []),
      destroy: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(BaseChart, () => ({
      __proto__: dart.getGetters(BaseChart.__proto__),
      context: chart_context.ChartContext,
      [S$._originalSeriesList]: core.List$(processed_series.MutableSeries$(D)),
      isTappable: core.bool,
      selectExactEventLocation: core.bool,
      selectNearestByDomain: core.bool,
      selectOverlappingPoints: core.bool,
      chartIsDirty: core.bool,
      chartWidth: dart.nullable(core.int),
      chartHeight: dart.nullable(core.int),
      gestureProxy: proxy_gesture_listener.ProxyGestureListener,
      defaultRenderer: series_renderer.SeriesRenderer$(D),
      behaviors: core.List$(chart_behavior.ChartBehavior$(D)),
      drawAreaBounds: math.Rectangle$(core.int),
      marginBottom: core.int,
      marginLeft: core.int,
      marginRight: core.int,
      marginTop: core.int,
      drawableLayoutAreaBounds: math.Rectangle$(core.int),
      currentSeriesList: core.List$(processed_series.MutableSeries$(D)),
      animatingThisDraw: core.bool
    }));
    dart.setSetterSignature(BaseChart, () => ({
      __proto__: dart.getSetters(BaseChart.__proto__),
      context: chart_context.ChartContext,
      [S$._originalSeriesList]: core.List$(processed_series.MutableSeries$(D)),
      defaultRenderer: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(BaseChart, I[0]);
    dart.setFieldSignature(BaseChart, () => ({
      __proto__: dart.getFields(BaseChart.__proto__),
      [S$.__BaseChart_context]: dart.fieldType(dart.nullable(chart_context.ChartContext)),
      graphicsFactory: dart.fieldType(dart.nullable(graphics_factory.GraphicsFactory)),
      [S$._layoutManager]: dart.finalFieldType(layout_manager.LayoutManager),
      [S$._chartWidth]: dart.fieldType(dart.nullable(core.int)),
      [S$._chartHeight]: dart.fieldType(dart.nullable(core.int)),
      transition: dart.fieldType(core.Duration),
      animationPercent: dart.fieldType(core.double),
      [S$._animationsTemporarilyDisabled]: dart.fieldType(core.bool),
      [S$.__BaseChart__originalSeriesList]: dart.fieldType(dart.nullable(core.List$(processed_series.MutableSeries$(D)))),
      [S$._currentSeriesList]: dart.fieldType(dart.nullable(core.List$(processed_series.MutableSeries$(D)))),
      [S$._usingRenderers]: dart.fieldType(core.Set$(core.String)),
      [S$._rendererToSeriesList]: dart.fieldType(dart.nullable(core.Map$(core.String, core.List$(processed_series.MutableSeries$(D))))),
      [S$._seriesRenderers]: dart.finalFieldType(core.Map$(core.String, series_renderer.SeriesRenderer$(D))),
      [S$._behaviorRoleMap]: dart.finalFieldType(core.Map$(core.String, chart_behavior.ChartBehavior$(D))),
      [S$._behaviorStack]: dart.finalFieldType(core.List$(chart_behavior.ChartBehavior$(D))),
      [S$._behaviorTappableMap]: dart.finalFieldType(core.Map$(core.String, chart_behavior.ChartBehavior$(D))),
      [S$._gestureProxy]: dart.finalFieldType(proxy_gesture_listener.ProxyGestureListener),
      [S$._selectionModels]: dart.finalFieldType(core.Map$(selection_model.SelectionModelType, selection_model.MutableSelectionModel$(D))),
      [S$._lifecycleListeners]: dart.finalFieldType(core.List$(base_chart.LifecycleListener$(D))),
      [S$._chartIsDirty]: dart.fieldType(core.bool)
    }));
    return BaseChart;
  });
  base_chart.BaseChart = base_chart.BaseChart$();
  dart.addTypeTests(base_chart.BaseChart, _is_BaseChart_default);
  const _is_TreeMapChart_default = Symbol('_is_TreeMapChart_default');
  treemap_chart.TreeMapChart$ = dart.generic(D => {
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var SquarifiedTreeMapRendererOfD = () => (SquarifiedTreeMapRendererOfD = dart.constFn(squarified_treemap_renderer.SquarifiedTreeMapRenderer$(D)))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    class TreeMapChart extends base_chart.BaseChart$(D) {
      drawInternal(seriesList, opts) {
        ListOfMutableSeriesOfD().as(seriesList);
        let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : null;
        let skipLayout = opts && 'skipLayout' in opts ? opts.skipLayout : null;
        if (seriesList[S$.$length] > 1) {
          dart.throw(new core.ArgumentError.new("TreeMapChart can only render a single tree."));
        }
        super.drawInternal(seriesList, {skipAnimation: skipAnimation, skipLayout: skipLayout});
      }
      makeDefaultRenderer() {
        let t0;
        t0 = new (SquarifiedTreeMapRendererOfD()).new();
        return (() => {
          t0.rendererId = "default";
          return t0;
        })();
      }
      getDatumDetails(type) {
        let t1, t0, t1$, t0$;
        let details = JSArrayOfDatumDetailsOfD().of([]);
        let treeMapSelection = this.getSelectionModel(type);
        for (let seriesDatum of treeMapSelection.selectedDatum) {
          let series = seriesDatum.series;
          let datumIndex = seriesDatum.index;
          let renderer = this.getSeriesRenderer(series.getAttr(core.String, series_renderer.rendererIdKey));
          let datumDetails = renderer.addPositionToDetailsForSeriesDatum(new (DatumDetailsOfD()).new({datum: seriesDatum.datum, domain: (t0 = series, t1 = datumIndex, t0.domainFn(t1)), measure: (t0$ = series, t1$ = datumIndex, t0$.measureFn(t1$)), series: seriesDatum.series, color: dart.nullCheck(series.colorFn)(datumIndex)}), seriesDatum);
          details[S$.$add](datumDetails);
        }
        return details;
      }
    }
    (TreeMapChart.new = function(opts) {
      let t0;
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      TreeMapChart.__proto__.new.call(this, {layoutConfig: (t0 = layoutConfig, t0 == null ? new layout_config.LayoutConfig.new() : t0)});
      ;
    }).prototype = TreeMapChart.prototype;
    dart.addTypeTests(TreeMapChart);
    TreeMapChart.prototype[_is_TreeMapChart_default] = true;
    dart.addTypeCaches(TreeMapChart);
    dart.setMethodSignature(TreeMapChart, () => ({
      __proto__: dart.getMethods(TreeMapChart.__proto__),
      makeDefaultRenderer: dart.fnType(series_renderer.SeriesRenderer$(D), []),
      getDatumDetails: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [selection_model.SelectionModelType])
    }));
    dart.setLibraryUri(TreeMapChart, I[1]);
    return TreeMapChart;
  });
  treemap_chart.TreeMapChart = treemap_chart.TreeMapChart$();
  dart.addTypeTests(treemap_chart.TreeMapChart, _is_TreeMapChart_default);
  const _is_BaseSeriesRenderer_default = Symbol('_is_BaseSeriesRenderer_default');
  series_renderer.BaseSeriesRenderer$ = dart.generic(D => {
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var IterableOfMutableSeriesOfD = () => (IterableOfMutableSeriesOfD = dart.constFn(core.Iterable$(MutableSeriesOfD())))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    class BaseSeriesRenderer extends core.Object {
      get layoutConfig() {
        return this[S$.layoutConfig];
      }
      set layoutConfig(value) {
        super.layoutConfig = value;
      }
      get rendererId() {
        return this[S$.rendererId];
      }
      set rendererId(value) {
        this[S$.rendererId] = value;
      }
      get symbolRenderer() {
        return this[S$.symbolRenderer];
      }
      set symbolRenderer(value) {
        this[S$.symbolRenderer] = value;
      }
      get graphicsFactory() {
        return this[S$.graphicsFactory$1];
      }
      set graphicsFactory(value) {
        this[S$.graphicsFactory$1] = value;
      }
      get drawBounds() {
        return this[S$._drawAreaBounds];
      }
      onAttach(chart) {
        BaseChartOfD().as(chart);
      }
      onDetach(chart) {
        BaseChartOfD().as(chart);
      }
      assignMissingColors(seriesList, opts) {
        IterableOfMutableSeriesOfD().as(seriesList);
        let emptyCategoryUsesSinglePalette = opts && 'emptyCategoryUsesSinglePalette' in opts ? opts.emptyCategoryUsesSinglePalette : null;
        let missingColorCountPerCategory = new (T$.IdentityMapOfString$int()).new();
        let maxMissing = 0;
        let hasSpecifiedCategory = false;
        seriesList[S$.$forEach](dart.fn(series => {
          let t2;
          if (series.colorFn == null && series.seriesColor != null) {
            series.colorFn = dart.fn(_ => dart.nullCheck(series.seriesColor), T$.intNToColor());
          }
          if (series.colorFn == null) {
            let category = series.seriesCategory;
            if (category == null) {
              category = "__default__";
            } else {
              hasSpecifiedCategory = true;
            }
            let missingCnt = dart.notNull((t2 = missingColorCountPerCategory[S$.$_get](category), t2 == null ? 0 : t2)) + 1;
            missingColorCountPerCategory[S$.$_set](category, missingCnt);
            maxMissing = math.max(core.int, maxMissing, missingCnt);
          }
        }, MutableSeriesOfDTovoid()));
        if (maxMissing > 0) {
          if (!emptyCategoryUsesSinglePalette && !hasSpecifiedCategory) {
            let palettes = style_factory.StyleFactory.style.getOrderedPalettes(maxMissing);
            let index = 0;
            seriesList[S$.$forEach](dart.fn(series => {
              let t2;
              if (series.colorFn == null) {
                let color = palettes[S$.$_get](index[S$.$modulo](palettes[S$.$length])).shadeDefault;
                index = index + 1;
                series.colorFn = dart.fn(_ => color, T$.intNToColor());
                t2 = series;
                t2.seriesColor == null ? t2.seriesColor = color : null;
              } else {
                if (series.seriesColor == null) {
                  try {
                    series.seriesColor = dart.nullCheck(series.colorFn)(0);
                  } catch (e) {
                    let exception = dart.getThrown(e);
                    if (core.Object.is(exception)) {
                      series.seriesColor = style_factory.StyleFactory.style.defaultSeriesColor;
                    } else
                      throw e;
                  }
                }
              }
            }, MutableSeriesOfDTovoid()));
            return;
          }
          let colorPalettes = style_factory.StyleFactory.style.getOrderedPalettes(missingColorCountPerCategory[S$.$length]);
          let colorsByCategory = new (T$.IdentityMapOfString$ListOfColor()).new();
          let index = 0;
          missingColorCountPerCategory[S$.$keys][S$.$forEach](dart.fn(category => {
            colorsByCategory[S$.$_set](category, colorPalettes[S$.$_get](index[S$.$modulo](colorPalettes[S$.$length])).makeShades(maxMissing));
            index = index + 1;
            missingColorCountPerCategory[S$.$_set](category, 0);
          }, T$.StringTovoid()));
          seriesList[S$.$forEach](dart.fn(series => {
            let t3, t3$;
            if (series.colorFn == null) {
              let category = (t3 = series.seriesCategory, t3 == null ? "__default__" : t3);
              let colorIndex = dart.nullCheck(missingColorCountPerCategory[S$.$_get](category));
              missingColorCountPerCategory[S$.$_set](category, colorIndex + 1);
              let color = dart.nullCheck(colorsByCategory[S$.$_get](category))[S$.$_get](colorIndex);
              series.colorFn = dart.fn(_ => color, T$.intNToColor());
            }
            t3$ = series;
            t3$.fillColorFn == null ? t3$.fillColorFn = dart.fn(index => dart.nullCheck(series.colorFn)(index), T$.intNToColor()) : null;
          }, MutableSeriesOfDTovoid()));
        } else {
          seriesList[S$.$forEach](dart.fn(series => {
            let t3;
            t3 = series;
            t3.fillColorFn == null ? t3.fillColorFn = dart.fn(index => dart.nullCheck(series.colorFn)(index), T$.intNToColor()) : null;
          }, MutableSeriesOfDTovoid()));
        }
        seriesList[S$.$forEach](dart.fn(series => {
          if (series.seriesColor == null) {
            try {
              series.seriesColor = dart.nullCheck(series.colorFn)(0);
            } catch (e) {
              let exception = dart.getThrown(e);
              if (core.Object.is(exception)) {
                series.seriesColor = style_factory.StyleFactory.style.defaultSeriesColor;
              } else
                throw e;
            }
          }
        }, MutableSeriesOfDTovoid()));
      }
      measure(maxWidth, maxHeight) {
        return null;
      }
      layout(componentBounds, drawAreaBounds) {
        this[S$._drawAreaBounds] = drawAreaBounds;
      }
      get componentBounds() {
        return this[S$._drawAreaBounds];
      }
      get isSeriesRenderer() {
        return true;
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
      }
      configureDomainAxes(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
      }
      configureMeasureAxes(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
      }
      getDetailsForSeriesDatum(seriesDatum) {
        let t4, t4$, t4$0, t4$1, t4$2, t4$3, t4$4, t4$5, t4$6, t5, t4$7, t4$8, t5$, t4$9, t4$10;
        SeriesDatumOfD().as(seriesDatum);
        let series = seriesDatum.series;
        let index = seriesDatum.index;
        let domainFn = series.domainFn;
        let domainLowerBoundFn = series.domainLowerBoundFn;
        let domainUpperBoundFn = series.domainUpperBoundFn;
        let measureFn = series.measureFn;
        let measureLowerBoundFn = series.measureLowerBoundFn;
        let measureUpperBoundFn = series.measureUpperBoundFn;
        let measureOffsetFn = series.measureOffsetFn;
        let rawMeasureFn = series.rawMeasureFn;
        let rawMeasureLowerBoundFn = series.rawMeasureLowerBoundFn;
        let rawMeasureUpperBoundFn = series.rawMeasureUpperBoundFn;
        let colorFn = series.colorFn;
        let areaColorFn = (t4 = series.areaColorFn, t4 == null ? colorFn : t4);
        let fillColorFn = (t4$ = series.fillColorFn, t4$ == null ? colorFn : t4$);
        let radiusPxFn = series.radiusPxFn;
        let strokeWidthPxFn = series.strokeWidthPxFn;
        let domainValue = domainFn(index);
        let domainLowerBoundValue = (t4$0 = domainLowerBoundFn, t4$0 == null ? null : t4$0(index));
        let domainUpperBoundValue = (t4$1 = domainUpperBoundFn, t4$1 == null ? null : t4$1(index));
        let measureValue = measureFn(index);
        let measureLowerBoundValue = (t4$2 = measureLowerBoundFn, t4$2 == null ? null : t4$2(index));
        let measureUpperBoundValue = (t4$3 = measureUpperBoundFn, t4$3 == null ? null : t4$3(index));
        let measureOffsetValue = (t4$4 = measureOffsetFn, t4$4 == null ? null : t4$4(index));
        let rawMeasureValue = rawMeasureFn(index);
        let rawMeasureLowerBoundValue = (t4$5 = rawMeasureLowerBoundFn, t4$5 == null ? null : t4$5(index));
        let rawMeasureUpperBoundValue = (t4$6 = rawMeasureUpperBoundFn, t4$6 == null ? null : t4$6(index));
        let color = dart.nullCheck(colorFn)(index);
        let fillColor = dart.nullCheck(fillColorFn)(index);
        fillColor == null ? fillColor = color : null;
        let areaColor = dart.nullCheck(areaColorFn)(index);
        let radiusPx = (t4$7 = radiusPxFn, t4$7 == null ? null : (t5 = t4$7(index), t5 == null ? null : t5[S$.$toDouble]()));
        radiusPx = (t4$8 = radiusPx, t4$8 == null ? null : t4$8[S$.$toDouble]());
        let strokeWidthPx = (t4$9 = strokeWidthPxFn, t4$9 == null ? null : (t5$ = t4$9(index), t5$ == null ? null : t5$[S$.$toDouble]()));
        strokeWidthPx = (t4$10 = strokeWidthPx, t4$10 == null ? null : t4$10[S$.$toDouble]());
        let details = new (DatumDetailsOfD()).new({datum: seriesDatum.datum, index: seriesDatum.index, domain: domainValue, domainLowerBound: domainLowerBoundValue, domainUpperBound: domainUpperBoundValue, measure: measureValue, measureLowerBound: measureLowerBoundValue, measureUpperBound: measureUpperBoundValue, measureOffset: measureOffsetValue, rawMeasure: rawMeasureValue, rawMeasureLowerBound: rawMeasureLowerBoundValue, rawMeasureUpperBound: rawMeasureUpperBoundValue, series: series, color: color, fillColor: fillColor, areaColor: areaColor, radiusPx: radiusPx, strokeWidthPx: strokeWidthPx});
        return this.addPositionToDetailsForSeriesDatum(details, seriesDatum);
      }
      isPointWithinBounds(chartPoint, bounds) {
        if (bounds != null) {
          if (!bounds[S$.$containsPoint](chartPoint)) {
            return false;
          }
        } else if (this.componentBounds == null || !dart.nullCheck(this.componentBounds)[S$.$containsPoint](chartPoint)) {
          return false;
        }
        return true;
      }
    }
    (BaseSeriesRenderer.new = function(opts) {
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[S$._drawAreaBounds] = null;
      this[S$.graphicsFactory$1] = null;
      this[S$.rendererId] = rendererId;
      this[S$.symbolRenderer] = symbolRenderer;
      this[S$.layoutConfig] = new layout_view.LayoutViewConfig.new({paintOrder: layoutPaintOrder, position: layout_view.LayoutPosition.DrawArea, positionOrder: 0});
      ;
    }).prototype = BaseSeriesRenderer.prototype;
    dart.addTypeTests(BaseSeriesRenderer);
    BaseSeriesRenderer.prototype[_is_BaseSeriesRenderer_default] = true;
    dart.addTypeCaches(BaseSeriesRenderer);
    BaseSeriesRenderer[dart.implements] = () => [series_renderer.SeriesRenderer$(D)];
    dart.setMethodSignature(BaseSeriesRenderer, () => ({
      __proto__: dart.getMethods(BaseSeriesRenderer.__proto__),
      onAttach: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onDetach: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      assignMissingColors: dart.fnType(dart.void, [dart.nullable(core.Object)], {emptyCategoryUsesSinglePalette: core.bool}, {}),
      measure: dart.fnType(dart.nullable(layout_view.ViewMeasuredSizes), [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      configureSeries: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      preprocessSeries: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      configureDomainAxes: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      configureMeasureAxes: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      getDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [dart.nullable(core.Object)]),
      isPointWithinBounds: dart.fnType(core.bool, [math.Point$(core.double), dart.nullable(math.Rectangle$(core.int))])
    }));
    dart.setGetterSignature(BaseSeriesRenderer, () => ({
      __proto__: dart.getGetters(BaseSeriesRenderer.__proto__),
      drawBounds: dart.nullable(math.Rectangle$(core.int)),
      componentBounds: dart.nullable(math.Rectangle$(core.int)),
      isSeriesRenderer: core.bool
    }));
    dart.setLibraryUri(BaseSeriesRenderer, I[3]);
    dart.setFieldSignature(BaseSeriesRenderer, () => ({
      __proto__: dart.getFields(BaseSeriesRenderer.__proto__),
      layoutConfig: dart.finalFieldType(layout_view.LayoutViewConfig),
      rendererId: dart.fieldType(core.String),
      symbolRenderer: dart.fieldType(dart.nullable(symbol_renderer.SymbolRenderer)),
      [S$._drawAreaBounds]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      graphicsFactory: dart.fieldType(dart.nullable(graphics_factory.GraphicsFactory))
    }));
    return BaseSeriesRenderer;
  });
  series_renderer.BaseSeriesRenderer = series_renderer.BaseSeriesRenderer$();
  dart.addTypeTests(series_renderer.BaseSeriesRenderer, _is_BaseSeriesRenderer_default);
  const _is_BaseTreeMapRenderer_default = Symbol('_is_BaseTreeMapRenderer_default');
  base_treemap_renderer.BaseTreeMapRenderer$ = dart.generic(D => {
    var TreeMapRendererElementOfD = () => (TreeMapRendererElementOfD = dart.constFn(treemap_renderer_element.TreeMapRendererElement$(D)))();
    var LinkedMapOfTreeNodeOfObject$TreeMapRendererElementOfD = () => (LinkedMapOfTreeNodeOfObject$TreeMapRendererElementOfD = dart.constFn(_js_helper.LinkedMap$(T$.TreeNodeOfObject(), TreeMapRendererElementOfD())))();
    var _AnimatedTreeMapRectOfD = () => (_AnimatedTreeMapRectOfD = dart.constFn(base_treemap_renderer._AnimatedTreeMapRect$(D)))();
    var LinkedMapOfD$_AnimatedTreeMapRectOfD = () => (LinkedMapOfD$_AnimatedTreeMapRectOfD = dart.constFn(_js_helper.LinkedMap$(D, _AnimatedTreeMapRectOfD())))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    var LinkedHashSetOfD = () => (LinkedHashSetOfD = dart.constFn(collection.LinkedHashSet$(D)))();
    var DAnd_AnimatedTreeMapRectOfDTovoid = () => (DAnd_AnimatedTreeMapRectOfDTovoid = dart.constFn(dart.fnType(dart.void, [D, _AnimatedTreeMapRectOfD()])))();
    var DAnd_AnimatedTreeMapRectOfDTobool = () => (DAnd_AnimatedTreeMapRectOfDTobool = dart.constFn(dart.fnType(core.bool, [D, _AnimatedTreeMapRectOfD()])))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    var DatumDetailsOfDAndDatumDetailsOfDToint = () => (DatumDetailsOfDAndDatumDetailsOfDToint = dart.constFn(dart.fnType(core.int, [DatumDetailsOfD(), DatumDetailsOfD()])))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var IterableOfMutableSeriesOfD = () => (IterableOfMutableSeriesOfD = dart.constFn(core.Iterable$(MutableSeriesOfD())))();
    class BaseTreeMapRenderer extends series_renderer.BaseSeriesRenderer$(D) {
      get config() {
        return this[S$.config];
      }
      set config(value) {
        super.config = value;
      }
      get labelDecorator() {
        return this[S$.labelDecorator];
      }
      set labelDecorator(value) {
        super.labelDecorator = value;
      }
      onAttach(chart) {
        BaseChartOfD().as(chart);
        super.onAttach(chart);
        this[S$._chart] = chart;
      }
      get isRtl() {
        let t2, t2$;
        t2$ = (t2 = this[S$._chart], t2 == null ? null : t2.context.isRtl);
        return t2$ == null ? false : t2$;
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        this.assignMissingColors(seriesList, {emptyCategoryUsesSinglePalette: true});
        this.assignMissingStrokeWidths(seriesList);
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        this[S$._ensureSingleTree](seriesList);
        this[S$._treeNodeToRendererElement][S$.$clear]();
        for (let series of seriesList) {
          let count = series.data[S$.$length];
          for (let i = 0; i < count; i = i + 1) {
            let node = T$.TreeNodeOfObject().as(series.data[S$.$_get](i));
            this[S$._treeNodeToRendererElement][S$.$_set](node, this[S$._createRendererElement](series, i, {isLeaf: !node.hasChildren}));
          }
          series.setAttr(T$.IterableOfTreeMapRendererElementOfObjectN(), base_treemap_renderer.treeMapElementsKey, this[S$._treeNodeToRendererElement][S$.$values]);
        }
      }
      update(seriesList, isAnimating) {
        let t2;
        ListOfImmutableSeriesOfD().as(seriesList);
        let _visibleTreeMapRectKeys = LinkedHashSetOfD().new();
        for (let series of seriesList) {
          if (series.data[S$.$isNotEmpty]) {
            let root = T$.TreeNodeOfObject().as(series.data[S$.$first]);
            this[S$._configureRootRendererElement](root);
            for (let datum of series.data) {
              let node = T$.TreeNodeOfObject().as(datum);
              this.tile(node);
              let element = (t2 = this[S$._getRendererElement](node), (() => {
                t2.refreshPaintProperties();
                return t2;
              })());
              let rect = this[S$._createAnimatedTreeMapRect](element);
              _visibleTreeMapRectKeys.add(rect.key);
            }
          }
        }
        this[S$._animatedTreeMapRects][S$.$forEach](dart.fn((_, rect) => {
          if (!_visibleTreeMapRectKeys.contains(rect.key)) {
            rect.animateOut();
          }
        }, DAnd_AnimatedTreeMapRectOfDTovoid()));
      }
      paint(canvas, animationPercent) {
        if (animationPercent === 1.0) {
          this[S$._animatedTreeMapRects][S$.$removeWhere](dart.fn((_, rect) => rect.animatingOut, DAnd_AnimatedTreeMapRectOfDTobool()));
        }
        this[S$._animatedTreeMapRects][S$.$forEach](dart.fn((_, animatedRect) => {
          let t2;
          let element = animatedRect.getCurrentRect(animationPercent);
          let rect = element.boundingRect;
          canvas.drawRRect(rect, {fill: element.fillColor, fillPattern: element.fillPattern, patternStrokeWidthPx: this.config.patternStrokeWidthPx, patternColor: element.patternColor, stroke: element.strokeColor, strokeWidthPx: dart.nullCheck(element.strokeWidthPx)[S$.$toDouble](), radius: 0, roundTopLeft: false, roundTopRight: false, roundBottomLeft: false, roundBottomRight: false});
          t2 = this.labelDecorator;
          t2 == null ? null : t2.decorate(element, canvas, dart.nullCheck(this.graphicsFactory), {drawBounds: dart.nullCheck(this.drawBounds), animationPercent: animationPercent, rtl: this.isRtl, renderVertically: element.isLeaf && rect[S$.$width] < rect[S$.$height], renderMultiline: element.isLeaf});
        }, DAnd_AnimatedTreeMapRectOfDTovoid()));
      }
      getNearestDatumDetailPerSeries(chartPoint, byDomain, boundsOverride, opts) {
        let t2;
        let selectOverlappingPoints = opts && 'selectOverlappingPoints' in opts ? opts.selectOverlappingPoints : false;
        let selectExactEventLocation = opts && 'selectExactEventLocation' in opts ? opts.selectExactEventLocation : false;
        let nearest = JSArrayOfDatumDetailsOfD().of([]);
        if (!this.isPointWithinBounds(chartPoint, boundsOverride)) return nearest;
        let root = this[S$._treeNodeToRendererElement][S$.$entries][S$.$first].key;
        let queue = (t2 = new (T$.ListQueueOfTreeNodeOfObject()).new(), (() => {
          t2.add(root);
          return t2;
        })());
        while (queue[S$.$isNotEmpty]) {
          let node = queue.removeFirst();
          let element = this[S$._getRendererElement](node);
          if (element.boundingRect[S$.$containsPoint](chartPoint)) {
            nearest[S$.$add](new (DatumDetailsOfD()).new({index: element.index, series: element.series, datum: node, domain: element.domain, measure: element.measure, domainDistance: 0.0, measureDistance: 0.0}));
            queue.clear();
            queue.addAll(node.children);
          }
        }
        nearest[S$.$sort](dart.fn((a, b) => {
          let nodeA = T$.TreeNodeOfObject().as(a.datum);
          let nodeB = T$.TreeNodeOfObject().as(b.datum);
          return nodeB.depth[S$.$compareTo](nodeA.depth);
        }, DatumDetailsOfDAndDatumDetailsOfDToint()));
        return nearest;
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsOfD().as(details);
        SeriesDatumOfD().as(seriesDatum);
        let bounds = this[S$._getRendererElement](T$.TreeNodeOfObject().as(seriesDatum.datum)).boundingRect;
        let chartPosition = new (T$.PointOfdouble()).new((this.isRtl ? bounds[S$.$left] : bounds[S$.$right])[S$.$toDouble](), (bounds[S$.$top] + bounds[S$.$height] / 2)[S$.$toDouble]());
        return DatumDetailsOfD().from(details, {chartPosition: new math$.NullablePoint.from(chartPosition)});
      }
      assignMissingColors(seriesList, opts) {
        let t2, t2$, t2$0;
        IterableOfMutableSeriesOfD().as(seriesList);
        let emptyCategoryUsesSinglePalette = opts && 'emptyCategoryUsesSinglePalette' in opts ? opts.emptyCategoryUsesSinglePalette : null;
        for (let series of seriesList) {
          let colorPalettes = style_factory.StyleFactory.style.getOrderedPalettes(series.data[S$.$length]);
          let count = colorPalettes[S$.$length];
          t2 = series;
          t2.fillColorFn == null ? t2.fillColorFn = dart.fn(index => {
            let node = T$.TreeNodeOfObject().as(series.data[S$.$_get](dart.nullCheck(index)));
            return colorPalettes[S$.$_get](node.depth[S$.$modulo](count)).shadeDefault;
          }, T$.intNToColor()) : null;
          t2$ = series;
          t2$.colorFn == null ? t2$.colorFn = dart.fn(index => this.config.strokeColor, T$.intNToColor()) : null;
          t2$0 = series;
          t2$0.patternColorFn == null ? t2$0.patternColorFn = dart.fn(index => this.config.strokeColor, T$.intNToColor()) : null;
        }
      }
      assignMissingStrokeWidths(seriesList) {
        let t2;
        IterableOfMutableSeriesOfD().as(seriesList);
        for (let series of seriesList) {
          t2 = series;
          t2.strokeWidthPxFn == null ? t2.strokeWidthPxFn = dart.fn(_ => this.config.strokeWidthPx, T$.intNTodouble()) : null;
        }
      }
      availableLayoutBoundingRect(node) {
        let element = this[S$._getRendererElement](node);
        let rect = element.boundingRect;
        let padding = this.config.rectPaddingPx;
        let top = rect[S$.$top] + padding.topPx;
        let left = rect[S$.$left] + padding.leftPx;
        let width = rect[S$.$width] - padding.leftPx - padding.rightPx;
        let height = rect[S$.$height] - padding.topPx - padding.bottomPx;
        if (width < 0) {
          left = left + width / 2;
          width = 0;
        }
        if (height < 0) {
          top = top + height / 2;
          height = 0;
        }
        return new (T$.MutableRectangleOfnum()).new(left, top, width, height);
      }
      scaleArea(children, scaleFactor) {
        for (let child of children) {
          let element = this[S$._getRendererElement](child);
          let area = element.measure * (scaleFactor < 0 ? 0 : scaleFactor);
          element.area = area <= 0 ? 0 : area;
        }
      }
      measureForTreeNode(node) {
        return this[S$._getRendererElement](node).measure;
      }
      areaForRectangle(rect) {
        return rect[S$.$height] * rect[S$.$width];
      }
      areaForTreeNode(node) {
        return this[S$._getRendererElement](node).area;
      }
      position(nodes, boundingRect, side, layoutArea) {
        let t2, t2$, t2$0, t2$1;
        let top = boundingRect.top;
        let left = boundingRect.left;
        let length = side > 0 ? layoutArea / side : 0;
        if (side === boundingRect.height) {
          if (length > boundingRect.width) length = boundingRect.width[S$.$toInt]();
          for (let node of nodes) {
            let element = this[S$._getRendererElement](node);
            let height = math.min(core.num, boundingRect.top + boundingRect.height - top, length > 0 ? element.area / length : 0);
            element.boundingRect = new (T$.RectangleOfnum()).new(left, top, length, height);
            top = top + height;
          }
          t2 = boundingRect;
          t2.left = t2.left + length;
          t2$ = boundingRect;
          t2$.width = t2$.width - length;
        } else {
          if (length > boundingRect.height) length = boundingRect.height[S$.$toInt]();
          for (let node of nodes) {
            let element = this[S$._getRendererElement](node);
            let width = math.min(core.num, boundingRect.left + boundingRect.width - left, length > 0 ? element.area / length : 0);
            element.boundingRect = new (T$.RectangleOfnum()).new(left, top, width, length);
            left = left + width;
          }
          t2$0 = boundingRect;
          t2$0.top = t2$0.top + length;
          t2$1 = boundingRect;
          t2$1.height = t2$1.height - length;
        }
      }
      [S$._configureRootRendererElement](root) {
        let t2;
        let drawBounds = dart.nullCheck(this.drawBounds);
        t2 = this[S$._getRendererElement](root);
        (() => {
          t2.boundingRect = drawBounds;
          t2.area = this.areaForRectangle(drawBounds);
          return t2;
        })();
      }
      [S$._createAnimatedTreeMapRect](element) {
        let t2;
        let key = element.domain;
        let rect = this[S$._animatedTreeMapRects][S$.$containsKey](key) ? dart.nullCheck(this[S$._animatedTreeMapRects][S$.$remove](key)) : new (_AnimatedTreeMapRectOfD()).new({key: key});
        this[S$._animatedTreeMapRects][S$.$_set](key, rect);
        t2 = rect;
        return (() => {
          t2.setNewTarget(element);
          return t2;
        })();
      }
      [S$._createRendererElement](series, index, opts) {
        let t3, t2, t3$, t2$;
        let isLeaf = opts && 'isLeaf' in opts ? opts.isLeaf : null;
        return new (TreeMapRendererElementOfD()).new({domain: (t2 = series, t3 = index, t2.domainFn(t3)), measure: dart.nullCheck((t2$ = series, t3$ = index, t2$.measureFn(t3$))), isLeaf: isLeaf, index: index, series: series});
      }
      [S$._getRendererElement](node) {
        let element = this[S$._treeNodeToRendererElement][S$.$_get](node);
        if (!(element != null)) dart.assertFailed("There is no associated renderer element for " + dart.str(node) + ".", I[2], 422, 9, "element != null");
        return dart.nullCheck(element);
      }
      [S$._ensureSingleTree](seriesList) {
        if (!(seriesList[S$.$length] <= 1)) dart.assertFailed("TreeMapRenderer only supports a single series at most.", I[2], 427, 12, "seriesList.length <= 1");
      }
    }
    (BaseTreeMapRenderer.new = function(opts) {
      let t2;
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      this[S$._treeNodeToRendererElement] = new (LinkedMapOfTreeNodeOfObject$TreeMapRendererElementOfD()).new();
      this[S$._animatedTreeMapRects] = new (LinkedMapOfD$_AnimatedTreeMapRectOfD()).new();
      this[S$._chart] = null;
      this[S$.config] = config;
      this[S$.labelDecorator] = config.labelDecorator;
      BaseTreeMapRenderer.__proto__.new.call(this, {rendererId: (t2 = rendererId, t2 == null ? "treemap" : t2), layoutPaintOrder: config.layoutPaintOrder, symbolRenderer: config.symbolRenderer});
      ;
    }).prototype = BaseTreeMapRenderer.prototype;
    dart.addTypeTests(BaseTreeMapRenderer);
    BaseTreeMapRenderer.prototype[_is_BaseTreeMapRenderer_default] = true;
    dart.addTypeCaches(BaseTreeMapRenderer);
    dart.setMethodSignature(BaseTreeMapRenderer, () => ({
      __proto__: dart.getMethods(BaseTreeMapRenderer.__proto__),
      update: dart.fnType(dart.void, [dart.nullable(core.Object), core.bool]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      getNearestDatumDetailPerSeries: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [math.Point$(core.double), core.bool, dart.nullable(math.Rectangle$(core.int))], {selectExactEventLocation: core.bool, selectOverlappingPoints: core.bool}, {}),
      addPositionToDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [dart.nullable(core.Object), dart.nullable(core.Object)]),
      assignMissingStrokeWidths: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      availableLayoutBoundingRect: dart.fnType(math.MutableRectangle$(core.num), [tree.TreeNode$(core.Object)]),
      scaleArea: dart.fnType(dart.void, [core.Iterable$(tree.TreeNode$(core.Object)), core.num]),
      measureForTreeNode: dart.fnType(core.num, [tree.TreeNode$(core.Object)]),
      areaForRectangle: dart.fnType(core.num, [math.Rectangle$(core.num)]),
      areaForTreeNode: dart.fnType(core.num, [tree.TreeNode$(core.Object)]),
      position: dart.fnType(dart.void, [core.Iterable$(tree.TreeNode$(core.Object)), math.MutableRectangle$(core.num), core.num, core.num]),
      [S$._configureRootRendererElement]: dart.fnType(dart.void, [tree.TreeNode$(core.Object)]),
      [S$._createAnimatedTreeMapRect]: dart.fnType(base_treemap_renderer._AnimatedTreeMapRect$(D), [treemap_renderer_element.TreeMapRendererElement$(D)]),
      [S$._createRendererElement]: dart.fnType(treemap_renderer_element.TreeMapRendererElement$(D), [processed_series.MutableSeries$(D), core.int], {}, {isLeaf: core.bool}),
      [S$._getRendererElement]: dart.fnType(treemap_renderer_element.TreeMapRendererElement$(D), [tree.TreeNode$(core.Object)]),
      [S$._ensureSingleTree]: dart.fnType(dart.void, [core.List$(processed_series.ImmutableSeries$(D))])
    }));
    dart.setGetterSignature(BaseTreeMapRenderer, () => ({
      __proto__: dart.getGetters(BaseTreeMapRenderer.__proto__),
      isRtl: core.bool
    }));
    dart.setLibraryUri(BaseTreeMapRenderer, I[4]);
    dart.setFieldSignature(BaseTreeMapRenderer, () => ({
      __proto__: dart.getFields(BaseTreeMapRenderer.__proto__),
      [S$._treeNodeToRendererElement]: dart.finalFieldType(core.Map$(tree.TreeNode$(core.Object), treemap_renderer_element.TreeMapRendererElement$(D))),
      [S$._animatedTreeMapRects]: dart.finalFieldType(core.Map$(D, base_treemap_renderer._AnimatedTreeMapRect$(D))),
      config: dart.finalFieldType(treemap_renderer_config.TreeMapRendererConfig$(D)),
      labelDecorator: dart.finalFieldType(dart.nullable(treemap_label_decorator.TreeMapLabelDecorator$(D))),
      [S$._chart]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D)))
    }));
    return BaseTreeMapRenderer;
  });
  base_treemap_renderer.BaseTreeMapRenderer = base_treemap_renderer.BaseTreeMapRenderer$();
  dart.defineLazy(base_treemap_renderer.BaseTreeMapRenderer, {
    /*base_treemap_renderer.BaseTreeMapRenderer.defaultRendererId*/get defaultRendererId() {
      return "treemap";
    }
  }, false);
  dart.addTypeTests(base_treemap_renderer.BaseTreeMapRenderer, _is_BaseTreeMapRenderer_default);
  const _is_SliceTreeMapRenderer_default = Symbol('_is_SliceTreeMapRenderer_default');
  slice_treemap_renderer.SliceTreeMapRenderer$ = dart.generic(D => {
    var TreeMapRendererConfigOfD = () => (TreeMapRendererConfigOfD = dart.constFn(treemap_renderer_config.TreeMapRendererConfig$(D)))();
    class SliceTreeMapRenderer extends base_treemap_renderer.BaseTreeMapRenderer$(D) {
      tile(node) {
        let children = node.children;
        if (children[S$.$isNotEmpty]) {
          let rect = this.availableLayoutBoundingRect(node);
          let measure = this.measureForTreeNode(node);
          let scaleFactor = measure === 0 ? 0 : this.areaForRectangle(rect) / measure;
          this.scaleArea(children, scaleFactor);
          this.position(children, rect, rect.width, this.areaForRectangle(rect));
        }
      }
    }
    (SliceTreeMapRenderer.new = function(opts) {
      let t2, t2$;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      SliceTreeMapRenderer.__proto__.new.call(this, {config: (t2 = config, t2 == null ? new (TreeMapRendererConfigOfD()).new({tileType: treemap_renderer_config.TreeMapTileType.slice}) : t2), rendererId: (t2$ = rendererId, t2$ == null ? "treemap" : t2$)});
      ;
    }).prototype = SliceTreeMapRenderer.prototype;
    dart.addTypeTests(SliceTreeMapRenderer);
    SliceTreeMapRenderer.prototype[_is_SliceTreeMapRenderer_default] = true;
    dart.addTypeCaches(SliceTreeMapRenderer);
    dart.setMethodSignature(SliceTreeMapRenderer, () => ({
      __proto__: dart.getMethods(SliceTreeMapRenderer.__proto__),
      tile: dart.fnType(dart.void, [tree.TreeNode$(core.Object)])
    }));
    dart.setLibraryUri(SliceTreeMapRenderer, I[5]);
    return SliceTreeMapRenderer;
  });
  slice_treemap_renderer.SliceTreeMapRenderer = slice_treemap_renderer.SliceTreeMapRenderer$();
  dart.addTypeTests(slice_treemap_renderer.SliceTreeMapRenderer, _is_SliceTreeMapRenderer_default);
  const _is_SliceDiceTreeMapRenderer_default = Symbol('_is_SliceDiceTreeMapRenderer_default');
  slice_dice_treemap_renderer.SliceDiceTreeMapRenderer$ = dart.generic(D => {
    var TreeMapRendererConfigOfD = () => (TreeMapRendererConfigOfD = dart.constFn(treemap_renderer_config.TreeMapRendererConfig$(D)))();
    class SliceDiceTreeMapRenderer extends base_treemap_renderer.BaseTreeMapRenderer$(D) {
      tile(node) {
        let children = node.children;
        if (children[S$.$isNotEmpty]) {
          let rect = this.availableLayoutBoundingRect(node);
          let measure = this.measureForTreeNode(node);
          let scaleFactor = measure === 0 ? 0 : this.areaForRectangle(rect) / measure;
          this.scaleArea(children, scaleFactor);
          this.position(children, rect, (node.depth & 1) === 1 ? rect.height : rect.width, this.areaForRectangle(rect));
        }
      }
    }
    (SliceDiceTreeMapRenderer.new = function(opts) {
      let t4, t4$;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      SliceDiceTreeMapRenderer.__proto__.new.call(this, {config: (t4 = config, t4 == null ? new (TreeMapRendererConfigOfD()).new({tileType: treemap_renderer_config.TreeMapTileType.sliceDice}) : t4), rendererId: (t4$ = rendererId, t4$ == null ? "treemap" : t4$)});
      ;
    }).prototype = SliceDiceTreeMapRenderer.prototype;
    dart.addTypeTests(SliceDiceTreeMapRenderer);
    SliceDiceTreeMapRenderer.prototype[_is_SliceDiceTreeMapRenderer_default] = true;
    dart.addTypeCaches(SliceDiceTreeMapRenderer);
    dart.setMethodSignature(SliceDiceTreeMapRenderer, () => ({
      __proto__: dart.getMethods(SliceDiceTreeMapRenderer.__proto__),
      tile: dart.fnType(dart.void, [tree.TreeNode$(core.Object)])
    }));
    dart.setLibraryUri(SliceDiceTreeMapRenderer, I[6]);
    return SliceDiceTreeMapRenderer;
  });
  slice_dice_treemap_renderer.SliceDiceTreeMapRenderer = slice_dice_treemap_renderer.SliceDiceTreeMapRenderer$();
  dart.addTypeTests(slice_dice_treemap_renderer.SliceDiceTreeMapRenderer, _is_SliceDiceTreeMapRenderer_default);
  const _is_DiceTreeMapRenderer_default = Symbol('_is_DiceTreeMapRenderer_default');
  dice_treemap_renderer.DiceTreeMapRenderer$ = dart.generic(D => {
    var TreeMapRendererConfigOfD = () => (TreeMapRendererConfigOfD = dart.constFn(treemap_renderer_config.TreeMapRendererConfig$(D)))();
    class DiceTreeMapRenderer extends base_treemap_renderer.BaseTreeMapRenderer$(D) {
      tile(node) {
        let children = node.children;
        if (children[S$.$isNotEmpty]) {
          let rect = this.availableLayoutBoundingRect(node);
          let measure = this.measureForTreeNode(node);
          let scaleFactor = measure === 0 ? 0 : this.areaForRectangle(rect) / measure;
          this.scaleArea(children, scaleFactor);
          this.position(children, rect, rect.height, this.areaForRectangle(rect));
        }
      }
    }
    (DiceTreeMapRenderer.new = function(opts) {
      let t4, t4$;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      DiceTreeMapRenderer.__proto__.new.call(this, {config: (t4 = config, t4 == null ? new (TreeMapRendererConfigOfD()).new({tileType: treemap_renderer_config.TreeMapTileType.dice}) : t4), rendererId: (t4$ = rendererId, t4$ == null ? "treemap" : t4$)});
      ;
    }).prototype = DiceTreeMapRenderer.prototype;
    dart.addTypeTests(DiceTreeMapRenderer);
    DiceTreeMapRenderer.prototype[_is_DiceTreeMapRenderer_default] = true;
    dart.addTypeCaches(DiceTreeMapRenderer);
    dart.setMethodSignature(DiceTreeMapRenderer, () => ({
      __proto__: dart.getMethods(DiceTreeMapRenderer.__proto__),
      tile: dart.fnType(dart.void, [tree.TreeNode$(core.Object)])
    }));
    dart.setLibraryUri(DiceTreeMapRenderer, I[7]);
    return DiceTreeMapRenderer;
  });
  dice_treemap_renderer.DiceTreeMapRenderer = dice_treemap_renderer.DiceTreeMapRenderer$();
  dart.addTypeTests(dice_treemap_renderer.DiceTreeMapRenderer, _is_DiceTreeMapRenderer_default);
  layout_view.LayoutViewConfig = class LayoutViewConfig extends core.Object {
    get id() {
      return this[S$.id];
    }
    set id(value) {
      this[S$.id] = value;
    }
    get paintOrder() {
      return this[S$.paintOrder];
    }
    set paintOrder(value) {
      this[S$.paintOrder] = value;
    }
    get position() {
      return this[S$.position];
    }
    set position(value) {
      this[S$.position] = value;
    }
    get positionOrder() {
      return this[S$.positionOrder];
    }
    set positionOrder(value) {
      this[S$.positionOrder] = value;
    }
    get viewMargin() {
      return this[S$.viewMargin];
    }
    set viewMargin(value) {
      this[S$.viewMargin] = value;
    }
    get isFullPosition() {
      return this.position === layout_view.LayoutPosition.FullBottom || this.position === layout_view.LayoutPosition.FullTop || this.position === layout_view.LayoutPosition.FullRight || this.position === layout_view.LayoutPosition.FullLeft;
    }
  };
  (layout_view.LayoutViewConfig.new = function(opts) {
    let t4;
    let paintOrder = opts && 'paintOrder' in opts ? opts.paintOrder : null;
    let position = opts && 'position' in opts ? opts.position : null;
    let positionOrder = opts && 'positionOrder' in opts ? opts.positionOrder : null;
    let viewMargin = opts && 'viewMargin' in opts ? opts.viewMargin : null;
    this[S$.id] = null;
    this[S$.paintOrder] = paintOrder;
    this[S$.position] = position;
    this[S$.positionOrder] = positionOrder;
    this[S$.viewMargin] = (t4 = viewMargin, t4 == null ? layout_view.ViewMargin.empty : t4);
    ;
  }).prototype = layout_view.LayoutViewConfig.prototype;
  dart.addTypeTests(layout_view.LayoutViewConfig);
  dart.addTypeCaches(layout_view.LayoutViewConfig);
  dart.setGetterSignature(layout_view.LayoutViewConfig, () => ({
    __proto__: dart.getGetters(layout_view.LayoutViewConfig.__proto__),
    isFullPosition: core.bool
  }));
  dart.setLibraryUri(layout_view.LayoutViewConfig, I[8]);
  dart.setFieldSignature(layout_view.LayoutViewConfig, () => ({
    __proto__: dart.getFields(layout_view.LayoutViewConfig.__proto__),
    id: dart.fieldType(dart.nullable(core.String)),
    paintOrder: dart.fieldType(dart.nullable(core.int)),
    position: dart.fieldType(dart.nullable(layout_view.LayoutPosition)),
    positionOrder: dart.fieldType(dart.nullable(core.int)),
    viewMargin: dart.fieldType(layout_view.ViewMargin)
  }));
  const _is_TreeMapRendererConfig_default = Symbol('_is_TreeMapRendererConfig_default');
  treemap_renderer_config.TreeMapRendererConfig$ = dart.generic(D => {
    var DiceTreeMapRendererOfD = () => (DiceTreeMapRendererOfD = dart.constFn(dice_treemap_renderer.DiceTreeMapRenderer$(D)))();
    var SliceTreeMapRendererOfD = () => (SliceTreeMapRendererOfD = dart.constFn(slice_treemap_renderer.SliceTreeMapRenderer$(D)))();
    var SliceDiceTreeMapRendererOfD = () => (SliceDiceTreeMapRendererOfD = dart.constFn(slice_dice_treemap_renderer.SliceDiceTreeMapRenderer$(D)))();
    var SquarifiedTreeMapRendererOfD = () => (SquarifiedTreeMapRendererOfD = dart.constFn(squarified_treemap_renderer.SquarifiedTreeMapRenderer$(D)))();
    class TreeMapRendererConfig extends layout_view.LayoutViewConfig {
      get customRendererId() {
        return this[S$.customRendererId];
      }
      set customRendererId(value) {
        super.customRendererId = value;
      }
      get symbolRenderer() {
        return this[S$.symbolRenderer$1];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get rendererAttributes() {
        return this[S$.rendererAttributes];
      }
      set rendererAttributes(value) {
        super.rendererAttributes = value;
      }
      get tileType() {
        return this[S$.tileType];
      }
      set tileType(value) {
        super.tileType = value;
      }
      get layoutPaintOrder() {
        return this[S$.layoutPaintOrder];
      }
      set layoutPaintOrder(value) {
        super.layoutPaintOrder = value;
      }
      get rectPaddingPx() {
        return this[S$.rectPaddingPx];
      }
      set rectPaddingPx(value) {
        super.rectPaddingPx = value;
      }
      get strokeWidthPx() {
        return this[S$.strokeWidthPx];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get strokeColor() {
        return this[S$.strokeColor];
      }
      set strokeColor(value) {
        super.strokeColor = value;
      }
      get patternStrokeWidthPx() {
        return this[S$.patternStrokeWidthPx];
      }
      set patternStrokeWidthPx(value) {
        super.patternStrokeWidthPx = value;
      }
      get labelDecorator() {
        return this[S$.labelDecorator$1];
      }
      set labelDecorator(value) {
        super.labelDecorator = value;
      }
      build() {
        switch (this.tileType) {
          case C[3] || CT.C3:
          {
            return new (DiceTreeMapRendererOfD()).new({config: this, rendererId: this.customRendererId});
          }
          case C[4] || CT.C4:
          {
            return new (SliceTreeMapRendererOfD()).new({config: this, rendererId: this.customRendererId});
          }
          case C[5] || CT.C5:
          {
            return new (SliceDiceTreeMapRendererOfD()).new({config: this, rendererId: this.customRendererId});
          }
          default:
          {
            return new (SquarifiedTreeMapRendererOfD()).new({config: this, rendererId: this.customRendererId});
          }
        }
      }
    }
    (TreeMapRendererConfig.new = function(opts) {
      let t4, t4$;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let patternStrokeWidthPx = opts && 'patternStrokeWidthPx' in opts ? opts.patternStrokeWidthPx : 1;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 1;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 10;
      let rectPaddingPx = opts && 'rectPaddingPx' in opts ? opts.rectPaddingPx : C[1] || CT.C1;
      let tileType = opts && 'tileType' in opts ? opts.tileType : C[2] || CT.C2;
      let labelDecorator = opts && 'labelDecorator' in opts ? opts.labelDecorator : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[S$.rendererAttributes] = new series_renderer_config.RendererAttributes.new();
      this[S$.customRendererId] = customRendererId;
      this[S$.patternStrokeWidthPx] = patternStrokeWidthPx;
      this[S$.strokeWidthPx] = strokeWidthPx;
      this[S$.layoutPaintOrder] = layoutPaintOrder;
      this[S$.rectPaddingPx] = rectPaddingPx;
      this[S$.tileType] = tileType;
      this[S$.labelDecorator$1] = labelDecorator;
      this[S$.strokeColor] = (t4 = strokeColor, t4 == null ? style_factory.StyleFactory.style.black : t4);
      this[S$.symbolRenderer$1] = (t4$ = symbolRenderer, t4$ == null ? new symbol_renderer.RectSymbolRenderer.new() : t4$);
      TreeMapRendererConfig.__proto__.new.call(this);
      ;
    }).prototype = TreeMapRendererConfig.prototype;
    dart.addTypeTests(TreeMapRendererConfig);
    TreeMapRendererConfig.prototype[_is_TreeMapRendererConfig_default] = true;
    dart.addTypeCaches(TreeMapRendererConfig);
    TreeMapRendererConfig[dart.implements] = () => [series_renderer_config.SeriesRendererConfig$(D)];
    dart.setMethodSignature(TreeMapRendererConfig, () => ({
      __proto__: dart.getMethods(TreeMapRendererConfig.__proto__),
      build: dart.fnType(base_treemap_renderer.BaseTreeMapRenderer$(D), [])
    }));
    dart.setLibraryUri(TreeMapRendererConfig, I[9]);
    dart.setFieldSignature(TreeMapRendererConfig, () => ({
      __proto__: dart.getFields(TreeMapRendererConfig.__proto__),
      customRendererId: dart.finalFieldType(dart.nullable(core.String)),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      rendererAttributes: dart.finalFieldType(series_renderer_config.RendererAttributes),
      tileType: dart.finalFieldType(treemap_renderer_config.TreeMapTileType),
      layoutPaintOrder: dart.finalFieldType(core.int),
      rectPaddingPx: dart.finalFieldType(layout_view.ViewMargin),
      strokeWidthPx: dart.finalFieldType(core.double),
      strokeColor: dart.finalFieldType(color$.Color),
      patternStrokeWidthPx: dart.finalFieldType(core.double),
      labelDecorator: dart.finalFieldType(dart.nullable(treemap_label_decorator.TreeMapLabelDecorator$(D)))
    }));
    return TreeMapRendererConfig;
  });
  treemap_renderer_config.TreeMapRendererConfig = treemap_renderer_config.TreeMapRendererConfig$();
  dart.defineLazy(treemap_renderer_config.TreeMapRendererConfig, {
    /*treemap_renderer_config.TreeMapRendererConfig._defaultRectPadding*/get _defaultRectPadding() {
      return C[1] || CT.C1;
    }
  }, false);
  dart.addTypeTests(treemap_renderer_config.TreeMapRendererConfig, _is_TreeMapRendererConfig_default);
  treemap_renderer_config.TreeMapTileType = class TreeMapTileType extends core.Object {
    toString() {
      return this[S$._name];
    }
  };
  (treemap_renderer_config.TreeMapTileType.new = function(index, _name) {
    this.index = index;
    this[S$._name] = _name;
    ;
  }).prototype = treemap_renderer_config.TreeMapTileType.prototype;
  dart.addTypeTests(treemap_renderer_config.TreeMapTileType);
  dart.addTypeCaches(treemap_renderer_config.TreeMapTileType);
  dart.setLibraryUri(treemap_renderer_config.TreeMapTileType, I[9]);
  dart.setFieldSignature(treemap_renderer_config.TreeMapTileType, () => ({
    __proto__: dart.getFields(treemap_renderer_config.TreeMapTileType.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(treemap_renderer_config.TreeMapTileType, ['toString']);
  treemap_renderer_config.TreeMapTileType.dice = C[3] || CT.C3;
  treemap_renderer_config.TreeMapTileType.slice = C[4] || CT.C4;
  treemap_renderer_config.TreeMapTileType.sliceDice = C[5] || CT.C5;
  treemap_renderer_config.TreeMapTileType.squarified = C[2] || CT.C2;
  treemap_renderer_config.TreeMapTileType.values = C[6] || CT.C6;
  const _is_TreeMapRendererElement_default = Symbol('_is_TreeMapRendererElement_default');
  treemap_renderer_element.TreeMapRendererElement$ = dart.generic(D => {
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var TreeMapRendererElementOfD = () => (TreeMapRendererElementOfD = dart.constFn(treemap_renderer_element.TreeMapRendererElement$(D)))();
    class TreeMapRendererElement extends core.Object {
      get fillColor() {
        return this[S$.fillColor];
      }
      set fillColor(value) {
        this[S$.fillColor] = value;
      }
      get fillPattern() {
        return this[S$.fillPattern];
      }
      set fillPattern(value) {
        this[S$.fillPattern] = value;
      }
      get patternColor() {
        return this[S$.patternColor];
      }
      set patternColor(value) {
        this[S$.patternColor] = value;
      }
      get strokeColor() {
        return this[S$.strokeColor$1];
      }
      set strokeColor(value) {
        this[S$.strokeColor$1] = value;
      }
      get isLeaf() {
        return this[S$.isLeaf];
      }
      set isLeaf(value) {
        this[S$.isLeaf] = value;
      }
      get strokeWidthPx() {
        return this[S$.strokeWidthPx$1];
      }
      set strokeWidthPx(value) {
        this[S$.strokeWidthPx$1] = value;
      }
      get index() {
        return this[S$.index];
      }
      set index(value) {
        this[S$.index] = value;
      }
      get series() {
        return this[S$.series];
      }
      set series(value) {
        this[S$.series] = ImmutableSeriesOfD().as(value);
      }
      get domain() {
        return this[S$.domain];
      }
      set domain(value) {
        this[S$.domain] = D.as(value);
      }
      get measure() {
        return this[S$.measure];
      }
      set measure(value) {
        this[S$.measure] = value;
      }
      get boundingRect() {
        return dart.nullCheck(this[S$._boundingRect]);
      }
      set boundingRect(value) {
        return this[S$._boundingRect] = value;
      }
      get area() {
        return dart.nullCheck(this[S$._area]);
      }
      set area(value) {
        return this[S$._area] = value;
      }
      clone() {
        return new (TreeMapRendererElementOfD()).new({boundingRect: this[S$._boundingRect] == null ? null : T$.RectangleOfnum().fromPoints(this.boundingRect[S$.$topLeft], this.boundingRect[S$.$bottomRight]), area: this.area, fillPattern: this.fillPattern, fillColor: this.fillColor == null ? null : new color$.Color.fromOther({color: dart.nullCheck(this.fillColor)}), patternColor: this.patternColor == null ? null : new color$.Color.fromOther({color: dart.nullCheck(this.patternColor)}), strokeColor: this.strokeColor == null ? null : new color$.Color.fromOther({color: dart.nullCheck(this.strokeColor)}), strokeWidthPx: this.strokeWidthPx, isLeaf: this.isLeaf, index: this.index, series: this.series, domain: this.domain, measure: this.measure});
      }
      refreshPaintProperties() {
        this.strokeColor = dart.nullCheck(this.series.colorFn)(this.index);
        this.strokeWidthPx = dart.nullCheck(this.series.strokeWidthPxFn)(this.index);
        this.fillColor = dart.nullCheck(this.series.fillColorFn)(this.index);
        this.fillPattern = this.series.fillPatternFn == null ? chart_canvas.FillPatternType.solid : dart.nullCheck(this.series.fillPatternFn)(this.index);
        this.patternColor = dart.nullCheck(this.series.patternColorFn)(this.index);
      }
      updateAnimationPercent(previous, target, animationPercent) {
        TreeMapRendererElementOfD().as(previous);
        TreeMapRendererElementOfD().as(target);
        this.boundingRect = target.boundingRect;
        this.area = target.area;
      }
      toString() {
        return dart.str(this[S$.$runtimeType]) + new (T$.IdentityMapOfString$ObjectN()).from(["boundingRect", this.boundingRect, "area", this.area, "strokeColor", this.strokeColor, "strokeWidthPx", this.strokeWidthPx, "fillColor", this.fillColor, "fillPattern", this.fillPattern, "patternColor", this.patternColor, "isLeaf", this.isLeaf, "index", this.index, "domain", this.domain, "measure", this.measure])[S$.$toString]();
      }
    }
    (TreeMapRendererElement.new = function(opts) {
      let boundingRect = opts && 'boundingRect' in opts ? opts.boundingRect : null;
      let area = opts && 'area' in opts ? opts.area : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let patternColor = opts && 'patternColor' in opts ? opts.patternColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let isLeaf = opts && 'isLeaf' in opts ? opts.isLeaf : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let measure = opts && 'measure' in opts ? opts.measure : null;
      this[S$.fillColor] = fillColor;
      this[S$.fillPattern] = fillPattern;
      this[S$.patternColor] = patternColor;
      this[S$.strokeColor$1] = strokeColor;
      this[S$.isLeaf] = isLeaf;
      this[S$.strokeWidthPx$1] = strokeWidthPx;
      this[S$.index] = index;
      this[S$.series] = series;
      this[S$.domain] = domain;
      this[S$.measure] = measure;
      this[S$._boundingRect] = boundingRect;
      this[S$._area] = area;
      ;
    }).prototype = TreeMapRendererElement.prototype;
    dart.addTypeTests(TreeMapRendererElement);
    TreeMapRendererElement.prototype[_is_TreeMapRendererElement_default] = true;
    dart.addTypeCaches(TreeMapRendererElement);
    dart.setMethodSignature(TreeMapRendererElement, () => ({
      __proto__: dart.getMethods(TreeMapRendererElement.__proto__),
      clone: dart.fnType(treemap_renderer_element.TreeMapRendererElement$(D), []),
      refreshPaintProperties: dart.fnType(dart.void, []),
      updateAnimationPercent: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object), core.double])
    }));
    dart.setGetterSignature(TreeMapRendererElement, () => ({
      __proto__: dart.getGetters(TreeMapRendererElement.__proto__),
      boundingRect: math.Rectangle$(core.num),
      area: core.num
    }));
    dart.setSetterSignature(TreeMapRendererElement, () => ({
      __proto__: dart.getSetters(TreeMapRendererElement.__proto__),
      boundingRect: math.Rectangle$(core.num),
      area: core.num
    }));
    dart.setLibraryUri(TreeMapRendererElement, I[10]);
    dart.setFieldSignature(TreeMapRendererElement, () => ({
      __proto__: dart.getFields(TreeMapRendererElement.__proto__),
      [S$._boundingRect]: dart.fieldType(dart.nullable(math.Rectangle$(core.num))),
      [S$._area]: dart.fieldType(dart.nullable(core.num)),
      fillColor: dart.fieldType(dart.nullable(color$.Color)),
      fillPattern: dart.fieldType(dart.nullable(chart_canvas.FillPatternType)),
      patternColor: dart.fieldType(dart.nullable(color$.Color)),
      strokeColor: dart.fieldType(dart.nullable(color$.Color)),
      isLeaf: dart.fieldType(core.bool),
      strokeWidthPx: dart.fieldType(dart.nullable(core.num)),
      index: dart.fieldType(core.int),
      series: dart.fieldType(processed_series.ImmutableSeries$(D)),
      domain: dart.fieldType(D),
      measure: dart.fieldType(core.num)
    }));
    dart.defineExtensionMethods(TreeMapRendererElement, ['toString']);
    return TreeMapRendererElement;
  });
  treemap_renderer_element.TreeMapRendererElement = treemap_renderer_element.TreeMapRendererElement$();
  dart.addTypeTests(treemap_renderer_element.TreeMapRendererElement, _is_TreeMapRendererElement_default);
  const _is_TreeMapRendererDecorator_default = Symbol('_is_TreeMapRendererDecorator_default');
  treemap_renderer_decorator.TreeMapRendererDecorator$ = dart.generic(D => {
    class TreeMapRendererDecorator extends core.Object {}
    (TreeMapRendererDecorator.new = function() {
      ;
    }).prototype = TreeMapRendererDecorator.prototype;
    dart.addTypeTests(TreeMapRendererDecorator);
    TreeMapRendererDecorator.prototype[_is_TreeMapRendererDecorator_default] = true;
    dart.addTypeCaches(TreeMapRendererDecorator);
    dart.setLibraryUri(TreeMapRendererDecorator, I[11]);
    return TreeMapRendererDecorator;
  });
  treemap_renderer_decorator.TreeMapRendererDecorator = treemap_renderer_decorator.TreeMapRendererDecorator$();
  dart.addTypeTests(treemap_renderer_decorator.TreeMapRendererDecorator, _is_TreeMapRendererDecorator_default);
  const _is_TreeMapLabelDecorator_default = Symbol('_is_TreeMapLabelDecorator_default');
  treemap_label_decorator.TreeMapLabelDecorator$ = dart.generic(D => {
    var TreeMapRendererElementOfD = () => (TreeMapRendererElementOfD = dart.constFn(treemap_renderer_element.TreeMapRendererElement$(D)))();
    class TreeMapLabelDecorator extends treemap_renderer_decorator.TreeMapRendererDecorator$(D) {
      get labelStyleSpec() {
        return this[S$.labelStyleSpec];
      }
      set labelStyleSpec(value) {
        super.labelStyleSpec = value;
      }
      get labelPadding() {
        return this[S$.labelPadding];
      }
      set labelPadding(value) {
        super.labelPadding = value;
      }
      get allowLabelOverflow() {
        return this[S$.allowLabelOverflow];
      }
      set allowLabelOverflow(value) {
        super.allowLabelOverflow = value;
      }
      get enableMultiline() {
        return this[S$.enableMultiline];
      }
      set enableMultiline(value) {
        super.enableMultiline = value;
      }
      decorate(rendererElement, canvas, graphicsFactory, opts) {
        let t4;
        TreeMapRendererElementOfD().as(rendererElement);
        let drawBounds = opts && 'drawBounds' in opts ? opts.drawBounds : null;
        let animationPercent = opts && 'animationPercent' in opts ? opts.animationPercent : null;
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        let renderVertically = opts && 'renderVertically' in opts ? opts.renderVertically : false;
        let renderMultiline = opts && 'renderMultiline' in opts ? opts.renderMultiline : false;
        if (animationPercent !== 1.0) return;
        let labelStyle = this[S$._asTextStyle](graphicsFactory, this.labelStyleSpec);
        let labelFn = rendererElement.series.labelAccessorFn;
        let datumIndex = rendererElement.index;
        let label = labelFn != null ? labelFn(datumIndex) : null;
        if (label == null || label[S$.$isEmpty]) return;
        let datumLabelStyle = this[S$._datumStyle](rendererElement.series.insideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: labelStyle});
        let rect = rendererElement.boundingRect;
        let labelElement = (t4 = graphicsFactory.createTextElement(label), (() => {
          t4.textStyle = datumLabelStyle;
          t4.textDirection = rtl ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
          return t4;
        })());
        let labelHeight = labelElement.measurement.verticalSliceWidth;
        let maxLabelHeight = (renderVertically ? rect[S$.$width] : rect[S$.$height]) - this.labelPadding * 2;
        let maxLabelWidth = (renderVertically ? rect[S$.$height] : rect[S$.$width]) - this.labelPadding * 2;
        let multiline = this.enableMultiline && renderMultiline;
        let parts = text_utils.wrapLabelLines(labelElement, graphicsFactory, maxLabelWidth, maxLabelHeight, {allowLabelOverflow: this.allowLabelOverflow, multiline: multiline});
        for (let index = 0; index < parts[S$.$length]; index = index + 1) {
          let segment = this[S$._createLabelSegment](rect, labelHeight, parts[S$.$_get](index), index, {rtl: rtl, rotate: renderVertically});
          canvas.drawText(segment.text, segment.xOffet, segment.yOffset, {rotation: segment.rotationAngle});
        }
      }
      [S$._asTextStyle](graphicsFactory, labelSpec) {
        let t5, t5$, t4;
        t4 = graphicsFactory.createTextPaint();
        return (() => {
          t4.color = (t5 = labelSpec.color, t5 == null ? color$.Color.black : t5);
          t4.fontFamily = labelSpec.fontFamily;
          t4.fontSize = (t5$ = labelSpec.fontSize, t5$ == null ? 12 : t5$);
          t4.lineHeight = labelSpec.lineHeight;
          return t4;
        })();
      }
      [S$._datumStyle](labelStyleFn, datumIndex, graphicsFactory, opts) {
        let t4;
        let defaultStyle = opts && 'defaultStyle' in opts ? opts.defaultStyle : null;
        let styleSpec = (t4 = labelStyleFn, t4 == null ? null : t4(datumIndex));
        return styleSpec != null ? this[S$._asTextStyle](graphicsFactory, styleSpec) : defaultStyle;
      }
      [S$._createLabelSegment](elementBoundingRect, labelHeight, labelElement, position, opts) {
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        let rotate = opts && 'rotate' in opts ? opts.rotate : false;
        let xOffset = null;
        let yOffset = null;
        if (rotate) {
          xOffset = elementBoundingRect[S$.$right] - this.labelPadding - 2 * dart.nullCheck(dart.nullCheck(labelElement.textStyle).fontSize) - labelHeight * position;
        } else if (rtl) {
          xOffset = elementBoundingRect[S$.$right] - this.labelPadding;
        } else {
          xOffset = elementBoundingRect[S$.$left] + this.labelPadding;
        }
        if (!rotate) {
          yOffset = elementBoundingRect[S$.$top] + this.labelPadding + labelHeight * position;
        } else if (rtl) {
          yOffset = elementBoundingRect[S$.$bottom] - this.labelPadding;
        } else {
          yOffset = elementBoundingRect[S$.$top] + this.labelPadding;
        }
        return new treemap_label_decorator._TreeMapLabelSegment.new(labelElement, xOffset[S$.$toInt](), yOffset[S$.$toInt](), rotate ? 1.5707963267948966 : 0.0);
      }
    }
    (TreeMapLabelDecorator.new = function(opts) {
      let t4;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : 4;
      let allowLabelOverflow = opts && 'allowLabelOverflow' in opts ? opts.allowLabelOverflow : true;
      let enableMultiline = opts && 'enableMultiline' in opts ? opts.enableMultiline : false;
      this[S$.labelPadding] = labelPadding;
      this[S$.allowLabelOverflow] = allowLabelOverflow;
      this[S$.enableMultiline] = enableMultiline;
      this[S$.labelStyleSpec] = (t4 = labelStyleSpec, t4 == null ? treemap_label_decorator.TreeMapLabelDecorator._defaultLabelStyle : t4);
      TreeMapLabelDecorator.__proto__.new.call(this);
      ;
    }).prototype = TreeMapLabelDecorator.prototype;
    dart.addTypeTests(TreeMapLabelDecorator);
    TreeMapLabelDecorator.prototype[_is_TreeMapLabelDecorator_default] = true;
    dart.addTypeCaches(TreeMapLabelDecorator);
    dart.setMethodSignature(TreeMapLabelDecorator, () => ({
      __proto__: dart.getMethods(TreeMapLabelDecorator.__proto__),
      decorate: dart.fnType(dart.void, [dart.nullable(core.Object), chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory], {animationPercent: core.double, drawBounds: math.Rectangle$(core.num), renderMultiline: core.bool, renderVertically: core.bool, rtl: core.bool}, {}),
      [S$._asTextStyle]: dart.fnType(text_style.TextStyle, [graphics_factory.GraphicsFactory, axis_spec.TextStyleSpec]),
      [S$._datumStyle]: dart.fnType(text_style.TextStyle, [dart.nullable(dart.fnType(axis_spec.TextStyleSpec, [dart.nullable(core.int)])), core.int, graphics_factory.GraphicsFactory], {}, {defaultStyle: text_style.TextStyle}),
      [S$._createLabelSegment]: dart.fnType(treemap_label_decorator._TreeMapLabelSegment, [math.Rectangle$(core.num), core.num, text_element.TextElement, core.int], {rotate: core.bool, rtl: core.bool}, {})
    }));
    dart.setLibraryUri(TreeMapLabelDecorator, I[12]);
    dart.setFieldSignature(TreeMapLabelDecorator, () => ({
      __proto__: dart.getFields(TreeMapLabelDecorator.__proto__),
      labelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      labelPadding: dart.finalFieldType(core.int),
      allowLabelOverflow: dart.finalFieldType(core.bool),
      enableMultiline: dart.finalFieldType(core.bool)
    }));
    return TreeMapLabelDecorator;
  });
  treemap_label_decorator.TreeMapLabelDecorator = treemap_label_decorator.TreeMapLabelDecorator$();
  dart.defineLazy(treemap_label_decorator.TreeMapLabelDecorator, {
    /*treemap_label_decorator.TreeMapLabelDecorator._defaultLabelPadding*/get _defaultLabelPadding() {
      return 4;
    },
    /*treemap_label_decorator.TreeMapLabelDecorator._defaultFontSize*/get _defaultFontSize() {
      return 12;
    },
    /*treemap_label_decorator.TreeMapLabelDecorator._defaultLabelStyle*/get _defaultLabelStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 12, color: color$.Color.black});
    },
    /*treemap_label_decorator.TreeMapLabelDecorator._90DegreeClockwise*/get _90DegreeClockwise() {
      return 1.5707963267948966;
    }
  }, false);
  dart.addTypeTests(treemap_label_decorator.TreeMapLabelDecorator, _is_TreeMapLabelDecorator_default);
  treemap_label_decorator._TreeMapLabelSegment = class _TreeMapLabelSegment extends core.Object {};
  (treemap_label_decorator._TreeMapLabelSegment.new = function(text, xOffet, yOffset, rotationAngle) {
    this.text = text;
    this.xOffet = xOffet;
    this.yOffset = yOffset;
    this.rotationAngle = rotationAngle;
    ;
  }).prototype = treemap_label_decorator._TreeMapLabelSegment.prototype;
  dart.addTypeTests(treemap_label_decorator._TreeMapLabelSegment);
  dart.addTypeCaches(treemap_label_decorator._TreeMapLabelSegment);
  dart.setLibraryUri(treemap_label_decorator._TreeMapLabelSegment, I[12]);
  dart.setFieldSignature(treemap_label_decorator._TreeMapLabelSegment, () => ({
    __proto__: dart.getFields(treemap_label_decorator._TreeMapLabelSegment.__proto__),
    text: dart.finalFieldType(text_element.TextElement),
    xOffet: dart.finalFieldType(core.int),
    yOffset: dart.finalFieldType(core.int),
    rotationAngle: dart.finalFieldType(core.double)
  }));
  const _is__AnimatedTreeMapRect_default = Symbol('_is__AnimatedTreeMapRect_default');
  base_treemap_renderer._AnimatedTreeMapRect$ = dart.generic(D => {
    var TreeMapRendererElementOfD = () => (TreeMapRendererElementOfD = dart.constFn(treemap_renderer_element.TreeMapRendererElement$(D)))();
    class _AnimatedTreeMapRect extends core.Object {
      get [S$._targetRect]() {
        let t4;
        t4 = this[S$.___AnimatedTreeMapRect__targetRect];
        return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_targetRect")) : t4;
      }
      set [S$._targetRect](t4) {
        this[S$.___AnimatedTreeMapRect__targetRect] = t4;
      }
      animateOut() {
        let newTarget = dart.nullCheck(this[S$._currentRect]).clone();
        let rect = newTarget.boundingRect;
        newTarget.boundingRect = new (T$.RectangleOfnum()).new(rect[S$.$left] + rect[S$.$width] / 2, rect[S$.$top] + rect[S$.$height] / 2, 0, 0);
        newTarget.strokeWidthPx = 0.0;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        TreeMapRendererElementOfD().as(newTarget);
        this.animatingOut = false;
        this[S$._currentRect] == null ? this[S$._currentRect] = newTarget.clone() : null;
        this[S$._previousRect] = dart.nullCheck(this[S$._currentRect]).clone();
        this[S$._targetRect] = newTarget;
      }
      getCurrentRect(animationPercent) {
        if (animationPercent === 1.0 || this[S$._previousRect] == null) {
          this[S$._currentRect] = this[S$._targetRect];
          this[S$._previousRect] = this[S$._targetRect];
          return dart.nullCheck(this[S$._currentRect]);
        }
        dart.nullCheck(this[S$._currentRect]).updateAnimationPercent(dart.nullCheck(this[S$._previousRect]), this[S$._targetRect], animationPercent);
        return dart.nullCheck(this[S$._currentRect]);
      }
    }
    (_AnimatedTreeMapRect.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      this[S$._previousRect] = null;
      this[S$.___AnimatedTreeMapRect__targetRect] = null;
      this[S$._currentRect] = null;
      this.animatingOut = false;
      this.key = key;
      ;
    }).prototype = _AnimatedTreeMapRect.prototype;
    dart.addTypeTests(_AnimatedTreeMapRect);
    _AnimatedTreeMapRect.prototype[_is__AnimatedTreeMapRect_default] = true;
    dart.addTypeCaches(_AnimatedTreeMapRect);
    dart.setMethodSignature(_AnimatedTreeMapRect, () => ({
      __proto__: dart.getMethods(_AnimatedTreeMapRect.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      getCurrentRect: dart.fnType(treemap_renderer_element.TreeMapRendererElement$(D), [core.double])
    }));
    dart.setGetterSignature(_AnimatedTreeMapRect, () => ({
      __proto__: dart.getGetters(_AnimatedTreeMapRect.__proto__),
      [S$._targetRect]: treemap_renderer_element.TreeMapRendererElement$(D)
    }));
    dart.setSetterSignature(_AnimatedTreeMapRect, () => ({
      __proto__: dart.getSetters(_AnimatedTreeMapRect.__proto__),
      [S$._targetRect]: treemap_renderer_element.TreeMapRendererElement$(D)
    }));
    dart.setLibraryUri(_AnimatedTreeMapRect, I[4]);
    dart.setFieldSignature(_AnimatedTreeMapRect, () => ({
      __proto__: dart.getFields(_AnimatedTreeMapRect.__proto__),
      key: dart.finalFieldType(D),
      [S$._previousRect]: dart.fieldType(dart.nullable(treemap_renderer_element.TreeMapRendererElement$(D))),
      [S$.___AnimatedTreeMapRect__targetRect]: dart.fieldType(dart.nullable(treemap_renderer_element.TreeMapRendererElement$(D))),
      [S$._currentRect]: dart.fieldType(dart.nullable(treemap_renderer_element.TreeMapRendererElement$(D))),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedTreeMapRect;
  });
  base_treemap_renderer._AnimatedTreeMapRect = base_treemap_renderer._AnimatedTreeMapRect$();
  dart.addTypeTests(base_treemap_renderer._AnimatedTreeMapRect, _is__AnimatedTreeMapRect_default);
  dart.defineLazy(base_treemap_renderer, {
    /*base_treemap_renderer.treeMapElementsKey*/get treeMapElementsKey() {
      return C[7] || CT.C7;
    }
  }, false);
  const _is_SquarifiedTreeMapRenderer_default = Symbol('_is_SquarifiedTreeMapRenderer_default');
  squarified_treemap_renderer.SquarifiedTreeMapRenderer$ = dart.generic(D => {
    var TreeMapRendererConfigOfD = () => (TreeMapRendererConfigOfD = dart.constFn(treemap_renderer_config.TreeMapRendererConfig$(D)))();
    class SquarifiedTreeMapRenderer extends base_treemap_renderer.BaseTreeMapRenderer$(D) {
      tile(node) {
        let children = node.children;
        if (children[S$.$isNotEmpty]) {
          let remainingNodes = T$.ListQueueOfTreeNodeOfObject().of(children);
          let rect = this.availableLayoutBoundingRect(node);
          let analyzer = new squarified_treemap_renderer._SquarifyRatioAnalyzer.new(this[S$._ratio], dart.bind(this, 'areaForTreeNode'));
          let bestScore = 1 / 0;
          let width = math.min(core.num, rect.width, rect.height);
          let measure = this.measureForTreeNode(node);
          let scaleFactor = measure === 0 ? 0 : this.areaForRectangle(rect) / measure;
          this.scaleArea(children, scaleFactor);
          while (remainingNodes[S$.$isNotEmpty]) {
            let child = remainingNodes[S$.$first];
            analyzer.addNode(child);
            let score = analyzer.worst(width)[S$.$toDouble]();
            if (score <= bestScore) {
              remainingNodes.removeFirst();
              bestScore = score;
            } else {
              analyzer.removeLast();
              this.position(analyzer.nodes, rect, width, analyzer.layoutArea);
              width = math.min(core.num, rect.width, rect.height);
              analyzer.reset();
              bestScore = 1 / 0;
            }
          }
          if (analyzer.nodes[S$.$isNotEmpty]) {
            this.position(analyzer.nodes, rect, width, analyzer.layoutArea);
            analyzer.reset();
          }
        }
      }
    }
    (SquarifiedTreeMapRenderer.new = function(opts) {
      let t5, t5$;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      this[S$._ratio] = 0.5 * (1 + math.sqrt(5));
      SquarifiedTreeMapRenderer.__proto__.new.call(this, {config: (t5 = config, t5 == null ? new (TreeMapRendererConfigOfD()).new({tileType: treemap_renderer_config.TreeMapTileType.squarified}) : t5), rendererId: (t5$ = rendererId, t5$ == null ? "treemap" : t5$)});
      ;
    }).prototype = SquarifiedTreeMapRenderer.prototype;
    dart.addTypeTests(SquarifiedTreeMapRenderer);
    SquarifiedTreeMapRenderer.prototype[_is_SquarifiedTreeMapRenderer_default] = true;
    dart.addTypeCaches(SquarifiedTreeMapRenderer);
    dart.setMethodSignature(SquarifiedTreeMapRenderer, () => ({
      __proto__: dart.getMethods(SquarifiedTreeMapRenderer.__proto__),
      tile: dart.fnType(dart.void, [tree.TreeNode$(core.Object)])
    }));
    dart.setLibraryUri(SquarifiedTreeMapRenderer, I[13]);
    dart.setFieldSignature(SquarifiedTreeMapRenderer, () => ({
      __proto__: dart.getFields(SquarifiedTreeMapRenderer.__proto__),
      [S$._ratio]: dart.finalFieldType(core.double)
    }));
    return SquarifiedTreeMapRenderer;
  });
  squarified_treemap_renderer.SquarifiedTreeMapRenderer = squarified_treemap_renderer.SquarifiedTreeMapRenderer$();
  dart.addTypeTests(squarified_treemap_renderer.SquarifiedTreeMapRenderer, _is_SquarifiedTreeMapRenderer_default);
  squarified_treemap_renderer._SquarifyRatioAnalyzer = class _SquarifyRatioAnalyzer extends core.Object {
    addNode(node) {
      let t5;
      this.nodes[S$.$add](node);
      this[S$._layoutArea] = this[S$._layoutArea] + (t5 = node, this[S$._areaFn](t5));
    }
    removeLast() {
      let t5;
      this[S$._layoutArea] = this[S$._layoutArea] - (t5 = this.nodes[S$.$removeLast](), this[S$._areaFn](t5));
    }
    get layoutArea() {
      return this[S$._layoutArea];
    }
    worst(width) {
      let t5;
      let rMin = 1 / 0;
      let rMax = 0.0;
      for (let node of this.nodes) {
        let area = (t5 = node, this[S$._areaFn](t5))[S$.$toDouble]();
        if (area <= 0) continue;
        if (area < rMin) rMin = area;
        if (area > rMax) rMax = area;
      }
      let sqWidth = this[S$._square](width);
      let sqArea = this[S$._square](this[S$._layoutArea]);
      return sqArea > 0 ? math.max(core.num, sqWidth * rMax * this[S$._ratio] / sqArea, sqArea / (sqWidth * rMin * this[S$._ratio])) : 1 / 0;
    }
    reset() {
      this.nodes[S$.$clear]();
      this[S$._layoutArea] = 0.0;
    }
    [S$._square](n) {
      return n * n;
    }
  };
  (squarified_treemap_renderer._SquarifyRatioAnalyzer.new = function(_ratio, _areaFn) {
    this.nodes = T$.JSArrayOfTreeNodeOfObject().of([]);
    this[S$._layoutArea] = 0.0;
    this[S$._ratio] = _ratio;
    this[S$._areaFn] = _areaFn;
    ;
  }).prototype = squarified_treemap_renderer._SquarifyRatioAnalyzer.prototype;
  dart.addTypeTests(squarified_treemap_renderer._SquarifyRatioAnalyzer);
  dart.addTypeCaches(squarified_treemap_renderer._SquarifyRatioAnalyzer);
  dart.setMethodSignature(squarified_treemap_renderer._SquarifyRatioAnalyzer, () => ({
    __proto__: dart.getMethods(squarified_treemap_renderer._SquarifyRatioAnalyzer.__proto__),
    addNode: dart.fnType(dart.void, [tree.TreeNode$(core.Object)]),
    removeLast: dart.fnType(dart.void, []),
    worst: dart.fnType(core.num, [core.num]),
    reset: dart.fnType(dart.void, []),
    [S$._square]: dart.fnType(core.num, [core.num])
  }));
  dart.setGetterSignature(squarified_treemap_renderer._SquarifyRatioAnalyzer, () => ({
    __proto__: dart.getGetters(squarified_treemap_renderer._SquarifyRatioAnalyzer.__proto__),
    layoutArea: core.num
  }));
  dart.setLibraryUri(squarified_treemap_renderer._SquarifyRatioAnalyzer, I[13]);
  dart.setFieldSignature(squarified_treemap_renderer._SquarifyRatioAnalyzer, () => ({
    __proto__: dart.getFields(squarified_treemap_renderer._SquarifyRatioAnalyzer.__proto__),
    [S$._areaFn]: dart.finalFieldType(dart.fnType(core.num, [tree.TreeNode$(core.Object)])),
    [S$._ratio]: dart.finalFieldType(core.num),
    nodes: dart.finalFieldType(core.List$(tree.TreeNode$(core.Object))),
    [S$._layoutArea]: dart.fieldType(core.double)
  }));
  const _is_CartesianChart_default = Symbol('_is_CartesianChart_default');
  cartesian_chart.CartesianChart$ = dart.generic(D => {
    var AxisSpecOfD = () => (AxisSpecOfD = dart.constFn(axis_spec.AxisSpec$(D)))();
    var SeriesOfdynamic$D = () => (SeriesOfdynamic$D = dart.constFn(series$.Series$(dart.dynamic, D)))();
    var BarRendererOfD = () => (BarRendererOfD = dart.constFn(bar_renderer.BarRenderer$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var StringAndListOfMutableSeriesOfDTovoid = () => (StringAndListOfMutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [core.String, ListOfMutableSeriesOfD()])))();
    var MapOfString$ListOfMutableSeriesOfD = () => (MapOfString$ListOfMutableSeriesOfD = dart.constFn(core.Map$(core.String, ListOfMutableSeriesOfD())))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    var DToString = () => (DToString = dart.constFn(dart.fnType(core.String, [D])))();
    var intNToFn = () => (intNToFn = dart.constFn(dart.fnType(DToString(), [T$.intN()])))();
    var intNToNFn = () => (intNToNFn = dart.constFn(dart.nullable(intNToFn())))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var SeriesDatumOfDTovoid = () => (SeriesDatumOfDTovoid = dart.constFn(dart.fnType(dart.void, [SeriesDatumOfD()])))();
    class CartesianChart extends base_chart.BaseChart$(D) {
      get vertical() {
        return this[S$.vertical];
      }
      set vertical(value) {
        this[S$.vertical] = value;
      }
      get flipVerticalAxisOutput() {
        return this[S$.flipVerticalAxisOutput];
      }
      set flipVerticalAxisOutput(value) {
        this[S$.flipVerticalAxisOutput] = value;
      }
      init(context, graphicsFactory) {
        super.init(context, graphicsFactory);
        this[S$._primaryMeasureAxis].context = context;
        this[S$._primaryMeasureAxis].tickDrawStrategy = new (T$.GridlineRendererSpecOfnum()).new().createDrawStrategy(context, graphicsFactory);
        this[S$._secondaryMeasureAxis].context = context;
        this[S$._secondaryMeasureAxis].tickDrawStrategy = new (T$.GridlineRendererSpecOfnum()).new().createDrawStrategy(context, graphicsFactory);
        this[S$._disjointMeasureAxes][S$.$forEach](dart.fn((axisId, axis) => {
          axis.context = context;
          axis.tickDrawStrategy = new (T$.NoneDrawStrategyOfnum()).new(context, graphicsFactory);
        }, T$.StringAndNumericAxisTovoid()));
      }
      updateConfig(layoutConfig) {
        let t5;
        super.updateConfig((t5 = layoutConfig, t5 == null ? cartesian_chart.CartesianChart._defaultLayoutConfig : t5));
      }
      get domainAxis() {
        return this[S$._domainAxis];
      }
      set domainAxisSpec(axisSpec) {
        AxisSpecOfD().as(axisSpec);
        if (!dart.equals(this[S$._domainAxisSpec], axisSpec)) {
          this[S$._newDomainAxis] = this.createDomainAxisFromSpec(axisSpec);
          this[S$._newDomainAxisSpec] = axisSpec;
        }
      }
      createDomainAxisFromSpec(axisSpec) {
        AxisSpecOfD().as(axisSpec);
        return axisSpec.createAxis();
      }
      configurationChanged() {
        let t5, t5$, t5$0, t5$1, t5$2, t5$3, t5$4, t5$5;
        if (this[S$._newDomainAxis] != null) {
          this.markChartDirty();
          if (this[S$._domainAxis] != null) {
            this.removeView(dart.nullCheck(this[S$._domainAxis]));
          }
          this[S$._domainAxis] = this[S$._newDomainAxis];
          t5 = dart.nullCheck(this[S$._domainAxis]);
          (() => {
            t5.context = this.context;
            t5.layoutPaintOrder = 5;
            return t5;
          })();
          this.initDomainAxis();
          this.addView(dart.nullCheck(this[S$._domainAxis]));
          this[S$._newDomainAxis] = null;
        }
        if (this[S$._newDomainAxisSpec] != null) {
          this.markChartDirty();
          this[S$._domainAxisSpec] = this[S$._newDomainAxisSpec];
          dart.nullCheck(this[S$._newDomainAxisSpec]).configure(dart.nullCheck(this[S$._domainAxis]), this.context, dart.nullCheck(this.graphicsFactory));
          this[S$._newDomainAxisSpec] = null;
        }
        if (!dart.equals(this[S$._primaryMeasureAxisSpec], this[S$._newPrimaryMeasureAxisSpec])) {
          this.markChartDirty();
          this[S$._primaryMeasureAxisSpec] = this[S$._newPrimaryMeasureAxisSpec];
          this.removeView(this[S$._primaryMeasureAxis]);
          this[S$._primaryMeasureAxis] = (t5$0 = (t5$ = this[S$._primaryMeasureAxisSpec], t5$ == null ? null : t5$.createAxis()), t5$0 == null ? new axis$.NumericAxis.new() : t5$0);
          this[S$._primaryMeasureAxis].tickDrawStrategy = new (T$.GridlineRendererSpecOfnum()).new().createDrawStrategy(this.context, dart.nullCheck(this.graphicsFactory));
          t5$1 = this[S$._primaryMeasureAxisSpec];
          t5$1 == null ? null : t5$1.configure(this[S$._primaryMeasureAxis], this.context, dart.nullCheck(this.graphicsFactory));
          this.addView(this[S$._primaryMeasureAxis]);
        }
        if (!dart.equals(this[S$._secondaryMeasureAxisSpec], this[S$._newSecondaryMeasureAxisSpec])) {
          this.markChartDirty();
          this[S$._secondaryMeasureAxisSpec] = this[S$._newSecondaryMeasureAxisSpec];
          this.removeView(this[S$._secondaryMeasureAxis]);
          this[S$._secondaryMeasureAxis] = (t5$3 = (t5$2 = this[S$._secondaryMeasureAxisSpec], t5$2 == null ? null : t5$2.createAxis()), t5$3 == null ? new axis$.NumericAxis.new() : t5$3);
          this[S$._secondaryMeasureAxis].tickDrawStrategy = new (T$.GridlineRendererSpecOfnum()).new().createDrawStrategy(this.context, dart.nullCheck(this.graphicsFactory));
          t5$4 = this[S$._secondaryMeasureAxisSpec];
          t5$4 == null ? null : t5$4.configure(this[S$._secondaryMeasureAxis], this.context, dart.nullCheck(this.graphicsFactory));
          this.addView(this[S$._secondaryMeasureAxis]);
        }
        if (!dart.equals(this[S$._disjointMeasureAxesSpec], this[S$._newDisjointMeasureAxesSpec])) {
          this.markChartDirty();
          this[S$._disjointMeasureAxesSpec] = this[S$._newDisjointMeasureAxesSpec];
          this[S$._disjointMeasureAxes][S$.$forEach](dart.fn((axisId, axis) => {
            this.removeView(axis);
          }, T$.StringAndNumericAxisTovoid()));
          this[S$._disjointMeasureAxes] = new (T$.IdentityMapOfString$NumericAxis()).new();
          t5$5 = this[S$._disjointMeasureAxesSpec];
          t5$5 == null ? null : t5$5[S$.$forEach](dart.fn((axisId, axisSpec) => {
            this[S$._disjointMeasureAxes][S$.$_set](axisId, axisSpec.createAxis());
            dart.nullCheck(this[S$._disjointMeasureAxes][S$.$_get](axisId)).tickDrawStrategy = new (T$.NoneDrawStrategyOfnum()).new(this.context, dart.nullCheck(this.graphicsFactory));
            axisSpec.configure(dart.nullCheck(this[S$._disjointMeasureAxes][S$.$_get](axisId)), this.context, dart.nullCheck(this.graphicsFactory));
            this.addView(dart.nullCheck(this[S$._disjointMeasureAxes][S$.$_get](axisId)));
          }, T$.StringAndNumericAxisSpecTovoid()));
        }
      }
      getMeasureAxis(opts) {
        let axisId = opts && 'axisId' in opts ? opts.axisId : null;
        let axis = null;
        if (axisId === "secondaryMeasureAxisId") {
          axis = this[S$._secondaryMeasureAxis];
        } else if (axisId === "primaryMeasureAxisId") {
          axis = this[S$._primaryMeasureAxis];
        } else if (axisId != null && this[S$._disjointMeasureAxes][S$.$_get](axisId) != null) {
          axis = this[S$._disjointMeasureAxes][S$.$_get](axisId);
        }
        axis == null ? axis = this[S$._primaryMeasureAxis] : null;
        return axis;
      }
      set primaryMeasureAxisSpec(axisSpec) {
        let t5;
        this[S$._newPrimaryMeasureAxisSpec] = axisSpec;
        t5 = axisSpec;
        t5 == null ? null : t5.configure(this[S$._primaryMeasureAxis], this.context, dart.nullCheck(this.graphicsFactory));
      }
      set secondaryMeasureAxisSpec(axisSpec) {
        let t5;
        this[S$._newSecondaryMeasureAxisSpec] = axisSpec;
        t5 = axisSpec;
        t5 == null ? null : t5.configure(this[S$._secondaryMeasureAxis], this.context, dart.nullCheck(this.graphicsFactory));
      }
      set disjointMeasureAxisSpecs(axisSpecs) {
        let t5;
        this[S$._newDisjointMeasureAxesSpec] = axisSpecs;
        t5 = axisSpecs;
        t5 == null ? null : t5[S$.$forEach](dart.fn((axisId, axisSpec) => {
          if (this[S$._disjointMeasureAxes][S$.$containsKey](axisId)) {
            axisSpec.configure(dart.nullCheck(this[S$._disjointMeasureAxes][S$.$_get](axisId)), this.context, dart.nullCheck(this.graphicsFactory));
          }
        }, T$.StringAndNumericAxisSpecTovoid()));
      }
      makeSeries(series) {
        let t5;
        SeriesOfdynamic$D().as(series);
        let s = super.makeSeries(series);
        t5 = s;
        t5.measureOffsetFn == null ? t5.measureOffsetFn = dart.fn(_ => 0, T$.intNToint()) : null;
        s.setAttr(T$.AxisNOfObjectN(), axis$.domainAxisKey, this.domainAxis);
        s.setAttr(T$.AxisOfObject(), axis$.measureAxisKey, this.getMeasureAxis({axisId: series.getAttribute(core.String, axis$.measureAxisIdKey)}));
        return s;
      }
      makeDefaultRenderer() {
        let t5;
        t5 = BarRendererOfD().new();
        return (() => {
          t5.rendererId = "default";
          return t5;
        })();
      }
      preprocessSeries(seriesList) {
        let t5, t5$, t5$0, t5$1, t5$2, t5$3;
        ListOfMutableSeriesOfD().as(seriesList);
        let rendererToSeriesList = super.preprocessSeries(seriesList);
        this[S$._useSecondaryMeasureAxis] = false;
        for (let series of seriesList) {
          let measureAxisId = series.getAttr(core.String, axis$.measureAxisIdKey);
          this[S$._usePrimaryMeasureAxis] = this[S$._usePrimaryMeasureAxis] || measureAxisId == null || measureAxisId === "primaryMeasureAxisId";
          this[S$._useSecondaryMeasureAxis] = this[S$._useSecondaryMeasureAxis] || measureAxisId === "secondaryMeasureAxisId";
        }
        if (this[S$._usePrimaryMeasureAxis]) {
          this.addView(this[S$._primaryMeasureAxis]);
        } else {
          this.removeView(this[S$._primaryMeasureAxis]);
        }
        if (this[S$._useSecondaryMeasureAxis]) {
          this.addView(this[S$._secondaryMeasureAxis]);
        } else {
          this.removeView(this[S$._secondaryMeasureAxis]);
        }
        this[S$._disjointMeasureAxes][S$.$forEach](dart.fn((axisId, axis) => {
          this.addView(axis);
        }, T$.StringAndNumericAxisTovoid()));
        let domainAxis = dart.nullCheck(this.domainAxis);
        domainAxis.resetDomains();
        this[S$._primaryMeasureAxis].resetDomains();
        this[S$._secondaryMeasureAxis].resetDomains();
        this[S$._disjointMeasureAxes][S$.$forEach](dart.fn((axisId, axis) => {
          axis.resetDomains();
        }, T$.StringAndNumericAxisTovoid()));
        let reverseAxisDirection = this.context !== null && this.context.isRtl;
        if (this.vertical) {
          t5 = domainAxis;
          (() => {
            t5.axisOrientation = axis$.AxisOrientation.bottom;
            t5.reverseOutputRange = reverseAxisDirection;
            return t5;
          })();
          t5$ = this[S$._primaryMeasureAxis];
          (() => {
            t5$.axisOrientation = reverseAxisDirection ? axis$.AxisOrientation.right : axis$.AxisOrientation.left;
            t5$.reverseOutputRange = this.flipVerticalAxisOutput;
            return t5$;
          })();
          t5$0 = this[S$._secondaryMeasureAxis];
          (() => {
            t5$0.axisOrientation = reverseAxisDirection ? axis$.AxisOrientation.left : axis$.AxisOrientation.right;
            t5$0.reverseOutputRange = this.flipVerticalAxisOutput;
            return t5$0;
          })();
          this[S$._disjointMeasureAxes][S$.$forEach](dart.fn((axisId, axis) => {
            let t5;
            t5 = axis;
            (() => {
              t5.axisOrientation = reverseAxisDirection ? axis$.AxisOrientation.left : axis$.AxisOrientation.right;
              t5.reverseOutputRange = this.flipVerticalAxisOutput;
              return t5;
            })();
          }, T$.StringAndNumericAxisTovoid()));
        } else {
          t5$1 = domainAxis;
          (() => {
            t5$1.axisOrientation = reverseAxisDirection ? axis$.AxisOrientation.right : axis$.AxisOrientation.left;
            t5$1.reverseOutputRange = this.flipVerticalAxisOutput;
            return t5$1;
          })();
          t5$2 = this[S$._primaryMeasureAxis];
          (() => {
            t5$2.axisOrientation = axis$.AxisOrientation.bottom;
            t5$2.reverseOutputRange = reverseAxisDirection;
            return t5$2;
          })();
          t5$3 = this[S$._secondaryMeasureAxis];
          (() => {
            t5$3.axisOrientation = axis$.AxisOrientation.top;
            t5$3.reverseOutputRange = reverseAxisDirection;
            return t5$3;
          })();
          this[S$._disjointMeasureAxes][S$.$forEach](dart.fn((axisId, axis) => {
            let t5;
            t5 = axis;
            (() => {
              t5.axisOrientation = axis$.AxisOrientation.top;
              t5.reverseOutputRange = reverseAxisDirection;
              return t5;
            })();
          }, T$.StringAndNumericAxisTovoid()));
        }
        rendererToSeriesList[S$.$forEach](dart.fn((rendererId, seriesList) => {
          this.getSeriesRenderer(rendererId).configureDomainAxes(seriesList);
          this.getSeriesRenderer(rendererId).configureMeasureAxes(seriesList);
        }, StringAndListOfMutableSeriesOfDTovoid()));
        return rendererToSeriesList;
      }
      onSkipLayout() {
        dart.nullCheck(this.domainAxis).updateTicks();
        if (this[S$._usePrimaryMeasureAxis]) {
          this[S$._primaryMeasureAxis].updateTicks();
        }
        if (this[S$._useSecondaryMeasureAxis]) {
          this[S$._secondaryMeasureAxis].updateTicks();
        }
        this[S$._disjointMeasureAxes][S$.$forEach](dart.fn((axisId, axis) => {
          axis.updateTicks();
        }, T$.StringAndNumericAxisTovoid()));
        super.onSkipLayout();
      }
      onPostLayout(rendererToSeriesList) {
        MapOfString$ListOfMutableSeriesOfD().as(rendererToSeriesList);
        this.fireOnAxisConfigured();
        super.onPostLayout(rendererToSeriesList);
      }
      getDatumDetails(type) {
        let entries = JSArrayOfDatumDetailsOfD().of([]);
        this.getSelectionModel(type).selectedDatum[S$.$forEach](dart.fn(seriesDatum => {
          let t6, t5, t6$, t5$, t6$0, t5$0, t5$1, t5$2;
          let series = seriesDatum.series;
          let datum = seriesDatum.datum;
          let datumIndex = seriesDatum.index;
          let domain = (t5 = series, t6 = datumIndex, t5.domainFn(t6));
          let domainFormatterFn = intNToNFn().as(series.domainFormatterFn);
          let measure = (t5$ = series, t6$ = datumIndex, t5$.measureFn(t6$));
          let measureFormatterFn = series.measureFormatterFn;
          let measureOffset = dart.nullCheck(series.measureOffsetFn)(datumIndex);
          let rawMeasure = (t5$0 = series, t6$0 = datumIndex, t5$0.rawMeasureFn(t6$0));
          let color = dart.nullCheck(series.colorFn)(datumIndex);
          let renderer = this.getSeriesRenderer(series.getAttr(core.String, series_renderer.rendererIdKey));
          let datumDetails = renderer.addPositionToDetailsForSeriesDatum(new (DatumDetailsOfD()).new({datum: datum, domain: domain, domainFormatter: (t5$1 = domainFormatterFn, t5$1 == null ? null : t5$1(datumIndex)), index: datumIndex, measure: measure, measureFormatter: (t5$2 = measureFormatterFn, t5$2 == null ? null : t5$2(datumIndex)), measureOffset: measureOffset, rawMeasure: rawMeasure, series: series, color: color}), seriesDatum);
          entries[S$.$add](datumDetails);
        }, SeriesDatumOfDTovoid()));
        return entries;
      }
    }
    (CartesianChart.new = function(opts) {
      let t5, t5$, t5$0, t5$1, t5$2;
      let vertical = opts && 'vertical' in opts ? opts.vertical : null;
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
      let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
      let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
      let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
      this[S$._domainAxis] = null;
      this[S$._domainAxisSpec] = null;
      this[S$._newDomainAxisSpec] = null;
      this[S$._primaryMeasureAxisSpec] = null;
      this[S$._newPrimaryMeasureAxisSpec] = null;
      this[S$._secondaryMeasureAxisSpec] = null;
      this[S$._newSecondaryMeasureAxisSpec] = null;
      this[S$._disjointMeasureAxesSpec] = null;
      this[S$._newDisjointMeasureAxesSpec] = null;
      this[S$.flipVerticalAxisOutput] = false;
      this[S$._usePrimaryMeasureAxis] = false;
      this[S$._useSecondaryMeasureAxis] = false;
      this[S$.vertical] = (t5 = vertical, t5 == null ? true : t5);
      this[S$._newDomainAxis] = domainAxis;
      this[S$._primaryMeasureAxis] = (t5$ = primaryMeasureAxis, t5$ == null ? new axis$.NumericAxis.new() : t5$);
      this[S$._secondaryMeasureAxis] = (t5$0 = secondaryMeasureAxis, t5$0 == null ? new axis$.NumericAxis.new() : t5$0);
      this[S$._disjointMeasureAxes] = (t5$1 = disjointMeasureAxes, t5$1 == null ? new (T$.IdentityMapOfString$NumericAxis()).new() : t5$1);
      CartesianChart.__proto__.new.call(this, {layoutConfig: (t5$2 = layoutConfig, t5$2 == null ? cartesian_chart.CartesianChart._defaultLayoutConfig : t5$2)});
      ;
    }).prototype = CartesianChart.prototype;
    dart.addTypeTests(CartesianChart);
    CartesianChart.prototype[_is_CartesianChart_default] = true;
    dart.addTypeCaches(CartesianChart);
    dart.setMethodSignature(CartesianChart, () => ({
      __proto__: dart.getMethods(CartesianChart.__proto__),
      updateConfig: dart.fnType(dart.void, [dart.nullable(layout_config.LayoutConfig)]),
      createDomainAxisFromSpec: dart.fnType(dart.nullable(axis$.Axis$(D)), [dart.nullable(core.Object)]),
      getMeasureAxis: dart.fnType(axis$.NumericAxis, [], {axisId: dart.nullable(core.String)}, {}),
      makeDefaultRenderer: dart.fnType(series_renderer.SeriesRenderer$(D), []),
      getDatumDetails: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [selection_model.SelectionModelType])
    }));
    dart.setGetterSignature(CartesianChart, () => ({
      __proto__: dart.getGetters(CartesianChart.__proto__),
      domainAxis: dart.nullable(axis$.Axis$(D))
    }));
    dart.setSetterSignature(CartesianChart, () => ({
      __proto__: dart.getSetters(CartesianChart.__proto__),
      domainAxisSpec: dart.nullable(core.Object),
      primaryMeasureAxisSpec: dart.nullable(numeric_axis_spec.NumericAxisSpec),
      secondaryMeasureAxisSpec: dart.nullable(numeric_axis_spec.NumericAxisSpec),
      disjointMeasureAxisSpecs: dart.nullable(collection.LinkedHashMap$(core.String, numeric_axis_spec.NumericAxisSpec))
    }));
    dart.setLibraryUri(CartesianChart, I[14]);
    dart.setFieldSignature(CartesianChart, () => ({
      __proto__: dart.getFields(CartesianChart.__proto__),
      vertical: dart.fieldType(core.bool),
      [S$._domainAxis]: dart.fieldType(dart.nullable(axis$.Axis$(D))),
      [S$._newDomainAxis]: dart.fieldType(dart.nullable(axis$.Axis$(D))),
      [S$._domainAxisSpec]: dart.fieldType(dart.nullable(axis_spec.AxisSpec$(D))),
      [S$._newDomainAxisSpec]: dart.fieldType(dart.nullable(axis_spec.AxisSpec$(D))),
      [S$._primaryMeasureAxisSpec]: dart.fieldType(dart.nullable(numeric_axis_spec.NumericAxisSpec)),
      [S$._newPrimaryMeasureAxisSpec]: dart.fieldType(dart.nullable(numeric_axis_spec.NumericAxisSpec)),
      [S$._primaryMeasureAxis]: dart.fieldType(axis$.NumericAxis),
      [S$._secondaryMeasureAxisSpec]: dart.fieldType(dart.nullable(numeric_axis_spec.NumericAxisSpec)),
      [S$._newSecondaryMeasureAxisSpec]: dart.fieldType(dart.nullable(numeric_axis_spec.NumericAxisSpec)),
      [S$._secondaryMeasureAxis]: dart.fieldType(axis$.NumericAxis),
      [S$._disjointMeasureAxesSpec]: dart.fieldType(dart.nullable(collection.LinkedHashMap$(core.String, numeric_axis_spec.NumericAxisSpec))),
      [S$._newDisjointMeasureAxesSpec]: dart.fieldType(dart.nullable(collection.LinkedHashMap$(core.String, numeric_axis_spec.NumericAxisSpec))),
      [S$._disjointMeasureAxes]: dart.fieldType(collection.LinkedHashMap$(core.String, axis$.NumericAxis)),
      flipVerticalAxisOutput: dart.fieldType(core.bool),
      [S$._usePrimaryMeasureAxis]: dart.fieldType(core.bool),
      [S$._useSecondaryMeasureAxis]: dart.fieldType(core.bool)
    }));
    return CartesianChart;
  });
  cartesian_chart.CartesianChart = cartesian_chart.CartesianChart$();
  dart.defineLazy(cartesian_chart.CartesianChart, {
    /*cartesian_chart.CartesianChart._defaultLayoutConfig*/get _defaultLayoutConfig() {
      return new layout_config.LayoutConfig.new({topSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), bottomSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), leftSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), rightSpec: layout_config.MarginSpec.fromPixel({minPixel: 20})});
    }
  }, false);
  dart.addTypeTests(cartesian_chart.CartesianChart, _is_CartesianChart_default);
  time_series_chart.TimeSeriesChart = class TimeSeriesChart extends cartesian_chart.CartesianChart$(core.DateTime) {
    get dateTimeFactory() {
      return this[S$.dateTimeFactory];
    }
    set dateTimeFactory(value) {
      super.dateTimeFactory = value;
    }
    initDomainAxis() {
      dart.nullCheck(this.domainAxis).tickDrawStrategy = new (T$.SmallTickRendererSpecOfDateTime()).new().createDrawStrategy(this.context, dart.nullCheck(this.graphicsFactory));
    }
    makeDefaultRenderer() {
      let t5;
      t5 = T$.LineRendererOfDateTime().new();
      return (() => {
        t5.rendererId = "default";
        return t5;
      })();
    }
    createDomainAxisFromSpec(axisSpec) {
      T$.AxisSpecOfDateTime().as(axisSpec);
      return date_time_axis_spec.DateTimeAxisSpec.as(axisSpec).createDateTimeAxis(this.dateTimeFactory);
    }
  };
  (time_series_chart.TimeSeriesChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    let dateTimeFactory = opts && 'dateTimeFactory' in opts ? opts.dateTimeFactory : C[8] || CT.C8;
    this[S$.dateTimeFactory] = dateTimeFactory;
    time_series_chart.TimeSeriesChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, domainAxis: new date_time_axis.DateTimeAxis.new(dateTimeFactory), primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = time_series_chart.TimeSeriesChart.prototype;
  dart.addTypeTests(time_series_chart.TimeSeriesChart);
  dart.addTypeCaches(time_series_chart.TimeSeriesChart);
  dart.setMethodSignature(time_series_chart.TimeSeriesChart, () => ({
    __proto__: dart.getMethods(time_series_chart.TimeSeriesChart.__proto__),
    initDomainAxis: dart.fnType(dart.void, []),
    createDomainAxisFromSpec: dart.fnType(axis$.Axis$(core.DateTime), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(time_series_chart.TimeSeriesChart, I[15]);
  dart.setFieldSignature(time_series_chart.TimeSeriesChart, () => ({
    __proto__: dart.getFields(time_series_chart.TimeSeriesChart.__proto__),
    dateTimeFactory: dart.finalFieldType(date_time_factory.DateTimeFactory)
  }));
  const _is_ArcRendererDecorator_default = Symbol('_is_ArcRendererDecorator_default');
  arc_renderer_decorator.ArcRendererDecorator$ = dart.generic(D => {
    class ArcRendererDecorator extends core.Object {}
    (ArcRendererDecorator.new = function() {
      ;
    }).prototype = ArcRendererDecorator.prototype;
    dart.addTypeTests(ArcRendererDecorator);
    ArcRendererDecorator.prototype[_is_ArcRendererDecorator_default] = true;
    dart.addTypeCaches(ArcRendererDecorator);
    dart.setLibraryUri(ArcRendererDecorator, I[17]);
    return ArcRendererDecorator;
  });
  arc_renderer_decorator.ArcRendererDecorator = arc_renderer_decorator.ArcRendererDecorator$();
  dart.addTypeTests(arc_renderer_decorator.ArcRendererDecorator, _is_ArcRendererDecorator_default);
  const _is_ArcLabelDecorator_default = Symbol('_is_ArcLabelDecorator_default');
  arc_label_decorator.ArcLabelDecorator$ = dart.generic(D => {
    var ArcRendererElementListOfD = () => (ArcRendererElementListOfD = dart.constFn(arc_renderer_element.ArcRendererElementList$(D)))();
    class ArcLabelDecorator extends arc_renderer_decorator.ArcRendererDecorator$(D) {
      get insideLabelStyleSpec() {
        return this[S$.insideLabelStyleSpec];
      }
      set insideLabelStyleSpec(value) {
        super.insideLabelStyleSpec = value;
      }
      get outsideLabelStyleSpec() {
        return this[S$.outsideLabelStyleSpec];
      }
      set outsideLabelStyleSpec(value) {
        super.outsideLabelStyleSpec = value;
      }
      get leaderLineStyleSpec() {
        return this[S$.leaderLineStyleSpec];
      }
      set leaderLineStyleSpec(value) {
        super.leaderLineStyleSpec = value;
      }
      get labelPosition() {
        return this[S$.labelPosition];
      }
      set labelPosition(value) {
        super.labelPosition = value;
      }
      get labelPadding() {
        return this[S$.labelPadding$1];
      }
      set labelPadding(value) {
        super.labelPadding = value;
      }
      get showLeaderLines() {
        return this[S$.showLeaderLines];
      }
      set showLeaderLines(value) {
        super.showLeaderLines = value;
      }
      get renderAbove() {
        return this[S$.renderAbove];
      }
      set renderAbove(value) {
        super.renderAbove = value;
      }
      decorate(arcElements, canvas, graphicsFactory, opts) {
        let t5;
        ArcRendererElementListOfD().as(arcElements);
        let drawBounds = opts && 'drawBounds' in opts ? opts.drawBounds : null;
        let animationPercent = opts && 'animationPercent' in opts ? opts.animationPercent : null;
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        if (animationPercent !== 1.0) {
          return;
        }
        let insideLabelStyle = this[S$._getTextStyle](graphicsFactory, this.insideLabelStyleSpec);
        let outsideLabelStyle = this[S$._getTextStyle](graphicsFactory, this.outsideLabelStyleSpec);
        let previousOutsideLabelY = null;
        let previousLabelLeftOfChart = null;
        for (let element of arcElements.arcs) {
          let labelFn = element.series.labelAccessorFn;
          let datumIndex = element.index;
          let label = labelFn != null ? labelFn(datumIndex) : null;
          let datumInsideLabelStyle = this[S$._getDatumStyle](element.series.insideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: insideLabelStyle});
          let datumOutsideLabelStyle = this[S$._getDatumStyle](element.series.outsideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: outsideLabelStyle});
          if (label == null || label[S$.$isEmpty]) {
            continue;
          }
          let arcAngle = element.endAngle - element.startAngle;
          let centerAngle = element.startAngle + arcAngle / 2;
          let centerRadius = arcElements.innerRadius + (arcElements.radius - arcElements.innerRadius) / 2;
          let innerPoint = new (T$.PointOfdouble()).new(arcElements.center.x + arcElements.innerRadius * math.cos(centerAngle), arcElements.center.y + arcElements.innerRadius * math.sin(centerAngle));
          let outerPoint = new (T$.PointOfdouble()).new(arcElements.center.x + arcElements.radius * math.cos(centerAngle), arcElements.center.y + arcElements.radius * math.sin(centerAngle));
          let bounds = T$.RectangleOfdouble().fromPoints(innerPoint, outerPoint);
          let totalPadding = this.labelPadding * 2;
          let insideArcWidth = math.min(core.num, (arcAngle * 180 / 3.141592653589793 / 360 * (2 * 3.141592653589793 * centerRadius))[S$.$round](), arcElements.radius - arcElements.innerRadius - this.labelPadding)[S$.$round]();
          let leaderLineLength = this.showLeaderLines ? this.leaderLineStyleSpec.length : 0;
          let outsideArcWidth = (drawBounds[S$.$width] / 2 - bounds[S$.$width] - totalPadding - leaderLineLength)[S$.$round]();
          let labelElement = (t5 = graphicsFactory.createTextElement(label), (() => {
            t5.maxWidthStrategy = text_element.MaxWidthStrategy.ellipsize;
            return t5;
          })());
          let calculatedLabelPosition = this.calculateLabelPosition(labelElement, datumInsideLabelStyle, insideArcWidth, outsideArcWidth, element, this.labelPosition);
          if (calculatedLabelPosition === arc_label_decorator.ArcLabelPosition.inside) {
            labelElement.textStyle = datumInsideLabelStyle;
            labelElement.maxWidth = insideArcWidth;
          } else {
            labelElement.textStyle = datumOutsideLabelStyle;
            labelElement.maxWidth = outsideArcWidth;
          }
          if (dart.nullCheck(labelElement.maxWidth) > 0) {
            if (calculatedLabelPosition === arc_label_decorator.ArcLabelPosition.inside) {
              this[S$._drawInsideLabel](canvas, arcElements, labelElement, centerAngle);
            } else {
              let l = this[S$._drawOutsideLabel](canvas, drawBounds, arcElements, labelElement, centerAngle, previousOutsideLabelY, previousLabelLeftOfChart);
              if (l != null) {
                previousLabelLeftOfChart = core.bool.as(l[S$.$_get](0));
                previousOutsideLabelY = core.int.as(l[S$.$_get](1));
              }
            }
          }
        }
      }
      calculateLabelPosition(labelElement, labelStyle, insideArcWidth, outsideArcWidth, arcRendererelement, labelPosition) {
        if (labelPosition === arc_label_decorator.ArcLabelPosition.auto) {
          labelElement.textStyle = labelStyle;
          return insideArcWidth >= outsideArcWidth || labelElement.measurement.horizontalSliceWidth < insideArcWidth ? arc_label_decorator.ArcLabelPosition.inside : arc_label_decorator.ArcLabelPosition.outside;
        } else {
          return labelPosition;
        }
      }
      [S$._getTextStyle](graphicsFactory, labelSpec) {
        let t6, t6$, t5;
        t5 = graphicsFactory.createTextPaint();
        return (() => {
          t5.color = (t6 = labelSpec.color, t6 == null ? color$.Color.black : t6);
          t5.fontFamily = labelSpec.fontFamily;
          t5.fontSize = (t6$ = labelSpec.fontSize, t6$ == null ? 12 : t6$);
          t5.lineHeight = labelSpec.lineHeight;
          return t5;
        })();
      }
      [S$._getDatumStyle](labelFn, datumIndex, graphicsFactory, opts) {
        let defaultStyle = opts && 'defaultStyle' in opts ? opts.defaultStyle : null;
        let styleSpec = labelFn != null ? labelFn(datumIndex) : null;
        return styleSpec != null ? this[S$._getTextStyle](graphicsFactory, styleSpec) : defaultStyle;
      }
      [S$._drawInsideLabel](canvas, arcElements, labelElement, centerAngle) {
        let labelRadius = arcElements.innerRadius + (arcElements.radius - arcElements.innerRadius) / 2;
        let labelX = (arcElements.center.x + labelRadius * math.cos(centerAngle))[S$.$round]();
        let labelY = (arcElements.center.y + labelRadius * math.sin(centerAngle) - dart.nullCheck(this.insideLabelStyleSpec.fontSize) / 2)[S$.$round]();
        labelElement.textDirection = text_element.TextDirection.center;
        canvas.drawText(labelElement, labelX, labelY);
      }
      [S$._drawOutsideLabel](canvas, drawBounds, arcElements, labelElement, centerAngle, previousOutsideLabelY, previousLabelLeftOfChart) {
        let labelRadius = arcElements.radius + this.leaderLineStyleSpec.length / 2;
        let labelPoint = new (T$.PointOfdouble()).new(arcElements.center.x + labelRadius * math.cos(centerAngle), arcElements.center.y + labelRadius * math.sin(centerAngle));
        let centerAbs = centerAngle[S$.$abs]()[S$.$modulo](2 * 3.141592653589793);
        let labelLeftOfChart = 3.141592653589793 / 2 < centerAbs && centerAbs < 3.141592653589793 * 3 / 2;
        let labelX = labelLeftOfChart ? (labelPoint.x - this.labelPadding)[S$.$round]() : (labelPoint.x + this.labelPadding)[S$.$round]();
        let labelY = (labelPoint.y - dart.nullCheck(this.outsideLabelStyleSpec.fontSize) / 2)[S$.$round]();
        labelElement.textDirection = labelLeftOfChart ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
        if (this[S$._detectOutsideLabelCollision](labelY, labelLeftOfChart, previousOutsideLabelY, previousLabelLeftOfChart)) {
          return null;
        }
        if (this.showLeaderLines) {
          let tailX = this[S$._drawLeaderLine](canvas, labelLeftOfChart, labelPoint, arcElements.radius, arcElements.center, centerAngle);
          labelX = (labelX + tailX)[S$.$round]();
          labelElement.maxWidth = (dart.nullCheck(labelElement.maxWidth) - tailX)[S$.$round]();
        }
        canvas.drawText(labelElement, labelX, labelY);
        return T$.JSArrayOfObject().of([labelLeftOfChart, labelY]);
      }
      [S$._detectOutsideLabelCollision](labelY, labelLeftOfChart, previousOutsideLabelY, previousLabelLeftOfChart) {
        let collides = false;
        if (previousOutsideLabelY != null && labelLeftOfChart === previousLabelLeftOfChart) {
          if (labelY > dart.notNull(previousOutsideLabelY)) {
            if (labelY - dart.nullCheck(this.outsideLabelStyleSpec.fontSize) <= dart.notNull(previousOutsideLabelY)) {
              collides = true;
            }
          } else {
            if (labelY + dart.nullCheck(this.outsideLabelStyleSpec.fontSize) >= dart.notNull(previousOutsideLabelY)) {
              collides = true;
            }
          }
        }
        return collides;
      }
      [S$._drawLeaderLine](canvas, labelLeftOfChart, labelPoint, radius, arcCenterPoint, centerAngle) {
        let tailX = (labelLeftOfChart ? -1 : 1) * this.leaderLineStyleSpec.length;
        let leaderLineTailPoint = new (T$.PointOfdouble()).new(labelPoint.x + tailX, labelPoint.y);
        let centerRadius = radius - this.leaderLineStyleSpec.length / 2;
        let leaderLineStartPoint = new (T$.PointOfdouble()).new(arcCenterPoint.x + centerRadius * math.cos(centerAngle), arcCenterPoint.y + centerRadius * math.sin(centerAngle));
        canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([leaderLineStartPoint, labelPoint, leaderLineTailPoint]), stroke: this.leaderLineStyleSpec.color, strokeWidthPx: this.leaderLineStyleSpec.thickness});
        return tailX;
      }
    }
    (ArcLabelDecorator.new = function(opts) {
      let t5, t5$, t5$0;
      let insideLabelStyleSpec = opts && 'insideLabelStyleSpec' in opts ? opts.insideLabelStyleSpec : null;
      let outsideLabelStyleSpec = opts && 'outsideLabelStyleSpec' in opts ? opts.outsideLabelStyleSpec : null;
      let leaderLineStyleSpec = opts && 'leaderLineStyleSpec' in opts ? opts.leaderLineStyleSpec : null;
      let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : C[10] || CT.C10;
      let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : 5;
      let showLeaderLines = opts && 'showLeaderLines' in opts ? opts.showLeaderLines : true;
      let leaderLineColor = opts && 'leaderLineColor' in opts ? opts.leaderLineColor : null;
      this[S$.renderAbove] = true;
      this[S$.labelPosition] = labelPosition;
      this[S$.labelPadding$1] = labelPadding;
      this[S$.showLeaderLines] = showLeaderLines;
      this[S$.insideLabelStyleSpec] = (t5 = insideLabelStyleSpec, t5 == null ? arc_label_decorator.ArcLabelDecorator._defaultInsideLabelStyle : t5);
      this[S$.outsideLabelStyleSpec] = (t5$ = outsideLabelStyleSpec, t5$ == null ? arc_label_decorator.ArcLabelDecorator._defaultOutsideLabelStyle : t5$);
      this[S$.leaderLineStyleSpec] = (t5$0 = leaderLineStyleSpec, t5$0 == null ? arc_label_decorator.ArcLabelDecorator._defaultLeaderLineStyle : t5$0);
      ArcLabelDecorator.__proto__.new.call(this);
      ;
    }).prototype = ArcLabelDecorator.prototype;
    dart.addTypeTests(ArcLabelDecorator);
    ArcLabelDecorator.prototype[_is_ArcLabelDecorator_default] = true;
    dart.addTypeCaches(ArcLabelDecorator);
    dart.setMethodSignature(ArcLabelDecorator, () => ({
      __proto__: dart.getMethods(ArcLabelDecorator.__proto__),
      decorate: dart.fnType(dart.void, [dart.nullable(core.Object), chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory], {animationPercent: core.double, drawBounds: math.Rectangle$(core.num), rtl: core.bool}, {}),
      calculateLabelPosition: dart.fnType(arc_label_decorator.ArcLabelPosition, [text_element.TextElement, text_style.TextStyle, core.int, core.int, arc_renderer_element.ArcRendererElement, arc_label_decorator.ArcLabelPosition]),
      [S$._getTextStyle]: dart.fnType(text_style.TextStyle, [graphics_factory.GraphicsFactory, axis_spec.TextStyleSpec]),
      [S$._getDatumStyle]: dart.fnType(text_style.TextStyle, [dart.nullable(dart.fnType(axis_spec.TextStyleSpec, [dart.nullable(core.int)])), dart.nullable(core.int), graphics_factory.GraphicsFactory], {}, {defaultStyle: text_style.TextStyle}),
      [S$._drawInsideLabel]: dart.fnType(dart.void, [chart_canvas.ChartCanvas, arc_renderer_element.ArcRendererElementList$(D), text_element.TextElement, core.double]),
      [S$._drawOutsideLabel]: dart.fnType(dart.nullable(core.List$(core.Object)), [chart_canvas.ChartCanvas, math.Rectangle$(core.num), arc_renderer_element.ArcRendererElementList$(D), text_element.TextElement, core.double, dart.nullable(core.num), dart.nullable(core.bool)]),
      [S$._detectOutsideLabelCollision]: dart.fnType(core.bool, [core.num, core.bool, dart.nullable(core.num), dart.nullable(core.bool)]),
      [S$._drawLeaderLine]: dart.fnType(core.double, [chart_canvas.ChartCanvas, core.bool, math.Point$(core.double), core.double, math.Point$(core.double), core.double])
    }));
    dart.setLibraryUri(ArcLabelDecorator, I[18]);
    dart.setFieldSignature(ArcLabelDecorator, () => ({
      __proto__: dart.getFields(ArcLabelDecorator.__proto__),
      insideLabelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      outsideLabelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      leaderLineStyleSpec: dart.finalFieldType(arc_label_decorator.ArcLabelLeaderLineStyleSpec),
      labelPosition: dart.finalFieldType(arc_label_decorator.ArcLabelPosition),
      labelPadding: dart.finalFieldType(core.int),
      showLeaderLines: dart.finalFieldType(core.bool),
      renderAbove: dart.finalFieldType(core.bool)
    }));
    return ArcLabelDecorator;
  });
  arc_label_decorator.ArcLabelDecorator = arc_label_decorator.ArcLabelDecorator$();
  dart.defineLazy(arc_label_decorator.ArcLabelDecorator, {
    /*arc_label_decorator.ArcLabelDecorator._defaultLabelPosition*/get _defaultLabelPosition() {
      return C[10] || CT.C10;
    },
    /*arc_label_decorator.ArcLabelDecorator._defaultLabelPadding*/get _defaultLabelPadding() {
      return 5;
    },
    /*arc_label_decorator.ArcLabelDecorator._defaultInsideLabelStyle*/get _defaultInsideLabelStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 12, color: color$.Color.white});
    },
    /*arc_label_decorator.ArcLabelDecorator._defaultOutsideLabelStyle*/get _defaultOutsideLabelStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 12, color: color$.Color.black});
    },
    /*arc_label_decorator.ArcLabelDecorator._defaultLeaderLineStyle*/get _defaultLeaderLineStyle() {
      return new arc_label_decorator.ArcLabelLeaderLineStyleSpec.new({length: 20.0, thickness: 1.0, color: style_factory.StyleFactory.style.arcLabelOutsideLeaderLine});
    },
    /*arc_label_decorator.ArcLabelDecorator._defaultShowLeaderLines*/get _defaultShowLeaderLines() {
      return true;
    }
  }, false);
  dart.addTypeTests(arc_label_decorator.ArcLabelDecorator, _is_ArcLabelDecorator_default);
  const _is_SunburstArcLabelDecorator_default = Symbol('_is_SunburstArcLabelDecorator_default');
  sunburst_arc_label_decorator.SunburstArcLabelDecorator$ = dart.generic(D => {
    var ArcRendererElementListOfD = () => (ArcRendererElementListOfD = dart.constFn(arc_renderer_element.ArcRendererElementList$(D)))();
    var ArcRendererElementOfD = () => (ArcRendererElementOfD = dart.constFn(arc_renderer_element.ArcRendererElement$(D)))();
    var ArcRendererElementOfDTobool = () => (ArcRendererElementOfDTobool = dart.constFn(dart.fnType(core.bool, [ArcRendererElementOfD()])))();
    class SunburstArcLabelDecorator extends arc_label_decorator.ArcLabelDecorator$(D) {
      get innerRingArcLabelPosition() {
        return this[S$.innerRingArcLabelPosition];
      }
      set innerRingArcLabelPosition(value) {
        super.innerRingArcLabelPosition = value;
      }
      get innerRingLeafArcLabelPosition() {
        return this[S$.innerRingLeafArcLabelPosition];
      }
      set innerRingLeafArcLabelPosition(value) {
        super.innerRingLeafArcLabelPosition = value;
      }
      get outerRingArcLabelPosition() {
        return this[S$.outerRingArcLabelPosition];
      }
      set outerRingArcLabelPosition(value) {
        super.outerRingArcLabelPosition = value;
      }
      decorate(arcElements, canvas, graphicsFactory, opts) {
        ArcRendererElementListOfD().as(arcElements);
        let drawBounds = opts && 'drawBounds' in opts ? opts.drawBounds : null;
        let animationPercent = opts && 'animationPercent' in opts ? opts.animationPercent : null;
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        if (this.innerRingArcLabelPosition === arc_label_decorator.ArcLabelPosition.outside) {
          arcElements.arcs[S$.$retainWhere](dart.fn(e => sunburst_arc_renderer.SunburstArcRendererElement.as(e).isLeaf === true, ArcRendererElementOfDTobool()));
        }
        super.decorate(arcElements, canvas, graphicsFactory, {drawBounds: drawBounds, animationPercent: animationPercent, rtl: rtl});
      }
      calculateLabelPosition(labelElement, labelStyle, insideArcWidth, outsideArcWidth, arcRendererElement, labelPosition) {
        if (!sunburst_arc_renderer.SunburstArcRendererElement.is(arcRendererElement)) dart.assertFailed(null, I[16], 98, 12, "arcRendererElement is SunburstArcRendererElement");
        if (sunburst_arc_renderer.SunburstArcRendererElement.as(arcRendererElement).isOuterMostRing === true) {
          return super.calculateLabelPosition(labelElement, labelStyle, insideArcWidth, outsideArcWidth, arcRendererElement, this.outerRingArcLabelPosition);
        } else if (arcRendererElement.isLeaf === true) {
          return super.calculateLabelPosition(labelElement, labelStyle, insideArcWidth, outsideArcWidth, arcRendererElement, this.innerRingLeafArcLabelPosition);
        } else {
          return arc_label_decorator.ArcLabelPosition.inside;
        }
      }
    }
    (SunburstArcLabelDecorator.new = function(opts) {
      let insideLabelStyleSpec = opts && 'insideLabelStyleSpec' in opts ? opts.insideLabelStyleSpec : null;
      let outsideLabelStyleSpec = opts && 'outsideLabelStyleSpec' in opts ? opts.outsideLabelStyleSpec : null;
      let leaderLineStyleSpec = opts && 'leaderLineStyleSpec' in opts ? opts.leaderLineStyleSpec : null;
      let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : 5;
      let showLeaderLines = opts && 'showLeaderLines' in opts ? opts.showLeaderLines : true;
      let leaderLineColor = opts && 'leaderLineColor' in opts ? opts.leaderLineColor : null;
      let innerRingArcLabelPosition = opts && 'innerRingArcLabelPosition' in opts ? opts.innerRingArcLabelPosition : C[9] || CT.C9;
      let innerRingLeafArcLabelPosition = opts && 'innerRingLeafArcLabelPosition' in opts ? opts.innerRingLeafArcLabelPosition : C[9] || CT.C9;
      let outerRingArcLabelPosition = opts && 'outerRingArcLabelPosition' in opts ? opts.outerRingArcLabelPosition : C[10] || CT.C10;
      this[S$.innerRingArcLabelPosition] = innerRingArcLabelPosition;
      this[S$.innerRingLeafArcLabelPosition] = innerRingLeafArcLabelPosition;
      this[S$.outerRingArcLabelPosition] = outerRingArcLabelPosition;
      SunburstArcLabelDecorator.__proto__.new.call(this, {insideLabelStyleSpec: insideLabelStyleSpec, outsideLabelStyleSpec: outsideLabelStyleSpec, leaderLineStyleSpec: leaderLineStyleSpec, labelPosition: arc_label_decorator.ArcLabelPosition.auto, labelPadding: labelPadding, showLeaderLines: showLeaderLines, leaderLineColor: leaderLineColor});
      ;
    }).prototype = SunburstArcLabelDecorator.prototype;
    dart.addTypeTests(SunburstArcLabelDecorator);
    SunburstArcLabelDecorator.prototype[_is_SunburstArcLabelDecorator_default] = true;
    dart.addTypeCaches(SunburstArcLabelDecorator);
    dart.setLibraryUri(SunburstArcLabelDecorator, I[19]);
    dart.setFieldSignature(SunburstArcLabelDecorator, () => ({
      __proto__: dart.getFields(SunburstArcLabelDecorator.__proto__),
      innerRingArcLabelPosition: dart.finalFieldType(arc_label_decorator.ArcLabelPosition),
      innerRingLeafArcLabelPosition: dart.finalFieldType(arc_label_decorator.ArcLabelPosition),
      outerRingArcLabelPosition: dart.finalFieldType(arc_label_decorator.ArcLabelPosition)
    }));
    return SunburstArcLabelDecorator;
  });
  sunburst_arc_label_decorator.SunburstArcLabelDecorator = sunburst_arc_label_decorator.SunburstArcLabelDecorator$();
  dart.addTypeTests(sunburst_arc_label_decorator.SunburstArcLabelDecorator, _is_SunburstArcLabelDecorator_default);
  const _is_PointRendererConfig_default = Symbol('_is_PointRendererConfig_default');
  point_renderer_config.PointRendererConfig$ = dart.generic(D => {
    var PointRendererOfD = () => (PointRendererOfD = dart.constFn(point_renderer.PointRenderer$(D)))();
    class PointRendererConfig extends layout_view.LayoutViewConfig {
      get customRendererId() {
        return this[S$.customRendererId$1];
      }
      set customRendererId(value) {
        super.customRendererId = value;
      }
      get layoutPaintOrder() {
        return this[S$.layoutPaintOrder$1];
      }
      set layoutPaintOrder(value) {
        super.layoutPaintOrder = value;
      }
      get pointRendererDecorators() {
        return this[S$.pointRendererDecorators];
      }
      set pointRendererDecorators(value) {
        super.pointRendererDecorators = value;
      }
      get symbolRenderer() {
        return this[S$.symbolRenderer$2];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get customSymbolRenderers() {
        return this[S$.customSymbolRenderers];
      }
      set customSymbolRenderers(value) {
        super.customSymbolRenderers = value;
      }
      get rendererAttributes() {
        return this[S$.rendererAttributes$1];
      }
      set rendererAttributes(value) {
        super.rendererAttributes = value;
      }
      get radiusPx() {
        return this[S$.radiusPx];
      }
      set radiusPx(value) {
        super.radiusPx = value;
      }
      get strokeWidthPx() {
        return this[S$.strokeWidthPx$2];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get boundsLineRadiusPx() {
        return this[S$.boundsLineRadiusPx];
      }
      set boundsLineRadiusPx(value) {
        super.boundsLineRadiusPx = value;
      }
      build() {
        return new (PointRendererOfD()).new({config: this, rendererId: this.customRendererId});
      }
    }
    (PointRendererConfig.new = function(opts) {
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 25;
      let pointRendererDecorators = opts && 'pointRendererDecorators' in opts ? opts.pointRendererDecorators : C[11] || CT.C11;
      let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : 3.5;
      let boundsLineRadiusPx = opts && 'boundsLineRadiusPx' in opts ? opts.boundsLineRadiusPx : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 0;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let customSymbolRenderers = opts && 'customSymbolRenderers' in opts ? opts.customSymbolRenderers : null;
      this[S$.rendererAttributes$1] = new series_renderer_config.RendererAttributes.new();
      this[S$.customRendererId$1] = customRendererId;
      this[S$.layoutPaintOrder$1] = layoutPaintOrder;
      this[S$.pointRendererDecorators] = pointRendererDecorators;
      this[S$.radiusPx] = radiusPx;
      this[S$.boundsLineRadiusPx] = boundsLineRadiusPx;
      this[S$.strokeWidthPx$2] = strokeWidthPx;
      this[S$.symbolRenderer$2] = symbolRenderer;
      this[S$.customSymbolRenderers] = customSymbolRenderers;
      PointRendererConfig.__proto__.new.call(this);
      ;
    }).prototype = PointRendererConfig.prototype;
    dart.addTypeTests(PointRendererConfig);
    PointRendererConfig.prototype[_is_PointRendererConfig_default] = true;
    dart.addTypeCaches(PointRendererConfig);
    PointRendererConfig[dart.implements] = () => [series_renderer_config.SeriesRendererConfig$(D)];
    dart.setMethodSignature(PointRendererConfig, () => ({
      __proto__: dart.getMethods(PointRendererConfig.__proto__),
      build: dart.fnType(point_renderer.PointRenderer$(D), [])
    }));
    dart.setLibraryUri(PointRendererConfig, I[20]);
    dart.setFieldSignature(PointRendererConfig, () => ({
      __proto__: dart.getFields(PointRendererConfig.__proto__),
      customRendererId: dart.finalFieldType(dart.nullable(core.String)),
      layoutPaintOrder: dart.finalFieldType(core.int),
      pointRendererDecorators: dart.finalFieldType(core.List$(point_renderer_decorator.PointRendererDecorator$(D))),
      symbolRenderer: dart.finalFieldType(dart.nullable(symbol_renderer.SymbolRenderer)),
      customSymbolRenderers: dart.finalFieldType(dart.nullable(core.Map$(core.String, symbol_renderer.SymbolRenderer))),
      rendererAttributes: dart.finalFieldType(series_renderer_config.RendererAttributes),
      radiusPx: dart.finalFieldType(core.double),
      strokeWidthPx: dart.finalFieldType(core.double),
      boundsLineRadiusPx: dart.finalFieldType(dart.nullable(core.double))
    }));
    return PointRendererConfig;
  });
  point_renderer_config.PointRendererConfig = point_renderer_config.PointRendererConfig$();
  dart.addTypeTests(point_renderer_config.PointRendererConfig, _is_PointRendererConfig_default);
  const _is_SymbolAnnotationRendererConfig_default = Symbol('_is_SymbolAnnotationRendererConfig_default');
  symbol_annotation_renderer_config.SymbolAnnotationRendererConfig$ = dart.generic(D => {
    var ComparisonPointsDecoratorOfD = () => (ComparisonPointsDecoratorOfD = dart.constFn(comparison_points_decorator.ComparisonPointsDecorator$(D)))();
    var PointRendererDecoratorOfD = () => (PointRendererDecoratorOfD = dart.constFn(point_renderer_decorator.PointRendererDecorator$(D)))();
    var JSArrayOfPointRendererDecoratorOfD = () => (JSArrayOfPointRendererDecoratorOfD = dart.constFn(_interceptors.JSArray$(PointRendererDecoratorOfD())))();
    var SymbolAnnotationRendererOfD = () => (SymbolAnnotationRendererOfD = dart.constFn(symbol_annotation_renderer.SymbolAnnotationRenderer$(D)))();
    class SymbolAnnotationRendererConfig extends point_renderer_config.PointRendererConfig$(D) {
      get showBottomSeparatorLine() {
        return this[S$.showBottomSeparatorLine];
      }
      set showBottomSeparatorLine(value) {
        super.showBottomSeparatorLine = value;
      }
      get showSeparatorLines() {
        return this[S$.showSeparatorLines];
      }
      set showSeparatorLines(value) {
        super.showSeparatorLines = value;
      }
      get verticalSymbolBottomPaddingPx() {
        return this[S$.verticalSymbolBottomPaddingPx];
      }
      set verticalSymbolBottomPaddingPx(value) {
        super.verticalSymbolBottomPaddingPx = value;
      }
      get verticalSymbolTopPaddingPx() {
        return this[S$.verticalSymbolTopPaddingPx];
      }
      set verticalSymbolTopPaddingPx(value) {
        super.verticalSymbolTopPaddingPx = value;
      }
      build() {
        return new (SymbolAnnotationRendererOfD()).new({config: this, rendererId: this.customRendererId});
      }
    }
    (SymbolAnnotationRendererConfig.new = function(opts) {
      let t5;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let pointRendererDecorators = opts && 'pointRendererDecorators' in opts ? opts.pointRendererDecorators : null;
      let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : 5;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let customSymbolRenderers = opts && 'customSymbolRenderers' in opts ? opts.customSymbolRenderers : null;
      let showBottomSeparatorLine = opts && 'showBottomSeparatorLine' in opts ? opts.showBottomSeparatorLine : false;
      let showSeparatorLines = opts && 'showSeparatorLines' in opts ? opts.showSeparatorLines : true;
      let verticalSymbolBottomPaddingPx = opts && 'verticalSymbolBottomPaddingPx' in opts ? opts.verticalSymbolBottomPaddingPx : 5;
      let verticalSymbolTopPaddingPx = opts && 'verticalSymbolTopPaddingPx' in opts ? opts.verticalSymbolTopPaddingPx : 5;
      this[S$.showBottomSeparatorLine] = showBottomSeparatorLine;
      this[S$.showSeparatorLines] = showSeparatorLines;
      this[S$.verticalSymbolBottomPaddingPx] = verticalSymbolBottomPaddingPx;
      this[S$.verticalSymbolTopPaddingPx] = verticalSymbolTopPaddingPx;
      SymbolAnnotationRendererConfig.__proto__.new.call(this, {customRendererId: customRendererId, pointRendererDecorators: (t5 = pointRendererDecorators, t5 == null ? JSArrayOfPointRendererDecoratorOfD().of([new (ComparisonPointsDecoratorOfD()).new({symbolRenderer: new symbol_renderer.RectangleRangeSymbolRenderer.new()})]) : t5), radiusPx: radiusPx, symbolRenderer: symbolRenderer, customSymbolRenderers: customSymbolRenderers});
      ;
    }).prototype = SymbolAnnotationRendererConfig.prototype;
    dart.addTypeTests(SymbolAnnotationRendererConfig);
    SymbolAnnotationRendererConfig.prototype[_is_SymbolAnnotationRendererConfig_default] = true;
    dart.addTypeCaches(SymbolAnnotationRendererConfig);
    dart.setMethodSignature(SymbolAnnotationRendererConfig, () => ({
      __proto__: dart.getMethods(SymbolAnnotationRendererConfig.__proto__),
      build: dart.fnType(symbol_annotation_renderer.SymbolAnnotationRenderer$(D), [])
    }));
    dart.setLibraryUri(SymbolAnnotationRendererConfig, I[21]);
    dart.setFieldSignature(SymbolAnnotationRendererConfig, () => ({
      __proto__: dart.getFields(SymbolAnnotationRendererConfig.__proto__),
      showBottomSeparatorLine: dart.finalFieldType(core.bool),
      showSeparatorLines: dart.finalFieldType(core.bool),
      verticalSymbolBottomPaddingPx: dart.finalFieldType(core.double),
      verticalSymbolTopPaddingPx: dart.finalFieldType(core.double)
    }));
    return SymbolAnnotationRendererConfig;
  });
  symbol_annotation_renderer_config.SymbolAnnotationRendererConfig = symbol_annotation_renderer_config.SymbolAnnotationRendererConfig$();
  dart.addTypeTests(symbol_annotation_renderer_config.SymbolAnnotationRendererConfig, _is_SymbolAnnotationRendererConfig_default);
  const _is_BaseCartesianRenderer_default = Symbol('_is_BaseCartesianRenderer_default');
  cartesian_renderer.BaseCartesianRenderer$ = dart.generic(D => {
    var CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    var AxisOfD = () => (AxisOfD = dart.constFn(axis$.Axis$(D)))();
    var AxisNOfD = () => (AxisNOfD = dart.constFn(dart.nullable(AxisOfD())))();
    var intNToD = () => (intNToD = dart.constFn(dart.fnType(D, [T$.intN()])))();
    class BaseCartesianRenderer extends series_renderer.BaseSeriesRenderer$(D) {
      get chart() {
        let t7;
        t7 = this[S$.__BaseCartesianRenderer_chart];
        return t7 == null ? dart.throw(new _internal.LateError.fieldNI("chart")) : t7;
      }
      set chart(t7) {
        CartesianChartOfD().as(t7);
        this[S$.__BaseCartesianRenderer_chart] = t7;
      }
      onAttach(chart) {
        BaseChartOfD().as(chart);
        super.onAttach(chart);
        this.chart = CartesianChartOfD().as(chart);
      }
      get renderingVertically() {
        return this.chart.vertical;
      }
      configureDomainAxes(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        seriesList[S$.$forEach](dart.fn(series => {
          if (series.data[S$.$isEmpty]) {
            return;
          }
          let domainAxis = series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey);
          let domainFn = series.domainFn;
          let domainLowerBoundFn = series.domainLowerBoundFn;
          let domainUpperBoundFn = series.domainUpperBoundFn;
          if (domainAxis == null) {
            return;
          }
          if (this.renderingVertically) {
            for (let i = 0; i < series.data[S$.$length]; i = i + 1) {
              domainAxis.addDomainValue(dart.nullCheck(domainFn(i)));
              if (domainLowerBoundFn != null && domainUpperBoundFn != null) {
                let domainLowerBound = domainLowerBoundFn(i);
                let domainUpperBound = domainUpperBoundFn(i);
                if (domainLowerBound != null && domainUpperBound != null) {
                  domainAxis.addDomainValue(domainLowerBound);
                  domainAxis.addDomainValue(domainUpperBound);
                }
              }
            }
          } else {
            for (let i = series.data[S$.$length] - 1; i >= 0; i = i - 1) {
              domainAxis.addDomainValue(dart.nullCheck(domainFn(i)));
              if (domainLowerBoundFn != null && domainUpperBoundFn != null) {
                let domainLowerBound = domainLowerBoundFn(i);
                let domainUpperBound = domainUpperBoundFn(i);
                if (domainLowerBound != null && domainUpperBound != null) {
                  domainAxis.addDomainValue(domainLowerBound);
                  domainAxis.addDomainValue(domainUpperBound);
                }
              }
            }
          }
        }, MutableSeriesOfDTovoid()));
      }
      configureMeasureAxes(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        seriesList[S$.$forEach](dart.fn(series => {
          if (series.data[S$.$isEmpty]) {
            return;
          }
          let domainAxis = AxisNOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
          let domainFn = series.domainFn;
          if (domainAxis == null) {
            return;
          }
          let measureAxis = T$.AxisNOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
          if (measureAxis == null) {
            return;
          }
          let startIndex = this.findNearestViewportStart(domainAxis, domainFn, series.data);
          let endIndex = this.findNearestViewportEnd(domainAxis, domainFn, series.data);
          this.addMeasureValuesFor(series, measureAxis, startIndex, endIndex);
        }, MutableSeriesOfDTovoid()));
      }
      addMeasureValuesFor(series, measureAxis, startIndex, endIndex) {
        let t8, t8$;
        MutableSeriesOfD().as(series);
        let measureFn = series.measureFn;
        let measureOffsetFn = dart.nullCheck(series.measureOffsetFn);
        let measureLowerBoundFn = series.measureLowerBoundFn;
        let measureUpperBoundFn = series.measureUpperBoundFn;
        for (let i = startIndex; i <= endIndex; i = i + 1) {
          let measure = measureFn(i);
          let measureOffset = measureOffsetFn(i);
          if (measure != null && measureOffset != null) {
            measureAxis.addDomainValue(dart.notNull(measure) + dart.notNull(measureOffset));
            if (measureLowerBoundFn != null && measureUpperBoundFn != null) {
              measureAxis.addDomainValue(dart.notNull((t8 = measureLowerBoundFn(i), t8 == null ? 0 : t8)) + dart.notNull(measureOffset));
              measureAxis.addDomainValue(dart.notNull((t8$ = measureUpperBoundFn(i), t8$ == null ? 0 : t8$)) + dart.notNull(measureOffset));
            }
          }
        }
      }
      findNearestViewportStart(domainAxis, domainFn, data) {
        AxisOfD().as(domainAxis);
        intNToD().as(domainFn);
        if (!data[S$.$isNotEmpty]) dart.assertFailed(null, I[23], 171, 12, "data.isNotEmpty");
        if (domainAxis.compareDomainValueToViewport(domainFn(0)) === 0) {
          return 0;
        }
        let start = 1;
        let end = data[S$.$length] - 1;
        while (end >= start) {
          let searchIndex = ((end - start) / 2)[S$.$floor]() + start;
          let prevIndex = searchIndex - 1;
          let comparisonValue = domainAxis.compareDomainValueToViewport(domainFn(searchIndex));
          let prevComparisonValue = domainAxis.compareDomainValueToViewport(domainFn(prevIndex));
          if (prevComparisonValue === -1 && comparisonValue === 0) {
            return searchIndex;
          }
          if (comparisonValue === 1 && prevComparisonValue === -1) {
            return searchIndex - 1;
          }
          if (comparisonValue === -1) {
            start = searchIndex + 1;
          } else {
            end = searchIndex - 1;
          }
        }
        let lastComparison = domainAxis.compareDomainValueToViewport(domainFn(data[S$.$length] - 1));
        return lastComparison === 1 ? data[S$.$length] - 1 : 0;
      }
      findNearestViewportEnd(domainAxis, domainFn, data) {
        AxisOfD().as(domainAxis);
        intNToD().as(domainFn);
        if (!data[S$.$isNotEmpty]) dart.assertFailed(null, I[23], 225, 12, "data.isNotEmpty");
        let start = 1;
        let end = data[S$.$length] - 1;
        if (domainAxis.compareDomainValueToViewport(domainFn(end)) === 0) {
          return end;
        }
        end = end - 1;
        while (end >= start) {
          let searchIndex = ((end - start) / 2)[S$.$floor]() + start;
          let prevIndex = searchIndex - 1;
          let comparisonValue = domainAxis.compareDomainValueToViewport(domainFn(searchIndex));
          let prevComparisonValue = domainAxis.compareDomainValueToViewport(domainFn(prevIndex));
          if (prevComparisonValue === 0 && comparisonValue === 1) {
            return prevIndex;
          }
          if (comparisonValue === 1 && prevComparisonValue === -1) {
            return searchIndex;
          }
          if (comparisonValue === 1) {
            end = searchIndex - 1;
          } else {
            start = searchIndex + 1;
          }
        }
        let lastComparison = domainAxis.compareDomainValueToViewport(domainFn(data[S$.$length] - 1));
        return lastComparison === 1 ? data[S$.$length] - 1 : 0;
      }
    }
    (BaseCartesianRenderer.new = function(opts) {
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[S$.__BaseCartesianRenderer_chart] = null;
      BaseCartesianRenderer.__proto__.new.call(this, {rendererId: rendererId, layoutPaintOrder: layoutPaintOrder, symbolRenderer: symbolRenderer});
      ;
    }).prototype = BaseCartesianRenderer.prototype;
    dart.addTypeTests(BaseCartesianRenderer);
    BaseCartesianRenderer.prototype[_is_BaseCartesianRenderer_default] = true;
    dart.addTypeCaches(BaseCartesianRenderer);
    BaseCartesianRenderer[dart.implements] = () => [cartesian_renderer.CartesianRenderer$(D)];
    dart.setMethodSignature(BaseCartesianRenderer, () => ({
      __proto__: dart.getMethods(BaseCartesianRenderer.__proto__),
      addMeasureValuesFor: dart.fnType(dart.void, [dart.nullable(core.Object), axis$.Axis$(core.num), core.int, core.int]),
      findNearestViewportStart: dart.fnType(core.int, [dart.nullable(core.Object), dart.nullable(core.Object), core.List$(dart.nullable(core.Object))]),
      findNearestViewportEnd: dart.fnType(core.int, [dart.nullable(core.Object), dart.nullable(core.Object), core.List$(dart.nullable(core.Object))])
    }));
    dart.setGetterSignature(BaseCartesianRenderer, () => ({
      __proto__: dart.getGetters(BaseCartesianRenderer.__proto__),
      chart: cartesian_chart.CartesianChart$(D),
      renderingVertically: core.bool
    }));
    dart.setSetterSignature(BaseCartesianRenderer, () => ({
      __proto__: dart.getSetters(BaseCartesianRenderer.__proto__),
      chart: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(BaseCartesianRenderer, I[24]);
    dart.setFieldSignature(BaseCartesianRenderer, () => ({
      __proto__: dart.getFields(BaseCartesianRenderer.__proto__),
      [S$.__BaseCartesianRenderer_chart]: dart.fieldType(dart.nullable(cartesian_chart.CartesianChart$(D)))
    }));
    return BaseCartesianRenderer;
  });
  cartesian_renderer.BaseCartesianRenderer = cartesian_renderer.BaseCartesianRenderer$();
  dart.addTypeTests(cartesian_renderer.BaseCartesianRenderer, _is_BaseCartesianRenderer_default);
  const _is_PointRenderer_default = Symbol('_is_PointRenderer_default');
  point_renderer.PointRenderer$ = dart.generic(D => {
    var AnimatedPointOfD = () => (AnimatedPointOfD = dart.constFn(point_renderer.AnimatedPoint$(D)))();
    var ListOfAnimatedPointOfD = () => (ListOfAnimatedPointOfD = dart.constFn(core.List$(AnimatedPointOfD())))();
    var IdentityMapOfString$ListOfAnimatedPointOfD = () => (IdentityMapOfString$ListOfAnimatedPointOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfAnimatedPointOfD())))();
    var PointRendererConfigOfD = () => (PointRendererConfigOfD = dart.constFn(point_renderer_config.PointRendererConfig$(D)))();
    var PointRendererDecoratorOfD = () => (PointRendererDecoratorOfD = dart.constFn(point_renderer_decorator.PointRendererDecorator$(D)))();
    var JSArrayOfPointRendererDecoratorOfD = () => (JSArrayOfPointRendererDecoratorOfD = dart.constFn(_interceptors.JSArray$(PointRendererDecoratorOfD())))();
    var LinkedHashMapOfString$ListOfAnimatedPointOfD = () => (LinkedHashMapOfString$ListOfAnimatedPointOfD = dart.constFn(collection.LinkedHashMap$(core.String, ListOfAnimatedPointOfD())))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var PointRendererElementOfD = () => (PointRendererElementOfD = dart.constFn(point_renderer.PointRendererElement$(D)))();
    var JSArrayOfPointRendererElementOfD = () => (JSArrayOfPointRendererElementOfD = dart.constFn(_interceptors.JSArray$(PointRendererElementOfD())))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    var ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    var JSArrayOfAnimatedPointOfD = () => (JSArrayOfAnimatedPointOfD = dart.constFn(_interceptors.JSArray$(AnimatedPointOfD())))();
    var VoidToListOfAnimatedPointOfD = () => (VoidToListOfAnimatedPointOfD = dart.constFn(dart.fnType(ListOfAnimatedPointOfD(), [])))();
    var AnimatedPointOfDTobool = () => (AnimatedPointOfDTobool = dart.constFn(dart.fnType(core.bool, [AnimatedPointOfD()])))();
    var ImmutableSeriesOfDTovoid = () => (ImmutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [ImmutableSeriesOfD()])))();
    var dynamicToListOfAnimatedPointOfD = () => (dynamicToListOfAnimatedPointOfD = dart.constFn(dart.fnType(ListOfAnimatedPointOfD(), [dart.dynamic])))();
    var StringAndListOfAnimatedPointOfDTovoid = () => (StringAndListOfAnimatedPointOfDTovoid = dart.constFn(dart.fnType(dart.void, [core.String, ListOfAnimatedPointOfD()])))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var AnimatedPointOfDToPointRendererElementOfD = () => (AnimatedPointOfDToPointRendererElementOfD = dart.constFn(dart.fnType(PointRendererElementOfD(), [AnimatedPointOfD()])))();
    var PointRendererDecoratorOfDTobool = () => (PointRendererDecoratorOfDTobool = dart.constFn(dart.fnType(core.bool, [PointRendererDecoratorOfD()])))();
    var PointRendererDecoratorOfDTovoid = () => (PointRendererDecoratorOfDTovoid = dart.constFn(dart.fnType(dart.void, [PointRendererDecoratorOfD()])))();
    var PointRendererElementOfDTovoid = () => (PointRendererElementOfDTovoid = dart.constFn(dart.fnType(dart.void, [PointRendererElementOfD()])))();
    var DN = () => (DN = dart.constFn(dart.nullable(D)))();
    var DatumPointOfD = () => (DatumPointOfD = dart.constFn(point_renderer.DatumPoint$(D)))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    var AnimatedPointOfDTovoid = () => (AnimatedPointOfDTovoid = dart.constFn(dart.fnType(dart.void, [AnimatedPointOfD()])))();
    var ListOfAnimatedPointOfDTovoid = () => (ListOfAnimatedPointOfDTovoid = dart.constFn(dart.fnType(dart.void, [ListOfAnimatedPointOfD()])))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    class PointRenderer extends cartesian_renderer.BaseCartesianRenderer$(D) {
      get config() {
        return this[S$.config$1];
      }
      set config(value) {
        super.config = value;
      }
      get pointRendererDecorators() {
        return this[S$.pointRendererDecorators$1];
      }
      set pointRendererDecorators(value) {
        super.pointRendererDecorators = value;
      }
      get seriesPointMap() {
        return this[S$.seriesPointMap];
      }
      set seriesPointMap(value) {
        this[S$.seriesPointMap] = LinkedHashMapOfString$ListOfAnimatedPointOfD().as(value);
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        this.assignMissingColors(seriesList, {emptyCategoryUsesSinglePalette: false});
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        seriesList[S$.$forEach](dart.fn(series => {
          let t7, t7$, t7$0;
          let elements = JSArrayOfPointRendererElementOfD().of([]);
          t7 = series;
          t7.radiusPxFn == null ? t7.radiusPxFn = dart.fn(_ => this.config.radiusPx, T$.intNTodouble()) : null;
          let boundsLineRadiusPxFn = series.getAttr(T$.intNTodoubleN(), point_renderer.boundsLineRadiusPxFnKey);
          if (boundsLineRadiusPxFn == null) {
            let boundsLineRadiusPx = series.getAttr(core.double, point_renderer.boundsLineRadiusPxKey);
            boundsLineRadiusPx == null ? boundsLineRadiusPx = this.config.boundsLineRadiusPx : null;
            if (boundsLineRadiusPx != null) {
              boundsLineRadiusPxFn = dart.fn(_ => dart.nullCheck(boundsLineRadiusPx)[S$.$toDouble](), T$.intNTodouble());
              series.setAttr(T$.intNTodoubleN(), point_renderer.boundsLineRadiusPxFnKey, boundsLineRadiusPxFn);
            }
          }
          let symbolRendererFn = series.getAttr(T$.intNToString(), point_renderer.pointSymbolRendererFnKey);
          t7$ = series;
          t7$.keyFn == null ? t7$.keyFn = dart.fn(index => {
            let t9, t8, t9$, t8$;
            return series.id + "__" + dart.str((t8 = series, t9 = index, t8.domainFn(t9))) + "__" + dart.str((t8$ = series, t9$ = index, t8$.measureFn(t9$)));
          }, T$.intNToString()) : null;
          for (let index = 0; index < series.data[S$.$length]; index = index + 1) {
            let radiusPx = dart.nullCheck(series.radiusPxFn)(index);
            radiusPx == null ? radiusPx = this.config.radiusPx : null;
            let boundsLineRadiusPx = null;
            if (boundsLineRadiusPxFn != null) {
              boundsLineRadiusPx = T$.dynamicAndintNTodynamic().is(boundsLineRadiusPxFn) ? T$.dynamicAndintNToint().as(boundsLineRadiusPxFn)(series.data[S$.$_get](index), index) : boundsLineRadiusPxFn(index);
            }
            boundsLineRadiusPx == null ? boundsLineRadiusPx = this.config.boundsLineRadiusPx : null;
            boundsLineRadiusPx == null ? boundsLineRadiusPx = radiusPx : null;
            let strokeWidthPx = series.strokeWidthPxFn != null ? dart.nullCheck(series.strokeWidthPxFn)(index) : null;
            strokeWidthPx == null ? strokeWidthPx = this.config.strokeWidthPx : null;
            let symbolRendererId = null;
            if (symbolRendererFn != null) {
              symbolRendererId = symbolRendererFn(index);
            }
            symbolRendererId == null ? symbolRendererId = series.getAttr(core.String, point_renderer.pointSymbolRendererIdKey) : null;
            symbolRendererId == null ? symbolRendererId = "__default__" : null;
            let colorFn = series.colorFn;
            let fillColorFn = (t7$0 = series.fillColorFn, t7$0 == null ? colorFn : t7$0);
            let color = dart.nullCheck(colorFn)(index);
            let fillColor = dart.nullCheck(fillColorFn)(index);
            fillColor == null ? fillColor = color : null;
            let details = new (PointRendererElementOfD()).new({index: index, color: color, fillColor: fillColor, radiusPx: radiusPx[S$.$toDouble](), boundsLineRadiusPx: boundsLineRadiusPx[S$.$toDouble](), strokeWidthPx: strokeWidthPx[S$.$toDouble](), symbolRendererId: symbolRendererId});
            elements[S$.$add](details);
          }
          series.setAttr(T$.ListOfPointRendererElementOfObjectN(), point_renderer.pointElementsKey, elements);
        }, MutableSeriesOfDTovoid()));
      }
      update(seriesList, isAnimatingThisDraw) {
        ListOfImmutableSeriesOfD().as(seriesList);
        this[S$._currentKeys][S$.$clear]();
        let sortedSeriesIds = T$.JSArrayOfString().of([]);
        seriesList[S$.$forEach](dart.fn(series => {
          let t7, t7$, t7$0, t7$1, t7$2;
          sortedSeriesIds[S$.$add](series.id);
          let domainAxis = ImmutableAxisOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
          let domainFn = series.domainFn;
          let domainLowerBoundFn = series.domainLowerBoundFn;
          let domainUpperBoundFn = series.domainUpperBoundFn;
          let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
          let measureFn = series.measureFn;
          let measureLowerBoundFn = series.measureLowerBoundFn;
          let measureUpperBoundFn = series.measureUpperBoundFn;
          let measureOffsetFn = series.measureOffsetFn;
          let seriesKey = series.id;
          let keyFn = dart.nullCheck(series.keyFn);
          let pointList = this.seriesPointMap[S$.$putIfAbsent](seriesKey, dart.fn(() => JSArrayOfAnimatedPointOfD().of([]), VoidToListOfAnimatedPointOfD()));
          let elementsList = series.getAttr(T$.ListOfPointRendererElementOfObject(), point_renderer.pointElementsKey);
          for (let index = 0; index < series.data[S$.$length]; index = index + 1) {
            let datum = series.data[S$.$_get](index);
            let details = dart.nullCheck(elementsList)[S$.$_get](index);
            let domainValue = domainFn(index);
            let domainLowerBoundValue = (t7 = domainLowerBoundFn, t7 == null ? null : t7(index));
            let domainUpperBoundValue = (t7$ = domainUpperBoundFn, t7$ == null ? null : t7$(index));
            let measureValue = measureFn(index);
            let measureLowerBoundValue = (t7$0 = measureLowerBoundFn, t7$0 == null ? null : t7$0(index));
            let measureUpperBoundValue = (t7$1 = measureUpperBoundFn, t7$1 == null ? null : t7$1(index));
            let measureOffsetValue = dart.nullCheck(measureOffsetFn)(index);
            let point = this.getPoint(datum, domainValue, domainLowerBoundValue, domainUpperBoundValue, series, domainAxis, measureValue, measureLowerBoundValue, measureUpperBoundValue, measureOffsetValue, measureAxis);
            let pointKey = keyFn(index);
            let animatingPoint = iterable_extensions['IterableExtension|firstWhereOrNull'](AnimatedPointOfD(), pointList, dart.fn(point => point.key === pointKey, AnimatedPointOfDTobool()));
            if (animatingPoint == null) {
              let point = this.getPoint(datum, domainValue, domainLowerBoundValue, domainUpperBoundValue, series, domainAxis, 0.0, 0.0, 0.0, 0.0, measureAxis);
              animatingPoint = (t7$2 = new (AnimatedPointOfD()).new({key: pointKey, overlaySeries: series.overlaySeries}), (() => {
                t7$2.setNewTarget(new (PointRendererElementOfD()).new({index: details.index, color: details.color, fillColor: details.fillColor, measureAxisPosition: measureAxis.getLocation(0.0), point: point, radiusPx: details.radiusPx, boundsLineRadiusPx: details.boundsLineRadiusPx, strokeWidthPx: details.strokeWidthPx, symbolRendererId: details.symbolRendererId}));
                return t7$2;
              })());
              pointList[S$.$add](animatingPoint);
            }
            this[S$._currentKeys][S$.$add](pointKey);
            let pointElement = new (PointRendererElementOfD()).new({index: index, color: details.color, fillColor: details.fillColor, measureAxisPosition: measureAxis.getLocation(0.0), point: point, radiusPx: details.radiusPx, boundsLineRadiusPx: details.boundsLineRadiusPx, strokeWidthPx: details.strokeWidthPx, symbolRendererId: details.symbolRendererId});
            animatingPoint.setNewTarget(pointElement);
          }
        }, ImmutableSeriesOfDTovoid()));
        this.seriesPointMap = LinkedHashMapOfString$ListOfAnimatedPointOfD().fromIterable(sortedSeriesIds, {key: dart.fn(k => core.String.as(k), T$.dynamicToString()), value: dart.fn(k => dart.nullCheck(this.seriesPointMap[S$.$_get](k)), dynamicToListOfAnimatedPointOfD())});
        this.seriesPointMap[S$.$forEach](dart.fn((key, points) => {
          for (let point of points) {
            if (this[S$._currentKeys][S$.$contains](point.key) !== true) {
              point.animateOut();
            }
          }
        }, StringAndListOfAnimatedPointOfDTovoid()));
      }
      onAttach(chart) {
        BaseChartOfD().as(chart);
        super.onAttach(chart);
        this[S$._chart$2] = chart;
      }
      paint(canvas, animationPercent) {
        if (animationPercent === 1.0) {
          let keysToRemove = T$.JSArrayOfString().of([]);
          this.seriesPointMap[S$.$forEach](dart.fn((key, points) => {
            points[S$.$removeWhere](dart.fn(point => point.animatingOut, AnimatedPointOfDTobool()));
            if (points[S$.$isEmpty]) {
              keysToRemove[S$.$add](key);
            }
          }, StringAndListOfAnimatedPointOfDTovoid()));
          keysToRemove[S$.$forEach](dart.bind(this.seriesPointMap, S$.$remove));
        }
        this.seriesPointMap[S$.$forEach](dart.fn((key, points) => {
          points[S$.$map](PointRendererElementOfD(), dart.fn(animatingPoint => animatingPoint.getCurrentPoint(animationPercent), AnimatedPointOfDToPointRendererElementOfD()))[S$.$forEach](dart.fn(point => {
            this.pointRendererDecorators[S$.$where](dart.fn(decorator => !decorator.renderAbove, PointRendererDecoratorOfDTobool()))[S$.$forEach](dart.fn(decorator => {
              decorator.decorate(point, canvas, dart.nullCheck(this.graphicsFactory), {drawBounds: dart.nullCheck(this.componentBounds), animationPercent: animationPercent, rtl: this.isRtl});
            }, PointRendererDecoratorOfDTovoid()));
            if (dart.nullCheck(point.point).y != null && dart.nullCheck(this.componentBounds)[S$.$containsPoint](dart.nullCheck(point.point).toPoint())) {
              let bounds = new (T$.RectangleOfdouble()).new(dart.nullCheck(dart.nullCheck(point.point).x) - point.radiusPx, dart.nullCheck(dart.nullCheck(point.point).y) - point.radiusPx, point.radiusPx * 2, point.radiusPx * 2);
              if (point.symbolRendererId === "__default__") {
                dart.nullCheck(this.symbolRenderer).paint(canvas, bounds, {fillColor: point.fillColor, strokeColor: point.color, strokeWidthPx: point.strokeWidthPx});
              } else {
                let id = point.symbolRendererId;
                if (!dart.nullCheck(this.config.customSymbolRenderers)[S$.$containsKey](id)) {
                  dart.throw(new core.ArgumentError.new("Invalid custom symbol renderer id \"" + dart.str(id) + "\""));
                }
                let customRenderer = dart.nullCheck(dart.nullCheck(this.config.customSymbolRenderers)[S$.$_get](id));
                customRenderer.paint(canvas, bounds, {fillColor: point.fillColor, strokeColor: point.color, strokeWidthPx: point.strokeWidthPx});
              }
            }
            this.pointRendererDecorators[S$.$where](dart.fn(decorator => decorator.renderAbove, PointRendererDecoratorOfDTobool()))[S$.$forEach](dart.fn(decorator => {
              decorator.decorate(point, canvas, dart.nullCheck(this.graphicsFactory), {drawBounds: dart.nullCheck(this.componentBounds), animationPercent: animationPercent, rtl: this.isRtl});
            }, PointRendererDecoratorOfDTovoid()));
          }, PointRendererElementOfDTovoid()));
        }, StringAndListOfAnimatedPointOfDTovoid()));
      }
      get isRtl() {
        let t7, t7$;
        t7$ = (t7 = this[S$._chart$2], t7 == null ? null : t7.context.isRtl);
        return t7$ == null ? false : t7$;
      }
      getPoint(datum, domainValue, domainLowerBoundValue, domainUpperBoundValue, series, domainAxis, measureValue, measureLowerBoundValue, measureUpperBoundValue, measureOffsetValue, measureAxis) {
        DN().as(domainValue);
        DN().as(domainLowerBoundValue);
        DN().as(domainUpperBoundValue);
        ImmutableSeriesOfD().as(series);
        ImmutableAxisOfD().as(domainAxis);
        let domainPosition = domainAxis.getLocation(domainValue);
        let domainLowerBoundPosition = domainLowerBoundValue != null ? domainAxis.getLocation(domainLowerBoundValue) : null;
        let domainUpperBoundPosition = domainUpperBoundValue != null ? domainAxis.getLocation(domainUpperBoundValue) : null;
        let measurePosition = measureValue != null && measureOffsetValue != null ? measureAxis.getLocation(dart.notNull(measureValue) + dart.notNull(measureOffsetValue)) : null;
        let measureLowerBoundPosition = measureLowerBoundValue != null ? measureAxis.getLocation(dart.notNull(measureLowerBoundValue) + dart.nullCheck(measureOffsetValue)) : null;
        let measureUpperBoundPosition = measureUpperBoundValue != null ? measureAxis.getLocation(dart.notNull(measureUpperBoundValue) + dart.nullCheck(measureOffsetValue)) : null;
        return new (DatumPointOfD()).new({datum: datum, domain: domainValue, series: series, x: domainPosition, xLower: domainLowerBoundPosition, xUpper: domainUpperBoundPosition, y: measurePosition, yLower: measureLowerBoundPosition, yUpper: measureUpperBoundPosition});
      }
      getNearestDatumDetailPerSeries(chartPoint, byDomain, boundsOverride, opts) {
        let selectOverlappingPoints = opts && 'selectOverlappingPoints' in opts ? opts.selectOverlappingPoints : false;
        let selectExactEventLocation = opts && 'selectExactEventLocation' in opts ? opts.selectExactEventLocation : false;
        let nearest = JSArrayOfDatumDetailsOfD().of([]);
        let inside = JSArrayOfDatumDetailsOfD().of([]);
        if (!this.isPointWithinBounds(chartPoint, boundsOverride)) {
          return nearest;
        }
        this.seriesPointMap[S$.$values][S$.$forEach](dart.fn(points => {
          let nearestPoint = null;
          let nearestDistances = new point_renderer._Distances.new({domainDistance: 10000, measureDistance: 10000, relativeDistance: 10000});
          points[S$.$forEach](dart.fn(point => {
            if (point.overlaySeries) {
              return;
            }
            let p = dart.nullCheck(dart.nullCheck(point[S$._currentPoint]).point);
            if (dart.nullCheck(p.x) < dart.nullCheck(this.componentBounds)[S$.$left] || dart.nullCheck(p.x) > dart.nullCheck(this.componentBounds)[S$.$right]) {
              return;
            }
            let distances = this[S$._getDatumDistance](point, chartPoint);
            if (selectOverlappingPoints) {
              if (dart.nullCheck(distances.insidePoint)) {
                inside[S$.$add](this[S$._createDatumDetails](dart.nullCheck(point[S$._currentPoint]), distances));
              }
            }
            if (inside[S$.$isEmpty]) {
              if (!selectExactEventLocation || dart.nullCheck(distances.insidePoint)) {
                if (byDomain) {
                  if (distances.domainDistance < nearestDistances.domainDistance || distances.domainDistance === nearestDistances.domainDistance && distances.measureDistance < nearestDistances.measureDistance) {
                    nearestPoint = point[S$._currentPoint];
                    nearestDistances = distances;
                  }
                } else {
                  if (distances.relativeDistance < nearestDistances.relativeDistance) {
                    nearestPoint = point[S$._currentPoint];
                    nearestDistances = distances;
                  }
                }
              }
            }
          }, AnimatedPointOfDTovoid()));
          if (nearestPoint != null) {
            nearest[S$.$add](this[S$._createDatumDetails](dart.nullCheck(nearestPoint), nearestDistances));
          }
        }, ListOfAnimatedPointOfDTovoid()));
        return selectOverlappingPoints && inside[S$.$isNotEmpty] ? inside : nearest;
      }
      [S$._createDatumDetails](point, distances) {
        let pointSymbolRenderer = null;
        if (point.symbolRendererId === "__default__") {
          pointSymbolRenderer = this.symbolRenderer;
        } else {
          let id = point.symbolRendererId;
          if (!dart.nullCheck(this.config.customSymbolRenderers)[S$.$containsKey](id)) {
            dart.throw(new core.ArgumentError.new("Invalid custom symbol renderer id \"" + dart.str(id) + "\""));
          }
          pointSymbolRenderer = dart.nullCheck(this.config.customSymbolRenderers)[S$.$_get](id);
        }
        return new (DatumDetailsOfD()).new({datum: dart.nullCheck(point.point).datum, domain: dart.nullCheck(point.point).domain, series: dart.nullCheck(point.point).series, domainDistance: distances.domainDistance, measureDistance: distances.measureDistance, relativeDistance: distances.relativeDistance, symbolRenderer: pointSymbolRenderer});
      }
      [S$._getDatumDistance](point, chartPoint) {
        let datumPoint = dart.nullCheck(dart.nullCheck(point[S$._currentPoint]).point);
        let radiusPx = dart.nullCheck(point[S$._currentPoint]).radiusPx;
        let boundsLineRadiusPx = dart.nullCheck(point[S$._currentPoint]).boundsLineRadiusPx;
        let domainDistance = (chartPoint.x - dart.nullCheck(datumPoint.x))[S$.$abs]();
        let measureDistance = datumPoint.y != null ? (chartPoint.y - dart.nullCheck(datumPoint.y))[S$.$abs]() : 10000;
        let relativeDistance = datumPoint.y != null ? chartPoint.distanceTo(datumPoint.toPoint()) : 10000;
        let insidePoint = false;
        if (datumPoint.xLower != null && datumPoint.xUpper != null && datumPoint.yLower != null && datumPoint.yUpper != null) {
          let relativeDistanceBounds = math$.distanceBetweenPointAndLineSegment(vector_math.Vector2.new(chartPoint.x, chartPoint.y), vector_math.Vector2.new(dart.nullCheck(datumPoint.xLower), dart.nullCheck(datumPoint.yLower)), vector_math.Vector2.new(dart.nullCheck(datumPoint.xUpper), dart.nullCheck(datumPoint.yUpper)));
          insidePoint = relativeDistance < radiusPx || boundsLineRadiusPx !== null && relativeDistanceBounds < boundsLineRadiusPx;
          relativeDistance = math.min(core.double, relativeDistance, relativeDistanceBounds);
        } else {
          insidePoint = relativeDistance < radiusPx;
        }
        return new point_renderer._Distances.new({domainDistance: domainDistance, measureDistance: measureDistance, relativeDistance: relativeDistance, insidePoint: insidePoint});
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsOfD().as(details);
        SeriesDatumOfD().as(seriesDatum);
        let series = dart.nullCheck(details.series);
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
        let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
        let point = this.getPoint(seriesDatum.datum, details.domain, details.domainLowerBound, details.domainUpperBound, series, domainAxis, details.measure, details.measureLowerBound, details.measureUpperBound, details.measureOffset, measureAxis);
        let symbolRendererFn = series.getAttr(T$.intNToString(), point_renderer.pointSymbolRendererFnKey);
        let symbolRendererId = null;
        if (symbolRendererFn != null) {
          symbolRendererId = symbolRendererFn(details.index);
        }
        symbolRendererId == null ? symbolRendererId = series.getAttr(core.String, point_renderer.pointSymbolRendererIdKey) : null;
        symbolRendererId == null ? symbolRendererId = "__default__" : null;
        let nearestSymbolRenderer = null;
        if (symbolRendererId === "__default__") {
          nearestSymbolRenderer = this.symbolRenderer;
        } else {
          let id = symbolRendererId;
          if (!dart.nullCheck(this.config.customSymbolRenderers)[S$.$containsKey](id)) {
            dart.throw(new core.ArgumentError.new("Invalid custom symbol renderer id \"" + id + "\""));
          }
          nearestSymbolRenderer = dart.nullCheck(this.config.customSymbolRenderers)[S$.$_get](id);
        }
        return DatumDetailsOfD().from(details, {chartPosition: new math$.NullablePoint.new(point.x, point.y), chartPositionLower: new math$.NullablePoint.new(point.xLower, point.yLower), chartPositionUpper: new math$.NullablePoint.new(point.xUpper, point.yUpper), symbolRenderer: nearestSymbolRenderer});
      }
    }
    (PointRenderer.new = function(opts) {
      let t7, t7$, t7$0, t7$1, t7$2, t7$3, t7$4, t7$5;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      this[S$._chart$2] = null;
      this[S$.seriesPointMap] = new (IdentityMapOfString$ListOfAnimatedPointOfD()).new();
      this[S$._currentKeys] = T$.JSArrayOfString().of([]);
      this[S$.config$1] = (t7 = config, t7 == null ? new (PointRendererConfigOfD()).new() : t7);
      this[S$.pointRendererDecorators$1] = (t7$0 = (t7$ = config, t7$ == null ? null : t7$.pointRendererDecorators), t7$0 == null ? JSArrayOfPointRendererDecoratorOfD().of([]) : t7$0);
      PointRenderer.__proto__.new.call(this, {rendererId: (t7$1 = rendererId, t7$1 == null ? "point" : t7$1), layoutPaintOrder: (t7$3 = (t7$2 = config, t7$2 == null ? null : t7$2.layoutPaintOrder), t7$3 == null ? 25 : t7$3), symbolRenderer: (t7$5 = (t7$4 = config, t7$4 == null ? null : t7$4.symbolRenderer), t7$5 == null ? new symbol_renderer.CircleSymbolRenderer.new() : t7$5)});
      ;
    }).prototype = PointRenderer.prototype;
    dart.addTypeTests(PointRenderer);
    PointRenderer.prototype[_is_PointRenderer_default] = true;
    dart.addTypeCaches(PointRenderer);
    dart.setMethodSignature(PointRenderer, () => ({
      __proto__: dart.getMethods(PointRenderer.__proto__),
      update: dart.fnType(dart.void, [dart.nullable(core.Object), core.bool]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      getPoint: dart.fnType(point_renderer.DatumPoint$(D), [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.num), dart.nullable(core.num), dart.nullable(core.num), dart.nullable(core.num), axis$.ImmutableAxis$(core.num)]),
      getNearestDatumDetailPerSeries: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [math.Point$(core.double), core.bool, dart.nullable(math.Rectangle$(core.int))], {selectExactEventLocation: core.bool, selectOverlappingPoints: core.bool}, {}),
      [S$._createDatumDetails]: dart.fnType(datum_details.DatumDetails$(D), [point_renderer.PointRendererElement$(D), point_renderer._Distances]),
      [S$._getDatumDistance]: dart.fnType(point_renderer._Distances, [point_renderer.AnimatedPoint$(D), math.Point$(core.double)]),
      addPositionToDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(PointRenderer, () => ({
      __proto__: dart.getGetters(PointRenderer.__proto__),
      isRtl: core.bool
    }));
    dart.setLibraryUri(PointRenderer, I[25]);
    dart.setFieldSignature(PointRenderer, () => ({
      __proto__: dart.getFields(PointRenderer.__proto__),
      config: dart.finalFieldType(point_renderer_config.PointRendererConfig$(D)),
      pointRendererDecorators: dart.finalFieldType(core.List$(point_renderer_decorator.PointRendererDecorator$(D))),
      [S$._chart$2]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      seriesPointMap: dart.fieldType(collection.LinkedHashMap$(core.String, core.List$(point_renderer.AnimatedPoint$(D)))),
      [S$._currentKeys]: dart.finalFieldType(core.List$(core.String))
    }));
    return PointRenderer;
  });
  point_renderer.PointRenderer = point_renderer.PointRenderer$();
  dart.addTypeTests(point_renderer.PointRenderer, _is_PointRenderer_default);
  const _is_SymbolAnnotationRenderer_default = Symbol('_is_SymbolAnnotationRenderer_default');
  symbol_annotation_renderer.SymbolAnnotationRenderer$ = dart.generic(D => {
    var _SeriesInfoOfD = () => (_SeriesInfoOfD = dart.constFn(symbol_annotation_renderer._SeriesInfo$(D)))();
    var IdentityMapOfString$_SeriesInfoOfD = () => (IdentityMapOfString$_SeriesInfoOfD = dart.constFn(_js_helper.IdentityMap$(core.String, _SeriesInfoOfD())))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    var DN = () => (DN = dart.constFn(dart.nullable(D)))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    var DatumPointOfD = () => (DatumPointOfD = dart.constFn(point_renderer.DatumPoint$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    var AnimatedPointOfD = () => (AnimatedPointOfD = dart.constFn(point_renderer.AnimatedPoint$(D)))();
    var ListOfAnimatedPointOfD = () => (ListOfAnimatedPointOfD = dart.constFn(core.List$(AnimatedPointOfD())))();
    var StringAndListOfAnimatedPointOfDTovoid = () => (StringAndListOfAnimatedPointOfDTovoid = dart.constFn(dart.fnType(dart.void, [core.String, ListOfAnimatedPointOfD()])))();
    class SymbolAnnotationRenderer extends point_renderer.PointRenderer$(D) {
      get graphicsFactory() {
        return this[S$.graphicsFactory$2];
      }
      set graphicsFactory(value) {
        this[S$.graphicsFactory$2] = value;
      }
      get [S$._componentBounds]() {
        let t5;
        t5 = this[S$.__SymbolAnnotationRenderer__componentBounds];
        return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_componentBounds")) : t5;
      }
      set [S$._componentBounds](t5) {
        this[S$.__SymbolAnnotationRenderer__componentBounds] = t5;
      }
      get [S$._chart$1]() {
        let t6;
        t6 = this[S$.__SymbolAnnotationRenderer__chart];
        return t6 == null ? dart.throw(new _internal.LateError.fieldNI("_chart")) : t6;
      }
      set [S$._chart$1](t6) {
        this[S$.__SymbolAnnotationRenderer__chart] = t6;
      }
      configureMeasureAxes(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        let localConfig = symbol_annotation_renderer_config.SymbolAnnotationRendererConfig.as(this.config);
        this[S$._seriesInfo][S$.$clear]();
        let offset = 0.0;
        seriesList[S$.$forEach](dart.fn(series => {
          let t7, t8, t7$, t7$0;
          let seriesKey = series.id;
          t7 = series;
          t7.radiusPxFn == null ? t7.radiusPxFn = dart.fn(_ => this.config.radiusPx, T$.intNTodouble()) : null;
          let maxRadius = 0.0;
          for (let index = 0; index < series.data[S$.$length]; index = index + 1) {
            let radiusPx = (t7$ = series.radiusPxFn, t7$ == null ? null : (t8 = t7$(index), t8 == null ? null : t8[S$.$toDouble]()));
            radiusPx == null ? radiusPx = this.config.radiusPx : null;
            maxRadius = math.max(core.double, maxRadius, radiusPx);
          }
          let rowInnerHeight = maxRadius * 2;
          let rowHeight = localConfig.verticalSymbolBottomPaddingPx + localConfig.verticalSymbolTopPaddingPx + rowInnerHeight;
          let symbolCenter = offset + localConfig.verticalSymbolTopPaddingPx + rowInnerHeight / 2;
          series.measureFn = dart.fn(index => 0, T$.intNToint());
          series.measureOffsetFn = dart.fn(index => 0, T$.intNToint());
          t7$0 = series;
          t7$0.keyFn == null ? t7$0.keyFn = dart.fn(index => {
            let t9, t8;
            return series.id + "__" + dart.str((t8 = series, t9 = index, t8.domainFn(t9))) + "__" + dart.str(dart.nullCheck(series.domainLowerBoundFn)(index)) + "__" + dart.str(dart.nullCheck(series.domainUpperBoundFn)(index));
          }, T$.intNToString()) : null;
          this[S$._seriesInfo][S$.$_set](seriesKey, new (_SeriesInfoOfD()).new({rowHeight: rowHeight, rowStart: offset, symbolCenter: symbolCenter}));
          offset = offset + rowHeight;
        }, MutableSeriesOfDTovoid()));
        this[S$._currentHeight] = offset[S$.$ceil]();
        super.preprocessSeries(seriesList);
      }
      getPoint(datum, domainValue, domainLowerBoundValue, domainUpperBoundValue, series, domainAxis, measureValue, measureLowerBoundValue, measureUpperBoundValue, measureOffsetValue, measureAxis) {
        DN().as(domainValue);
        DN().as(domainLowerBoundValue);
        DN().as(domainUpperBoundValue);
        ImmutableSeriesOfD().as(series);
        ImmutableAxisOfD().as(domainAxis);
        let domainPosition = domainAxis.getLocation(domainValue);
        let domainLowerBoundPosition = domainLowerBoundValue != null ? domainAxis.getLocation(domainLowerBoundValue) : null;
        let domainUpperBoundPosition = domainUpperBoundValue != null ? domainAxis.getLocation(domainUpperBoundValue) : null;
        let seriesKey = series.id;
        let seriesInfo = dart.nullCheck(this[S$._seriesInfo][S$.$_get](seriesKey));
        let measurePosition = this[S$._componentBounds][S$.$top] + seriesInfo.symbolCenter;
        let measureLowerBoundPosition = domainLowerBoundPosition != null ? measurePosition : null;
        let measureUpperBoundPosition = domainUpperBoundPosition != null ? measurePosition : null;
        return new (DatumPointOfD()).new({datum: datum, domain: domainValue, series: series, x: domainPosition, xLower: domainLowerBoundPosition, xUpper: domainUpperBoundPosition, y: measurePosition, yLower: measureLowerBoundPosition, yUpper: measureUpperBoundPosition});
      }
      onAttach(chart) {
        BaseChartOfD().as(chart);
        if (!CartesianChartOfD().is(chart)) {
          dart.throw(new core.ArgumentError.new("SymbolAnnotationRenderer can only be attached to a CartesianChart<D>"));
        }
        this[S$._chart$1] = chart;
        if (!this[S$._chart$1].vertical) dart.assertFailed(null, I[22], 190, 12, "_chart.vertical");
        super.onAttach(chart);
        this[S$._chart$1].addView(this);
      }
      onDetach(chart) {
        BaseChartOfD().as(chart);
        chart.removeView(this);
      }
      paint(canvas, animationPercent) {
        super.paint(canvas, animationPercent);
        if (symbol_annotation_renderer_config.SymbolAnnotationRendererConfig.as(this.config).showSeparatorLines) {
          this.seriesPointMap[S$.$forEach](dart.fn((key, points) => {
            let seriesInfo = dart.nullCheck(this[S$._seriesInfo][S$.$_get](key));
            let y = this.componentBounds[S$.$top] + seriesInfo.rowStart;
            let domainAxis = dart.nullCheck(this[S$._chart$1].domainAxis);
            let bounds = new (T$.RectangleOfint()).new(this.componentBounds[S$.$left], y[S$.$round](), this.componentBounds[S$.$width], 0);
            dart.nullCheck(domainAxis.tickDrawStrategy).drawAxisLine(canvas, dart.nullCheck(domainAxis.axisOrientation), bounds);
          }, StringAndListOfAnimatedPointOfDTovoid()));
        }
      }
      get layoutConfig() {
        return new layout_view.LayoutViewConfig.new({paintOrder: 25, position: layout_view.LayoutPosition.Bottom, positionOrder: 10});
      }
      measure(maxWidth, maxHeight) {
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: maxWidth, preferredHeight: this[S$._currentHeight]});
      }
      layout(componentBounds, drawAreaBounds) {
        this[S$._componentBounds] = componentBounds;
        super.layout(componentBounds, drawAreaBounds);
      }
      get componentBounds() {
        return this[S$._componentBounds];
      }
    }
    (SymbolAnnotationRenderer.new = function(opts) {
      let t5;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      this[S$.__SymbolAnnotationRenderer__componentBounds] = null;
      this[S$.graphicsFactory$2] = null;
      this[S$.__SymbolAnnotationRenderer__chart] = null;
      this[S$._currentHeight] = 0;
      this[S$._seriesInfo] = new (IdentityMapOfString$_SeriesInfoOfD()).new();
      SymbolAnnotationRenderer.__proto__.new.call(this, {rendererId: (t5 = rendererId, t5 == null ? "symbolAnnotation" : t5), config: config});
      ;
    }).prototype = SymbolAnnotationRenderer.prototype;
    dart.addTypeTests(SymbolAnnotationRenderer);
    SymbolAnnotationRenderer.prototype[_is_SymbolAnnotationRenderer_default] = true;
    dart.addTypeCaches(SymbolAnnotationRenderer);
    SymbolAnnotationRenderer[dart.implements] = () => [layout_view.LayoutView];
    dart.setMethodSignature(SymbolAnnotationRenderer, () => ({
      __proto__: dart.getMethods(SymbolAnnotationRenderer.__proto__),
      measure: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int])
    }));
    dart.setGetterSignature(SymbolAnnotationRenderer, () => ({
      __proto__: dart.getGetters(SymbolAnnotationRenderer.__proto__),
      [S$._componentBounds]: math.Rectangle$(core.int),
      [S$._chart$1]: cartesian_chart.CartesianChart$(D),
      layoutConfig: layout_view.LayoutViewConfig,
      componentBounds: math.Rectangle$(core.int)
    }));
    dart.setSetterSignature(SymbolAnnotationRenderer, () => ({
      __proto__: dart.getSetters(SymbolAnnotationRenderer.__proto__),
      [S$._componentBounds]: math.Rectangle$(core.int),
      [S$._chart$1]: cartesian_chart.CartesianChart$(D)
    }));
    dart.setLibraryUri(SymbolAnnotationRenderer, I[26]);
    dart.setFieldSignature(SymbolAnnotationRenderer, () => ({
      __proto__: dart.getFields(SymbolAnnotationRenderer.__proto__),
      [S$.__SymbolAnnotationRenderer__componentBounds]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      graphicsFactory: dart.fieldType(dart.nullable(graphics_factory.GraphicsFactory)),
      [S$.__SymbolAnnotationRenderer__chart]: dart.fieldType(dart.nullable(cartesian_chart.CartesianChart$(D))),
      [S$._currentHeight]: dart.fieldType(core.int),
      [S$._seriesInfo]: dart.finalFieldType(collection.LinkedHashMap$(core.String, symbol_annotation_renderer._SeriesInfo$(D)))
    }));
    return SymbolAnnotationRenderer;
  });
  symbol_annotation_renderer.SymbolAnnotationRenderer = symbol_annotation_renderer.SymbolAnnotationRenderer$();
  dart.addTypeTests(symbol_annotation_renderer.SymbolAnnotationRenderer, _is_SymbolAnnotationRenderer_default);
  const _is__SeriesInfo_default = Symbol('_is__SeriesInfo_default');
  symbol_annotation_renderer._SeriesInfo$ = dart.generic(D => {
    class _SeriesInfo extends core.Object {}
    (_SeriesInfo.new = function(opts) {
      let rowHeight = opts && 'rowHeight' in opts ? opts.rowHeight : null;
      let rowStart = opts && 'rowStart' in opts ? opts.rowStart : null;
      let symbolCenter = opts && 'symbolCenter' in opts ? opts.symbolCenter : null;
      this.rowHeight = rowHeight;
      this.rowStart = rowStart;
      this.symbolCenter = symbolCenter;
      ;
    }).prototype = _SeriesInfo.prototype;
    dart.addTypeTests(_SeriesInfo);
    _SeriesInfo.prototype[_is__SeriesInfo_default] = true;
    dart.addTypeCaches(_SeriesInfo);
    dart.setLibraryUri(_SeriesInfo, I[26]);
    dart.setFieldSignature(_SeriesInfo, () => ({
      __proto__: dart.getFields(_SeriesInfo.__proto__),
      rowHeight: dart.fieldType(core.double),
      rowStart: dart.fieldType(core.double),
      symbolCenter: dart.fieldType(core.double)
    }));
    return _SeriesInfo;
  });
  symbol_annotation_renderer._SeriesInfo = symbol_annotation_renderer._SeriesInfo$();
  dart.addTypeTests(symbol_annotation_renderer._SeriesInfo, _is__SeriesInfo_default);
  cartesian_chart.NumericCartesianChart = class NumericCartesianChart extends cartesian_chart.CartesianChart$(core.num) {
    initDomainAxis() {
      dart.nullCheck(this[S$._domainAxis]).tickDrawStrategy = new (T$.SmallTickRendererSpecOfnum()).new().createDrawStrategy(this.context, dart.nullCheck(this.graphicsFactory));
    }
  };
  (cartesian_chart.NumericCartesianChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    cartesian_chart.NumericCartesianChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, domainAxis: new axis$.NumericAxis.new(), primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = cartesian_chart.NumericCartesianChart.prototype;
  dart.addTypeTests(cartesian_chart.NumericCartesianChart);
  dart.addTypeCaches(cartesian_chart.NumericCartesianChart);
  dart.setMethodSignature(cartesian_chart.NumericCartesianChart, () => ({
    __proto__: dart.getMethods(cartesian_chart.NumericCartesianChart.__proto__),
    initDomainAxis: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(cartesian_chart.NumericCartesianChart, I[14]);
  scatter_plot_chart.ScatterPlotChart = class ScatterPlotChart extends cartesian_chart.NumericCartesianChart {
    get selectNearestByDomain() {
      return false;
    }
    get selectOverlappingPoints() {
      return true;
    }
    makeDefaultRenderer() {
      let t8;
      t8 = new (T$.PointRendererOfnum()).new();
      return (() => {
        t8.rendererId = "default";
        return t8;
      })();
    }
    initDomainAxis() {
      dart.nullCheck(this.domainAxis).tickDrawStrategy = new (T$.GridlineRendererSpecOfnum()).new().createDrawStrategy(this.context, dart.nullCheck(this.graphicsFactory));
    }
  };
  (scatter_plot_chart.ScatterPlotChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    scatter_plot_chart.ScatterPlotChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = scatter_plot_chart.ScatterPlotChart.prototype;
  dart.addTypeTests(scatter_plot_chart.ScatterPlotChart);
  dart.addTypeCaches(scatter_plot_chart.ScatterPlotChart);
  dart.setLibraryUri(scatter_plot_chart.ScatterPlotChart, I[27]);
  const _is_PieChart_default = Symbol('_is_PieChart_default');
  pie_chart.PieChart$ = dart.generic(D => {
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var ArcRendererOfD = () => (ArcRendererOfD = dart.constFn(arc_renderer.ArcRenderer$(D)))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    class PieChart extends base_chart.BaseChart$(D) {
      drawInternal(seriesList, opts) {
        ListOfMutableSeriesOfD().as(seriesList);
        let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : null;
        let skipLayout = opts && 'skipLayout' in opts ? opts.skipLayout : null;
        if (seriesList[S$.$length] > 1) {
          dart.throw(new core.ArgumentError.new("PieChart can only render a single series"));
        }
        super.drawInternal(seriesList, {skipAnimation: skipAnimation, skipLayout: skipLayout});
      }
      updateConfig(layoutConfig) {
        let t8;
        super.updateConfig((t8 = layoutConfig, t8 == null ? pie_chart.PieChart._defaultLayoutConfig : t8));
      }
      makeDefaultRenderer() {
        let t8;
        t8 = ArcRendererOfD().new();
        return (() => {
          t8.rendererId = "default";
          return t8;
        })();
      }
      getDatumDetails(type) {
        let entries = JSArrayOfDatumDetailsOfD().of([]);
        for (let seriesDatum of this.getSelectionModel(type).selectedDatum) {
          let rendererId = seriesDatum.series.getAttr(core.String, series_renderer.rendererIdKey);
          let renderer = this.getSeriesRenderer(rendererId);
          if (!ArcRendererOfD().is(renderer)) {
            continue;
          }
          let details = renderer.getExpandedDatumDetails(seriesDatum);
          if (details !== null) {
            entries[S$.$add](details);
          }
        }
        return entries;
      }
      get centerContentBounds() {
        let defaultRenderer = this.defaultRenderer;
        if (ArcRendererOfD().is(defaultRenderer)) {
          return defaultRenderer.centerContentBounds;
        } else {
          return null;
        }
      }
    }
    (PieChart.new = function(opts) {
      let t8;
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      PieChart.__proto__.new.call(this, {layoutConfig: (t8 = layoutConfig, t8 == null ? pie_chart.PieChart._defaultLayoutConfig : t8)});
      ;
    }).prototype = PieChart.prototype;
    dart.addTypeTests(PieChart);
    PieChart.prototype[_is_PieChart_default] = true;
    dart.addTypeCaches(PieChart);
    dart.setMethodSignature(PieChart, () => ({
      __proto__: dart.getMethods(PieChart.__proto__),
      updateConfig: dart.fnType(dart.void, [dart.nullable(layout_config.LayoutConfig)]),
      makeDefaultRenderer: dart.fnType(series_renderer.SeriesRenderer$(D), []),
      getDatumDetails: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [selection_model.SelectionModelType])
    }));
    dart.setGetterSignature(PieChart, () => ({
      __proto__: dart.getGetters(PieChart.__proto__),
      centerContentBounds: dart.nullable(math.Rectangle$(core.int))
    }));
    dart.setLibraryUri(PieChart, I[28]);
    return PieChart;
  });
  pie_chart.PieChart = pie_chart.PieChart$();
  dart.defineLazy(pie_chart.PieChart, {
    /*pie_chart.PieChart._defaultLayoutConfig*/get _defaultLayoutConfig() {
      return new layout_config.LayoutConfig.new({topSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), bottomSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), leftSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), rightSpec: layout_config.MarginSpec.fromPixel({minPixel: 20})});
    }
  }, false);
  dart.addTypeTests(pie_chart.PieChart, _is_PieChart_default);
  arc_label_decorator.ArcLabelPosition = class ArcLabelPosition extends core.Object {
    toString() {
      return this[S$._name$1];
    }
  };
  (arc_label_decorator.ArcLabelPosition.new = function(index, _name) {
    this.index = index;
    this[S$._name$1] = _name;
    ;
  }).prototype = arc_label_decorator.ArcLabelPosition.prototype;
  dart.addTypeTests(arc_label_decorator.ArcLabelPosition);
  dart.addTypeCaches(arc_label_decorator.ArcLabelPosition);
  dart.setLibraryUri(arc_label_decorator.ArcLabelPosition, I[18]);
  dart.setFieldSignature(arc_label_decorator.ArcLabelPosition, () => ({
    __proto__: dart.getFields(arc_label_decorator.ArcLabelPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(arc_label_decorator.ArcLabelPosition, ['toString']);
  arc_label_decorator.ArcLabelPosition.auto = C[10] || CT.C10;
  arc_label_decorator.ArcLabelPosition.outside = C[12] || CT.C12;
  arc_label_decorator.ArcLabelPosition.inside = C[9] || CT.C9;
  arc_label_decorator.ArcLabelPosition.values = C[13] || CT.C13;
  arc_label_decorator.ArcLabelLeaderLineStyleSpec = class ArcLabelLeaderLineStyleSpec extends core.Object {
    get color() {
      return this[S$.color];
    }
    set color(value) {
      super.color = value;
    }
    get length() {
      return this[S$.length];
    }
    set length(value) {
      super.length = value;
    }
    get thickness() {
      return this[S$.thickness];
    }
    set thickness(value) {
      super.thickness = value;
    }
    _equals(other) {
      if (other == null) return false;
      return arc_label_decorator.ArcLabelLeaderLineStyleSpec.is(other) && this.color._equals(other.color) && this.thickness === other.thickness && this.length === other.length;
    }
    get hashCode() {
      let hashcode = this.color.hashCode;
      hashcode = hashcode * 37 + this.thickness[S$.$hashCode];
      hashcode = hashcode * 37 + this.length[S$.$hashCode];
      return hashcode;
    }
  };
  (arc_label_decorator.ArcLabelLeaderLineStyleSpec.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let length = opts && 'length' in opts ? opts.length : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    this[S$.color] = color;
    this[S$.length] = length;
    this[S$.thickness] = thickness;
    ;
  }).prototype = arc_label_decorator.ArcLabelLeaderLineStyleSpec.prototype;
  dart.addTypeTests(arc_label_decorator.ArcLabelLeaderLineStyleSpec);
  dart.addTypeCaches(arc_label_decorator.ArcLabelLeaderLineStyleSpec);
  dart.setLibraryUri(arc_label_decorator.ArcLabelLeaderLineStyleSpec, I[18]);
  dart.setFieldSignature(arc_label_decorator.ArcLabelLeaderLineStyleSpec, () => ({
    __proto__: dart.getFields(arc_label_decorator.ArcLabelLeaderLineStyleSpec.__proto__),
    color: dart.finalFieldType(color$.Color),
    length: dart.finalFieldType(core.double),
    thickness: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(arc_label_decorator.ArcLabelLeaderLineStyleSpec, ['_equals']);
  dart.defineExtensionAccessors(arc_label_decorator.ArcLabelLeaderLineStyleSpec, ['hashCode']);
  const _is_LineRendererConfig_default = Symbol('_is_LineRendererConfig_default');
  line_renderer_config.LineRendererConfig$ = dart.generic(D => {
    var LineRendererOfD = () => (LineRendererOfD = dart.constFn(line_renderer.LineRenderer$(D)))();
    class LineRendererConfig extends layout_view.LayoutViewConfig {
      get customRendererId() {
        return this[S$.customRendererId$2];
      }
      set customRendererId(value) {
        super.customRendererId = value;
      }
      get symbolRenderer() {
        return this[S$.symbolRenderer$3];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get rendererAttributes() {
        return this[S$.rendererAttributes$2];
      }
      set rendererAttributes(value) {
        super.rendererAttributes = value;
      }
      get radiusPx() {
        return this[S$.radiusPx$1];
      }
      set radiusPx(value) {
        super.radiusPx = value;
      }
      get stacked() {
        return this[S$.stacked];
      }
      set stacked(value) {
        super.stacked = value;
      }
      get strokeWidthPx() {
        return this[S$.strokeWidthPx$3];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get dashPattern() {
        return this[S$.dashPattern];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get includeLine() {
        return this[S$.includeLine];
      }
      set includeLine(value) {
        super.includeLine = value;
      }
      get includePoints() {
        return this[S$.includePoints];
      }
      set includePoints(value) {
        super.includePoints = value;
      }
      get includeArea() {
        return this[S$.includeArea];
      }
      set includeArea(value) {
        super.includeArea = value;
      }
      get layoutPaintOrder() {
        return this[S$.layoutPaintOrder$2];
      }
      set layoutPaintOrder(value) {
        super.layoutPaintOrder = value;
      }
      get areaOpacity() {
        return this[S$.areaOpacity];
      }
      set areaOpacity(value) {
        super.areaOpacity = value;
      }
      get roundEndCaps() {
        return this[S$.roundEndCaps];
      }
      set roundEndCaps(value) {
        super.roundEndCaps = value;
      }
      build() {
        return LineRendererOfD().new({config: this, rendererId: this.customRendererId});
      }
    }
    (LineRendererConfig.new = function(opts) {
      let t8;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : 3.5;
      let stacked = opts && 'stacked' in opts ? opts.stacked : false;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 2;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let includeLine = opts && 'includeLine' in opts ? opts.includeLine : true;
      let includePoints = opts && 'includePoints' in opts ? opts.includePoints : false;
      let includeArea = opts && 'includeArea' in opts ? opts.includeArea : false;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 20;
      let areaOpacity = opts && 'areaOpacity' in opts ? opts.areaOpacity : 0.1;
      let roundEndCaps = opts && 'roundEndCaps' in opts ? opts.roundEndCaps : false;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[S$.rendererAttributes$2] = new series_renderer_config.RendererAttributes.new();
      this[S$.customRendererId$2] = customRendererId;
      this[S$.radiusPx$1] = radiusPx;
      this[S$.stacked] = stacked;
      this[S$.strokeWidthPx$3] = strokeWidthPx;
      this[S$.dashPattern] = dashPattern;
      this[S$.includeLine] = includeLine;
      this[S$.includePoints] = includePoints;
      this[S$.includeArea] = includeArea;
      this[S$.layoutPaintOrder$2] = layoutPaintOrder;
      this[S$.areaOpacity] = areaOpacity;
      this[S$.roundEndCaps] = roundEndCaps;
      this[S$.symbolRenderer$3] = (t8 = symbolRenderer, t8 == null ? new symbol_renderer.LineSymbolRenderer.new() : t8);
      LineRendererConfig.__proto__.new.call(this);
      ;
    }).prototype = LineRendererConfig.prototype;
    dart.addTypeTests(LineRendererConfig);
    LineRendererConfig.prototype[_is_LineRendererConfig_default] = true;
    dart.addTypeCaches(LineRendererConfig);
    LineRendererConfig[dart.implements] = () => [series_renderer_config.SeriesRendererConfig$(D)];
    dart.setMethodSignature(LineRendererConfig, () => ({
      __proto__: dart.getMethods(LineRendererConfig.__proto__),
      build: dart.fnType(line_renderer.LineRenderer$(D), [])
    }));
    dart.setLibraryUri(LineRendererConfig, I[29]);
    dart.setFieldSignature(LineRendererConfig, () => ({
      __proto__: dart.getFields(LineRendererConfig.__proto__),
      customRendererId: dart.finalFieldType(dart.nullable(core.String)),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      rendererAttributes: dart.finalFieldType(series_renderer_config.RendererAttributes),
      radiusPx: dart.finalFieldType(core.double),
      stacked: dart.finalFieldType(core.bool),
      strokeWidthPx: dart.finalFieldType(core.double),
      dashPattern: dart.finalFieldType(dart.nullable(core.List$(core.int))),
      includeLine: dart.finalFieldType(core.bool),
      includePoints: dart.finalFieldType(core.bool),
      includeArea: dart.finalFieldType(core.bool),
      layoutPaintOrder: dart.finalFieldType(core.int),
      areaOpacity: dart.finalFieldType(core.double),
      roundEndCaps: dart.finalFieldType(core.bool)
    }));
    return LineRendererConfig;
  });
  line_renderer_config.LineRendererConfig = line_renderer_config.LineRendererConfig$();
  dart.addTypeTests(line_renderer_config.LineRendererConfig, _is_LineRendererConfig_default);
  const _is_PointRendererDecorator_default = Symbol('_is_PointRendererDecorator_default');
  point_renderer_decorator.PointRendererDecorator$ = dart.generic(D => {
    class PointRendererDecorator extends core.Object {}
    (PointRendererDecorator.new = function() {
      ;
    }).prototype = PointRendererDecorator.prototype;
    dart.addTypeTests(PointRendererDecorator);
    PointRendererDecorator.prototype[_is_PointRendererDecorator_default] = true;
    dart.addTypeCaches(PointRendererDecorator);
    dart.setLibraryUri(PointRendererDecorator, I[30]);
    return PointRendererDecorator;
  });
  point_renderer_decorator.PointRendererDecorator = point_renderer_decorator.PointRendererDecorator$();
  dart.addTypeTests(point_renderer_decorator.PointRendererDecorator, _is_PointRendererDecorator_default);
  const _is_ComparisonPointsDecorator_default = Symbol('_is_ComparisonPointsDecorator_default');
  comparison_points_decorator.ComparisonPointsDecorator$ = dart.generic(D => {
    var PointRendererElementOfD = () => (PointRendererElementOfD = dart.constFn(point_renderer.PointRendererElement$(D)))();
    class ComparisonPointsDecorator extends point_renderer_decorator.PointRendererDecorator$(D) {
      get symbolRenderer() {
        return this[S$.symbolRenderer$4];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get renderAbove() {
        return this[S$.renderAbove$1];
      }
      set renderAbove(value) {
        super.renderAbove = value;
      }
      decorate(pointElement, canvas, graphicsFactory, opts) {
        PointRendererElementOfD().as(pointElement);
        let drawBounds = opts && 'drawBounds' in opts ? opts.drawBounds : null;
        let animationPercent = opts && 'animationPercent' in opts ? opts.animationPercent : null;
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        let points = this.computeBoundedPointsForElement(pointElement, drawBounds);
        if (points == null) {
          return;
        }
        let color = dart.nullCheck(pointElement.color).lighter;
        this.symbolRenderer.paint(canvas, points[S$.$_get](0), pointElement.boundsLineRadiusPx, {fillColor: color, strokeColor: color, p2: points[S$.$_get](1)});
      }
      computeBoundedPointsForElement(pointElement, drawBounds) {
        PointRendererElementOfD().as(pointElement);
        let point = dart.nullCheck(pointElement.point);
        if (point.xLower == null || point.xUpper == null || point.yLower == null || point.yUpper == null) {
          return null;
        }
        let p1 = new (T$.PointOfdouble()).new(dart.nullCheck(point.xLower), dart.nullCheck(point.yLower));
        let p2 = new (T$.PointOfdouble()).new(dart.nullCheck(point.xUpper), dart.nullCheck(point.yUpper));
        let dataBoundsRect = T$.RectangleOfnum().fromPoints(p1, p2);
        if (!drawBounds[S$.$intersects](dataBoundsRect)) {
          return null;
        }
        let p1p2 = comparison_points_decorator._Line.fromPoints(p1, p2);
        if (!drawBounds[S$.$containsPoint](p1)) {
          let p = this[S$._clampPointAlongLineToBoundingBox](p1, p1p2, drawBounds);
          if (p != null) {
            p1 = p;
          }
        }
        if (!drawBounds[S$.$containsPoint](p2)) {
          let p = this[S$._clampPointAlongLineToBoundingBox](p2, p1p2, drawBounds);
          if (p != null) {
            p2 = p;
          }
        }
        return T$.JSArrayOfPointOfdouble().of([p1, p2]);
      }
      [S$._clampPointAlongLineToBoundingBox](p1, line, bounds) {
        if (p1.y < bounds[S$.$top]) {
          let p = line.intersection(new comparison_points_decorator._Line.new(0.0, bounds[S$.$top][S$.$toDouble]()));
          if (p != null && bounds[S$.$containsPoint](p)) {
            return p;
          }
        }
        if (p1.y > bounds[S$.$bottom]) {
          let p = line.intersection(new comparison_points_decorator._Line.new(0.0, bounds[S$.$bottom][S$.$toDouble]()));
          if (p != null && bounds[S$.$containsPoint](p)) {
            return p;
          }
        }
        if (p1.x < bounds[S$.$left]) {
          let p = line.intersection(comparison_points_decorator._Line.fromVertical(bounds[S$.$left][S$.$toDouble]()));
          if (p != null && bounds[S$.$containsPoint](p)) {
            return p;
          }
        }
        if (p1.x > bounds[S$.$right]) {
          let p = line.intersection(comparison_points_decorator._Line.fromVertical(bounds[S$.$right][S$.$toDouble]()));
          if (p != null && bounds[S$.$containsPoint](p)) {
            return p;
          }
        }
        return null;
      }
    }
    (ComparisonPointsDecorator.new = function(opts) {
      let t8;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[S$.renderAbove$1] = false;
      this[S$.symbolRenderer$4] = (t8 = symbolRenderer, t8 == null ? new symbol_renderer.CylinderSymbolRenderer.new() : t8);
      ComparisonPointsDecorator.__proto__.new.call(this);
      ;
    }).prototype = ComparisonPointsDecorator.prototype;
    dart.addTypeTests(ComparisonPointsDecorator);
    ComparisonPointsDecorator.prototype[_is_ComparisonPointsDecorator_default] = true;
    dart.addTypeCaches(ComparisonPointsDecorator);
    dart.setMethodSignature(ComparisonPointsDecorator, () => ({
      __proto__: dart.getMethods(ComparisonPointsDecorator.__proto__),
      decorate: dart.fnType(dart.void, [dart.nullable(core.Object), chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory], {animationPercent: core.double, drawBounds: math.Rectangle$(core.num), rtl: core.bool}, {}),
      computeBoundedPointsForElement: dart.fnType(dart.nullable(core.List$(math.Point$(core.double))), [dart.nullable(core.Object), math.Rectangle$(core.num)]),
      [S$._clampPointAlongLineToBoundingBox]: dart.fnType(dart.nullable(math.Point$(core.double)), [math.Point$(core.double), comparison_points_decorator._Line, math.Rectangle$(core.num)])
    }));
    dart.setLibraryUri(ComparisonPointsDecorator, I[31]);
    dart.setFieldSignature(ComparisonPointsDecorator, () => ({
      __proto__: dart.getFields(ComparisonPointsDecorator.__proto__),
      symbolRenderer: dart.finalFieldType(symbol_renderer.PointSymbolRenderer),
      renderAbove: dart.finalFieldType(core.bool)
    }));
    return ComparisonPointsDecorator;
  });
  comparison_points_decorator.ComparisonPointsDecorator = comparison_points_decorator.ComparisonPointsDecorator$();
  dart.addTypeTests(comparison_points_decorator.ComparisonPointsDecorator, _is_ComparisonPointsDecorator_default);
  comparison_points_decorator._Line = class _Line extends core.Object {
    get vertical() {
      return this.slope == null && this.xIntercept != null;
    }
    static fromPoints(p1, p2) {
      if (p1.x === p2.x) {
        return comparison_points_decorator._Line.fromVertical(p1.x);
      }
      let m = ((p2.y - p1.y) / (p2.x - p1.x))[S$.$toDouble]();
      let b = (p1.y - m * p1.x)[S$.$toDouble]();
      return new comparison_points_decorator._Line.new(m, b);
    }
    static fromVertical(xIntercept) {
      return new comparison_points_decorator._Line.new(null, null, xIntercept[S$.$toDouble]());
    }
    intersection(other) {
      if (this.slope == other.slope || this.vertical && other.vertical) {
        return null;
      }
      if (other.vertical) {
        return new (T$.PointOfdouble()).new(dart.nullCheck(other.xIntercept), dart.nullCheck(this.slope) * dart.nullCheck(other.xIntercept) + dart.nullCheck(this.yIntercept));
      }
      if (this.vertical) {
        return new (T$.PointOfdouble()).new(dart.nullCheck(this.xIntercept), dart.nullCheck(other.slope) * dart.nullCheck(this.xIntercept) + dart.nullCheck(other.yIntercept));
      }
      let x = (dart.nullCheck(other.yIntercept) - dart.nullCheck(this.yIntercept)) / (dart.nullCheck(this.slope) - dart.nullCheck(other.slope));
      let y = dart.nullCheck(this.slope) * (dart.nullCheck(other.yIntercept) - dart.nullCheck(this.yIntercept)) / (dart.nullCheck(this.slope) - dart.nullCheck(other.slope)) + dart.nullCheck(this.yIntercept);
      return new (T$.PointOfdouble()).new(x, y);
    }
  };
  (comparison_points_decorator._Line.new = function(slope, yIntercept, xIntercept = null) {
    this.slope = slope;
    this.yIntercept = yIntercept;
    this.xIntercept = xIntercept;
    ;
  }).prototype = comparison_points_decorator._Line.prototype;
  dart.addTypeTests(comparison_points_decorator._Line);
  dart.addTypeCaches(comparison_points_decorator._Line);
  dart.setMethodSignature(comparison_points_decorator._Line, () => ({
    __proto__: dart.getMethods(comparison_points_decorator._Line.__proto__),
    intersection: dart.fnType(dart.nullable(math.Point$(core.double)), [comparison_points_decorator._Line])
  }));
  dart.setGetterSignature(comparison_points_decorator._Line, () => ({
    __proto__: dart.getGetters(comparison_points_decorator._Line.__proto__),
    vertical: core.bool
  }));
  dart.setLibraryUri(comparison_points_decorator._Line, I[31]);
  dart.setFieldSignature(comparison_points_decorator._Line, () => ({
    __proto__: dart.getFields(comparison_points_decorator._Line.__proto__),
    slope: dart.fieldType(dart.nullable(core.double)),
    yIntercept: dart.fieldType(dart.nullable(core.double)),
    xIntercept: dart.fieldType(dart.nullable(core.double))
  }));
  const _is_DatumPoint_default = Symbol('_is_DatumPoint_default');
  point_renderer.DatumPoint$ = dart.generic(D => {
    class DatumPoint extends math$.NullablePoint {
      get datum() {
        return this[S$.datum];
      }
      set datum(value) {
        super.datum = value;
      }
      get domain() {
        return this[S$.domain$1];
      }
      set domain(value) {
        super.domain = value;
      }
      get series() {
        return this[S$.series$1];
      }
      set series(value) {
        super.series = value;
      }
      get xLower() {
        return this[S$.xLower];
      }
      set xLower(value) {
        super.xLower = value;
      }
      get xUpper() {
        return this[S$.xUpper];
      }
      set xUpper(value) {
        super.xUpper = value;
      }
      get yLower() {
        return this[S$.yLower];
      }
      set yLower(value) {
        super.yLower = value;
      }
      get yUpper() {
        return this[S$.yUpper];
      }
      set yUpper(value) {
        super.yUpper = value;
      }
      static from(other, opts) {
        let t8, t8$, t8$0, t8$1, t8$2, t8$3;
        let x = opts && 'x' in opts ? opts.x : null;
        let xLower = opts && 'xLower' in opts ? opts.xLower : null;
        let xUpper = opts && 'xUpper' in opts ? opts.xUpper : null;
        let y = opts && 'y' in opts ? opts.y : null;
        let yLower = opts && 'yLower' in opts ? opts.yLower : null;
        let yUpper = opts && 'yUpper' in opts ? opts.yUpper : null;
        return new (point_renderer.DatumPoint$(D)).new({datum: other.datum, domain: other.domain, series: other.series, x: (t8 = x, t8 == null ? other.x : t8), xLower: (t8$ = xLower, t8$ == null ? other.xLower : t8$), xUpper: (t8$0 = xUpper, t8$0 == null ? other.xUpper : t8$0), y: (t8$1 = y, t8$1 == null ? other.y : t8$1), yLower: (t8$2 = yLower, t8$2 == null ? other.yLower : t8$2), yUpper: (t8$3 = yUpper, t8$3 == null ? other.yUpper : t8$3)});
      }
    }
    (DatumPoint.new = function(opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let x = opts && 'x' in opts ? opts.x : null;
      let xLower = opts && 'xLower' in opts ? opts.xLower : null;
      let xUpper = opts && 'xUpper' in opts ? opts.xUpper : null;
      let y = opts && 'y' in opts ? opts.y : null;
      let yLower = opts && 'yLower' in opts ? opts.yLower : null;
      let yUpper = opts && 'yUpper' in opts ? opts.yUpper : null;
      this[S$.datum] = datum;
      this[S$.domain$1] = domain;
      this[S$.series$1] = series;
      this[S$.xLower] = xLower;
      this[S$.xUpper] = xUpper;
      this[S$.yLower] = yLower;
      this[S$.yUpper] = yUpper;
      DatumPoint.__proto__.new.call(this, x, y);
      ;
    }).prototype = DatumPoint.prototype;
    dart.addTypeTests(DatumPoint);
    DatumPoint.prototype[_is_DatumPoint_default] = true;
    dart.addTypeCaches(DatumPoint);
    dart.setLibraryUri(DatumPoint, I[25]);
    dart.setFieldSignature(DatumPoint, () => ({
      __proto__: dart.getFields(DatumPoint.__proto__),
      datum: dart.finalFieldType(dart.nullable(core.Object)),
      domain: dart.finalFieldType(dart.nullable(D)),
      series: dart.finalFieldType(dart.nullable(processed_series.ImmutableSeries$(D))),
      xLower: dart.finalFieldType(dart.nullable(core.double)),
      xUpper: dart.finalFieldType(dart.nullable(core.double)),
      yLower: dart.finalFieldType(dart.nullable(core.double)),
      yUpper: dart.finalFieldType(dart.nullable(core.double))
    }));
    return DatumPoint;
  });
  point_renderer.DatumPoint = point_renderer.DatumPoint$();
  dart.addTypeTests(point_renderer.DatumPoint, _is_DatumPoint_default);
  const _is_PointRendererElement_default = Symbol('_is_PointRendererElement_default');
  point_renderer.PointRendererElement$ = dart.generic(D => {
    var DatumPointOfD = () => (DatumPointOfD = dart.constFn(point_renderer.DatumPoint$(D)))();
    var DatumPointNOfD = () => (DatumPointNOfD = dart.constFn(dart.nullable(DatumPointOfD())))();
    var PointRendererElementOfD = () => (PointRendererElementOfD = dart.constFn(point_renderer.PointRendererElement$(D)))();
    class PointRendererElement extends core.Object {
      get point() {
        return this[S$.point];
      }
      set point(value) {
        this[S$.point] = DatumPointNOfD().as(value);
      }
      get index() {
        return this[S$.index$1];
      }
      set index(value) {
        this[S$.index$1] = value;
      }
      get color() {
        return this[S$.color$1];
      }
      set color(value) {
        this[S$.color$1] = value;
      }
      get fillColor() {
        return this[S$.fillColor$1];
      }
      set fillColor(value) {
        this[S$.fillColor$1] = value;
      }
      get measureAxisPosition() {
        return this[S$.measureAxisPosition];
      }
      set measureAxisPosition(value) {
        this[S$.measureAxisPosition] = value;
      }
      get radiusPx() {
        return this[S$.radiusPx$2];
      }
      set radiusPx(value) {
        this[S$.radiusPx$2] = value;
      }
      get boundsLineRadiusPx() {
        return this[S$.boundsLineRadiusPx$1];
      }
      set boundsLineRadiusPx(value) {
        this[S$.boundsLineRadiusPx$1] = value;
      }
      get strokeWidthPx() {
        return this[S$.strokeWidthPx$4];
      }
      set strokeWidthPx(value) {
        this[S$.strokeWidthPx$4] = value;
      }
      get symbolRendererId() {
        return this[S$.symbolRendererId];
      }
      set symbolRendererId(value) {
        this[S$.symbolRendererId] = value;
      }
      clone() {
        return new (PointRendererElementOfD()).new({point: this.point != null ? DatumPointOfD().from(dart.nullCheck(this.point)) : null, index: this.index, color: this.color != null ? new color$.Color.fromOther({color: dart.nullCheck(this.color)}) : null, fillColor: this.fillColor != null ? new color$.Color.fromOther({color: dart.nullCheck(this.fillColor)}) : null, measureAxisPosition: this.measureAxisPosition, radiusPx: this.radiusPx, boundsLineRadiusPx: this.boundsLineRadiusPx, strokeWidthPx: this.strokeWidthPx, symbolRendererId: this.symbolRendererId});
      }
      updateAnimationPercent(previous, target, animationPercent) {
        PointRendererElementOfD().as(previous);
        PointRendererElementOfD().as(target);
        let targetPoint = dart.nullCheck(target.point);
        let previousPoint = dart.nullCheck(previous.point);
        let x = (dart.nullCheck(targetPoint.x) - dart.nullCheck(previousPoint.x)) * animationPercent + dart.nullCheck(previousPoint.x);
        let xLower = targetPoint.xLower != null && previousPoint.xLower != null ? (dart.nullCheck(targetPoint.xLower) - dart.nullCheck(previousPoint.xLower)) * animationPercent + dart.nullCheck(previousPoint.xLower) : null;
        let xUpper = targetPoint.xUpper != null && previousPoint.xUpper != null ? (dart.nullCheck(targetPoint.xUpper) - dart.nullCheck(previousPoint.xUpper)) * animationPercent + dart.nullCheck(previousPoint.xUpper) : null;
        let y = null;
        if (targetPoint.y != null && previousPoint.y != null) {
          y = (dart.nullCheck(targetPoint.y) - dart.nullCheck(previousPoint.y)) * animationPercent + dart.nullCheck(previousPoint.y);
        } else if (targetPoint.y != null) {
          y = targetPoint.y;
        } else {
          y = null;
        }
        let yLower = targetPoint.yLower != null && previousPoint.yLower != null ? (dart.nullCheck(targetPoint.yLower) - dart.nullCheck(previousPoint.yLower)) * animationPercent + dart.nullCheck(previousPoint.yLower) : null;
        let yUpper = targetPoint.yUpper != null && previousPoint.yUpper != null ? (dart.nullCheck(targetPoint.yUpper) - dart.nullCheck(previousPoint.yUpper)) * animationPercent + dart.nullCheck(previousPoint.yUpper) : null;
        this.point = DatumPointOfD().from(targetPoint, {x: x, xLower: xLower, xUpper: xUpper, y: y, yLower: yLower, yUpper: yUpper});
        this.color = chart_canvas.getAnimatedColor(dart.nullCheck(previous.color), dart.nullCheck(target.color), animationPercent);
        this.fillColor = chart_canvas.getAnimatedColor(dart.nullCheck(previous.fillColor), dart.nullCheck(target.fillColor), animationPercent);
        this.radiusPx = (target.radiusPx - previous.radiusPx) * animationPercent + previous.radiusPx;
        this.boundsLineRadiusPx = (target.boundsLineRadiusPx - previous.boundsLineRadiusPx) * animationPercent + previous.boundsLineRadiusPx;
        this.strokeWidthPx = (target.strokeWidthPx - previous.strokeWidthPx) * animationPercent + previous.strokeWidthPx;
      }
    }
    (PointRendererElement.new = function(opts) {
      let point = opts && 'point' in opts ? opts.point : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
      let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : null;
      let boundsLineRadiusPx = opts && 'boundsLineRadiusPx' in opts ? opts.boundsLineRadiusPx : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let symbolRendererId = opts && 'symbolRendererId' in opts ? opts.symbolRendererId : null;
      this[S$.point] = point;
      this[S$.index$1] = index;
      this[S$.color$1] = color;
      this[S$.fillColor$1] = fillColor;
      this[S$.measureAxisPosition] = measureAxisPosition;
      this[S$.radiusPx$2] = radiusPx;
      this[S$.boundsLineRadiusPx$1] = boundsLineRadiusPx;
      this[S$.strokeWidthPx$4] = strokeWidthPx;
      this[S$.symbolRendererId] = symbolRendererId;
      ;
    }).prototype = PointRendererElement.prototype;
    dart.addTypeTests(PointRendererElement);
    PointRendererElement.prototype[_is_PointRendererElement_default] = true;
    dart.addTypeCaches(PointRendererElement);
    dart.setMethodSignature(PointRendererElement, () => ({
      __proto__: dart.getMethods(PointRendererElement.__proto__),
      clone: dart.fnType(point_renderer.PointRendererElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object), core.double])
    }));
    dart.setLibraryUri(PointRendererElement, I[25]);
    dart.setFieldSignature(PointRendererElement, () => ({
      __proto__: dart.getFields(PointRendererElement.__proto__),
      point: dart.fieldType(dart.nullable(point_renderer.DatumPoint$(D))),
      index: dart.fieldType(dart.nullable(core.int)),
      color: dart.fieldType(dart.nullable(color$.Color)),
      fillColor: dart.fieldType(dart.nullable(color$.Color)),
      measureAxisPosition: dart.fieldType(dart.nullable(core.double)),
      radiusPx: dart.fieldType(core.double),
      boundsLineRadiusPx: dart.fieldType(core.double),
      strokeWidthPx: dart.fieldType(core.double),
      symbolRendererId: dart.fieldType(dart.nullable(core.String))
    }));
    return PointRendererElement;
  });
  point_renderer.PointRendererElement = point_renderer.PointRendererElement$();
  dart.addTypeTests(point_renderer.PointRendererElement, _is_PointRendererElement_default);
  const _is_AnimatedPoint_default = Symbol('_is_AnimatedPoint_default');
  point_renderer.AnimatedPoint$ = dart.generic(D => {
    var DatumPointOfD = () => (DatumPointOfD = dart.constFn(point_renderer.DatumPoint$(D)))();
    var PointRendererElementOfD = () => (PointRendererElementOfD = dart.constFn(point_renderer.PointRendererElement$(D)))();
    class AnimatedPoint extends core.Object {
      get key() {
        return this[S$.key];
      }
      set key(value) {
        super.key = value;
      }
      get overlaySeries() {
        return this[S$.overlaySeries];
      }
      set overlaySeries(value) {
        super.overlaySeries = value;
      }
      get animatingOut() {
        return this[S$.animatingOut];
      }
      set animatingOut(value) {
        this[S$.animatingOut] = value;
      }
      get [S$._targetPoint]() {
        let t8;
        t8 = this[S$.__AnimatedPoint__targetPoint];
        return t8 == null ? dart.throw(new _internal.LateError.fieldNI("_targetPoint")) : t8;
      }
      set [S$._targetPoint](t8) {
        this[S$.__AnimatedPoint__targetPoint] = t8;
      }
      animateOut() {
        let newTarget = dart.nullCheck(this[S$._currentPoint]).clone();
        let targetPoint = dart.nullCheck(newTarget.point);
        let y = dart.nullCheck(newTarget.measureAxisPosition)[S$.$roundToDouble]();
        newTarget.point = DatumPointOfD().from(targetPoint, {x: targetPoint.x, y: y, yLower: y, yUpper: y});
        newTarget.radiusPx = 0.0;
        newTarget.strokeWidthPx = 0.0;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        PointRendererElementOfD().as(newTarget);
        this.animatingOut = false;
        this[S$._currentPoint] == null ? this[S$._currentPoint] = newTarget.clone() : null;
        this[S$._previousPoint] = dart.nullCheck(this[S$._currentPoint]).clone();
        this[S$._targetPoint] = newTarget;
      }
      getCurrentPoint(animationPercent) {
        if (animationPercent === 1.0 || this[S$._previousPoint] == null) {
          this[S$._currentPoint] = this[S$._targetPoint];
          this[S$._previousPoint] = this[S$._targetPoint];
          return dart.nullCheck(this[S$._currentPoint]);
        }
        dart.nullCheck(this[S$._currentPoint]).updateAnimationPercent(dart.nullCheck(this[S$._previousPoint]), this[S$._targetPoint], animationPercent);
        return dart.nullCheck(this[S$._currentPoint]);
      }
    }
    (AnimatedPoint.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : null;
      this[S$._previousPoint] = null;
      this[S$.__AnimatedPoint__targetPoint] = null;
      this[S$._currentPoint] = null;
      this[S$.animatingOut] = false;
      this[S$.key] = key;
      this[S$.overlaySeries] = overlaySeries;
      ;
    }).prototype = AnimatedPoint.prototype;
    dart.addTypeTests(AnimatedPoint);
    AnimatedPoint.prototype[_is_AnimatedPoint_default] = true;
    dart.addTypeCaches(AnimatedPoint);
    dart.setMethodSignature(AnimatedPoint, () => ({
      __proto__: dart.getMethods(AnimatedPoint.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      getCurrentPoint: dart.fnType(point_renderer.PointRendererElement$(D), [core.double])
    }));
    dart.setGetterSignature(AnimatedPoint, () => ({
      __proto__: dart.getGetters(AnimatedPoint.__proto__),
      [S$._targetPoint]: point_renderer.PointRendererElement$(D)
    }));
    dart.setSetterSignature(AnimatedPoint, () => ({
      __proto__: dart.getSetters(AnimatedPoint.__proto__),
      [S$._targetPoint]: point_renderer.PointRendererElement$(D)
    }));
    dart.setLibraryUri(AnimatedPoint, I[25]);
    dart.setFieldSignature(AnimatedPoint, () => ({
      __proto__: dart.getFields(AnimatedPoint.__proto__),
      key: dart.finalFieldType(core.String),
      overlaySeries: dart.finalFieldType(core.bool),
      [S$._previousPoint]: dart.fieldType(dart.nullable(point_renderer.PointRendererElement$(D))),
      [S$.__AnimatedPoint__targetPoint]: dart.fieldType(dart.nullable(point_renderer.PointRendererElement$(D))),
      [S$._currentPoint]: dart.fieldType(dart.nullable(point_renderer.PointRendererElement$(D))),
      animatingOut: dart.fieldType(core.bool)
    }));
    return AnimatedPoint;
  });
  point_renderer.AnimatedPoint = point_renderer.AnimatedPoint$();
  dart.addTypeTests(point_renderer.AnimatedPoint, _is_AnimatedPoint_default);
  point_renderer._Distances = class _Distances extends core.Object {};
  (point_renderer._Distances.new = function(opts) {
    let domainDistance = opts && 'domainDistance' in opts ? opts.domainDistance : null;
    let measureDistance = opts && 'measureDistance' in opts ? opts.measureDistance : null;
    let relativeDistance = opts && 'relativeDistance' in opts ? opts.relativeDistance : null;
    let insidePoint = opts && 'insidePoint' in opts ? opts.insidePoint : null;
    this.domainDistance = domainDistance;
    this.measureDistance = measureDistance;
    this.relativeDistance = relativeDistance;
    this.insidePoint = insidePoint;
    ;
  }).prototype = point_renderer._Distances.prototype;
  dart.addTypeTests(point_renderer._Distances);
  dart.addTypeCaches(point_renderer._Distances);
  dart.setLibraryUri(point_renderer._Distances, I[25]);
  dart.setFieldSignature(point_renderer._Distances, () => ({
    __proto__: dart.getFields(point_renderer._Distances.__proto__),
    domainDistance: dart.finalFieldType(core.double),
    measureDistance: dart.finalFieldType(core.double),
    relativeDistance: dart.finalFieldType(core.double),
    insidePoint: dart.finalFieldType(dart.nullable(core.bool))
  }));
  dart.defineLazy(point_renderer, {
    /*point_renderer.pointElementsKey*/get pointElementsKey() {
      return C[14] || CT.C14;
    },
    /*point_renderer.pointSymbolRendererFnKey*/get pointSymbolRendererFnKey() {
      return C[15] || CT.C15;
    },
    /*point_renderer.pointSymbolRendererIdKey*/get pointSymbolRendererIdKey() {
      return C[16] || CT.C16;
    },
    /*point_renderer.boundsLineRadiusPxKey*/get boundsLineRadiusPxKey() {
      return C[17] || CT.C17;
    },
    /*point_renderer.boundsLineRadiusPxFnKey*/get boundsLineRadiusPxFnKey() {
      return C[18] || CT.C18;
    },
    /*point_renderer.defaultSymbolRendererId*/get defaultSymbolRendererId() {
      return "__default__";
    },
    /*point_renderer._maxInitialDistance*/get _maxInitialDistance() {
      return 10000;
    }
  }, false);
  const _is_LineRenderer_default = Symbol('_is_LineRenderer_default');
  line_renderer.LineRenderer$ = dart.generic(D => {
    var _AnimatedElementsOfD = () => (_AnimatedElementsOfD = dart.constFn(line_renderer._AnimatedElements$(D)))();
    var ListOf_AnimatedElementsOfD = () => (ListOf_AnimatedElementsOfD = dart.constFn(core.List$(_AnimatedElementsOfD())))();
    var IdentityMapOfString$ListOf_AnimatedElementsOfD = () => (IdentityMapOfString$ListOf_AnimatedElementsOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ListOf_AnimatedElementsOfD())))();
    var PointRendererOfD = () => (PointRendererOfD = dart.constFn(point_renderer.PointRenderer$(D)))();
    var PointRendererConfigOfD = () => (PointRendererConfigOfD = dart.constFn(point_renderer_config.PointRendererConfig$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    var MutableSeriesOfDTobool = () => (MutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [MutableSeriesOfD()])))();
    var _LineRendererElementOfD = () => (_LineRendererElementOfD = dart.constFn(line_renderer._LineRendererElement$(D)))();
    var JSArrayOf_LineRendererElementOfD = () => (JSArrayOf_LineRendererElementOfD = dart.constFn(_interceptors.JSArray$(_LineRendererElementOfD())))();
    var _RangeOfD = () => (_RangeOfD = dart.constFn(line_renderer._Range$(D)))();
    var LinkedMapOfD$num = () => (LinkedMapOfD$num = dart.constFn(_js_helper.LinkedMap$(D, core.num)))();
    var LinkedMapOfD$numN = () => (LinkedMapOfD$numN = dart.constFn(_js_helper.LinkedMap$(D, T$.numN())))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    var MapEntryOfString$ListOf_AnimatedElementsOfD = () => (MapEntryOfString$ListOf_AnimatedElementsOfD = dart.constFn(core.MapEntry$(core.String, ListOf_AnimatedElementsOfD())))();
    var JSArrayOfMapEntryOfString$ListOf_AnimatedElementsOfD = () => (JSArrayOfMapEntryOfString$ListOf_AnimatedElementsOfD = dart.constFn(_interceptors.JSArray$(MapEntryOfString$ListOf_AnimatedElementsOfD())))();
    var ImmutableSeriesOfDTobool = () => (ImmutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [ImmutableSeriesOfD()])))();
    var JSArrayOf_AnimatedElementsOfD = () => (JSArrayOf_AnimatedElementsOfD = dart.constFn(_interceptors.JSArray$(_AnimatedElementsOfD())))();
    var ImmutableSeriesOfDTovoid = () => (ImmutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [ImmutableSeriesOfD()])))();
    var _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_renderer._DatumPoint$(D)))();
    var ListOf_DatumPointOfD = () => (ListOf_DatumPointOfD = dart.constFn(core.List$(_DatumPointOfD())))();
    var JSArrayOfListOf_DatumPointOfD = () => (JSArrayOfListOf_DatumPointOfD = dart.constFn(_interceptors.JSArray$(ListOf_DatumPointOfD())))();
    var ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    var JSArrayOf_DatumPointOfD = () => (JSArrayOf_DatumPointOfD = dart.constFn(_interceptors.JSArray$(_DatumPointOfD())))();
    var _AnimatedElementsOfDTobool = () => (_AnimatedElementsOfDTobool = dart.constFn(dart.fnType(core.bool, [_AnimatedElementsOfD()])))();
    var ListOf_LineRendererElementOfD = () => (ListOf_LineRendererElementOfD = dart.constFn(core.List$(_LineRendererElementOfD())))();
    var _AreaRendererElementOfD = () => (_AreaRendererElementOfD = dart.constFn(line_renderer._AreaRendererElement$(D)))();
    var ListOf_AreaRendererElementOfD = () => (ListOf_AreaRendererElementOfD = dart.constFn(core.List$(_AreaRendererElementOfD())))();
    var _AnimatedLineOfD = () => (_AnimatedLineOfD = dart.constFn(line_renderer._AnimatedLine$(D)))();
    var JSArrayOf_AnimatedLineOfD = () => (JSArrayOf_AnimatedLineOfD = dart.constFn(_interceptors.JSArray$(_AnimatedLineOfD())))();
    var _AnimatedAreaOfD = () => (_AnimatedAreaOfD = dart.constFn(line_renderer._AnimatedArea$(D)))();
    var JSArrayOf_AnimatedAreaOfD = () => (JSArrayOf_AnimatedAreaOfD = dart.constFn(_interceptors.JSArray$(_AnimatedAreaOfD())))();
    var StringAndListOf_AnimatedElementsOfDTovoid = () => (StringAndListOf_AnimatedElementsOfDTovoid = dart.constFn(dart.fnType(dart.void, [core.String, ListOf_AnimatedElementsOfD()])))();
    var JSArrayOf_AreaRendererElementOfD = () => (JSArrayOf_AreaRendererElementOfD = dart.constFn(_interceptors.JSArray$(_AreaRendererElementOfD())))();
    var ListOfListOf_DatumPointOfD = () => (ListOfListOf_DatumPointOfD = dart.constFn(core.List$(ListOf_DatumPointOfD())))();
    var JSArrayOfListOfListOf_DatumPointOfD = () => (JSArrayOfListOfListOf_DatumPointOfD = dart.constFn(_interceptors.JSArray$(ListOfListOf_DatumPointOfD())))();
    var _DatumPointOfDTo_DatumPointOfD = () => (_DatumPointOfDTo_DatumPointOfD = dart.constFn(dart.fnType(_DatumPointOfD(), [_DatumPointOfD()])))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var ListOf_AnimatedAreaOfD = () => (ListOf_AnimatedAreaOfD = dart.constFn(core.List$(_AnimatedAreaOfD())))();
    var _AnimatedElementsOfDToListOf_AnimatedAreaOfD = () => (_AnimatedElementsOfDToListOf_AnimatedAreaOfD = dart.constFn(dart.fnType(ListOf_AnimatedAreaOfD(), [_AnimatedElementsOfD()])))();
    var ListOf_AnimatedAreaOfDToListOf_AnimatedAreaOfD = () => (ListOf_AnimatedAreaOfDToListOf_AnimatedAreaOfD = dart.constFn(dart.fnType(ListOf_AnimatedAreaOfD(), [ListOf_AnimatedAreaOfD()])))();
    var _AnimatedAreaOfDTo_AreaRendererElementOfD = () => (_AnimatedAreaOfDTo_AreaRendererElementOfD = dart.constFn(dart.fnType(_AreaRendererElementOfD(), [_AnimatedAreaOfD()])))();
    var _AreaRendererElementOfDTovoid = () => (_AreaRendererElementOfDTovoid = dart.constFn(dart.fnType(dart.void, [_AreaRendererElementOfD()])))();
    var ListOf_AnimatedLineOfD = () => (ListOf_AnimatedLineOfD = dart.constFn(core.List$(_AnimatedLineOfD())))();
    var _AnimatedElementsOfDToListOf_AnimatedLineOfD = () => (_AnimatedElementsOfDToListOf_AnimatedLineOfD = dart.constFn(dart.fnType(ListOf_AnimatedLineOfD(), [_AnimatedElementsOfD()])))();
    var ListOf_AnimatedLineOfDToListOf_AnimatedLineOfD = () => (ListOf_AnimatedLineOfDToListOf_AnimatedLineOfD = dart.constFn(dart.fnType(ListOf_AnimatedLineOfD(), [ListOf_AnimatedLineOfD()])))();
    var _AnimatedLineOfDTo_LineRendererElementOfD = () => (_AnimatedLineOfDTo_LineRendererElementOfD = dart.constFn(dart.fnType(_LineRendererElementOfD(), [_AnimatedLineOfD()])))();
    var _LineRendererElementOfDTovoid = () => (_LineRendererElementOfDTovoid = dart.constFn(dart.fnType(dart.void, [_LineRendererElementOfD()])))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    class LineRenderer extends cartesian_renderer.BaseCartesianRenderer$(D) {
      get config() {
        return this[S$.config$2];
      }
      set config(value) {
        super.config = value;
      }
      get [S$._pointRenderer]() {
        let t9;
        t9 = this[S$.__LineRenderer__pointRenderer];
        return t9 == null ? dart.throw(new _internal.LateError.fieldNI("_pointRenderer")) : t9;
      }
      set [S$._pointRenderer](t9) {
        this[S$.__LineRenderer__pointRenderer] = t9;
      }
      get [S$._hasMeasureBounds]() {
        let t10;
        t10 = this[S$.__LineRenderer__hasMeasureBounds];
        return t10 == null ? dart.throw(new _internal.LateError.fieldNI("_hasMeasureBounds")) : t10;
      }
      set [S$._hasMeasureBounds](t10) {
        this[S$.__LineRenderer__hasMeasureBounds] = t10;
      }
      static new(opts) {
        let t11, t11$;
        let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
        let config = opts && 'config' in opts ? opts.config : null;
        return new (line_renderer.LineRenderer$(D))._internal({rendererId: (t11 = rendererId, t11 == null ? "line" : t11), config: (t11$ = config, t11$ == null ? new (line_renderer_config.LineRendererConfig$(D)).new() : t11$)});
      }
      layout(componentBounds, drawAreaBounds) {
        super.layout(componentBounds, drawAreaBounds);
        if (this.config.includePoints) {
          this[S$._pointRenderer].layout(componentBounds, drawAreaBounds);
        }
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        this.assignMissingColors(seriesList, {emptyCategoryUsesSinglePalette: false});
        seriesList[S$.$forEach](dart.fn(series => {
          let t11;
          t11 = series;
          t11.areaColorFn == null ? t11.areaColorFn = dart.fn(index => {
            let t12;
            let color = (t12 = series.colorFn, t12 == null ? null : t12(index));
            if (color == null) {
              return null;
            }
            return new color$.Color.new({r: color.r, g: color.g, b: color.b, a: (color.a * this.config.areaOpacity)[S$.$round]()});
          }, T$.intNToColorN()) : null;
        }, MutableSeriesOfDTovoid()));
        if (this.config.includePoints) {
          this[S$._pointRenderer].configureSeries(seriesList);
        }
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        let stackIndex = 0;
        this[S$._hasMeasureBounds] = seriesList[S$.$any](dart.fn(series => series.measureUpperBoundFn != null && series.measureLowerBoundFn != null, MutableSeriesOfDTobool()));
        seriesList[S$.$forEach](dart.fn(series => {
          let t11, t12, t11$, t11$0;
          let colorFn = series.colorFn;
          let areaColorFn = series.areaColorFn;
          let domainFn = series.domainFn;
          let measureFn = series.measureFn;
          let strokeWidthPxFn = series.strokeWidthPxFn;
          t11 = series;
          t11.dashPatternFn == null ? t11.dashPatternFn = dart.fn(_ => this.config.dashPattern, T$.intNToListNOfint()) : null;
          let dashPatternFn = dart.nullCheck(series.dashPatternFn);
          let styleSegments = JSArrayOf_LineRendererElementOfD().of([]);
          let styleSegmentsIndex = 0;
          let usedKeys = T$.LinkedHashSetOfString().new();
          let previousSegmentKey = null;
          let currentDetails = null;
          for (let index = 0; index < series.data[S$.$length]; index = index + 1) {
            let domain = domainFn(index);
            let measure = measureFn(index);
            if (domain == null || measure == null) {
              continue;
            }
            let color = dart.nullCheck(colorFn)(index);
            let areaColor = dart.nullCheck(areaColorFn)(index);
            let dashPattern = dashPatternFn(index);
            let strokeWidthPx = (t11$0 = (t11$ = strokeWidthPxFn, t11$ == null ? null : (t12 = t11$(index), t12 == null ? null : t12[S$.$toDouble]())), t11$0 == null ? this.config.strokeWidthPx : t11$0);
            let strokeWidthPxRounded = (strokeWidthPx * 100)[S$.$round]() / 100;
            let styleKey = series.id + "__" + dart.str(styleSegmentsIndex) + "__" + dart.str(color) + "__" + dart.str(dashPattern) + "__" + dart.str(strokeWidthPxRounded);
            if (styleKey !== previousSegmentKey) {
              if (usedKeys[S$.$isNotEmpty] && usedKeys.contains(styleKey)) {
                styleSegmentsIndex = styleSegmentsIndex + 1;
                styleKey = series.id + "__" + dart.str(styleSegmentsIndex) + "__" + dart.str(color) + "__" + dart.str(dashPattern) + "__" + dart.str(strokeWidthPxRounded);
              }
              if (currentDetails != null) {
                currentDetails.domainExtent.includePoint(domain);
              }
              currentDetails = new (_LineRendererElementOfD()).new({color: color, areaColor: areaColor, dashPattern: dashPattern, domainExtent: new (_RangeOfD()).new(domain, domain), strokeWidthPx: strokeWidthPx, styleKey: styleKey, roundEndCaps: this.config.roundEndCaps});
              styleSegments[S$.$add](currentDetails);
              usedKeys.add(styleKey);
              previousSegmentKey = styleKey;
            } else {
              dart.nullCheck(currentDetails).domainExtent.includePoint(domain);
            }
          }
          series.setAttr(T$.ListOf_LineRendererElementOfObjectN(), line_renderer.styleSegmentsKey, styleSegments);
          series.setAttr(core.int, line_renderer.lineStackIndexKey, stackIndex);
          if (this.config.stacked) {
            stackIndex = stackIndex + 1;
          }
        }, MutableSeriesOfDTovoid()));
        if (this.config.includePoints) {
          this[S$._pointRenderer].preprocessSeries(seriesList);
        }
        if (this.config.stacked && seriesList[S$.$isNotEmpty]) {
          let curOffsets = this[S$._createInitialOffsetMap](seriesList[S$.$_get](0));
          let nextOffsets = new (LinkedMapOfD$num()).new();
          for (let i = 0; i < seriesList[S$.$length]; i = i + 1) {
            let series = seriesList[S$.$_get](i);
            let measureOffsetFn = this[S$._createStackedMeasureOffsetFunction](series, curOffsets, nextOffsets);
            if (i > 0) {
              series.measureOffsetFn = measureOffsetFn;
            }
            curOffsets = nextOffsets;
            nextOffsets = new (LinkedMapOfD$num()).new();
          }
        }
      }
      [S$._createInitialOffsetMap](series) {
        let domainFn = series.domainFn;
        let measureOffsetFn = dart.nullCheck(series.measureOffsetFn);
        let initialOffsets = new (LinkedMapOfD$numN()).new();
        for (let index = 0; index < series.data[S$.$length]; index = index + 1) {
          initialOffsets[S$.$_set](domainFn(index), measureOffsetFn(index));
        }
        return initialOffsets;
      }
      [S$._createStackedMeasureOffsetFunction](series, curOffsets, nextOffsets) {
        let domainFn = series.domainFn;
        let measureFn = series.measureFn;
        for (let index = 0; index < series.data[S$.$length]; index = index + 1) {
          let domainValue = domainFn(index);
          let measure = measureFn(index);
          let prevOffset = curOffsets[S$.$_get](domainValue);
          if (measure != null && prevOffset != null) {
            nextOffsets[S$.$_set](domainValue, dart.notNull(measure) + dart.notNull(prevOffset));
          }
        }
        return dart.fn(i => curOffsets[S$.$_get](domainFn(i)), T$.intNTonumN());
      }
      [S$._mergeIntoSeriesMap](seriesList) {
        ListOfImmutableSeriesOfD().as(seriesList);
        let newLineMap = JSArrayOfMapEntryOfString$ListOf_AnimatedElementsOfD().of([]);
        seriesList[S$.$forEach](dart.fn(series => {
          let key = series.id;
          let checkNext = true;
          while (checkNext && this[S$._seriesLineMap][S$.$isNotEmpty]) {
            let firstKey = this[S$._seriesLineMap][S$.$keys][S$.$first];
            if (!seriesList[S$.$any](dart.fn(s => s.id === firstKey, ImmutableSeriesOfDTobool()))) {
              newLineMap[S$.$add](new (MapEntryOfString$ListOf_AnimatedElementsOfD()).__(firstKey, dart.nullCheck(this[S$._seriesLineMap][S$.$remove](firstKey))));
              checkNext = true;
            } else {
              checkNext = false;
            }
          }
          if (!this[S$._seriesLineMap][S$.$containsKey](key)) {
            newLineMap[S$.$add](new (MapEntryOfString$ListOf_AnimatedElementsOfD()).__(key, JSArrayOf_AnimatedElementsOfD().of([])));
          } else {
            newLineMap[S$.$add](new (MapEntryOfString$ListOf_AnimatedElementsOfD()).__(key, dart.nullCheck(this[S$._seriesLineMap][S$.$remove](key))));
          }
        }, ImmutableSeriesOfDTovoid()));
        newLineMap[S$.$addAll](this[S$._seriesLineMap][S$.$entries]);
        this[S$._seriesLineMap][S$.$clear]();
        this[S$._seriesLineMap][S$.$addEntries](newLineMap);
      }
      update(seriesList, isAnimatingThisDraw) {
        ListOfImmutableSeriesOfD().as(seriesList);
        this[S$._currentKeys$1][S$.$clear]();
        let previousPointList = JSArrayOfListOf_DatumPointOfD().of([]);
        let previousInitialPointList = JSArrayOfListOf_DatumPointOfD().of([]);
        this[S$._mergeIntoSeriesMap](seriesList);
        seriesList[S$.$forEach](dart.fn(series => {
          let domainAxis = ImmutableAxisOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
          let lineKey = series.id;
          let stackIndex = dart.nullCheck(series.getAttr(core.int, line_renderer.lineStackIndexKey));
          previousPointList[S$.$add](JSArrayOf_DatumPointOfD().of([]));
          previousInitialPointList[S$.$add](JSArrayOf_DatumPointOfD().of([]));
          let elementsList = dart.nullCheck(this[S$._seriesLineMap][S$.$_get](lineKey));
          let styleSegments = dart.nullCheck(series.getAttr(T$.ListOf_LineRendererElementOfObject(), line_renderer.styleSegmentsKey));
          if (styleSegments[S$.$isNotEmpty] && !axis$.OrdinalAxis.is(domainAxis)) {
            let drawBounds = dart.nullCheck(this.drawBounds);
            let startPx = (this.isRtl ? drawBounds[S$.$right] : drawBounds[S$.$left])[S$.$toDouble]();
            let endPx = (this.isRtl ? drawBounds[S$.$left] : drawBounds[S$.$right])[S$.$toDouble]();
            let startDomain = domainAxis.getDomain(startPx);
            let endDomain = domainAxis.getDomain(endPx);
            styleSegments[S$.$first].domainExtent.includePoint(startDomain);
            styleSegments[S$.$last].domainExtent.includePoint(endDomain);
          }
          styleSegments[S$.$forEach](dart.fn(styleSegment => {
            let t11, t11$, t11$0;
            let styleKey = styleSegment.styleKey;
            let animatingElements = iterable_extensions['IterableExtension|firstWhereOrNull'](_AnimatedElementsOfD(), elementsList, dart.fn(elements => elements.styleKey === styleKey, _AnimatedElementsOfDTobool()));
            if (animatingElements != null) {
              previousInitialPointList[S$.$_set](stackIndex, animatingElements.allPoints);
            } else {
              let lineAndArea = this[S$._createLineAndAreaElements](series, _LineRendererElementOfD().as(styleSegment), stackIndex > 0 ? previousInitialPointList[S$.$_get](stackIndex - 1) : null, true);
              let lineElementList = ListOf_LineRendererElementOfD().as(lineAndArea[S$.$_get](0));
              let areaElementList = ListOf_AreaRendererElementOfD().as(lineAndArea[S$.$_get](1));
              let allPointList = ListOf_DatumPointOfD().as(lineAndArea[S$.$_get](2));
              let boundsElementList = ListOf_AreaRendererElementOfD().as(lineAndArea[S$.$_get](3));
              let animatingLines = JSArrayOf_AnimatedLineOfD().of([]);
              for (let index = 0; index < lineElementList[S$.$length]; index = index + 1) {
                animatingLines[S$.$add]((t11 = new (_AnimatedLineOfD()).new({key: lineElementList[S$.$_get](index).styleKey, overlaySeries: series.overlaySeries}), (() => {
                  t11.setNewTarget(lineElementList[S$.$_get](index));
                  return t11;
                })()));
              }
              let animatingAreas = null;
              if (this.config.includeArea) {
                animatingAreas = JSArrayOf_AnimatedAreaOfD().of([]);
                for (let index = 0; index < areaElementList[S$.$length]; index = index + 1) {
                  animatingAreas[S$.$add]((t11$ = new (_AnimatedAreaOfD()).new({key: areaElementList[S$.$_get](index).styleKey, overlaySeries: series.overlaySeries}), (() => {
                    t11$.setNewTarget(areaElementList[S$.$_get](index));
                    return t11$;
                  })()));
                }
              }
              let animatingBounds = null;
              if (this[S$._hasMeasureBounds]) {
                animatingBounds == null ? animatingBounds = JSArrayOf_AnimatedAreaOfD().of([]) : null;
                for (let index = 0; index < boundsElementList[S$.$length]; index = index + 1) {
                  animatingBounds[S$.$add]((t11$0 = new (_AnimatedAreaOfD()).new({key: boundsElementList[S$.$_get](index).styleKey, overlaySeries: series.overlaySeries}), (() => {
                    t11$0.setNewTarget(boundsElementList[S$.$_get](index));
                    return t11$0;
                  })()));
                }
              }
              animatingElements = new (_AnimatedElementsOfD()).new({styleKey: styleSegment.styleKey, allPoints: allPointList, lines: animatingLines, areas: animatingAreas, bounds: animatingBounds});
              elementsList[S$.$add](animatingElements);
              previousInitialPointList[S$.$_set](stackIndex, allPointList);
            }
            let lineAndArea = this[S$._createLineAndAreaElements](series, _LineRendererElementOfD().as(styleSegment), stackIndex > 0 ? previousPointList[S$.$_get](stackIndex - 1) : null, false);
            let lineElementList = ListOf_LineRendererElementOfD().as(lineAndArea[S$.$_get](0));
            let areaElementList = ListOf_AreaRendererElementOfD().as(lineAndArea[S$.$_get](1));
            let allPointList = ListOf_DatumPointOfD().as(lineAndArea[S$.$_get](2));
            let boundsElementList = ListOf_AreaRendererElementOfD().as(lineAndArea[S$.$_get](3));
            for (let index = 0; index < lineElementList[S$.$length]; index = index + 1) {
              let lineElement = lineElementList[S$.$_get](index);
              if (index >= animatingElements.lines[S$.$length]) {
                animatingElements.lines[S$.$add](new (_AnimatedLineOfD()).new({key: lineElement.styleKey, overlaySeries: series.overlaySeries}));
              }
              animatingElements.lines[S$.$_get](index).setNewTarget(lineElement);
            }
            if (this.config.includeArea) {
              for (let index = 0; index < areaElementList[S$.$length]; index = index + 1) {
                let areaElement = areaElementList[S$.$_get](index);
                if (index >= dart.nullCheck(animatingElements.areas)[S$.$length]) {
                  dart.nullCheck(animatingElements.areas)[S$.$add](new (_AnimatedAreaOfD()).new({key: areaElement.styleKey, overlaySeries: series.overlaySeries}));
                }
                dart.nullCheck(animatingElements.areas)[S$.$_get](index).setNewTarget(areaElement);
              }
            }
            if (this[S$._hasMeasureBounds]) {
              for (let index = 0; index < boundsElementList[S$.$length]; index = index + 1) {
                let boundElement = boundsElementList[S$.$_get](index);
                if (index >= dart.nullCheck(animatingElements.bounds)[S$.$length]) {
                  dart.nullCheck(animatingElements.bounds)[S$.$add](new (_AnimatedAreaOfD()).new({key: boundElement.styleKey, overlaySeries: series.overlaySeries}));
                }
                dart.nullCheck(animatingElements.bounds)[S$.$_get](index).setNewTarget(boundElement);
              }
            }
            animatingElements.allPoints = allPointList;
            previousPointList[S$.$_set](stackIndex, allPointList);
          }, T$._LineRendererElementOfObjectTovoid()));
        }, ImmutableSeriesOfDTovoid()));
        this[S$._seriesLineMap][S$.$forEach](dart.fn((key, elements) => {
          for (let element of elements) {
            if (element.lines !== null) {
              for (let line of element.lines) {
                if (!this[S$._currentKeys$1][S$.$contains](line.key)) {
                  line.animateOut();
                }
              }
            }
            if (element.areas != null) {
              for (let area of dart.nullCheck(element.areas)) {
                if (!this[S$._currentKeys$1][S$.$contains](area.key)) {
                  area.animateOut();
                }
              }
            }
            if (element.bounds != null) {
              for (let bound of dart.nullCheck(element.bounds)) {
                if (!this[S$._currentKeys$1][S$.$contains](bound.key)) {
                  bound.animateOut();
                }
              }
            }
          }
        }, StringAndListOf_AnimatedElementsOfDTovoid()));
        if (this.config.includePoints) {
          this[S$._pointRenderer].update(seriesList, isAnimatingThisDraw);
        }
      }
      [S$._createLineAndAreaElements](series, styleSegment, previousPointList, initializeFromZero) {
        let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
        let color = styleSegment.color;
        let areaColor = styleSegment.areaColor;
        let dashPattern = styleSegment.dashPattern;
        let domainExtent = styleSegment.domainExtent;
        let strokeWidthPx = styleSegment.strokeWidthPx;
        let styleKey = styleSegment.styleKey;
        let roundEndCaps = styleSegment.roundEndCaps;
        let pointList = this[S$._createPointListForSeries](series, initializeFromZero);
        let segmentsList = this[S$._createLineAndAreaSegmentsForSeries](pointList, previousPointList, series, initializeFromZero);
        let lineSegments = segmentsList[S$.$_get](0);
        let areaSegments = segmentsList[S$.$_get](1);
        let boundsSegment = segmentsList[S$.$_get](2);
        this[S$._currentKeys$1][S$.$add](styleKey);
        let positionExtent = this[S$._createPositionExtent](series, styleSegment);
        let lineElements = JSArrayOf_LineRendererElementOfD().of([]);
        for (let index = 0; index < lineSegments[S$.$length]; index = index + 1) {
          let linePointList = lineSegments[S$.$_get](index);
          let lineStyleKey = styleKey + "__line__" + dart.str(index);
          this[S$._currentKeys$1][S$.$add](lineStyleKey);
          lineElements[S$.$add](new (_LineRendererElementOfD()).new({points: linePointList, color: color, areaColor: areaColor, dashPattern: dashPattern, domainExtent: domainExtent, measureAxisPosition: measureAxis.getLocation(0.0), positionExtent: positionExtent, strokeWidthPx: strokeWidthPx, styleKey: lineStyleKey, roundEndCaps: roundEndCaps}));
        }
        let areaElements = JSArrayOf_AreaRendererElementOfD().of([]);
        if (this.config.includeArea) {
          for (let index = 0; index < areaSegments[S$.$length]; index = index + 1) {
            let areaPointList = areaSegments[S$.$_get](index);
            let areaStyleKey = styleKey + "__area_" + dart.str(index);
            this[S$._currentKeys$1][S$.$add](areaStyleKey);
            areaElements[S$.$add](new (_AreaRendererElementOfD()).new({points: areaPointList, color: color, areaColor: areaColor, domainExtent: domainExtent, measureAxisPosition: dart.nullCheck(measureAxis.getLocation(0.0)), positionExtent: positionExtent, styleKey: areaStyleKey}));
          }
        }
        let boundsElements = JSArrayOf_AreaRendererElementOfD().of([]);
        if (this[S$._hasMeasureBounds]) {
          for (let index = 0; index < boundsSegment[S$.$length]; index = index + 1) {
            let boundsPointList = boundsSegment[S$.$_get](index);
            let boundsStyleKey = styleKey + "__bounds_" + dart.str(index);
            this[S$._currentKeys$1][S$.$add](boundsStyleKey);
            boundsElements[S$.$add](new (_AreaRendererElementOfD()).new({points: boundsPointList, color: color, areaColor: areaColor, domainExtent: domainExtent, measureAxisPosition: dart.nullCheck(measureAxis.getLocation(0.0)), positionExtent: positionExtent, styleKey: boundsStyleKey}));
          }
        }
        return T$.JSArrayOfObject().of([lineElements, areaElements, pointList, boundsElements]);
      }
      [S$._createPointListForSeries](series, initializeFromZero) {
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
        let domainFn = series.domainFn;
        let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
        let measureFn = series.measureFn;
        let measureOffsetFn = dart.nullCheck(series.measureOffsetFn);
        let pointList = JSArrayOf_DatumPointOfD().of([]);
        for (let index = 0; index < series.data[S$.$length]; index = index + 1) {
          let datum = series.data[S$.$_get](index);
          let measure = measureFn(index);
          if (measure != null && initializeFromZero) {
            measure = 0.0;
          }
          let measureOffset = measureOffsetFn(index);
          if (measureOffset != null && initializeFromZero) {
            measureOffset = 0.0;
          }
          pointList[S$.$add](this[S$._getPoint](datum, domainFn(index), series, domainAxis, measure, measureOffset, measureAxis, {index: index}));
        }
        return pointList;
      }
      [S$._createLineAndAreaSegmentsForSeries](pointList, previousPointList, series, initializeFromZero) {
        let lineSegments = JSArrayOfListOf_DatumPointOfD().of([]);
        let areaSegments = JSArrayOfListOf_DatumPointOfD().of([]);
        let boundsSegments = JSArrayOfListOf_DatumPointOfD().of([]);
        let startPointIndex = null;
        let endPointIndex = null;
        let seriesHasMeasureBounds = series.measureUpperBoundFn != null && series.measureLowerBoundFn != null;
        for (let index = 0; index < pointList[S$.$length]; index = index + 1) {
          let point = pointList[S$.$_get](index);
          if (point.y == null) {
            if (startPointIndex == null) {
              continue;
            }
            if (!(endPointIndex != null)) dart.assertFailed(null, I[32], 752, 16, "endPointIndex != null");
            lineSegments[S$.$add](this[S$._createLineSegment](startPointIndex, dart.nullCheck(endPointIndex), pointList));
            if (startPointIndex != endPointIndex) {
              if (this.config.includeArea) {
                areaSegments[S$.$add](this[S$._createAreaSegment](startPointIndex, endPointIndex, pointList, previousPointList, series, initializeFromZero));
              }
              if (seriesHasMeasureBounds) {
                boundsSegments[S$.$add](this[S$._createBoundsSegment](pointList[S$.$sublist](startPointIndex, dart.notNull(endPointIndex) + 1), series, initializeFromZero));
              }
            }
            startPointIndex = null;
            endPointIndex = null;
            continue;
          }
          startPointIndex == null ? startPointIndex = index : null;
          endPointIndex = index;
        }
        if (startPointIndex != null && endPointIndex != null) {
          lineSegments[S$.$add](this[S$._createLineSegment](startPointIndex, endPointIndex, pointList));
          if (startPointIndex != endPointIndex) {
            if (this.config.includeArea) {
              areaSegments[S$.$add](this[S$._createAreaSegment](startPointIndex, endPointIndex, pointList, previousPointList, series, initializeFromZero));
            }
            if (seriesHasMeasureBounds) {
              boundsSegments[S$.$add](this[S$._createBoundsSegment](pointList[S$.$sublist](startPointIndex, dart.notNull(endPointIndex) + 1), series, initializeFromZero));
            }
          }
        }
        return JSArrayOfListOfListOf_DatumPointOfD().of([lineSegments, areaSegments, boundsSegments]);
      }
      [S$._createLineSegment](start, end, pointList) {
        return pointList[S$.$sublist](start, end + 1);
      }
      [S$._createAreaSegment](start, end, pointList, previousPointList, series, initializeFromZero) {
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
        let domainFn = series.domainFn;
        let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
        let areaPointList = JSArrayOf_DatumPointOfD().of([]);
        if (!this.config.stacked || previousPointList == null) {
          areaPointList[S$.$add](this[S$._getPoint](null, domainFn(end), series, domainAxis, 0.0, 0.0, measureAxis));
          areaPointList[S$.$add](this[S$._getPoint](null, domainFn(start), series, domainAxis, 0.0, 0.0, measureAxis));
        } else {
          areaPointList[S$.$addAll](previousPointList[S$.$sublist](start, end + 1)[S$.$reversed]);
        }
        areaPointList[S$.$addAll](pointList[S$.$sublist](start, end + 1));
        return areaPointList;
      }
      [S$._createBoundsSegment](pointList, series, initializeFromZero) {
        let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
        let areaPointList = JSArrayOf_DatumPointOfD().of([]);
        areaPointList[S$.$addAll](pointList[S$.$map](_DatumPointOfD(), dart.fn(datumPoint => {
          let t11;
          return _DatumPointOfD().from(datumPoint, datumPoint.x, initializeFromZero ? datumPoint.y : measureAxis.getLocation(dart.notNull((t11 = dart.nullCheck(series.measureUpperBoundFn)(datumPoint.index), t11 == null ? 0 : t11)) + dart.nullCheck(dart.nullCheck(series.measureOffsetFn)(datumPoint.index))));
        }, _DatumPointOfDTo_DatumPointOfD())));
        areaPointList[S$.$addAll](pointList[S$.$reversed][S$.$map](_DatumPointOfD(), dart.fn(datumPoint => {
          let t11;
          return _DatumPointOfD().from(datumPoint, datumPoint.x, initializeFromZero ? datumPoint.y : measureAxis.getLocation(dart.notNull((t11 = dart.nullCheck(series.measureLowerBoundFn)(datumPoint.index), t11 == null ? 0 : t11)) + dart.nullCheck(dart.nullCheck(series.measureOffsetFn)(datumPoint.index))));
        }, _DatumPointOfDTo_DatumPointOfD())));
        return areaPointList;
      }
      [S$._createPositionExtent](series, details) {
        let t11, t11$;
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
        let startPosition = (t11 = domainAxis.getLocation(details.domainExtent.start), t11 == null ? dart.nullCheck(this.drawBounds)[S$.$left][S$.$toDouble]() : t11);
        let endPosition = (t11$ = domainAxis.getLocation(details.domainExtent.end), t11$ == null ? dart.nullCheck(this.drawBounds)[S$.$right][S$.$toDouble]() : t11$);
        return new (T$._RangeOfnum()).new(startPosition, endPosition);
      }
      onAttach(chart) {
        BaseChartOfD().as(chart);
        super.onAttach(chart);
        this[S$._chart$3] = chart;
      }
      paint(canvas, animationPercent) {
        if (animationPercent === 1.0) {
          let keysToRemove = T$.JSArrayOfString().of([]);
          this[S$._seriesLineMap][S$.$forEach](dart.fn((key, elements) => {
            elements[S$.$removeWhere](dart.fn(element => element.animatingOut, _AnimatedElementsOfDTobool()));
            if (elements[S$.$isEmpty]) {
              keysToRemove[S$.$add](key);
            }
          }, StringAndListOf_AnimatedElementsOfDTovoid()));
          keysToRemove[S$.$forEach](dart.bind(this[S$._seriesLineMap], S$.$remove));
        }
        this[S$._seriesLineMap][S$.$forEach](dart.fn((key, elements) => {
          if (this.config.includeArea) {
            elements[S$.$map](ListOf_AnimatedAreaOfD(), dart.fn(animatingElement => dart.nullCheck(animatingElement.areas), _AnimatedElementsOfDToListOf_AnimatedAreaOfD()))[S$.$expand](_AnimatedAreaOfD(), dart.fn(areas => areas, ListOf_AnimatedAreaOfDToListOf_AnimatedAreaOfD()))[S$.$map](_AreaRendererElementOfD(), dart.fn(animatingArea => animatingArea.getCurrentArea(animationPercent), _AnimatedAreaOfDTo_AreaRendererElementOfD()))[S$.$forEach](dart.fn(area => {
              let t11;
              if (area !== null) {
                canvas.drawPolygon({clipBounds: this[S$._getClipBoundsForExtent](area.positionExtent), fill: (t11 = area.areaColor, t11 == null ? area.color : t11), points: math$['NullablePointsToPoints|toPoints'](area.points)});
              }
            }, _AreaRendererElementOfDTovoid()));
          }
          if (this[S$._hasMeasureBounds]) {
            elements[S$.$map](ListOf_AnimatedAreaOfD(), dart.fn(animatingElement => dart.nullCheck(animatingElement.bounds), _AnimatedElementsOfDToListOf_AnimatedAreaOfD()))[S$.$expand](_AnimatedAreaOfD(), dart.fn(bounds => bounds, ListOf_AnimatedAreaOfDToListOf_AnimatedAreaOfD()))[S$.$map](_AreaRendererElementOfD(), dart.fn(animatingBounds => animatingBounds.getCurrentArea(animationPercent), _AnimatedAreaOfDTo_AreaRendererElementOfD()))[S$.$forEach](dart.fn(bound => {
              let t11;
              if (bound !== null) {
                canvas.drawPolygon({clipBounds: this[S$._getClipBoundsForExtent](bound.positionExtent), fill: (t11 = bound.areaColor, t11 == null ? bound.color : t11), points: math$['NullablePointsToPoints|toPoints'](bound.points)});
              }
            }, _AreaRendererElementOfDTovoid()));
          }
          if (this.config.includeLine) {
            elements[S$.$map](ListOf_AnimatedLineOfD(), dart.fn(animatingElement => animatingElement.lines, _AnimatedElementsOfDToListOf_AnimatedLineOfD()))[S$.$expand](_AnimatedLineOfD(), dart.fn(lines => lines, ListOf_AnimatedLineOfDToListOf_AnimatedLineOfD()))[S$.$map](_LineRendererElementOfD(), dart.fn(animatingLine => animatingLine.getCurrentLine(animationPercent), _AnimatedLineOfDTo_LineRendererElementOfD()))[S$.$forEach](dart.fn(line => {
              if (line !== null) {
                canvas.drawLine({clipBounds: this[S$._getClipBoundsForExtent](dart.nullCheck(line.positionExtent)), dashPattern: line.dashPattern, points: math$['NullablePointsToPoints|toPoints'](dart.nullCheck(line.points)), stroke: line.color, strokeWidthPx: line.strokeWidthPx, roundEndCaps: line.roundEndCaps});
              }
            }, _LineRendererElementOfDTovoid()));
          }
        }, StringAndListOf_AnimatedElementsOfDTovoid()));
        if (this.config.includePoints) {
          this[S$._pointRenderer].paint(canvas, animationPercent);
        }
      }
      [S$._getClipBoundsForExtent](extent) {
        let drawBounds = dart.nullCheck(this.drawBounds);
        let left = this.isRtl ? math$.clamp(extent.end, drawBounds[S$.$left], drawBounds[S$.$right]) : math$.clamp(extent.start, drawBounds[S$.$left], drawBounds[S$.$right]);
        let right = this.isRtl ? math$.clamp(extent.start, drawBounds[S$.$left], drawBounds[S$.$right]) : math$.clamp(extent.end, drawBounds[S$.$left], drawBounds[S$.$right]);
        return new (T$.RectangleOfnum()).new(left, drawBounds[S$.$top] - 5, right - left, drawBounds[S$.$height] + 5 + 5);
      }
      get isRtl() {
        let t11, t11$;
        t11$ = (t11 = this[S$._chart$3], t11 == null ? null : t11.context.isRtl);
        return t11$ == null ? false : t11$;
      }
      [S$._getPoint](datum, domainValue, series, domainAxis, measureValue, measureOffsetValue, measureAxis, opts) {
        let index = opts && 'index' in opts ? opts.index : null;
        let domainPosition = domainAxis.getLocation(domainValue);
        let measurePosition = measureValue != null && measureOffsetValue != null ? measureAxis.getLocation(dart.notNull(measureValue) + dart.notNull(measureOffsetValue)) : null;
        return new (_DatumPointOfD()).new({datum: datum, domain: domainValue, series: series, x: domainPosition, y: measurePosition, index: index});
      }
      getNearestDatumDetailPerSeries(chartPoint, byDomain, boundsOverride, opts) {
        let selectOverlappingPoints = opts && 'selectOverlappingPoints' in opts ? opts.selectOverlappingPoints : false;
        let selectExactEventLocation = opts && 'selectExactEventLocation' in opts ? opts.selectExactEventLocation : false;
        let nearest = JSArrayOfDatumDetailsOfD().of([]);
        if (!this.isPointWithinBounds(chartPoint, boundsOverride)) {
          return nearest;
        }
        for (let seriesSegments of this[S$._seriesLineMap][S$.$values]) {
          let nearestPoint = null;
          let nearestDomainDistance = 10000.0;
          let nearestMeasureDistance = 10000.0;
          let nearestRelativeDistance = 10000.0;
          for (let segment of seriesSegments) {
            if (segment.overlaySeries) {
              continue;
            }
            for (let p of segment.allPoints) {
              if (dart.nullCheck(p.x) < dart.nullCheck(this.componentBounds)[S$.$left] || dart.nullCheck(p.x) > dart.nullCheck(this.componentBounds)[S$.$right]) {
                continue;
              }
              let measureDistance = null;
              let relativeDistance = null;
              let domainDistance = null;
              if (p.y != null) {
                measureDistance = (dart.nullCheck(p.y) - chartPoint.y)[S$.$abs]();
                domainDistance = (dart.nullCheck(p.x) - chartPoint.x)[S$.$abs]();
                relativeDistance = chartPoint.distanceTo(p.toPoint());
              } else {
                measureDistance = 1 / 0;
                domainDistance = 1 / 0;
                relativeDistance = byDomain ? domainDistance : 1 / 0;
              }
              if (byDomain) {
                if (domainDistance < nearestDomainDistance || domainDistance === nearestDomainDistance && measureDistance < nearestMeasureDistance) {
                  nearestPoint = p;
                  nearestDomainDistance = domainDistance;
                  nearestMeasureDistance = measureDistance;
                  nearestRelativeDistance = relativeDistance;
                }
              } else {
                if (relativeDistance < nearestRelativeDistance) {
                  nearestPoint = p;
                  nearestDomainDistance = domainDistance;
                  nearestMeasureDistance = measureDistance;
                  nearestRelativeDistance = relativeDistance;
                }
              }
            }
          }
          if (nearestPoint != null) {
            nearest[S$.$add](new (DatumDetailsOfD()).new({chartPosition: new math$.NullablePoint.new(nearestPoint.x, nearestPoint.y), datum: nearestPoint.datum, domain: nearestPoint.domain, series: nearestPoint.series, domainDistance: nearestDomainDistance, measureDistance: nearestMeasureDistance, relativeDistance: nearestRelativeDistance}));
          }
        }
        return nearest;
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsOfD().as(details);
        SeriesDatumOfD().as(seriesDatum);
        let series = dart.nullCheck(details.series);
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
        let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
        let point = this[S$._getPoint](seriesDatum.datum, details.domain, series, domainAxis, details.measure, details.measureOffset, measureAxis);
        let chartPosition = new math$.NullablePoint.new(point.x, point.y);
        return DatumDetailsOfD().from(details, {chartPosition: chartPosition});
      }
    }
    (LineRenderer._internal = function(opts) {
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      this[S$.__LineRenderer__pointRenderer] = null;
      this[S$._chart$3] = null;
      this[S$.__LineRenderer__hasMeasureBounds] = null;
      this[S$._seriesLineMap] = new (IdentityMapOfString$ListOf_AnimatedElementsOfD()).new();
      this[S$._currentKeys$1] = T$.JSArrayOfString().of([]);
      this[S$.config$2] = config;
      this[S$.__LineRenderer__pointRenderer] = new (PointRendererOfD()).new({config: new (PointRendererConfigOfD()).new({radiusPx: config.radiusPx})});
      LineRenderer.__proto__.new.call(this, {rendererId: rendererId, layoutPaintOrder: config.layoutPaintOrder, symbolRenderer: config.symbolRenderer});
      ;
    }).prototype = LineRenderer.prototype;
    dart.addTypeTests(LineRenderer);
    LineRenderer.prototype[_is_LineRenderer_default] = true;
    dart.addTypeCaches(LineRenderer);
    dart.setMethodSignature(LineRenderer, () => ({
      __proto__: dart.getMethods(LineRenderer.__proto__),
      [S$._createInitialOffsetMap]: dart.fnType(core.Map$(D, dart.nullable(core.num)), [processed_series.MutableSeries$(D)]),
      [S$._createStackedMeasureOffsetFunction]: dart.fnType(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)]), [processed_series.MutableSeries$(D), core.Map$(D, dart.nullable(core.num)), core.Map$(D, core.num)]),
      [S$._mergeIntoSeriesMap]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      update: dart.fnType(dart.void, [dart.nullable(core.Object), core.bool]),
      [S$._createLineAndAreaElements]: dart.fnType(core.List$(core.Object), [processed_series.ImmutableSeries$(D), line_renderer._LineRendererElement$(D), dart.nullable(core.List$(line_renderer._DatumPoint$(D))), core.bool]),
      [S$._createPointListForSeries]: dart.fnType(core.List$(line_renderer._DatumPoint$(D)), [processed_series.ImmutableSeries$(D), core.bool]),
      [S$._createLineAndAreaSegmentsForSeries]: dart.fnType(core.List$(core.List$(core.List$(line_renderer._DatumPoint$(D)))), [core.List$(line_renderer._DatumPoint$(D)), dart.nullable(core.List$(line_renderer._DatumPoint$(D))), processed_series.ImmutableSeries$(D), core.bool]),
      [S$._createLineSegment]: dart.fnType(core.List$(line_renderer._DatumPoint$(D)), [core.int, core.int, core.List$(line_renderer._DatumPoint$(D))]),
      [S$._createAreaSegment]: dart.fnType(core.List$(line_renderer._DatumPoint$(D)), [core.int, core.int, core.List$(line_renderer._DatumPoint$(D)), dart.nullable(core.List$(line_renderer._DatumPoint$(D))), processed_series.ImmutableSeries$(D), core.bool]),
      [S$._createBoundsSegment]: dart.fnType(core.List$(line_renderer._DatumPoint$(D)), [core.List$(line_renderer._DatumPoint$(D)), processed_series.ImmutableSeries$(D), core.bool]),
      [S$._createPositionExtent]: dart.fnType(line_renderer._Range$(core.num), [processed_series.ImmutableSeries$(D), line_renderer._LineRendererElement$(D)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      [S$._getClipBoundsForExtent]: dart.fnType(math.Rectangle$(core.num), [line_renderer._Range$(core.num)]),
      [S$._getPoint]: dart.fnType(line_renderer._DatumPoint$(D), [dart.dynamic, dart.nullable(D), processed_series.ImmutableSeries$(D), axis$.ImmutableAxis$(D), dart.nullable(core.num), dart.nullable(core.num), axis$.ImmutableAxis$(core.num)], {index: dart.nullable(core.int)}, {}),
      getNearestDatumDetailPerSeries: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [math.Point$(core.double), core.bool, dart.nullable(math.Rectangle$(core.int))], {selectExactEventLocation: core.bool, selectOverlappingPoints: core.bool}, {}),
      addPositionToDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(LineRenderer, () => ({
      __proto__: dart.getGetters(LineRenderer.__proto__),
      [S$._pointRenderer]: point_renderer.PointRenderer$(D),
      [S$._hasMeasureBounds]: core.bool,
      isRtl: core.bool
    }));
    dart.setSetterSignature(LineRenderer, () => ({
      __proto__: dart.getSetters(LineRenderer.__proto__),
      [S$._pointRenderer]: point_renderer.PointRenderer$(D),
      [S$._hasMeasureBounds]: core.bool
    }));
    dart.setLibraryUri(LineRenderer, I[33]);
    dart.setFieldSignature(LineRenderer, () => ({
      __proto__: dart.getFields(LineRenderer.__proto__),
      config: dart.finalFieldType(line_renderer_config.LineRendererConfig$(D)),
      [S$.__LineRenderer__pointRenderer]: dart.fieldType(dart.nullable(point_renderer.PointRenderer$(D))),
      [S$._chart$3]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      [S$.__LineRenderer__hasMeasureBounds]: dart.fieldType(dart.nullable(core.bool)),
      [S$._seriesLineMap]: dart.finalFieldType(core.Map$(core.String, core.List$(line_renderer._AnimatedElements$(D)))),
      [S$._currentKeys$1]: dart.finalFieldType(core.List$(core.String))
    }));
    return LineRenderer;
  });
  line_renderer.LineRenderer = line_renderer.LineRenderer$();
  dart.defineLazy(line_renderer.LineRenderer, {
    /*line_renderer.LineRenderer.drawBoundTopExtensionPx*/get drawBoundTopExtensionPx() {
      return 5;
    },
    /*line_renderer.LineRenderer.drawBoundBottomExtensionPx*/get drawBoundBottomExtensionPx() {
      return 5;
    }
  }, false);
  dart.addTypeTests(line_renderer.LineRenderer, _is_LineRenderer_default);
  const _is__DatumPoint_default = Symbol('_is__DatumPoint_default');
  line_renderer._DatumPoint$ = dart.generic(D => {
    class _DatumPoint extends math$.NullablePoint {
      static from(other, x = null, y = null) {
        let t11, t11$;
        return new (line_renderer._DatumPoint$(D)).new({datum: other.datum, domain: other.domain, series: other.series, index: other.index, x: (t11 = x, t11 == null ? other.x : t11), y: (t11$ = y, t11$ == null ? other.y : t11$)});
      }
    }
    (_DatumPoint.new = function(opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      this.datum = datum;
      this.domain = domain;
      this.series = series;
      this.index = index;
      _DatumPoint.__proto__.new.call(this, x, y);
      ;
    }).prototype = _DatumPoint.prototype;
    dart.addTypeTests(_DatumPoint);
    _DatumPoint.prototype[_is__DatumPoint_default] = true;
    dart.addTypeCaches(_DatumPoint);
    dart.setLibraryUri(_DatumPoint, I[33]);
    dart.setFieldSignature(_DatumPoint, () => ({
      __proto__: dart.getFields(_DatumPoint.__proto__),
      datum: dart.finalFieldType(dart.dynamic),
      domain: dart.finalFieldType(dart.nullable(D)),
      series: dart.finalFieldType(dart.nullable(processed_series.ImmutableSeries$(D))),
      index: dart.finalFieldType(dart.nullable(core.int))
    }));
    return _DatumPoint;
  });
  line_renderer._DatumPoint = line_renderer._DatumPoint$();
  dart.addTypeTests(line_renderer._DatumPoint, _is__DatumPoint_default);
  const _is__LineRendererElement_default = Symbol('_is__LineRendererElement_default');
  line_renderer._LineRendererElement$ = dart.generic(D => {
    var _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_renderer._DatumPoint$(D)))();
    var ListOf_DatumPointOfD = () => (ListOf_DatumPointOfD = dart.constFn(core.List$(_DatumPointOfD())))();
    var ListNOf_DatumPointOfD = () => (ListNOf_DatumPointOfD = dart.constFn(dart.nullable(ListOf_DatumPointOfD())))();
    var _RangeOfD = () => (_RangeOfD = dart.constFn(line_renderer._Range$(D)))();
    var _LineRendererElementOfD = () => (_LineRendererElementOfD = dart.constFn(line_renderer._LineRendererElement$(D)))();
    var VoidTo_DatumPointOfD = () => (VoidTo_DatumPointOfD = dart.constFn(dart.fnType(_DatumPointOfD(), [])))();
    var _DatumPointOfDTodynamic = () => (_DatumPointOfDTodynamic = dart.constFn(dart.fnType(dart.dynamic, [_DatumPointOfD()])))();
    class _LineRendererElement extends core.Object {
      get points() {
        return this[S$.points];
      }
      set points(value) {
        this[S$.points] = ListNOf_DatumPointOfD().as(value);
      }
      get domainExtent() {
        return this[S$.domainExtent];
      }
      set domainExtent(value) {
        this[S$.domainExtent] = _RangeOfD().as(value);
      }
      clone() {
        return new (_LineRendererElementOfD()).new({points: this.points != null ? ListOf_DatumPointOfD().of(dart.nullCheck(this.points)) : null, color: this.color != null ? new color$.Color.fromOther({color: dart.nullCheck(this.color)}) : null, areaColor: this.areaColor != null ? new color$.Color.fromOther({color: dart.nullCheck(this.areaColor)}) : null, dashPattern: this.dashPattern != null ? T$.ListOfint().of(dart.nullCheck(this.dashPattern)) : null, domainExtent: this.domainExtent, measureAxisPosition: this.measureAxisPosition, positionExtent: this.positionExtent, strokeWidthPx: this.strokeWidthPx, styleKey: this.styleKey, roundEndCaps: this.roundEndCaps});
      }
      updateAnimationPercent(previous, target, animationPercent) {
        _LineRendererElementOfD().as(previous);
        _LineRendererElementOfD().as(target);
        let points = dart.nullCheck(this.points);
        let lastPoint = null;
        function lastPoint$35get() {
          let t12;
          t12 = lastPoint;
          return t12 == null ? dart.throw(new _internal.LateError.localNI("lastPoint")) : t12;
        }
        dart.fn(lastPoint$35get, VoidTo_DatumPointOfD());
        function lastPoint$35set(t13) {
          return lastPoint = t13;
        }
        dart.fn(lastPoint$35set, _DatumPointOfDTodynamic());
        let pointIndex = null;
        for (let t15 = pointIndex = 0; pointIndex < dart.nullCheck(target.points)[S$.$length]; pointIndex = pointIndex + 1) {
          let targetPoint = dart.nullCheck(target.points)[S$.$_get](pointIndex);
          let previousPoint = null;
          if (dart.nullCheck(previous.points)[S$.$length] - 1 >= pointIndex) {
            previousPoint = dart.nullCheck(previous.points)[S$.$_get](pointIndex);
            lastPoint$35set(previousPoint);
          } else {
            previousPoint = _DatumPointOfD().from(targetPoint, targetPoint.x, lastPoint$35get().y);
          }
          let x = (dart.nullCheck(targetPoint.x) - dart.nullCheck(previousPoint.x)) * animationPercent + dart.nullCheck(previousPoint.x);
          let y = null;
          if (targetPoint.y != null && previousPoint.y != null) {
            y = (dart.nullCheck(targetPoint.y) - dart.nullCheck(previousPoint.y)) * animationPercent + dart.nullCheck(previousPoint.y);
          } else if (targetPoint.y != null) {
            y = targetPoint.y;
          } else {
            y = null;
          }
          if (points[S$.$length] - 1 >= pointIndex) {
            points[S$.$_set](pointIndex, _DatumPointOfD().from(targetPoint, x, y));
          } else {
            points[S$.$add](_DatumPointOfD().from(targetPoint, x, y));
          }
        }
        if (pointIndex < points[S$.$length]) {
          points[S$.$removeRange](pointIndex, points[S$.$length]);
        }
        this.color = chart_canvas.getAnimatedColor(dart.nullCheck(previous.color), dart.nullCheck(target.color), animationPercent);
        if (this.areaColor != null) {
          this.areaColor = chart_canvas.getAnimatedColor(dart.nullCheck(previous.areaColor), dart.nullCheck(target.areaColor), animationPercent);
        }
        this.strokeWidthPx = (target.strokeWidthPx - previous.strokeWidthPx) * animationPercent + previous.strokeWidthPx;
      }
    }
    (_LineRendererElement.new = function(opts) {
      let points = opts && 'points' in opts ? opts.points : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let areaColor = opts && 'areaColor' in opts ? opts.areaColor : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let domainExtent = opts && 'domainExtent' in opts ? opts.domainExtent : null;
      let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
      let positionExtent = opts && 'positionExtent' in opts ? opts.positionExtent : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let styleKey = opts && 'styleKey' in opts ? opts.styleKey : null;
      let roundEndCaps = opts && 'roundEndCaps' in opts ? opts.roundEndCaps : null;
      this[S$.points] = points;
      this.color = color;
      this.areaColor = areaColor;
      this.dashPattern = dashPattern;
      this[S$.domainExtent] = domainExtent;
      this.measureAxisPosition = measureAxisPosition;
      this.positionExtent = positionExtent;
      this.strokeWidthPx = strokeWidthPx;
      this.styleKey = styleKey;
      this.roundEndCaps = roundEndCaps;
      ;
    }).prototype = _LineRendererElement.prototype;
    dart.addTypeTests(_LineRendererElement);
    _LineRendererElement.prototype[_is__LineRendererElement_default] = true;
    dart.addTypeCaches(_LineRendererElement);
    dart.setMethodSignature(_LineRendererElement, () => ({
      __proto__: dart.getMethods(_LineRendererElement.__proto__),
      clone: dart.fnType(line_renderer._LineRendererElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object), core.double])
    }));
    dart.setLibraryUri(_LineRendererElement, I[33]);
    dart.setFieldSignature(_LineRendererElement, () => ({
      __proto__: dart.getFields(_LineRendererElement.__proto__),
      points: dart.fieldType(dart.nullable(core.List$(line_renderer._DatumPoint$(D)))),
      color: dart.fieldType(dart.nullable(color$.Color)),
      areaColor: dart.fieldType(dart.nullable(color$.Color)),
      dashPattern: dart.fieldType(dart.nullable(core.List$(core.int))),
      domainExtent: dart.fieldType(line_renderer._Range$(D)),
      measureAxisPosition: dart.fieldType(dart.nullable(core.double)),
      positionExtent: dart.fieldType(dart.nullable(line_renderer._Range$(core.num))),
      strokeWidthPx: dart.fieldType(core.double),
      styleKey: dart.fieldType(core.String),
      roundEndCaps: dart.fieldType(core.bool)
    }));
    return _LineRendererElement;
  });
  line_renderer._LineRendererElement = line_renderer._LineRendererElement$();
  dart.addTypeTests(line_renderer._LineRendererElement, _is__LineRendererElement_default);
  const _is__AnimatedLine_default = Symbol('_is__AnimatedLine_default');
  line_renderer._AnimatedLine$ = dart.generic(D => {
    var _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_renderer._DatumPoint$(D)))();
    var JSArrayOf_DatumPointOfD = () => (JSArrayOf_DatumPointOfD = dart.constFn(_interceptors.JSArray$(_DatumPointOfD())))();
    var _LineRendererElementOfD = () => (_LineRendererElementOfD = dart.constFn(line_renderer._LineRendererElement$(D)))();
    class _AnimatedLine extends core.Object {
      get [S$._targetLine]() {
        let t16;
        t16 = this[S$.___AnimatedLine__targetLine];
        return t16 == null ? dart.throw(new _internal.LateError.fieldNI("_targetLine")) : t16;
      }
      set [S$._targetLine](t16) {
        this[S$.___AnimatedLine__targetLine] = t16;
      }
      animateOut() {
        let newTarget = dart.nullCheck(this[S$._currentLine]).clone();
        let newPoints = JSArrayOf_DatumPointOfD().of([]);
        for (let index = 0; index < dart.nullCheck(newTarget.points)[S$.$length]; index = index + 1) {
          let targetPoint = dart.nullCheck(newTarget.points)[S$.$_get](index);
          newPoints[S$.$add](_DatumPointOfD().from(targetPoint, targetPoint.x, dart.nullCheck(newTarget.measureAxisPosition)[S$.$roundToDouble]()));
        }
        newTarget.points = newPoints;
        newTarget.strokeWidthPx = 0.0;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        _LineRendererElementOfD().as(newTarget);
        this.animatingOut = false;
        this[S$._currentLine] == null ? this[S$._currentLine] = newTarget.clone() : null;
        this[S$._previousLine] = dart.nullCheck(this[S$._currentLine]).clone();
        this[S$._targetLine] = newTarget;
      }
      getCurrentLine(animationPercent) {
        if (animationPercent === 1.0 || this[S$._previousLine] == null) {
          this[S$._currentLine] = this[S$._targetLine];
          this[S$._previousLine] = this[S$._targetLine];
          return dart.nullCheck(this[S$._currentLine]);
        }
        dart.nullCheck(this[S$._currentLine]).updateAnimationPercent(dart.nullCheck(this[S$._previousLine]), this[S$._targetLine], animationPercent);
        return dart.nullCheck(this[S$._currentLine]);
      }
      get currentPoints() {
        let t17;
        t17 = this[S$._currentLine];
        return t17 == null ? null : t17.points;
      }
    }
    (_AnimatedLine.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : null;
      this[S$._previousLine] = null;
      this[S$.___AnimatedLine__targetLine] = null;
      this[S$._currentLine] = null;
      this.animatingOut = false;
      this.key = key;
      this.overlaySeries = overlaySeries;
      ;
    }).prototype = _AnimatedLine.prototype;
    dart.addTypeTests(_AnimatedLine);
    _AnimatedLine.prototype[_is__AnimatedLine_default] = true;
    dart.addTypeCaches(_AnimatedLine);
    dart.setMethodSignature(_AnimatedLine, () => ({
      __proto__: dart.getMethods(_AnimatedLine.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      getCurrentLine: dart.fnType(line_renderer._LineRendererElement$(D), [core.double])
    }));
    dart.setGetterSignature(_AnimatedLine, () => ({
      __proto__: dart.getGetters(_AnimatedLine.__proto__),
      [S$._targetLine]: line_renderer._LineRendererElement$(D),
      currentPoints: dart.nullable(core.List$(line_renderer._DatumPoint$(D)))
    }));
    dart.setSetterSignature(_AnimatedLine, () => ({
      __proto__: dart.getSetters(_AnimatedLine.__proto__),
      [S$._targetLine]: line_renderer._LineRendererElement$(D)
    }));
    dart.setLibraryUri(_AnimatedLine, I[33]);
    dart.setFieldSignature(_AnimatedLine, () => ({
      __proto__: dart.getFields(_AnimatedLine.__proto__),
      key: dart.finalFieldType(core.String),
      overlaySeries: dart.finalFieldType(core.bool),
      [S$._previousLine]: dart.fieldType(dart.nullable(line_renderer._LineRendererElement$(D))),
      [S$.___AnimatedLine__targetLine]: dart.fieldType(dart.nullable(line_renderer._LineRendererElement$(D))),
      [S$._currentLine]: dart.fieldType(dart.nullable(line_renderer._LineRendererElement$(D))),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedLine;
  });
  line_renderer._AnimatedLine = line_renderer._AnimatedLine$();
  dart.addTypeTests(line_renderer._AnimatedLine, _is__AnimatedLine_default);
  const _is__AreaRendererElement_default = Symbol('_is__AreaRendererElement_default');
  line_renderer._AreaRendererElement$ = dart.generic(D => {
    var _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_renderer._DatumPoint$(D)))();
    var ListOf_DatumPointOfD = () => (ListOf_DatumPointOfD = dart.constFn(core.List$(_DatumPointOfD())))();
    var _RangeOfD = () => (_RangeOfD = dart.constFn(line_renderer._Range$(D)))();
    var _AreaRendererElementOfD = () => (_AreaRendererElementOfD = dart.constFn(line_renderer._AreaRendererElement$(D)))();
    var VoidTo_DatumPointOfD = () => (VoidTo_DatumPointOfD = dart.constFn(dart.fnType(_DatumPointOfD(), [])))();
    var _DatumPointOfDTodynamic = () => (_DatumPointOfDTodynamic = dart.constFn(dart.fnType(dart.dynamic, [_DatumPointOfD()])))();
    class _AreaRendererElement extends core.Object {
      get points() {
        return this[S$.points$1];
      }
      set points(value) {
        this[S$.points$1] = ListOf_DatumPointOfD().as(value);
      }
      get domainExtent() {
        return this[S$.domainExtent$1];
      }
      set domainExtent(value) {
        this[S$.domainExtent$1] = _RangeOfD().as(value);
      }
      clone() {
        return new (_AreaRendererElementOfD()).new({points: ListOf_DatumPointOfD().of(this.points), color: this.color != null ? new color$.Color.fromOther({color: dart.nullCheck(this.color)}) : null, areaColor: this.areaColor != null ? new color$.Color.fromOther({color: dart.nullCheck(this.areaColor)}) : null, domainExtent: this.domainExtent, measureAxisPosition: this.measureAxisPosition, positionExtent: this.positionExtent, styleKey: this.styleKey});
      }
      updateAnimationPercent(previous, target, animationPercent) {
        _AreaRendererElementOfD().as(previous);
        _AreaRendererElementOfD().as(target);
        let lastPoint = null;
        function lastPoint$35get() {
          let t18;
          t18 = lastPoint;
          return t18 == null ? dart.throw(new _internal.LateError.localNI("lastPoint")) : t18;
        }
        dart.fn(lastPoint$35get, VoidTo_DatumPointOfD());
        function lastPoint$35set(t19) {
          return lastPoint = t19;
        }
        dart.fn(lastPoint$35set, _DatumPointOfDTodynamic());
        let pointIndex = null;
        for (let t21 = pointIndex = 0; pointIndex < target.points[S$.$length]; pointIndex = pointIndex + 1) {
          let targetPoint = target.points[S$.$_get](pointIndex);
          let previousPoint = null;
          if (previous.points[S$.$length] - 1 >= pointIndex) {
            previousPoint = previous.points[S$.$_get](pointIndex);
            lastPoint$35set(previousPoint);
          } else {
            previousPoint = _DatumPointOfD().from(targetPoint, targetPoint.x, lastPoint$35get().y);
          }
          let x = (dart.nullCheck(targetPoint.x) - dart.nullCheck(previousPoint.x)) * animationPercent + dart.nullCheck(previousPoint.x);
          let y = null;
          if (targetPoint.y != null && previousPoint.y != null) {
            y = (dart.nullCheck(targetPoint.y) - dart.nullCheck(previousPoint.y)) * animationPercent + dart.nullCheck(previousPoint.y);
          } else if (targetPoint.y != null) {
            y = targetPoint.y;
          } else {
            y = null;
          }
          if (this.points[S$.$length] - 1 >= pointIndex) {
            this.points[S$.$_set](pointIndex, _DatumPointOfD().from(targetPoint, x, y));
          } else {
            this.points[S$.$add](_DatumPointOfD().from(targetPoint, x, y));
          }
        }
        if (pointIndex < this.points[S$.$length]) {
          this.points[S$.$removeRange](pointIndex, this.points[S$.$length]);
        }
        this.color = chart_canvas.getAnimatedColor(dart.nullCheck(previous.color), dart.nullCheck(target.color), animationPercent);
        if (this.areaColor != null) {
          this.areaColor = chart_canvas.getAnimatedColor(dart.nullCheck(previous.areaColor), dart.nullCheck(target.areaColor), animationPercent);
        }
      }
    }
    (_AreaRendererElement.new = function(opts) {
      let points = opts && 'points' in opts ? opts.points : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let areaColor = opts && 'areaColor' in opts ? opts.areaColor : null;
      let domainExtent = opts && 'domainExtent' in opts ? opts.domainExtent : null;
      let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
      let positionExtent = opts && 'positionExtent' in opts ? opts.positionExtent : null;
      let styleKey = opts && 'styleKey' in opts ? opts.styleKey : null;
      this[S$.points$1] = points;
      this.color = color;
      this.areaColor = areaColor;
      this[S$.domainExtent$1] = domainExtent;
      this.measureAxisPosition = measureAxisPosition;
      this.positionExtent = positionExtent;
      this.styleKey = styleKey;
      ;
    }).prototype = _AreaRendererElement.prototype;
    dart.addTypeTests(_AreaRendererElement);
    _AreaRendererElement.prototype[_is__AreaRendererElement_default] = true;
    dart.addTypeCaches(_AreaRendererElement);
    dart.setMethodSignature(_AreaRendererElement, () => ({
      __proto__: dart.getMethods(_AreaRendererElement.__proto__),
      clone: dart.fnType(line_renderer._AreaRendererElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object), core.double])
    }));
    dart.setLibraryUri(_AreaRendererElement, I[33]);
    dart.setFieldSignature(_AreaRendererElement, () => ({
      __proto__: dart.getFields(_AreaRendererElement.__proto__),
      points: dart.fieldType(core.List$(line_renderer._DatumPoint$(D))),
      color: dart.fieldType(dart.nullable(color$.Color)),
      areaColor: dart.fieldType(dart.nullable(color$.Color)),
      domainExtent: dart.fieldType(line_renderer._Range$(D)),
      measureAxisPosition: dart.fieldType(core.double),
      positionExtent: dart.fieldType(line_renderer._Range$(core.num)),
      styleKey: dart.fieldType(core.String)
    }));
    return _AreaRendererElement;
  });
  line_renderer._AreaRendererElement = line_renderer._AreaRendererElement$();
  dart.addTypeTests(line_renderer._AreaRendererElement, _is__AreaRendererElement_default);
  const _is__AnimatedArea_default = Symbol('_is__AnimatedArea_default');
  line_renderer._AnimatedArea$ = dart.generic(D => {
    var _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_renderer._DatumPoint$(D)))();
    var JSArrayOf_DatumPointOfD = () => (JSArrayOf_DatumPointOfD = dart.constFn(_interceptors.JSArray$(_DatumPointOfD())))();
    var _AreaRendererElementOfD = () => (_AreaRendererElementOfD = dart.constFn(line_renderer._AreaRendererElement$(D)))();
    class _AnimatedArea extends core.Object {
      get [S$._targetArea]() {
        let t22;
        t22 = this[S$.___AnimatedArea__targetArea];
        return t22 == null ? dart.throw(new _internal.LateError.fieldNI("_targetArea")) : t22;
      }
      set [S$._targetArea](t22) {
        this[S$.___AnimatedArea__targetArea] = t22;
      }
      animateOut() {
        let newTarget = dart.nullCheck(this[S$._currentArea]).clone();
        let newPoints = JSArrayOf_DatumPointOfD().of([]);
        for (let index = 0; index < newTarget.points[S$.$length]; index = index + 1) {
          let targetPoint = newTarget.points[S$.$_get](index);
          newPoints[S$.$add](_DatumPointOfD().from(targetPoint, targetPoint.x, newTarget.measureAxisPosition[S$.$roundToDouble]()));
        }
        newTarget.points = newPoints;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        _AreaRendererElementOfD().as(newTarget);
        this.animatingOut = false;
        this[S$._currentArea] == null ? this[S$._currentArea] = newTarget.clone() : null;
        this[S$._previousArea] = dart.nullCheck(this[S$._currentArea]).clone();
        this[S$._targetArea] = newTarget;
      }
      getCurrentArea(animationPercent) {
        if (animationPercent === 1.0 || this[S$._previousArea] == null) {
          this[S$._currentArea] = this[S$._targetArea];
          this[S$._previousArea] = this[S$._targetArea];
          return dart.nullCheck(this[S$._currentArea]);
        }
        dart.nullCheck(this[S$._currentArea]).updateAnimationPercent(dart.nullCheck(this[S$._previousArea]), this[S$._targetArea], animationPercent);
        return dart.nullCheck(this[S$._currentArea]);
      }
    }
    (_AnimatedArea.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : null;
      this[S$._previousArea] = null;
      this[S$.___AnimatedArea__targetArea] = null;
      this[S$._currentArea] = null;
      this.animatingOut = false;
      this.key = key;
      this.overlaySeries = overlaySeries;
      ;
    }).prototype = _AnimatedArea.prototype;
    dart.addTypeTests(_AnimatedArea);
    _AnimatedArea.prototype[_is__AnimatedArea_default] = true;
    dart.addTypeCaches(_AnimatedArea);
    dart.setMethodSignature(_AnimatedArea, () => ({
      __proto__: dart.getMethods(_AnimatedArea.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      getCurrentArea: dart.fnType(line_renderer._AreaRendererElement$(D), [core.double])
    }));
    dart.setGetterSignature(_AnimatedArea, () => ({
      __proto__: dart.getGetters(_AnimatedArea.__proto__),
      [S$._targetArea]: line_renderer._AreaRendererElement$(D)
    }));
    dart.setSetterSignature(_AnimatedArea, () => ({
      __proto__: dart.getSetters(_AnimatedArea.__proto__),
      [S$._targetArea]: line_renderer._AreaRendererElement$(D)
    }));
    dart.setLibraryUri(_AnimatedArea, I[33]);
    dart.setFieldSignature(_AnimatedArea, () => ({
      __proto__: dart.getFields(_AnimatedArea.__proto__),
      key: dart.finalFieldType(core.String),
      overlaySeries: dart.finalFieldType(core.bool),
      [S$._previousArea]: dart.fieldType(dart.nullable(line_renderer._AreaRendererElement$(D))),
      [S$.___AnimatedArea__targetArea]: dart.fieldType(dart.nullable(line_renderer._AreaRendererElement$(D))),
      [S$._currentArea]: dart.fieldType(dart.nullable(line_renderer._AreaRendererElement$(D))),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedArea;
  });
  line_renderer._AnimatedArea = line_renderer._AnimatedArea$();
  dart.addTypeTests(line_renderer._AnimatedArea, _is__AnimatedArea_default);
  const _is__AnimatedElements_default = Symbol('_is__AnimatedElements_default');
  line_renderer._AnimatedElements$ = dart.generic(D => {
    var _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_renderer._DatumPoint$(D)))();
    var ListOf_DatumPointOfD = () => (ListOf_DatumPointOfD = dart.constFn(core.List$(_DatumPointOfD())))();
    var _AnimatedAreaOfD = () => (_AnimatedAreaOfD = dart.constFn(line_renderer._AnimatedArea$(D)))();
    var ListOf_AnimatedAreaOfD = () => (ListOf_AnimatedAreaOfD = dart.constFn(core.List$(_AnimatedAreaOfD())))();
    var ListNOf_AnimatedAreaOfD = () => (ListNOf_AnimatedAreaOfD = dart.constFn(dart.nullable(ListOf_AnimatedAreaOfD())))();
    var _AnimatedLineOfD = () => (_AnimatedLineOfD = dart.constFn(line_renderer._AnimatedLine$(D)))();
    var ListOf_AnimatedLineOfD = () => (ListOf_AnimatedLineOfD = dart.constFn(core.List$(_AnimatedLineOfD())))();
    class _AnimatedElements extends core.Object {
      get allPoints() {
        return this[S$.allPoints];
      }
      set allPoints(value) {
        this[S$.allPoints] = ListOf_DatumPointOfD().as(value);
      }
      get areas() {
        return this[S$.areas];
      }
      set areas(value) {
        this[S$.areas] = ListNOf_AnimatedAreaOfD().as(value);
      }
      get lines() {
        return this[S$.lines];
      }
      set lines(value) {
        this[S$.lines] = ListOf_AnimatedLineOfD().as(value);
      }
      get bounds() {
        return this[S$.bounds];
      }
      set bounds(value) {
        this[S$.bounds] = ListNOf_AnimatedAreaOfD().as(value);
      }
      get animatingOut() {
        let areasAnimatingOut = true;
        if (this.areas != null) {
          for (let area of dart.nullCheck(this.areas)) {
            areasAnimatingOut = areasAnimatingOut && area.animatingOut;
          }
        }
        let linesAnimatingOut = true;
        if (this.lines !== null) {
          for (let line of this.lines) {
            linesAnimatingOut = linesAnimatingOut && line.animatingOut;
          }
        }
        let boundsAnimatingOut = true;
        if (this.bounds != null) {
          for (let bound of dart.nullCheck(this.bounds)) {
            boundsAnimatingOut = boundsAnimatingOut && bound.animatingOut;
          }
        }
        return areasAnimatingOut && linesAnimatingOut && boundsAnimatingOut;
      }
      get overlaySeries() {
        let areasOverlaySeries = true;
        if (this.areas != null) {
          for (let area of dart.nullCheck(this.areas)) {
            areasOverlaySeries = areasOverlaySeries && area.overlaySeries;
          }
        }
        let linesOverlaySeries = true;
        if (this.lines !== null) {
          for (let line of this.lines) {
            linesOverlaySeries = linesOverlaySeries && line.overlaySeries;
          }
        }
        let boundsOverlaySeries = true;
        if (this.bounds != null) {
          for (let bound of dart.nullCheck(this.bounds)) {
            boundsOverlaySeries = boundsOverlaySeries && bound.overlaySeries;
          }
        }
        return areasOverlaySeries && linesOverlaySeries && boundsOverlaySeries;
      }
    }
    (_AnimatedElements.new = function(opts) {
      let allPoints = opts && 'allPoints' in opts ? opts.allPoints : null;
      let areas = opts && 'areas' in opts ? opts.areas : null;
      let lines = opts && 'lines' in opts ? opts.lines : null;
      let bounds = opts && 'bounds' in opts ? opts.bounds : null;
      let styleKey = opts && 'styleKey' in opts ? opts.styleKey : null;
      this[S$.allPoints] = allPoints;
      this[S$.areas] = areas;
      this[S$.lines] = lines;
      this[S$.bounds] = bounds;
      this.styleKey = styleKey;
      ;
    }).prototype = _AnimatedElements.prototype;
    dart.addTypeTests(_AnimatedElements);
    _AnimatedElements.prototype[_is__AnimatedElements_default] = true;
    dart.addTypeCaches(_AnimatedElements);
    dart.setGetterSignature(_AnimatedElements, () => ({
      __proto__: dart.getGetters(_AnimatedElements.__proto__),
      animatingOut: core.bool,
      overlaySeries: core.bool
    }));
    dart.setLibraryUri(_AnimatedElements, I[33]);
    dart.setFieldSignature(_AnimatedElements, () => ({
      __proto__: dart.getFields(_AnimatedElements.__proto__),
      allPoints: dart.fieldType(core.List$(line_renderer._DatumPoint$(D))),
      areas: dart.fieldType(dart.nullable(core.List$(line_renderer._AnimatedArea$(D)))),
      lines: dart.fieldType(core.List$(line_renderer._AnimatedLine$(D))),
      bounds: dart.fieldType(dart.nullable(core.List$(line_renderer._AnimatedArea$(D)))),
      styleKey: dart.fieldType(core.String)
    }));
    return _AnimatedElements;
  });
  line_renderer._AnimatedElements = line_renderer._AnimatedElements$();
  dart.addTypeTests(line_renderer._AnimatedElements, _is__AnimatedElements_default);
  const _is__Range_default = Symbol('_is__Range_default');
  line_renderer._Range$ = dart.generic(D => {
    var DN = () => (DN = dart.constFn(dart.nullable(D)))();
    class _Range extends core.Object {
      get start() {
        return this[S$._start];
      }
      get end() {
        return this[S$._end];
      }
      includePoint(value) {
        DN().as(value);
        if (value == null) {
          return;
        } else if (typeof value == 'number') {
          this[S$._includePointAsNum](value);
        } else if (core.DateTime.is(value)) {
          this[S$._includePointAsDateTime](value);
        } else if (typeof value == 'string') {
          this[S$._includePointAsString](value);
        } else {
          dart.throw(new core.ArgumentError.new("Unsupported object type for LineRenderer domain value: " + dart.str(dart.runtimeType(value))));
        }
      }
      [S$._includePointAsNum](value) {
        core.num.as(value);
        if (dart.notNull(value) < core.num.as(this[S$._start])) {
          this[S$._start] = value;
        } else if (dart.notNull(value) > core.num.as(this[S$._end])) {
          this[S$._end] = value;
        }
      }
      [S$._includePointAsDateTime](value) {
        core.DateTime.as(value);
        if (value.isBefore(core.DateTime.as(this[S$._start]))) {
          this[S$._start] = value;
        } else if (value.isAfter(core.DateTime.as(this[S$._end]))) {
          this[S$._end] = value;
        }
      }
      [S$._includePointAsString](value) {
        this[S$._end] = value;
      }
    }
    (_Range.new = function(start, end) {
      this[S$._start] = start;
      this[S$._end] = end;
      ;
    }).prototype = _Range.prototype;
    dart.addTypeTests(_Range);
    _Range.prototype[_is__Range_default] = true;
    dart.addTypeCaches(_Range);
    dart.setMethodSignature(_Range, () => ({
      __proto__: dart.getMethods(_Range.__proto__),
      includePoint: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$._includePointAsNum]: dart.fnType(dart.void, [D]),
      [S$._includePointAsDateTime]: dart.fnType(dart.void, [D]),
      [S$._includePointAsString]: dart.fnType(dart.void, [D])
    }));
    dart.setGetterSignature(_Range, () => ({
      __proto__: dart.getGetters(_Range.__proto__),
      start: D,
      end: D
    }));
    dart.setLibraryUri(_Range, I[33]);
    dart.setFieldSignature(_Range, () => ({
      __proto__: dart.getFields(_Range.__proto__),
      [S$._start]: dart.fieldType(D),
      [S$._end]: dart.fieldType(D)
    }));
    return _Range;
  });
  line_renderer._Range = line_renderer._Range$();
  dart.addTypeTests(line_renderer._Range, _is__Range_default);
  const _is_LineRendererTester_default = Symbol('_is_LineRendererTester_default');
  line_renderer.LineRendererTester$ = dart.generic(D => {
    var _AnimatedElementsOfD = () => (_AnimatedElementsOfD = dart.constFn(line_renderer._AnimatedElements$(D)))();
    var ListOf_AnimatedElementsOfD = () => (ListOf_AnimatedElementsOfD = dart.constFn(core.List$(_AnimatedElementsOfD())))();
    var MapEntryOfString$ListOf_AnimatedElementsOfD = () => (MapEntryOfString$ListOf_AnimatedElementsOfD = dart.constFn(core.MapEntry$(core.String, ListOf_AnimatedElementsOfD())))();
    var JSArrayOf_AnimatedElementsOfD = () => (JSArrayOf_AnimatedElementsOfD = dart.constFn(_interceptors.JSArray$(_AnimatedElementsOfD())))();
    var StringToMapEntryOfString$ListOf_AnimatedElementsOfD = () => (StringToMapEntryOfString$ListOf_AnimatedElementsOfD = dart.constFn(dart.fnType(MapEntryOfString$ListOf_AnimatedElementsOfD(), [core.String])))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    class LineRendererTester extends core.Object {
      get renderer() {
        return this[S$.renderer];
      }
      set renderer(value) {
        super.renderer = value;
      }
      get seriesKeys() {
        return this.renderer[S$._seriesLineMap][S$.$keys];
      }
      setSeriesKeys(keys) {
        this.renderer[S$._seriesLineMap][S$.$addEntries](keys[S$.$map](MapEntryOfString$ListOf_AnimatedElementsOfD(), dart.fn(key => new (MapEntryOfString$ListOf_AnimatedElementsOfD()).__(key, JSArrayOf_AnimatedElementsOfD().of([])), StringToMapEntryOfString$ListOf_AnimatedElementsOfD())));
      }
      merge(series) {
        ListOfImmutableSeriesOfD().as(series);
        this.renderer[S$._mergeIntoSeriesMap](series);
      }
    }
    (LineRendererTester.new = function(renderer) {
      this[S$.renderer] = renderer;
      ;
    }).prototype = LineRendererTester.prototype;
    dart.addTypeTests(LineRendererTester);
    LineRendererTester.prototype[_is_LineRendererTester_default] = true;
    dart.addTypeCaches(LineRendererTester);
    dart.setMethodSignature(LineRendererTester, () => ({
      __proto__: dart.getMethods(LineRendererTester.__proto__),
      setSeriesKeys: dart.fnType(dart.void, [core.List$(core.String)]),
      merge: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(LineRendererTester, () => ({
      __proto__: dart.getGetters(LineRendererTester.__proto__),
      seriesKeys: core.Iterable$(core.String)
    }));
    dart.setLibraryUri(LineRendererTester, I[33]);
    dart.setFieldSignature(LineRendererTester, () => ({
      __proto__: dart.getFields(LineRendererTester.__proto__),
      renderer: dart.finalFieldType(line_renderer.LineRenderer$(D))
    }));
    return LineRendererTester;
  });
  line_renderer.LineRendererTester = line_renderer.LineRendererTester$();
  dart.addTypeTests(line_renderer.LineRendererTester, _is_LineRendererTester_default);
  dart.defineLazy(line_renderer, {
    /*line_renderer.styleSegmentsKey*/get styleSegmentsKey() {
      return C[19] || CT.C19;
    },
    /*line_renderer.lineStackIndexKey*/get lineStackIndexKey() {
      return C[20] || CT.C20;
    }
  }, false);
  line_chart.LineChart = class LineChart extends cartesian_chart.NumericCartesianChart {
    makeDefaultRenderer() {
      let t23;
      t23 = T$.LineRendererOfnum().new();
      return (() => {
        t23.rendererId = "default";
        return t23;
      })();
    }
  };
  (line_chart.LineChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    line_chart.LineChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = line_chart.LineChart.prototype;
  dart.addTypeTests(line_chart.LineChart);
  dart.addTypeCaches(line_chart.LineChart);
  dart.setLibraryUri(line_chart.LineChart, I[34]);
  panning_tick_provider.PanningTickProviderMode = class PanningTickProviderMode extends core.Object {
    toString() {
      return this[S$._name$2];
    }
  };
  (panning_tick_provider.PanningTickProviderMode.new = function(index, _name) {
    this.index = index;
    this[S$._name$2] = _name;
    ;
  }).prototype = panning_tick_provider.PanningTickProviderMode.prototype;
  dart.addTypeTests(panning_tick_provider.PanningTickProviderMode);
  dart.addTypeCaches(panning_tick_provider.PanningTickProviderMode);
  dart.setLibraryUri(panning_tick_provider.PanningTickProviderMode, I[35]);
  dart.setFieldSignature(panning_tick_provider.PanningTickProviderMode, () => ({
    __proto__: dart.getFields(panning_tick_provider.PanningTickProviderMode.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name$2]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(panning_tick_provider.PanningTickProviderMode, ['toString']);
  panning_tick_provider.PanningTickProviderMode.useCachedTicks = C[21] || CT.C21;
  panning_tick_provider.PanningTickProviderMode.stepSizeLocked = C[22] || CT.C22;
  panning_tick_provider.PanningTickProviderMode.passThrough = C[23] || CT.C23;
  panning_tick_provider.PanningTickProviderMode.values = C[24] || CT.C24;
  const _is_PanningTickProvider_default = Symbol('_is_PanningTickProvider_default');
  panning_tick_provider.PanningTickProvider$ = dart.generic(D => {
    var MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    var TickFormatterOfD = () => (TickFormatterOfD = dart.constFn(tick_formatter.TickFormatter$(D)))();
    var MapOfD$String = () => (MapOfD$String = dart.constFn(core.Map$(D, core.String)))();
    var TickDrawStrategyOfD = () => (TickDrawStrategyOfD = dart.constFn(tick_draw_strategy.TickDrawStrategy$(D)))();
    var TickHintOfD = () => (TickHintOfD = dart.constFn(tick_provider.TickHint$(D)))();
    var TickHintNOfD = () => (TickHintNOfD = dart.constFn(dart.nullable(TickHintOfD())))();
    class PanningTickProvider extends core.Object {
      get tickProvider() {
        return this[S$.tickProvider];
      }
      set tickProvider(value) {
        super.tickProvider = value;
      }
      get [S$._ticks]() {
        let t23;
        t23 = this[S$.__PanningTickProvider__ticks];
        return t23 == null ? dart.throw(new _internal.LateError.fieldNI("_ticks")) : t23;
      }
      set [S$._ticks](t23) {
        this[S$.__PanningTickProvider__ticks] = t23;
      }
      set mode(mode) {
        this[S$._mode] = mode;
      }
      getTicks(opts) {
        let context = opts && 'context' in opts ? opts.context : null;
        let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
        let scale = opts && 'scale' in opts ? opts.scale : null;
        MutableScaleOfD().as(scale);
        let formatter = opts && 'formatter' in opts ? opts.formatter : null;
        TickFormatterOfD().as(formatter);
        let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
        MapOfD$String().as(formatterValueCache);
        let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
        TickDrawStrategyOfD().as(tickDrawStrategy);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
        let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
        TickHintNOfD().as(tickHint);
        if (this[S$._mode] === panning_tick_provider.PanningTickProviderMode.stepSizeLocked) {
          tickHint = new (TickHintOfD()).new(this[S$._ticks][S$.$first].value, this[S$._ticks][S$.$last].value, {tickCount: this[S$._ticks][S$.$length]});
        }
        if (this[S$._mode] !== panning_tick_provider.PanningTickProviderMode.useCachedTicks) {
          this[S$._ticks] = this.tickProvider.getTicks({context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, orientation: orientation, viewportExtensionEnabled: viewportExtensionEnabled, tickHint: tickHint});
        }
        return this[S$._ticks];
      }
    }
    (PanningTickProvider.new = function(tickProvider) {
      this[S$._mode] = panning_tick_provider.PanningTickProviderMode.passThrough;
      this[S$.__PanningTickProvider__ticks] = null;
      this[S$.tickProvider] = tickProvider;
      ;
    }).prototype = PanningTickProvider.prototype;
    dart.addTypeTests(PanningTickProvider);
    PanningTickProvider.prototype[_is_PanningTickProvider_default] = true;
    dart.addTypeCaches(PanningTickProvider);
    PanningTickProvider[dart.implements] = () => [tick_provider.TickProvider$(D)];
    dart.setMethodSignature(PanningTickProvider, () => ({
      __proto__: dart.getMethods(PanningTickProvider.__proto__),
      getTicks: dart.fnType(core.List$(tick.Tick$(D)), [], {context: dart.nullable(chart_context.ChartContext), formatter: dart.nullable(core.Object), formatterValueCache: dart.nullable(core.Object), graphicsFactory: graphics_factory.GraphicsFactory, orientation: dart.nullable(axis$.AxisOrientation), scale: dart.nullable(core.Object), tickDrawStrategy: dart.nullable(core.Object), tickHint: dart.nullable(core.Object), viewportExtensionEnabled: core.bool}, {})
    }));
    dart.setGetterSignature(PanningTickProvider, () => ({
      __proto__: dart.getGetters(PanningTickProvider.__proto__),
      [S$._ticks]: core.List$(tick.Tick$(D))
    }));
    dart.setSetterSignature(PanningTickProvider, () => ({
      __proto__: dart.getSetters(PanningTickProvider.__proto__),
      [S$._ticks]: core.List$(tick.Tick$(D)),
      mode: panning_tick_provider.PanningTickProviderMode
    }));
    dart.setLibraryUri(PanningTickProvider, I[35]);
    dart.setFieldSignature(PanningTickProvider, () => ({
      __proto__: dart.getFields(PanningTickProvider.__proto__),
      tickProvider: dart.finalFieldType(tick_provider.TickProvider$(D)),
      [S$._mode]: dart.fieldType(panning_tick_provider.PanningTickProviderMode),
      [S$.__PanningTickProvider__ticks]: dart.fieldType(dart.nullable(core.List$(tick.Tick$(D))))
    }));
    return PanningTickProvider;
  });
  panning_tick_provider.PanningTickProvider = panning_tick_provider.PanningTickProvider$();
  dart.addTypeTests(panning_tick_provider.PanningTickProvider, _is_PanningTickProvider_default);
  const _is_PanBehavior_default = Symbol('_is_PanBehavior_default');
  pan_behavior.PanBehavior$ = dart.generic(D => {
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    var PanningTickProviderOfD = () => (PanningTickProviderOfD = dart.constFn(panning_tick_provider.PanningTickProvider$(D)))();
    class PanBehavior extends core.Object {
      get [S$._listener]() {
        let t24;
        t24 = this[S$.__PanBehavior__listener];
        return t24 == null ? dart.throw(new _internal.LateError.fieldNI("_listener")) : t24;
      }
      set [S$._listener](t24) {
        this[S$.__PanBehavior__listener] = t24;
      }
      get [S$._domainAxisTickProvider]() {
        let t25;
        t25 = this[S$.__PanBehavior__domainAxisTickProvider];
        return t25 == null ? dart.throw(new _internal.LateError.fieldNI("_domainAxisTickProvider")) : t25;
      }
      set [S$._domainAxisTickProvider](t25) {
        this[S$.__PanBehavior__domainAxisTickProvider] = t25;
      }
      get domainAxisTickProvider() {
        return this[S$._domainAxisTickProvider];
      }
      get role() {
        return "Pan";
      }
      get chart() {
        return this[S$._chart$4];
      }
      get isPanning() {
        return this[S$._isPanning];
      }
      get lastPosition() {
        return this[S$._lastPosition];
      }
      set panningCompletedCallback(callback) {
        this[S$._panningCompletedCallback] = callback;
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        if (!CartesianChartOfD().is(chart)) {
          dart.throw(new core.ArgumentError.new("PanBehavior can only be attached to a CartesianChart<D>"));
        }
        this[S$._chart$4] = chart;
        chart.addGestureListener(this[S$._listener]);
        dart.nullCheck(chart.domainAxis).autoViewport = false;
        this[S$._domainAxisTickProvider] = new (PanningTickProviderOfD()).new(dart.nullCheck(dart.nullCheck(chart.domainAxis).tickProvider));
        dart.nullCheck(chart.domainAxis).tickProvider = this[S$._domainAxisTickProvider];
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        if (!CartesianChartOfD().is(chart)) {
          dart.throw(new core.ArgumentError.new("PanBehavior can only be attached to a CartesianChart<D>"));
        }
        this[S$._chart$4] = chart;
        chart.removeGestureListener(this[S$._listener]);
        dart.nullCheck(chart.domainAxis).autoViewport = true;
        dart.nullCheck(chart.domainAxis).tickProvider = this[S$._domainAxisTickProvider].tickProvider;
        this[S$._chart$4] = null;
      }
      onTapTest(localPosition) {
        if (this[S$._chart$4] == null) {
          return false;
        }
        return dart.nullCheck(this[S$._chart$4]).withinDrawArea(localPosition);
      }
      onDragStart(localPosition) {
        if (this[S$._chart$4] == null) {
          return false;
        }
        this.onPanStart();
        this[S$._lastPosition] = localPosition;
        this[S$._isPanning] = true;
        return true;
      }
      onDragUpdate(localPosition, scale) {
        if (!this[S$._isPanning] || this[S$._lastPosition] == null || this[S$._chart$4] == null) {
          return false;
        }
        if (scale !== 1.0) {
          this[S$._isPanning] = false;
          return false;
        }
        let domainAxis = dart.nullCheck(this[S$._chart$4]).domainAxis;
        if (domainAxis == null) {
          return false;
        }
        this[S$._domainAxisTickProvider].mode = panning_tick_provider.PanningTickProviderMode.stepSizeLocked;
        let domainScalingFactor = domainAxis.viewportScalingFactor;
        let domainChange = 0.0;
        if (domainAxis.isVertical) {
          domainChange = domainAxis.viewportTranslatePx + localPosition.y - dart.nullCheck(this[S$._lastPosition]).y;
        } else {
          domainChange = domainAxis.viewportTranslatePx + localPosition.x - dart.nullCheck(this[S$._lastPosition]).x;
        }
        let chart = dart.nullCheck(this.chart);
        domainAxis.setViewportSettings(domainScalingFactor, domainChange, {drawAreaWidth: chart.drawAreaBounds[S$.$width], drawAreaHeight: chart.drawAreaBounds[S$.$height]});
        this[S$._lastPosition] = localPosition;
        chart.redraw({skipAnimation: true, skipLayout: true});
        return true;
      }
      onDragEnd(localPosition, scale, pixelsPerSec) {
        this.onPanEnd();
        return true;
      }
      onPanStart() {
        dart.nullCheck(this[S$._chart$4]).getMeasureAxis().lockAxis = true;
        dart.nullCheck(this[S$._chart$4]).getMeasureAxis({axisId: "secondaryMeasureAxisId"}).lockAxis = true;
      }
      onPanEnd() {
        let t26;
        this.cancelPanning();
        this[S$._domainAxisTickProvider].mode = panning_tick_provider.PanningTickProviderMode.passThrough;
        let _chart = dart.nullCheck(this[S$._chart$4]);
        _chart.getMeasureAxis().lockAxis = false;
        _chart.getMeasureAxis({axisId: "secondaryMeasureAxisId"}).lockAxis = false;
        _chart.redraw();
        t26 = this[S$._panningCompletedCallback];
        t26 == null ? null : t26();
      }
      cancelPanning() {
        this[S$._isPanning] = false;
      }
    }
    (PanBehavior.new = function() {
      this[S$.__PanBehavior__listener] = null;
      this[S$.__PanBehavior__domainAxisTickProvider] = null;
      this[S$._chart$4] = null;
      this[S$._isPanning] = false;
      this[S$._lastPosition] = null;
      this[S$._panningCompletedCallback] = null;
      this[S$._listener] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, 'onTapTest'), onDragStart: dart.bind(this, 'onDragStart'), onDragUpdate: dart.bind(this, 'onDragUpdate'), onDragEnd: dart.bind(this, 'onDragEnd')});
    }).prototype = PanBehavior.prototype;
    dart.addTypeTests(PanBehavior);
    PanBehavior.prototype[_is_PanBehavior_default] = true;
    dart.addTypeCaches(PanBehavior);
    PanBehavior[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(PanBehavior, () => ({
      __proto__: dart.getMethods(PanBehavior.__proto__),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onTapTest: dart.fnType(core.bool, [math.Point$(core.double)]),
      onDragStart: dart.fnType(core.bool, [math.Point$(core.double)]),
      onDragUpdate: dart.fnType(core.bool, [math.Point$(core.double), core.double]),
      onDragEnd: dart.fnType(core.bool, [math.Point$(core.double), core.double, core.double]),
      onPanStart: dart.fnType(dart.void, []),
      onPanEnd: dart.fnType(dart.void, []),
      cancelPanning: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(PanBehavior, () => ({
      __proto__: dart.getGetters(PanBehavior.__proto__),
      [S$._listener]: gesture_listener.GestureListener,
      [S$._domainAxisTickProvider]: panning_tick_provider.PanningTickProvider$(D),
      domainAxisTickProvider: panning_tick_provider.PanningTickProvider$(D),
      role: core.String,
      chart: dart.nullable(cartesian_chart.CartesianChart$(D)),
      isPanning: core.bool,
      lastPosition: dart.nullable(math.Point$(core.double))
    }));
    dart.setSetterSignature(PanBehavior, () => ({
      __proto__: dart.getSetters(PanBehavior.__proto__),
      [S$._listener]: gesture_listener.GestureListener,
      [S$._domainAxisTickProvider]: panning_tick_provider.PanningTickProvider$(D),
      panningCompletedCallback: dart.nullable(dart.fnType(dart.void, []))
    }));
    dart.setLibraryUri(PanBehavior, I[36]);
    dart.setFieldSignature(PanBehavior, () => ({
      __proto__: dart.getFields(PanBehavior.__proto__),
      [S$.__PanBehavior__listener]: dart.fieldType(dart.nullable(gesture_listener.GestureListener)),
      [S$.__PanBehavior__domainAxisTickProvider]: dart.fieldType(dart.nullable(panning_tick_provider.PanningTickProvider$(D))),
      [S$._chart$4]: dart.fieldType(dart.nullable(cartesian_chart.CartesianChart$(D))),
      [S$._isPanning]: dart.fieldType(core.bool),
      [S$._lastPosition]: dart.fieldType(dart.nullable(math.Point$(core.double))),
      [S$._panningCompletedCallback]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    return PanBehavior;
  });
  pan_behavior.PanBehavior = pan_behavior.PanBehavior$();
  dart.addTypeTests(pan_behavior.PanBehavior, _is_PanBehavior_default);
  const _is_PanAndZoomBehavior_default = Symbol('_is_PanAndZoomBehavior_default');
  pan_and_zoom_behavior.PanAndZoomBehavior$ = dart.generic(D => {
    class PanAndZoomBehavior extends pan_behavior.PanBehavior$(D) {
      get role() {
        return "PanAndZoom";
      }
      get isZooming() {
        return this[S$._isZooming];
      }
      onDragStart(localPosition) {
        if (this.chart == null) {
          return false;
        }
        super.onDragStart(localPosition);
        this[S$._scalingFactor] = dart.nullCheck(dart.nullCheck(this.chart).domainAxis).viewportScalingFactor;
        this[S$._isZooming] = true;
        return true;
      }
      onDragUpdate(localPosition, scale) {
        if (scale === 1.0) {
          this[S$._isZooming] = false;
          return super.onDragUpdate(localPosition, scale);
        }
        this.cancelPanning();
        let chart = this.chart;
        if (!this[S$._isZooming] || this.lastPosition == null || chart == null) {
          return false;
        }
        let domainAxis = chart.domainAxis;
        if (domainAxis == null) {
          return false;
        }
        this.domainAxisTickProvider.mode = panning_tick_provider.PanningTickProviderMode.useCachedTicks;
        let newScalingFactor = math.min(core.double, math.max(core.double, this[S$._scalingFactor] * scale, this[S$._minScalingFactor]), this[S$._maxScalingFactor]);
        domainAxis.setViewportSettings(newScalingFactor, domainAxis.viewportTranslatePx, {drawAreaWidth: chart.drawAreaBounds[S$.$width], drawAreaHeight: chart.drawAreaBounds[S$.$height]});
        chart.redraw({skipAnimation: true, skipLayout: true});
        return true;
      }
      onDragEnd(localPosition, scale, pixelsPerSec) {
        this[S$._isZooming] = false;
        return super.onDragEnd(localPosition, scale, pixelsPerSec);
      }
    }
    (PanAndZoomBehavior.new = function() {
      this[S$._isZooming] = false;
      this[S$._scalingFactor] = 1.0;
      this[S$._minScalingFactor] = 1.0;
      this[S$._maxScalingFactor] = 5.0;
      PanAndZoomBehavior.__proto__.new.call(this);
      ;
    }).prototype = PanAndZoomBehavior.prototype;
    dart.addTypeTests(PanAndZoomBehavior);
    PanAndZoomBehavior.prototype[_is_PanAndZoomBehavior_default] = true;
    dart.addTypeCaches(PanAndZoomBehavior);
    dart.setGetterSignature(PanAndZoomBehavior, () => ({
      __proto__: dart.getGetters(PanAndZoomBehavior.__proto__),
      isZooming: core.bool
    }));
    dart.setLibraryUri(PanAndZoomBehavior, I[37]);
    dart.setFieldSignature(PanAndZoomBehavior, () => ({
      __proto__: dart.getFields(PanAndZoomBehavior.__proto__),
      [S$._isZooming]: dart.fieldType(core.bool),
      [S$._scalingFactor]: dart.fieldType(core.double),
      [S$._minScalingFactor]: dart.finalFieldType(core.double),
      [S$._maxScalingFactor]: dart.finalFieldType(core.double)
    }));
    return PanAndZoomBehavior;
  });
  pan_and_zoom_behavior.PanAndZoomBehavior = pan_and_zoom_behavior.PanAndZoomBehavior$();
  dart.addTypeTests(pan_and_zoom_behavior.PanAndZoomBehavior, _is_PanAndZoomBehavior_default);
  const _is_InitialHintBehavior_default = Symbol('_is_InitialHintBehavior_default');
  initial_hint_behavior.InitialHintBehavior$ = dart.generic(D => {
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    class InitialHintBehavior extends core.Object {
      get [S$._listener$1]() {
        let t26;
        t26 = this[S$.__InitialHintBehavior__listener];
        return t26 == null ? dart.throw(new _internal.LateError.fieldNI("_listener")) : t26;
      }
      set [S$._listener$1](t26) {
        this[S$.__InitialHintBehavior__listener] = t26;
      }
      get [S$._lifecycleListener]() {
        let t27;
        t27 = this[S$.__InitialHintBehavior__lifecycleListener];
        return t27 == null ? dart.throw(new _internal.LateError.fieldNI("_lifecycleListener")) : t27;
      }
      set [S$._lifecycleListener](t27) {
        this[S$.__InitialHintBehavior__lifecycleListener] = t27;
      }
      get role() {
        return "InitialHint";
      }
      get chart() {
        return this[S$._chart$5];
      }
      get hintDuration() {
        return this[S$._hintDuration];
      }
      set hintDuration(duration) {
        this[S$._hintDuration] = duration;
      }
      get maxHintTranslate() {
        return this[S$._maxHintTranslate];
      }
      set maxHintTranslate(maxHintTranslate) {
        this[S$._maxHintTranslate] = maxHintTranslate;
      }
      get maxHintScaleFactor() {
        return this[S$._maxHintScaleFactor];
      }
      set maxHintScaleFactor(maxHintScaleFactor) {
        if (!(maxHintScaleFactor != null && dart.notNull(maxHintScaleFactor) >= 1.0)) dart.assertFailed(null, I[38], 85, 12, "maxHintScaleFactor != null && maxHintScaleFactor >= 1.0");
        this[S$._maxHintScaleFactor] = maxHintScaleFactor;
      }
      get [S$._targetViewportTranslatePx]() {
        let t28;
        t28 = this[S$.__InitialHintBehavior__targetViewportTranslatePx];
        return t28 == null ? dart.throw(new _internal.LateError.fieldNI("_targetViewportTranslatePx")) : t28;
      }
      set [S$._targetViewportTranslatePx](t28) {
        this[S$.__InitialHintBehavior__targetViewportTranslatePx] = t28;
      }
      get [S$._targetViewportScalingFactor]() {
        let t29;
        t29 = this[S$.__InitialHintBehavior__targetViewportScalingFactor];
        return t29 == null ? dart.throw(new _internal.LateError.fieldNI("_targetViewportScalingFactor")) : t29;
      }
      set [S$._targetViewportScalingFactor](t29) {
        this[S$.__InitialHintBehavior__targetViewportScalingFactor] = t29;
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        if (!CartesianChartOfD().is(chart)) {
          dart.throw(new core.ArgumentError.new("InitialHintBehavior can only be attached to a CartesianChart<D>"));
        }
        this[S$._chart$5] = chart;
        chart.addGestureListener(this[S$._listener$1]);
        chart.addLifecycleListener(this[S$._lifecycleListener]);
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        if (!cartesian_chart.CartesianChart.is(chart)) {
          dart.throw(new core.ArgumentError.new("InitialHintBehavior can only be removed from a CartesianChart<D>"));
        }
        this.stopHintAnimation();
        this[S$._chart$5] = CartesianChartOfD().as(chart);
        chart.removeGestureListener(this[S$._listener$1]);
        chart.removeLifecycleListener(this[S$._lifecycleListener]);
        this[S$._chart$5] = null;
      }
      onTapTest(localPosition) {
        if (this[S$._chart$5] == null) {
          return false;
        }
        this.stopHintAnimation();
        return dart.nullCheck(this[S$._chart$5]).withinDrawArea(localPosition);
      }
      [S$._onAxisConfigured]() {
        let t30;
        if (!this[S$._firstAxisConfigured]) {
          this[S$._firstAxisConfigured] = true;
          let domainAxis = dart.nullCheck(dart.nullCheck(this.chart).domainAxis);
          if (!(domainAxis.stepSize !== 0.0)) dart.assertFailed(null, I[38], 166, 14, "domainAxis.stepSize != 0.0");
          this[S$._targetViewportTranslatePx] = domainAxis.viewportTranslatePx;
          this[S$._targetViewportScalingFactor] = domainAxis.viewportScalingFactor;
          let translateAmount = domainAxis.stepSize * this.maxHintTranslate;
          this[S$._initialViewportTranslatePx] = this[S$._targetViewportTranslatePx] - translateAmount;
          this[S$._initialViewportScalingFactor] = (t30 = this.maxHintScaleFactor, t30 == null ? this[S$._targetViewportScalingFactor] : t30);
          if (!(this[S$._initialViewportScalingFactor] != null)) dart.assertFailed(null, I[38], 182, 14, "_initialViewportScalingFactor != null");
          domainAxis.setViewportSettings(dart.nullCheck(this[S$._initialViewportScalingFactor]), dart.nullCheck(this[S$._initialViewportTranslatePx]));
          dart.nullCheck(this.chart).redraw({skipAnimation: true, skipLayout: false});
        }
      }
      [S$._onAnimationComplete]() {
        if (!this[S$._hintSetupCompleted]) {
          this[S$._hintSetupCompleted] = true;
          this.startHintAnimation();
        }
      }
      startHintAnimation() {
        dart.nullCheck(this[S$._chart$5]).getMeasureAxis().lockAxis = true;
        dart.nullCheck(this[S$._chart$5]).getMeasureAxis({axisId: "secondaryMeasureAxisId"}).lockAxis = true;
      }
      stopHintAnimation() {
        dart.nullCheck(this[S$._chart$5]).getMeasureAxis().lockAxis = false;
        dart.nullCheck(this[S$._chart$5]).getMeasureAxis({axisId: "secondaryMeasureAxisId"}).lockAxis = false;
      }
      onHintTick() {
        let percent = this.hintAnimationPercent;
        let scaleFactor = this[S$._lerpDouble](this[S$._initialViewportScalingFactor], this[S$._targetViewportScalingFactor], percent);
        let translatePx = this[S$._lerpDouble](this[S$._initialViewportTranslatePx], this[S$._targetViewportTranslatePx], percent);
        if (this[S$._initialViewportScalingFactor] !== this[S$._targetViewportScalingFactor]) {
          translatePx = translatePx * percent;
        }
        let chart = dart.nullCheck(this.chart);
        let domainAxis = dart.nullCheck(chart.domainAxis);
        domainAxis.setViewportSettings(scaleFactor, translatePx, {drawAreaWidth: chart.drawAreaBounds[S$.$width]});
        if (percent >= 1.0) {
          this.stopHintAnimation();
          chart.redraw();
        } else {
          chart.redraw({skipAnimation: true, skipLayout: true});
        }
      }
      [S$._lerpDouble](a, b, t) {
        a == null ? a = 0.0 : null;
        b == null ? b = 0.0 : null;
        return dart.notNull(a) + (dart.notNull(b) - dart.notNull(a)) * t;
      }
    }
    (InitialHintBehavior.new = function() {
      this[S$.__InitialHintBehavior__listener] = null;
      this[S$.__InitialHintBehavior__lifecycleListener] = null;
      this[S$._chart$5] = null;
      this[S$._hintDuration] = new core.Duration.new({milliseconds: 3000});
      this[S$._maxHintTranslate] = 0.0;
      this[S$._maxHintScaleFactor] = null;
      this[S$._hintSetupCompleted] = false;
      this[S$._firstAxisConfigured] = false;
      this[S$._initialViewportTranslatePx] = null;
      this[S$._initialViewportScalingFactor] = null;
      this[S$.__InitialHintBehavior__targetViewportTranslatePx] = null;
      this[S$.__InitialHintBehavior__targetViewportScalingFactor] = null;
      this[S$._listener$1] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, 'onTapTest')});
      this[S$._lifecycleListener] = new (LifecycleListenerOfD()).new({onAxisConfigured: dart.bind(this, S$._onAxisConfigured), onAnimationComplete: dart.bind(this, S$._onAnimationComplete)});
    }).prototype = InitialHintBehavior.prototype;
    dart.addTypeTests(InitialHintBehavior);
    InitialHintBehavior.prototype[_is_InitialHintBehavior_default] = true;
    dart.addTypeCaches(InitialHintBehavior);
    InitialHintBehavior[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(InitialHintBehavior, () => ({
      __proto__: dart.getMethods(InitialHintBehavior.__proto__),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onTapTest: dart.fnType(core.bool, [math.Point$(core.double)]),
      [S$._onAxisConfigured]: dart.fnType(dart.void, []),
      [S$._onAnimationComplete]: dart.fnType(dart.void, []),
      startHintAnimation: dart.fnType(dart.void, []),
      stopHintAnimation: dart.fnType(dart.void, []),
      onHintTick: dart.fnType(dart.void, []),
      [S$._lerpDouble]: dart.fnType(core.double, [dart.nullable(core.double), dart.nullable(core.double), core.double])
    }));
    dart.setGetterSignature(InitialHintBehavior, () => ({
      __proto__: dart.getGetters(InitialHintBehavior.__proto__),
      [S$._listener$1]: gesture_listener.GestureListener,
      [S$._lifecycleListener]: base_chart.LifecycleListener$(D),
      role: core.String,
      chart: dart.nullable(cartesian_chart.CartesianChart$(D)),
      hintDuration: core.Duration,
      maxHintTranslate: core.double,
      maxHintScaleFactor: dart.nullable(core.double),
      [S$._targetViewportTranslatePx]: core.double,
      [S$._targetViewportScalingFactor]: core.double
    }));
    dart.setSetterSignature(InitialHintBehavior, () => ({
      __proto__: dart.getSetters(InitialHintBehavior.__proto__),
      [S$._listener$1]: gesture_listener.GestureListener,
      [S$._lifecycleListener]: base_chart.LifecycleListener$(D),
      hintDuration: core.Duration,
      maxHintTranslate: core.double,
      maxHintScaleFactor: dart.nullable(core.double),
      [S$._targetViewportTranslatePx]: core.double,
      [S$._targetViewportScalingFactor]: core.double
    }));
    dart.setLibraryUri(InitialHintBehavior, I[39]);
    dart.setFieldSignature(InitialHintBehavior, () => ({
      __proto__: dart.getFields(InitialHintBehavior.__proto__),
      [S$.__InitialHintBehavior__listener]: dart.fieldType(dart.nullable(gesture_listener.GestureListener)),
      [S$.__InitialHintBehavior__lifecycleListener]: dart.fieldType(dart.nullable(base_chart.LifecycleListener$(D))),
      [S$._chart$5]: dart.fieldType(dart.nullable(cartesian_chart.CartesianChart$(D))),
      [S$._hintDuration]: dart.fieldType(core.Duration),
      [S$._maxHintTranslate]: dart.fieldType(core.double),
      [S$._maxHintScaleFactor]: dart.fieldType(dart.nullable(core.double)),
      [S$._hintSetupCompleted]: dart.fieldType(core.bool),
      [S$._firstAxisConfigured]: dart.fieldType(core.bool),
      [S$._initialViewportTranslatePx]: dart.fieldType(dart.nullable(core.double)),
      [S$._initialViewportScalingFactor]: dart.fieldType(dart.nullable(core.double)),
      [S$.__InitialHintBehavior__targetViewportTranslatePx]: dart.fieldType(dart.nullable(core.double)),
      [S$.__InitialHintBehavior__targetViewportScalingFactor]: dart.fieldType(dart.nullable(core.double))
    }));
    return InitialHintBehavior;
  });
  initial_hint_behavior.InitialHintBehavior = initial_hint_behavior.InitialHintBehavior$();
  dart.addTypeTests(initial_hint_behavior.InitialHintBehavior, _is_InitialHintBehavior_default);
  const _is_BaseArcRendererConfig_default = Symbol('_is_BaseArcRendererConfig_default');
  base_arc_renderer_config.BaseArcRendererConfig$ = dart.generic(D => {
    class BaseArcRendererConfig extends layout_view.LayoutViewConfig {
      get customRendererId() {
        return this[S$.customRendererId$3];
      }
      set customRendererId(value) {
        super.customRendererId = value;
      }
      get arcRendererDecorators() {
        return this[S$.arcRendererDecorators];
      }
      set arcRendererDecorators(value) {
        super.arcRendererDecorators = value;
      }
      get symbolRenderer() {
        return this[S$.symbolRenderer$5];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get rendererAttributes() {
        return this[S$.rendererAttributes$3];
      }
      set rendererAttributes(value) {
        super.rendererAttributes = value;
      }
      get arcLength() {
        return this[S$.arcLength];
      }
      set arcLength(value) {
        super.arcLength = value;
      }
      get arcRatio() {
        return this[S$.arcRatio];
      }
      set arcRatio(value) {
        super.arcRatio = value;
      }
      get arcWidth() {
        return this[S$.arcWidth];
      }
      set arcWidth(value) {
        super.arcWidth = value;
      }
      get layoutPaintOrder() {
        return this[S$.layoutPaintOrder$3];
      }
      set layoutPaintOrder(value) {
        super.layoutPaintOrder = value;
      }
      get minHoleWidthForCenterContent() {
        return this[S$.minHoleWidthForCenterContent];
      }
      set minHoleWidthForCenterContent(value) {
        super.minHoleWidthForCenterContent = value;
      }
      get startAngle() {
        return this[S$.startAngle];
      }
      set startAngle(value) {
        super.startAngle = value;
      }
      get strokeWidthPx() {
        return this[S$.strokeWidthPx$5];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get stroke() {
        return this[S$.stroke];
      }
      set stroke(value) {
        super.stroke = value;
      }
      get noDataColor() {
        return this[S$.noDataColor];
      }
      set noDataColor(value) {
        super.noDataColor = value;
      }
    }
    (BaseArcRendererConfig.new = function(opts) {
      let t30;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let arcLength = opts && 'arcLength' in opts ? opts.arcLength : 6.283185307179586;
      let arcRendererDecorators = opts && 'arcRendererDecorators' in opts ? opts.arcRendererDecorators : C[25] || CT.C25;
      let arcRatio = opts && 'arcRatio' in opts ? opts.arcRatio : null;
      let arcWidth = opts && 'arcWidth' in opts ? opts.arcWidth : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 10;
      let minHoleWidthForCenterContent = opts && 'minHoleWidthForCenterContent' in opts ? opts.minHoleWidthForCenterContent : 30;
      let startAngle = opts && 'startAngle' in opts ? opts.startAngle : -1.5707963267948966;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 2;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[S$.rendererAttributes$3] = new series_renderer_config.RendererAttributes.new();
      this[S$.customRendererId$3] = customRendererId;
      this[S$.arcLength] = arcLength;
      this[S$.arcRendererDecorators] = arcRendererDecorators;
      this[S$.arcRatio] = arcRatio;
      this[S$.arcWidth] = arcWidth;
      this[S$.layoutPaintOrder$3] = layoutPaintOrder;
      this[S$.minHoleWidthForCenterContent] = minHoleWidthForCenterContent;
      this[S$.startAngle] = startAngle;
      this[S$.strokeWidthPx$5] = strokeWidthPx;
      this[S$.noDataColor] = style_factory.StyleFactory.style.noDataColor;
      this[S$.stroke] = style_factory.StyleFactory.style.arcStrokeColor;
      this[S$.symbolRenderer$5] = (t30 = symbolRenderer, t30 == null ? new symbol_renderer.CircleSymbolRenderer.new() : t30);
      BaseArcRendererConfig.__proto__.new.call(this);
      ;
    }).prototype = BaseArcRendererConfig.prototype;
    dart.addTypeTests(BaseArcRendererConfig);
    BaseArcRendererConfig.prototype[_is_BaseArcRendererConfig_default] = true;
    dart.addTypeCaches(BaseArcRendererConfig);
    BaseArcRendererConfig[dart.implements] = () => [series_renderer_config.SeriesRendererConfig$(D)];
    dart.setLibraryUri(BaseArcRendererConfig, I[40]);
    dart.setFieldSignature(BaseArcRendererConfig, () => ({
      __proto__: dart.getFields(BaseArcRendererConfig.__proto__),
      customRendererId: dart.finalFieldType(dart.nullable(core.String)),
      arcRendererDecorators: dart.finalFieldType(core.List$(arc_renderer_decorator.ArcRendererDecorator$(D))),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      rendererAttributes: dart.finalFieldType(series_renderer_config.RendererAttributes),
      arcLength: dart.finalFieldType(core.double),
      arcRatio: dart.finalFieldType(dart.nullable(core.double)),
      arcWidth: dart.finalFieldType(dart.nullable(core.int)),
      layoutPaintOrder: dart.finalFieldType(core.int),
      minHoleWidthForCenterContent: dart.finalFieldType(core.int),
      startAngle: dart.finalFieldType(core.double),
      strokeWidthPx: dart.finalFieldType(core.double),
      stroke: dart.finalFieldType(color$.Color),
      noDataColor: dart.finalFieldType(color$.Color)
    }));
    return BaseArcRendererConfig;
  });
  base_arc_renderer_config.BaseArcRendererConfig = base_arc_renderer_config.BaseArcRendererConfig$();
  dart.addTypeTests(base_arc_renderer_config.BaseArcRendererConfig, _is_BaseArcRendererConfig_default);
  const _is_SunburstArcRendererConfig_default = Symbol('_is_SunburstArcRendererConfig_default');
  sunburst_arc_renderer_config.SunburstArcRendererConfig$ = dart.generic(D => {
    var SunburstArcRendererOfD = () => (SunburstArcRendererOfD = dart.constFn(sunburst_arc_renderer.SunburstArcRenderer$(D)))();
    class SunburstArcRendererConfig extends base_arc_renderer_config.BaseArcRendererConfig$(D) {
      get arcRatios() {
        return this[S$.arcRatios];
      }
      set arcRatios(value) {
        super.arcRatios = value;
      }
      get arcWidths() {
        return this[S$.arcWidths];
      }
      set arcWidths(value) {
        super.arcWidths = value;
      }
      get colorAssignmentStrategy() {
        return this[S$.colorAssignmentStrategy];
      }
      set colorAssignmentStrategy(value) {
        super.colorAssignmentStrategy = value;
      }
      get initialDisplayLevel() {
        return this[S$.initialDisplayLevel];
      }
      set initialDisplayLevel(value) {
        super.initialDisplayLevel = value;
      }
      get maxDisplayLevel() {
        return this[S$.maxDisplayLevel];
      }
      set maxDisplayLevel(value) {
        super.maxDisplayLevel = value;
      }
      build() {
        return SunburstArcRendererOfD().new({config: this, rendererId: this.customRendererId});
      }
    }
    (SunburstArcRendererConfig.new = function(opts) {
      let t30, t30$, t30$0;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let arcLength = opts && 'arcLength' in opts ? opts.arcLength : 6.283185307179586;
      let arcRendererDecorators = opts && 'arcRendererDecorators' in opts ? opts.arcRendererDecorators : C[25] || CT.C25;
      let arcRatio = opts && 'arcRatio' in opts ? opts.arcRatio : null;
      let arcRatios = opts && 'arcRatios' in opts ? opts.arcRatios : null;
      let arcWidth = opts && 'arcWidth' in opts ? opts.arcWidth : null;
      let arcWidths = opts && 'arcWidths' in opts ? opts.arcWidths : null;
      let colorAssignmentStrategy = opts && 'colorAssignmentStrategy' in opts ? opts.colorAssignmentStrategy : C[26] || CT.C26;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 10;
      let maxDisplayLevel = opts && 'maxDisplayLevel' in opts ? opts.maxDisplayLevel : null;
      let initialDisplayLevel = opts && 'initialDisplayLevel' in opts ? opts.initialDisplayLevel : null;
      let minHoleWidthForCenterContent = opts && 'minHoleWidthForCenterContent' in opts ? opts.minHoleWidthForCenterContent : 30;
      let startAngle = opts && 'startAngle' in opts ? opts.startAngle : -1.5707963267948966;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 2;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[S$.arcRatios] = arcRatios;
      this[S$.arcWidths] = arcWidths;
      this[S$.colorAssignmentStrategy] = colorAssignmentStrategy;
      this[S$.maxDisplayLevel] = (t30 = maxDisplayLevel, t30 == null ? 2147483648.0 : t30);
      this[S$.initialDisplayLevel] = (t30$0 = (t30$ = initialDisplayLevel, t30$ == null ? maxDisplayLevel : t30$), t30$0 == null ? 2147483648.0 : t30$0);
      SunburstArcRendererConfig.__proto__.new.call(this, {customRendererId: customRendererId, arcLength: arcLength, arcRatio: arcRatio, arcWidth: arcWidth, layoutPaintOrder: layoutPaintOrder, minHoleWidthForCenterContent: minHoleWidthForCenterContent, startAngle: startAngle, strokeWidthPx: strokeWidthPx, arcRendererDecorators: arcRendererDecorators});
      ;
    }).prototype = SunburstArcRendererConfig.prototype;
    dart.addTypeTests(SunburstArcRendererConfig);
    SunburstArcRendererConfig.prototype[_is_SunburstArcRendererConfig_default] = true;
    dart.addTypeCaches(SunburstArcRendererConfig);
    dart.setMethodSignature(SunburstArcRendererConfig, () => ({
      __proto__: dart.getMethods(SunburstArcRendererConfig.__proto__),
      build: dart.fnType(sunburst_arc_renderer.SunburstArcRenderer$(D), [])
    }));
    dart.setLibraryUri(SunburstArcRendererConfig, I[41]);
    dart.setFieldSignature(SunburstArcRendererConfig, () => ({
      __proto__: dart.getFields(SunburstArcRendererConfig.__proto__),
      arcRatios: dart.finalFieldType(dart.nullable(core.List$(core.int))),
      arcWidths: dart.finalFieldType(dart.nullable(core.List$(core.int))),
      colorAssignmentStrategy: dart.finalFieldType(sunburst_arc_renderer_config.SunburstColorStrategy),
      initialDisplayLevel: dart.finalFieldType(core.int),
      maxDisplayLevel: dart.finalFieldType(core.int)
    }));
    return SunburstArcRendererConfig;
  });
  sunburst_arc_renderer_config.SunburstArcRendererConfig = sunburst_arc_renderer_config.SunburstArcRendererConfig$();
  dart.defineLazy(sunburst_arc_renderer_config.SunburstArcRendererConfig, {
    /*sunburst_arc_renderer_config.SunburstArcRendererConfig._maxInt32Value*/get _maxInt32Value() {
      return 2147483648.0;
    }
  }, false);
  dart.addTypeTests(sunburst_arc_renderer_config.SunburstArcRendererConfig, _is_SunburstArcRendererConfig_default);
  sunburst_arc_renderer_config.SunburstColorStrategy = class SunburstColorStrategy extends core.Object {
    toString() {
      return this[S$._name$3];
    }
  };
  (sunburst_arc_renderer_config.SunburstColorStrategy.new = function(index, _name) {
    this.index = index;
    this[S$._name$3] = _name;
    ;
  }).prototype = sunburst_arc_renderer_config.SunburstColorStrategy.prototype;
  dart.addTypeTests(sunburst_arc_renderer_config.SunburstColorStrategy);
  dart.addTypeCaches(sunburst_arc_renderer_config.SunburstColorStrategy);
  dart.setLibraryUri(sunburst_arc_renderer_config.SunburstColorStrategy, I[41]);
  dart.setFieldSignature(sunburst_arc_renderer_config.SunburstColorStrategy, () => ({
    __proto__: dart.getFields(sunburst_arc_renderer_config.SunburstColorStrategy.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name$3]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(sunburst_arc_renderer_config.SunburstColorStrategy, ['toString']);
  sunburst_arc_renderer_config.SunburstColorStrategy.newShadePerArc = C[27] || CT.C27;
  sunburst_arc_renderer_config.SunburstColorStrategy.newShadePerLevel = C[26] || CT.C26;
  sunburst_arc_renderer_config.SunburstColorStrategy.values = C[28] || CT.C28;
  const _is_BaseArcRenderer_default = Symbol('_is_BaseArcRenderer_default');
  base_arc_renderer.BaseArcRenderer$ = dart.generic(D => {
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var BaseChartNOfD = () => (BaseChartNOfD = dart.constFn(dart.nullable(BaseChartOfD())))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var ArcRendererElementListOfD = () => (ArcRendererElementListOfD = dart.constFn(arc_renderer_element.ArcRendererElementList$(D)))();
    var ArcRendererElementOfD = () => (ArcRendererElementOfD = dart.constFn(arc_renderer_element.ArcRendererElement$(D)))();
    var JSArrayOfArcRendererElementOfD = () => (JSArrayOfArcRendererElementOfD = dart.constFn(_interceptors.JSArray$(ArcRendererElementOfD())))();
    var ArcRendererDecoratorOfD = () => (ArcRendererDecoratorOfD = dart.constFn(arc_renderer_decorator.ArcRendererDecorator$(D)))();
    var ArcRendererDecoratorOfDTobool = () => (ArcRendererDecoratorOfDTobool = dart.constFn(dart.fnType(core.bool, [ArcRendererDecoratorOfD()])))();
    var ArcRendererDecoratorOfDTovoid = () => (ArcRendererDecoratorOfDTovoid = dart.constFn(dart.fnType(dart.void, [ArcRendererDecoratorOfD()])))();
    var AnimatedArcOfD = () => (AnimatedArcOfD = dart.constFn(arc_renderer_element.AnimatedArc$(D)))();
    var AnimatedArcOfDToArcRendererElementOfD = () => (AnimatedArcOfDToArcRendererElementOfD = dart.constFn(dart.fnType(ArcRendererElementOfD(), [AnimatedArcOfD()])))();
    var ArcRendererElementOfDTovoid = () => (ArcRendererElementOfDTovoid = dart.constFn(dart.fnType(dart.void, [ArcRendererElementOfD()])))();
    var JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    var AnimatedArcOfDTovoid = () => (AnimatedArcOfDTovoid = dart.constFn(dart.fnType(dart.void, [AnimatedArcOfD()])))();
    class BaseArcRenderer extends series_renderer.BaseSeriesRenderer$(D) {
      get config() {
        return this[S$.config$4];
      }
      set config(value) {
        super.config = value;
      }
      get arcRendererDecorators() {
        return this[S$.arcRendererDecorators$2];
      }
      set arcRendererDecorators(value) {
        super.arcRendererDecorators = value;
      }
      get chart() {
        return this[S$.chart];
      }
      set chart(value) {
        this[S$.chart] = BaseChartNOfD().as(value);
      }
      onAttach(chart) {
        BaseChartOfD().as(chart);
        super.onAttach(chart);
        this.chart = chart;
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        this.assignMissingColors(seriesList, {emptyCategoryUsesSinglePalette: false});
      }
      get isRtl() {
        let t30, t30$;
        t30$ = (t30 = this.chart, t30 == null ? null : t30.context.isRtl);
        return t30$ == null ? false : t30$;
      }
      get centerContentBounds() {
        let arcLists = this.getArcLists();
        let arcList = arcLists[S$.$isNotEmpty] ? arcLists[S$.$first] : null;
        if (arcList == null || dart.nullCheck(arcList.innerRadius) < this.config.minHoleWidthForCenterContent) {
          let bounds = dart.nullCheck(this.chart).drawAreaBounds;
          return new (T$.RectangleOfint()).new((bounds[S$.$left] + bounds[S$.$width] / 2)[S$.$round](), (bounds[S$.$top] + bounds[S$.$height] / 2)[S$.$round](), 0, 0);
        }
        let width = (base_arc_renderer.BaseArcRenderer._cosPIOver4 * dart.nullCheck(arcList.innerRadius))[S$.$floor]();
        return new (T$.RectangleOfint()).new((dart.nullCheck(arcList.center).x - width)[S$.$round](), (dart.nullCheck(arcList.center).y - width)[S$.$round](), width * 2, width * 2);
      }
      getExpandedDatumDetails(seriesDatum) {
        let t31, t30, t31$, t30$;
        SeriesDatumOfD().as(seriesDatum);
        let series = seriesDatum.series;
        let datum = seriesDatum.datum;
        let datumIndex = seriesDatum.index;
        let domain = (t30 = series, t31 = datumIndex, t30.domainFn(t31));
        let measure = (t30$ = series, t31$ = datumIndex, t30$.measureFn(t31$));
        let color = dart.nullCheck(series.colorFn)(datumIndex);
        let chartPosition = this[S$._getChartPosition](series.id, series.id + "__" + dart.str(domain));
        return new (DatumDetailsOfD()).new({datum: datum, domain: domain, measure: measure, series: series, color: color, chartPosition: new math$.NullablePoint.from(chartPosition)});
      }
      [S$._getChartPosition](seriesId, key) {
        let chartPosition = null;
        let arcLists = this.getArcLists({seriesId: seriesId});
        if (arcLists[S$.$isEmpty]) {
          return chartPosition;
        }
        for (let arcList of arcLists) {
          for (let arc of arcList.arcs) {
            if (arc.key === key) {
              let centerAngle = dart.nullCheck(arc.currentArcStartAngle) + (dart.nullCheck(arc.currentArcEndAngle) - dart.nullCheck(arc.currentArcStartAngle)) / 2;
              let centerPointRadius = dart.nullCheck(arcList.innerRadius) + (dart.nullCheck(arcList.radius) - dart.nullCheck(arcList.innerRadius)) / 2;
              chartPosition = new (T$.PointOfdouble()).new(centerPointRadius * math.cos(centerAngle) + dart.nullCheck(arcList.center).x, centerPointRadius * math.sin(centerAngle) + dart.nullCheck(arcList.center).y);
              break;
            }
          }
        }
        return chartPosition;
      }
      paint(canvas, animationPercent) {
        let t30;
        let arcLists = this.getArcLists();
        let arcListToElementsList = new _js_helper.LinkedMap.new();
        for (let arcList of arcLists) {
          let elementsList = new (ArcRendererElementListOfD()).new({arcs: JSArrayOfArcRendererElementOfD().of([]), center: dart.nullCheck(arcList.center), innerRadius: dart.nullCheck(arcList.innerRadius), radius: dart.nullCheck(arcList.radius), startAngle: this.config.startAngle, stroke: arcList.stroke, strokeWidthPx: arcList.strokeWidthPx});
          this.arcRendererDecorators[S$.$where](dart.fn(decorator => !decorator.renderAbove, ArcRendererDecoratorOfDTobool()))[S$.$forEach](dart.fn(decorator => {
            decorator.decorate(elementsList, canvas, dart.nullCheck(this.graphicsFactory), {drawBounds: dart.nullCheck(this.drawBounds), animationPercent: animationPercent, rtl: this.isRtl});
          }, ArcRendererDecoratorOfDTovoid()));
          arcListToElementsList[S$.$_set](arcList, elementsList);
        }
        for (let arcList of arcLists) {
          let circleSectors = T$.JSArrayOfCanvasPieSlice().of([]);
          arcList.arcs[S$.$map](ArcRendererElementOfD(), dart.fn(animatingArc => animatingArc.getCurrentArc(animationPercent), AnimatedArcOfDToArcRendererElementOfD()))[S$.$forEach](dart.fn(arc => {
            circleSectors[S$.$add](new canvas_shapes.CanvasPieSlice.new(arc.startAngle, arc.endAngle, {fill: arc.color}));
            dart.dsend(dart.dload(arcListToElementsList[S$.$_get](arcList), 'arcs'), 'add', [arc]);
          }, ArcRendererElementOfDTovoid()));
          canvas.drawPie(new canvas_shapes.CanvasPie.new(circleSectors, dart.nullCheck(arcList.center), dart.nullCheck(arcList.radius), dart.nullCheck(arcList.innerRadius), {stroke: arcList.stroke, strokeWidthPx: (t30 = arcList.strokeWidthPx, t30 == null ? 0.0 : t30)}));
        }
        for (let arcList of arcLists) {
          this.arcRendererDecorators[S$.$where](dart.fn(decorator => decorator.renderAbove, ArcRendererDecoratorOfDTobool()))[S$.$forEach](dart.fn(decorator => {
            decorator.decorate(ArcRendererElementListOfD().as(arcListToElementsList[S$.$_get](arcList)), canvas, dart.nullCheck(this.graphicsFactory), {drawBounds: dart.nullCheck(this.drawBounds), animationPercent: animationPercent, rtl: this.isRtl});
          }, ArcRendererDecoratorOfDTovoid()));
        }
      }
      getNearestDatumDetailPerSeries(chartPoint, byDomain, boundsOverride, opts) {
        let selectOverlappingPoints = opts && 'selectOverlappingPoints' in opts ? opts.selectOverlappingPoints : false;
        let selectExactEventLocation = opts && 'selectExactEventLocation' in opts ? opts.selectExactEventLocation : false;
        let nearest = JSArrayOfDatumDetailsOfD().of([]);
        if (!this.isPointWithinBounds(chartPoint, boundsOverride)) {
          return nearest;
        }
        let arcLists = this.getArcLists();
        for (let arcList of arcLists) {
          if (dart.nullCheck(arcList.series).overlaySeries) {
            return nearest;
          }
          let center = dart.nullCheck(arcList.center);
          let innerRadius = dart.nullCheck(arcList.innerRadius);
          let radius = dart.nullCheck(arcList.radius);
          let distance = center.distanceTo(chartPoint);
          let chartPointAngle = math.atan2(chartPoint.y - center.y, chartPoint.x - center.x);
          if (chartPointAngle[S$.$isNaN]) {
            chartPointAngle = this.config.startAngle;
          }
          if (chartPointAngle < this.config.startAngle && chartPointAngle < 0) {
            chartPointAngle = 2 * 3.141592653589793 + chartPointAngle;
          }
          arcList.arcs[S$.$forEach](dart.fn(arc => {
            if (innerRadius <= distance && distance <= radius && dart.nullCheck(arc.currentArcStartAngle) <= chartPointAngle && chartPointAngle <= dart.nullCheck(arc.currentArcEndAngle)) {
              nearest[S$.$add](new (DatumDetailsOfD()).new({series: arcList.series, datum: arc.datum, domain: arc.domain, domainDistance: 0.0, measureDistance: 0.0}));
            }
          }, AnimatedArcOfDTovoid()));
        }
        return nearest;
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsOfD().as(details);
        SeriesDatumOfD().as(seriesDatum);
        let chartPosition = this[S$._getChartPosition](dart.nullCheck(details.series).id, dart.toString(details.domain));
        return DatumDetailsOfD().from(details, {chartPosition: new math$.NullablePoint.from(chartPosition)});
      }
    }
    (BaseArcRenderer.new = function(opts) {
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      this[S$.chart] = null;
      this[S$.config$4] = config;
      this[S$.arcRendererDecorators$2] = config.arcRendererDecorators;
      BaseArcRenderer.__proto__.new.call(this, {rendererId: rendererId, layoutPaintOrder: config.layoutPaintOrder, symbolRenderer: config.symbolRenderer});
      ;
    }).prototype = BaseArcRenderer.prototype;
    dart.addTypeTests(BaseArcRenderer);
    BaseArcRenderer.prototype[_is_BaseArcRenderer_default] = true;
    dart.addTypeCaches(BaseArcRenderer);
    dart.setMethodSignature(BaseArcRenderer, () => ({
      __proto__: dart.getMethods(BaseArcRenderer.__proto__),
      getExpandedDatumDetails: dart.fnType(datum_details.DatumDetails$(D), [dart.nullable(core.Object)]),
      [S$._getChartPosition]: dart.fnType(dart.nullable(math.Point$(core.double)), [core.String, core.String]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      getNearestDatumDetailPerSeries: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [math.Point$(core.double), core.bool, dart.nullable(math.Rectangle$(core.int))], {selectExactEventLocation: core.bool, selectOverlappingPoints: core.bool}, {}),
      addPositionToDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(BaseArcRenderer, () => ({
      __proto__: dart.getGetters(BaseArcRenderer.__proto__),
      isRtl: core.bool,
      centerContentBounds: math.Rectangle$(core.int)
    }));
    dart.setLibraryUri(BaseArcRenderer, I[42]);
    dart.setFieldSignature(BaseArcRenderer, () => ({
      __proto__: dart.getFields(BaseArcRenderer.__proto__),
      config: dart.finalFieldType(base_arc_renderer_config.BaseArcRendererConfig$(D)),
      arcRendererDecorators: dart.finalFieldType(core.List$(arc_renderer_decorator.ArcRendererDecorator$(D))),
      chart: dart.fieldType(dart.nullable(base_chart.BaseChart$(D)))
    }));
    return BaseArcRenderer;
  });
  base_arc_renderer.BaseArcRenderer = base_arc_renderer.BaseArcRenderer$();
  dart.defineLazy(base_arc_renderer.BaseArcRenderer, {
    /*base_arc_renderer.BaseArcRenderer._cosPIOver4*/get _cosPIOver4() {
      return math.cos(3.141592653589793 / 4);
    }
  }, false);
  dart.addTypeTests(base_arc_renderer.BaseArcRenderer, _is_BaseArcRenderer_default);
  const _is_ArcRenderer_default = Symbol('_is_ArcRenderer_default');
  arc_renderer.ArcRenderer$ = dart.generic(D => {
    var AnimatedArcListOfD = () => (AnimatedArcListOfD = dart.constFn(arc_renderer_element.AnimatedArcList$(D)))();
    var IdentityMapOfString$AnimatedArcListOfD = () => (IdentityMapOfString$AnimatedArcListOfD = dart.constFn(_js_helper.IdentityMap$(core.String, AnimatedArcListOfD())))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var ArcRendererElementOfD = () => (ArcRendererElementOfD = dart.constFn(arc_renderer_element.ArcRendererElement$(D)))();
    var JSArrayOfArcRendererElementOfD = () => (JSArrayOfArcRendererElementOfD = dart.constFn(_interceptors.JSArray$(ArcRendererElementOfD())))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    var VoidToAnimatedArcListOfD = () => (VoidToAnimatedArcListOfD = dart.constFn(dart.fnType(AnimatedArcListOfD(), [])))();
    var ListOfArcRendererElementOfD = () => (ListOfArcRendererElementOfD = dart.constFn(core.List$(ArcRendererElementOfD())))();
    var AnimatedArcOfD = () => (AnimatedArcOfD = dart.constFn(arc_renderer_element.AnimatedArc$(D)))();
    var AnimatedArcOfDTobool = () => (AnimatedArcOfDTobool = dart.constFn(dart.fnType(core.bool, [AnimatedArcOfD()])))();
    var ImmutableSeriesOfDTovoid = () => (ImmutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [ImmutableSeriesOfD()])))();
    var StringAndAnimatedArcListOfDTovoid = () => (StringAndAnimatedArcListOfDTovoid = dart.constFn(dart.fnType(dart.void, [core.String, AnimatedArcListOfD()])))();
    var IterableOfMutableSeriesOfD = () => (IterableOfMutableSeriesOfD = dart.constFn(core.Iterable$(MutableSeriesOfD())))();
    var JSArrayOfAnimatedArcListOfD = () => (JSArrayOfAnimatedArcListOfD = dart.constFn(_interceptors.JSArray$(AnimatedArcListOfD())))();
    class ArcRenderer extends base_arc_renderer.BaseArcRenderer$(D) {
      get config() {
        return this[S$.config$3];
      }
      set config(value) {
        super.config = value;
      }
      get arcRendererDecorators() {
        return this[S$.arcRendererDecorators$1];
      }
      set arcRendererDecorators(value) {
        super.arcRendererDecorators = value;
      }
      static new(opts) {
        let t30, t30$;
        let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
        let config = opts && 'config' in opts ? opts.config : null;
        return new (arc_renderer.ArcRenderer$(D))._internal({rendererId: (t30 = rendererId, t30 == null ? "line" : t30), config: (t30$ = config, t30$ == null ? new (arc_renderer_config.ArcRendererConfig$(D)).new() : t30$)});
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        seriesList[S$.$forEach](dart.fn(series => {
          let elements = JSArrayOfArcRendererElementOfD().of([]);
          let domainFn = series.domainFn;
          let measureFn = series.measureFn;
          let seriesMeasureTotal = series.seriesMeasureTotal;
          let startAngle = this.config.startAngle;
          let arcLength = this.config.arcLength;
          let totalAngle = 0.0;
          let measures = T$.JSArrayOfnumN().of([]);
          if (series.data[S$.$isEmpty]) {
            let angle = arcLength === 2 * 3.141592653589793 ? arcLength * 0.999999 : arcLength;
            let endAngle = startAngle + angle;
            let details = new (ArcRendererElementOfD()).new({startAngle: startAngle, endAngle: endAngle, index: 0, key: 0, series: series});
            elements[S$.$add](details);
          } else {
            for (let arcIndex = 0; arcIndex < series.data[S$.$length]; arcIndex = arcIndex + 1) {
              let domain = domainFn(arcIndex);
              let measure = measureFn(arcIndex);
              measures[S$.$add](measure);
              if (measure == null) {
                continue;
              }
              let percentOfSeries = dart.notNull(measure) / seriesMeasureTotal;
              let angle = arcLength * percentOfSeries;
              let endAngle = startAngle + angle;
              let details = new (ArcRendererElementOfD()).new({startAngle: startAngle, endAngle: endAngle, index: arcIndex, key: arcIndex, domain: domain, series: series});
              elements[S$.$add](details);
              startAngle = endAngle;
              totalAngle = totalAngle + angle;
            }
          }
          series.setAttr(T$.ListOfArcRendererElementOfObjectN(), arc_renderer.arcElementsKey, elements);
        }, MutableSeriesOfDTovoid()));
      }
      update(seriesList, isAnimatingThisDraw) {
        ListOfImmutableSeriesOfD().as(seriesList);
        this[S$._currentKeys$2][S$.$clear]();
        let bounds = dart.nullCheck(this.chart).drawAreaBounds;
        let center = new (T$.PointOfdouble()).new((bounds[S$.$left] + bounds[S$.$width] / 2)[S$.$toDouble](), (bounds[S$.$top] + bounds[S$.$height] / 2)[S$.$toDouble]());
        let radius = bounds[S$.$height] < bounds[S$.$width] ? (bounds[S$.$height] / 2)[S$.$toDouble]() : (bounds[S$.$width] / 2)[S$.$toDouble]();
        if (this.config.arcRatio != null && (dart.nullCheck(this.config.arcRatio) < 0 || dart.nullCheck(this.config.arcRatio) > 1)) {
          dart.throw(new core.ArgumentError.new("arcRatio must be between 0 and 1"));
        }
        let innerRadius = this[S$._calculateInnerRadius](radius);
        seriesList[S$.$forEach](dart.fn(series => {
          let t30, t30$;
          let colorFn = series.colorFn;
          let arcListKey = series.id;
          let arcList = this[S$._seriesArcMap][S$.$putIfAbsent](arcListKey, dart.fn(() => new (AnimatedArcListOfD()).new(), VoidToAnimatedArcListOfD()));
          let elementsList = ListOfArcRendererElementOfD().as(series.getAttr(T$.ListOfArcRendererElementOfObject(), arc_renderer.arcElementsKey));
          if (series.data[S$.$isEmpty]) {
            let details = elementsList[S$.$_get](0);
            let arcKey = "__no_data__";
            let animatingArc = iterable_extensions['IterableExtension|firstWhereOrNull'](AnimatedArcOfD(), arcList.arcs, dart.fn(arc => arc.key === arcKey, AnimatedArcOfDTobool()));
            arcList.center = center;
            arcList.radius = radius;
            arcList.innerRadius = innerRadius;
            arcList.series = series;
            arcList.stroke = this.config.noDataColor;
            arcList.strokeWidthPx = 0.0;
            if (animatingArc == null) {
              animatingArc = new (AnimatedArcOfD()).new(arcKey, null, null);
              arcList.arcs[S$.$add](animatingArc);
            } else {
              animatingArc.datum = null;
              animatingArc.domain = null;
            }
            this[S$._currentKeys$2][S$.$add](arcKey);
            let arcElement = new (ArcRendererElementOfD()).new({color: this.config.noDataColor, startAngle: details.startAngle, endAngle: details.endAngle, series: series});
            animatingArc.setNewTarget(arcElement);
          } else {
            let previousEndAngle = this.config.startAngle;
            for (let arcIndex = 0; arcIndex < series.data[S$.$length]; arcIndex = arcIndex + 1) {
              let datum = series.data[S$.$_get](arcIndex);
              let details = elementsList[S$.$_get](arcIndex);
              let domainValue = details.domain;
              let arcKey = series.id + "__" + dart.str(domainValue);
              let animatingArc = iterable_extensions['IterableExtension|firstWhereOrNull'](AnimatedArcOfD(), arcList.arcs, dart.fn(arc => arc.key === arcKey, AnimatedArcOfDTobool()));
              arcList.center = center;
              arcList.radius = radius;
              arcList.innerRadius = innerRadius;
              arcList.series = series;
              arcList.stroke = this.config.stroke;
              arcList.strokeWidthPx = this.config.strokeWidthPx;
              if (animatingArc == null) {
                animatingArc = (t30 = new (AnimatedArcOfD()).new(arcKey, datum, domainValue), (() => {
                  t30.setNewTarget(new (ArcRendererElementOfD()).new({color: dart.nullCheck(colorFn)(arcIndex), startAngle: previousEndAngle, endAngle: previousEndAngle, index: arcIndex, series: series}));
                  return t30;
                })());
                arcList.arcs[S$.$add](animatingArc);
              } else {
                animatingArc.datum = datum;
                previousEndAngle = (t30$ = animatingArc.previousArcEndAngle, t30$ == null ? 0.0 : t30$);
              }
              animatingArc.domain = domainValue;
              this[S$._currentKeys$2][S$.$add](arcKey);
              let arcElement = new (ArcRendererElementOfD()).new({color: dart.nullCheck(colorFn)(arcIndex), startAngle: details.startAngle, endAngle: details.endAngle, index: arcIndex, series: series});
              animatingArc.setNewTarget(arcElement);
            }
          }
        }, ImmutableSeriesOfDTovoid()));
        this[S$._seriesArcMap][S$.$forEach](dart.fn((key, arcList) => {
          for (let arcIndex = 0; arcIndex < arcList.arcs[S$.$length]; arcIndex = arcIndex + 1) {
            let arc = arcList.arcs[S$.$_get](arcIndex);
            let arcStartAngle = arc.previousArcStartAngle;
            if (this[S$._currentKeys$2][S$.$contains](arc.key) !== true) {
              let targetArcAngle = 2 * 3.141592653589793 + this.config.startAngle;
              for (let nextArc of arcList.arcs[S$.$where](dart.fn(arc => this[S$._currentKeys$2][S$.$contains](arc.key), AnimatedArcOfDTobool()))) {
                let nextArcStartAngle = nextArc.newTargetArcStartAngle;
                if (dart.nullCheck(arcStartAngle) < dart.nullCheck(nextArcStartAngle) && dart.notNull(nextArcStartAngle) < dart.notNull(targetArcAngle)) {
                  targetArcAngle = nextArcStartAngle;
                }
              }
              arc.animateOut(targetArcAngle);
            }
          }
        }, StringAndAnimatedArcListOfDTovoid()));
      }
      paint(canvas, animationPercent) {
        if (animationPercent === 1.0) {
          let keysToRemove = T$.JSArrayOfString().of([]);
          this[S$._seriesArcMap][S$.$forEach](dart.fn((key, arcList) => {
            arcList.arcs[S$.$removeWhere](dart.fn(arc => arc.animatingOut, AnimatedArcOfDTobool()));
            if (arcList.arcs[S$.$isEmpty]) {
              keysToRemove[S$.$add](key);
            }
          }, StringAndAnimatedArcListOfDTovoid()));
          keysToRemove[S$.$forEach](dart.bind(this[S$._seriesArcMap], S$.$remove));
        }
        super.paint(canvas, animationPercent);
      }
      assignMissingColors(seriesList, opts) {
        IterableOfMutableSeriesOfD().as(seriesList);
        let emptyCategoryUsesSinglePalette = opts && 'emptyCategoryUsesSinglePalette' in opts ? opts.emptyCategoryUsesSinglePalette : null;
        let maxMissing = 0;
        seriesList[S$.$forEach](dart.fn(series => {
          if (series.colorFn == null) {
            maxMissing = math.max(core.int, maxMissing, series.data[S$.$length]);
          }
        }, MutableSeriesOfDTovoid()));
        if (maxMissing > 0) {
          let colorPalettes = style_factory.StyleFactory.style.getOrderedPalettes(1);
          let colorPalette = colorPalettes[S$.$_get](0).makeShades(maxMissing);
          seriesList[S$.$forEach](dart.fn(series => {
            let t30;
            t30 = series;
            t30.colorFn == null ? t30.colorFn = dart.fn(index => colorPalette[S$.$_get](dart.nullCheck(index)), T$.intNToColor()) : null;
          }, MutableSeriesOfDTovoid()));
        }
      }
      [S$._calculateInnerRadius](radius) {
        if (this.config.arcRatio != null) {
          return math.max(core.double, radius - radius * dart.nullCheck(this.config.arcRatio), 0.0)[S$.$toDouble]();
        } else if (this.config.arcWidth != null) {
          return math.max(core.double, radius - dart.nullCheck(this.config.arcWidth), 0.0)[S$.$toDouble]();
        } else {
          return 0.0;
        }
      }
      getArcLists(opts) {
        let seriesId = opts && 'seriesId' in opts ? opts.seriesId : null;
        if (seriesId == null) {
          return this[S$._seriesArcMap][S$.$values][S$.$toList]();
        }
        let arcList = this[S$._seriesArcMap][S$.$_get](seriesId);
        if (arcList == null) return JSArrayOfAnimatedArcListOfD().of([]);
        return JSArrayOfAnimatedArcListOfD().of([arcList]);
      }
    }
    (ArcRenderer._internal = function(opts) {
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      this[S$._seriesArcMap] = new (IdentityMapOfString$AnimatedArcListOfD()).new();
      this[S$._currentKeys$2] = T$.JSArrayOfString().of([]);
      this[S$.config$3] = config;
      this[S$.arcRendererDecorators$1] = config.arcRendererDecorators;
      ArcRenderer.__proto__.new.call(this, {config: config, rendererId: rendererId});
      ;
    }).prototype = ArcRenderer.prototype;
    dart.addTypeTests(ArcRenderer);
    ArcRenderer.prototype[_is_ArcRenderer_default] = true;
    dart.addTypeCaches(ArcRenderer);
    dart.setMethodSignature(ArcRenderer, () => ({
      __proto__: dart.getMethods(ArcRenderer.__proto__),
      update: dart.fnType(dart.void, [dart.nullable(core.Object), core.bool]),
      [S$._calculateInnerRadius]: dart.fnType(core.double, [core.double]),
      getArcLists: dart.fnType(core.List$(arc_renderer_element.AnimatedArcList$(D)), [], {seriesId: dart.nullable(core.String)}, {})
    }));
    dart.setLibraryUri(ArcRenderer, I[43]);
    dart.setFieldSignature(ArcRenderer, () => ({
      __proto__: dart.getFields(ArcRenderer.__proto__),
      config: dart.finalFieldType(arc_renderer_config.ArcRendererConfig$(D)),
      arcRendererDecorators: dart.finalFieldType(core.List$(arc_renderer_decorator.ArcRendererDecorator$(D))),
      [S$._seriesArcMap]: dart.finalFieldType(collection.LinkedHashMap$(core.String, arc_renderer_element.AnimatedArcList$(D))),
      [S$._currentKeys$2]: dart.finalFieldType(core.List$(core.String))
    }));
    return ArcRenderer;
  });
  arc_renderer.ArcRenderer = arc_renderer.ArcRenderer$();
  dart.addTypeTests(arc_renderer.ArcRenderer, _is_ArcRenderer_default);
  dart.defineLazy(arc_renderer, {
    /*arc_renderer.arcElementsKey*/get arcElementsKey() {
      return C[29] || CT.C29;
    }
  }, false);
  const _is_ArcRendererConfig_default = Symbol('_is_ArcRendererConfig_default');
  arc_renderer_config.ArcRendererConfig$ = dart.generic(D => {
    var ArcRendererOfD = () => (ArcRendererOfD = dart.constFn(arc_renderer.ArcRenderer$(D)))();
    class ArcRendererConfig extends base_arc_renderer_config.BaseArcRendererConfig$(D) {
      build() {
        return ArcRendererOfD().new({config: this, rendererId: this.customRendererId});
      }
    }
    (ArcRendererConfig.new = function(opts) {
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let arcLength = opts && 'arcLength' in opts ? opts.arcLength : 6.283185307179586;
      let arcRendererDecorators = opts && 'arcRendererDecorators' in opts ? opts.arcRendererDecorators : C[25] || CT.C25;
      let arcRatio = opts && 'arcRatio' in opts ? opts.arcRatio : null;
      let arcWidth = opts && 'arcWidth' in opts ? opts.arcWidth : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 10;
      let minHoleWidthForCenterContent = opts && 'minHoleWidthForCenterContent' in opts ? opts.minHoleWidthForCenterContent : 30;
      let startAngle = opts && 'startAngle' in opts ? opts.startAngle : -1.5707963267948966;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 2;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      ArcRendererConfig.__proto__.new.call(this, {customRendererId: customRendererId, arcLength: arcLength, arcRatio: arcRatio, arcWidth: arcWidth, layoutPaintOrder: layoutPaintOrder, minHoleWidthForCenterContent: minHoleWidthForCenterContent, startAngle: startAngle, strokeWidthPx: strokeWidthPx, arcRendererDecorators: arcRendererDecorators});
      ;
    }).prototype = ArcRendererConfig.prototype;
    dart.addTypeTests(ArcRendererConfig);
    ArcRendererConfig.prototype[_is_ArcRendererConfig_default] = true;
    dart.addTypeCaches(ArcRendererConfig);
    dart.setMethodSignature(ArcRendererConfig, () => ({
      __proto__: dart.getMethods(ArcRendererConfig.__proto__),
      build: dart.fnType(arc_renderer.ArcRenderer$(D), [])
    }));
    dart.setLibraryUri(ArcRendererConfig, I[44]);
    return ArcRendererConfig;
  });
  arc_renderer_config.ArcRendererConfig = arc_renderer_config.ArcRendererConfig$();
  dart.addTypeTests(arc_renderer_config.ArcRendererConfig, _is_ArcRendererConfig_default);
  dart.defineLazy(base_arc_renderer, {
    /*base_arc_renderer.arcElementsKey*/get arcElementsKey() {
      return C[29] || CT.C29;
    }
  }, false);
  const _is_ArcRendererElementList_default = Symbol('_is_ArcRendererElementList_default');
  arc_renderer_element.ArcRendererElementList$ = dart.generic(D => {
    class ArcRendererElementList extends core.Object {
      get arcs() {
        return this[S$.arcs];
      }
      set arcs(value) {
        super.arcs = value;
      }
      get center() {
        return this[S$.center];
      }
      set center(value) {
        super.center = value;
      }
      get innerRadius() {
        return this[S$.innerRadius];
      }
      set innerRadius(value) {
        super.innerRadius = value;
      }
      get radius() {
        return this[S$.radius];
      }
      set radius(value) {
        super.radius = value;
      }
      get startAngle() {
        return this[S$.startAngle$1];
      }
      set startAngle(value) {
        super.startAngle = value;
      }
      get stroke() {
        return this[S$.stroke$1];
      }
      set stroke(value) {
        super.stroke = value;
      }
      get strokeWidthPx() {
        return this[S$.strokeWidthPx$6];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
    }
    (ArcRendererElementList.new = function(opts) {
      let arcs = opts && 'arcs' in opts ? opts.arcs : null;
      let center = opts && 'center' in opts ? opts.center : null;
      let innerRadius = opts && 'innerRadius' in opts ? opts.innerRadius : null;
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let startAngle = opts && 'startAngle' in opts ? opts.startAngle : null;
      let stroke = opts && 'stroke' in opts ? opts.stroke : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      this[S$.arcs] = arcs;
      this[S$.center] = center;
      this[S$.innerRadius] = innerRadius;
      this[S$.radius] = radius;
      this[S$.startAngle$1] = startAngle;
      this[S$.stroke$1] = stroke;
      this[S$.strokeWidthPx$6] = strokeWidthPx;
      ;
    }).prototype = ArcRendererElementList.prototype;
    dart.addTypeTests(ArcRendererElementList);
    ArcRendererElementList.prototype[_is_ArcRendererElementList_default] = true;
    dart.addTypeCaches(ArcRendererElementList);
    dart.setLibraryUri(ArcRendererElementList, I[45]);
    dart.setFieldSignature(ArcRendererElementList, () => ({
      __proto__: dart.getFields(ArcRendererElementList.__proto__),
      arcs: dart.finalFieldType(core.List$(arc_renderer_element.ArcRendererElement$(D))),
      center: dart.finalFieldType(math.Point$(core.double)),
      innerRadius: dart.finalFieldType(core.double),
      radius: dart.finalFieldType(core.double),
      startAngle: dart.finalFieldType(core.double),
      stroke: dart.finalFieldType(dart.nullable(color$.Color)),
      strokeWidthPx: dart.finalFieldType(dart.nullable(core.double))
    }));
    return ArcRendererElementList;
  });
  arc_renderer_element.ArcRendererElementList = arc_renderer_element.ArcRendererElementList$();
  dart.addTypeTests(arc_renderer_element.ArcRendererElementList, _is_ArcRendererElementList_default);
  const _is_ArcRendererElement_default = Symbol('_is_ArcRendererElement_default');
  arc_renderer_element.ArcRendererElement$ = dart.generic(D => {
    var DN = () => (DN = dart.constFn(dart.nullable(D)))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ArcRendererElementOfD = () => (ArcRendererElementOfD = dart.constFn(arc_renderer_element.ArcRendererElement$(D)))();
    class ArcRendererElement extends core.Object {
      get startAngle() {
        return this[S$.startAngle$2];
      }
      set startAngle(value) {
        this[S$.startAngle$2] = value;
      }
      get endAngle() {
        return this[S$.endAngle];
      }
      set endAngle(value) {
        this[S$.endAngle] = value;
      }
      get color() {
        return this[S$.color$2];
      }
      set color(value) {
        this[S$.color$2] = value;
      }
      get index() {
        return this[S$.index$2];
      }
      set index(value) {
        this[S$.index$2] = value;
      }
      get key() {
        return this[S$.key$1];
      }
      set key(value) {
        this[S$.key$1] = value;
      }
      get domain() {
        return this[S$.domain$2];
      }
      set domain(value) {
        this[S$.domain$2] = DN().as(value);
      }
      get series() {
        return this[S$.series$2];
      }
      set series(value) {
        this[S$.series$2] = ImmutableSeriesOfD().as(value);
      }
      clone() {
        return new (ArcRendererElementOfD()).new({startAngle: this.startAngle, endAngle: this.endAngle, color: this.color == null ? null : new color$.Color.fromOther({color: dart.nullCheck(this.color)}), index: this.index, key: this.key, series: this.series});
      }
      updateAnimationPercent(previous, target, animationPercent) {
        ArcRendererElementOfD().as(previous);
        ArcRendererElementOfD().as(target);
        this.startAngle = (target.startAngle - previous.startAngle) * animationPercent + previous.startAngle;
        this.endAngle = (target.endAngle - previous.endAngle) * animationPercent + previous.endAngle;
        this.color = chart_canvas.getAnimatedColor(dart.nullCheck(previous.color), dart.nullCheck(target.color), animationPercent);
      }
    }
    (ArcRendererElement.new = function(opts) {
      let startAngle = opts && 'startAngle' in opts ? opts.startAngle : null;
      let endAngle = opts && 'endAngle' in opts ? opts.endAngle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let series = opts && 'series' in opts ? opts.series : null;
      this[S$.startAngle$2] = startAngle;
      this[S$.endAngle] = endAngle;
      this[S$.color$2] = color;
      this[S$.index$2] = index;
      this[S$.key$1] = key;
      this[S$.domain$2] = domain;
      this[S$.series$2] = series;
      ;
    }).prototype = ArcRendererElement.prototype;
    dart.addTypeTests(ArcRendererElement);
    ArcRendererElement.prototype[_is_ArcRendererElement_default] = true;
    dart.addTypeCaches(ArcRendererElement);
    dart.setMethodSignature(ArcRendererElement, () => ({
      __proto__: dart.getMethods(ArcRendererElement.__proto__),
      clone: dart.fnType(arc_renderer_element.ArcRendererElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object), core.double])
    }));
    dart.setLibraryUri(ArcRendererElement, I[45]);
    dart.setFieldSignature(ArcRendererElement, () => ({
      __proto__: dart.getFields(ArcRendererElement.__proto__),
      startAngle: dart.fieldType(core.double),
      endAngle: dart.fieldType(core.double),
      color: dart.fieldType(dart.nullable(color$.Color)),
      index: dart.fieldType(dart.nullable(core.int)),
      key: dart.fieldType(dart.nullable(core.num)),
      domain: dart.fieldType(dart.nullable(D)),
      series: dart.fieldType(processed_series.ImmutableSeries$(D))
    }));
    return ArcRendererElement;
  });
  arc_renderer_element.ArcRendererElement = arc_renderer_element.ArcRendererElement$();
  dart.addTypeTests(arc_renderer_element.ArcRendererElement, _is_ArcRendererElement_default);
  const _is_AnimatedArcList_default = Symbol('_is_AnimatedArcList_default');
  arc_renderer_element.AnimatedArcList$ = dart.generic(D => {
    var AnimatedArcOfD = () => (AnimatedArcOfD = dart.constFn(arc_renderer_element.AnimatedArc$(D)))();
    var JSArrayOfAnimatedArcOfD = () => (JSArrayOfAnimatedArcOfD = dart.constFn(_interceptors.JSArray$(AnimatedArcOfD())))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ImmutableSeriesNOfD = () => (ImmutableSeriesNOfD = dart.constFn(dart.nullable(ImmutableSeriesOfD())))();
    class AnimatedArcList extends core.Object {
      get arcs() {
        return this[S$.arcs$1];
      }
      set arcs(value) {
        super.arcs = value;
      }
      get center() {
        return this[S$.center$1];
      }
      set center(value) {
        this[S$.center$1] = value;
      }
      get innerRadius() {
        return this[S$.innerRadius$1];
      }
      set innerRadius(value) {
        this[S$.innerRadius$1] = value;
      }
      get radius() {
        return this[S$.radius$1];
      }
      set radius(value) {
        this[S$.radius$1] = value;
      }
      get series() {
        return this[S$.series$3];
      }
      set series(value) {
        this[S$.series$3] = ImmutableSeriesNOfD().as(value);
      }
      get stroke() {
        return this[S$.stroke$2];
      }
      set stroke(value) {
        this[S$.stroke$2] = value;
      }
      get strokeWidthPx() {
        return this[S$.strokeWidthPx$7];
      }
      set strokeWidthPx(value) {
        this[S$.strokeWidthPx$7] = value;
      }
    }
    (AnimatedArcList.new = function() {
      this[S$.arcs$1] = JSArrayOfAnimatedArcOfD().of([]);
      this[S$.center$1] = null;
      this[S$.innerRadius$1] = null;
      this[S$.radius$1] = null;
      this[S$.series$3] = null;
      this[S$.stroke$2] = null;
      this[S$.strokeWidthPx$7] = null;
      ;
    }).prototype = AnimatedArcList.prototype;
    dart.addTypeTests(AnimatedArcList);
    AnimatedArcList.prototype[_is_AnimatedArcList_default] = true;
    dart.addTypeCaches(AnimatedArcList);
    dart.setLibraryUri(AnimatedArcList, I[45]);
    dart.setFieldSignature(AnimatedArcList, () => ({
      __proto__: dart.getFields(AnimatedArcList.__proto__),
      arcs: dart.finalFieldType(core.List$(arc_renderer_element.AnimatedArc$(D))),
      center: dart.fieldType(dart.nullable(math.Point$(core.double))),
      innerRadius: dart.fieldType(dart.nullable(core.double)),
      radius: dart.fieldType(dart.nullable(core.double)),
      series: dart.fieldType(dart.nullable(processed_series.ImmutableSeries$(D))),
      stroke: dart.fieldType(dart.nullable(color$.Color)),
      strokeWidthPx: dart.fieldType(dart.nullable(core.double))
    }));
    return AnimatedArcList;
  });
  arc_renderer_element.AnimatedArcList = arc_renderer_element.AnimatedArcList$();
  dart.addTypeTests(arc_renderer_element.AnimatedArcList, _is_AnimatedArcList_default);
  const _is_AnimatedArc_default = Symbol('_is_AnimatedArc_default');
  arc_renderer_element.AnimatedArc$ = dart.generic(D => {
    var DN = () => (DN = dart.constFn(dart.nullable(D)))();
    var ArcRendererElementOfD = () => (ArcRendererElementOfD = dart.constFn(arc_renderer_element.ArcRendererElement$(D)))();
    class AnimatedArc extends core.Object {
      get key() {
        return this[S$.key$2];
      }
      set key(value) {
        super.key = value;
      }
      get datum() {
        return this[S$.datum$1];
      }
      set datum(value) {
        this[S$.datum$1] = value;
      }
      get domain() {
        return this[S$.domain$3];
      }
      set domain(value) {
        this[S$.domain$3] = DN().as(value);
      }
      get animatingOut() {
        return this[S$.animatingOut$1];
      }
      set animatingOut(value) {
        this[S$.animatingOut$1] = value;
      }
      get [S$._targetArc]() {
        let t30;
        t30 = this[S$.__AnimatedArc__targetArc];
        return t30 == null ? dart.throw(new _internal.LateError.fieldNI("_targetArc")) : t30;
      }
      set [S$._targetArc](t30) {
        this[S$.__AnimatedArc__targetArc] = t30;
      }
      animateOut(endAngle) {
        let newTarget = dart.nullCheck(this[S$._currentArc]).clone();
        newTarget.startAngle = endAngle;
        newTarget.endAngle = endAngle;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        ArcRendererElementOfD().as(newTarget);
        this.animatingOut = false;
        this[S$._currentArc] == null ? this[S$._currentArc] = newTarget.clone() : null;
        this[S$._previousArc] = dart.nullCheck(this[S$._currentArc]).clone();
        this[S$._targetArc] = newTarget;
      }
      getCurrentArc(animationPercent) {
        if (animationPercent === 1.0 || this[S$._previousArc] == null) {
          this[S$._currentArc] = this[S$._targetArc];
          this[S$._previousArc] = this[S$._targetArc];
          return dart.nullCheck(this[S$._currentArc]);
        }
        dart.nullCheck(this[S$._currentArc]).updateAnimationPercent(dart.nullCheck(this[S$._previousArc]), this[S$._targetArc], animationPercent);
        return dart.nullCheck(this[S$._currentArc]);
      }
      get newTargetArcStartAngle() {
        return this[S$._targetArc].startAngle;
      }
      get currentArcEndAngle() {
        let t31;
        t31 = this[S$._currentArc];
        return t31 == null ? null : t31.endAngle;
      }
      get currentArcStartAngle() {
        let t31;
        t31 = this[S$._currentArc];
        return t31 == null ? null : t31.startAngle;
      }
      get previousArcEndAngle() {
        let t31;
        t31 = this[S$._previousArc];
        return t31 == null ? null : t31.endAngle;
      }
      get previousArcStartAngle() {
        let t31;
        t31 = this[S$._previousArc];
        return t31 == null ? null : t31.startAngle;
      }
    }
    (AnimatedArc.new = function(key, datum, domain) {
      this[S$._previousArc] = null;
      this[S$.__AnimatedArc__targetArc] = null;
      this[S$._currentArc] = null;
      this[S$.animatingOut$1] = false;
      this[S$.key$2] = key;
      this[S$.datum$1] = datum;
      this[S$.domain$3] = domain;
      ;
    }).prototype = AnimatedArc.prototype;
    dart.addTypeTests(AnimatedArc);
    AnimatedArc.prototype[_is_AnimatedArc_default] = true;
    dart.addTypeCaches(AnimatedArc);
    dart.setMethodSignature(AnimatedArc, () => ({
      __proto__: dart.getMethods(AnimatedArc.__proto__),
      animateOut: dart.fnType(dart.void, [core.double]),
      setNewTarget: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      getCurrentArc: dart.fnType(arc_renderer_element.ArcRendererElement$(D), [core.double])
    }));
    dart.setGetterSignature(AnimatedArc, () => ({
      __proto__: dart.getGetters(AnimatedArc.__proto__),
      [S$._targetArc]: arc_renderer_element.ArcRendererElement$(D),
      newTargetArcStartAngle: dart.nullable(core.double),
      currentArcEndAngle: dart.nullable(core.double),
      currentArcStartAngle: dart.nullable(core.double),
      previousArcEndAngle: dart.nullable(core.double),
      previousArcStartAngle: dart.nullable(core.double)
    }));
    dart.setSetterSignature(AnimatedArc, () => ({
      __proto__: dart.getSetters(AnimatedArc.__proto__),
      [S$._targetArc]: arc_renderer_element.ArcRendererElement$(D)
    }));
    dart.setLibraryUri(AnimatedArc, I[45]);
    dart.setFieldSignature(AnimatedArc, () => ({
      __proto__: dart.getFields(AnimatedArc.__proto__),
      key: dart.finalFieldType(core.String),
      datum: dart.fieldType(dart.nullable(core.Object)),
      domain: dart.fieldType(dart.nullable(D)),
      [S$._previousArc]: dart.fieldType(dart.nullable(arc_renderer_element.ArcRendererElement$(D))),
      [S$.__AnimatedArc__targetArc]: dart.fieldType(dart.nullable(arc_renderer_element.ArcRendererElement$(D))),
      [S$._currentArc]: dart.fieldType(dart.nullable(arc_renderer_element.ArcRendererElement$(D))),
      animatingOut: dart.fieldType(core.bool)
    }));
    return AnimatedArc;
  });
  arc_renderer_element.AnimatedArc = arc_renderer_element.AnimatedArc$();
  dart.addTypeTests(arc_renderer_element.AnimatedArc, _is_AnimatedArc_default);
  const _is_SunburstArcRenderer_default = Symbol('_is_SunburstArcRenderer_default');
  sunburst_arc_renderer.SunburstArcRenderer$ = dart.generic(D => {
    var AnimatedArcListOfD = () => (AnimatedArcListOfD = dart.constFn(arc_renderer_element.AnimatedArcList$(D)))();
    var ListOfAnimatedArcListOfD = () => (ListOfAnimatedArcListOfD = dart.constFn(core.List$(AnimatedArcListOfD())))();
    var IdentityMapOfString$ListOfAnimatedArcListOfD = () => (IdentityMapOfString$ListOfAnimatedArcListOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfAnimatedArcListOfD())))();
    var TreeNodeOfD = () => (TreeNodeOfD = dart.constFn(tree.TreeNode$(D)))();
    var LinkedMapOfTreeNodeOfD$SunburstArcRendererElement = () => (LinkedMapOfTreeNodeOfD$SunburstArcRendererElement = dart.constFn(_js_helper.LinkedMap$(TreeNodeOfD(), sunburst_arc_renderer.SunburstArcRendererElement)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var SunburstArcRendererElementOfD = () => (SunburstArcRendererElementOfD = dart.constFn(sunburst_arc_renderer.SunburstArcRendererElement$(D)))();
    var JSArrayOfSunburstArcRendererElementOfD = () => (JSArrayOfSunburstArcRendererElementOfD = dart.constFn(_interceptors.JSArray$(SunburstArcRendererElementOfD())))();
    var TreeNodeOfDTovoid = () => (TreeNodeOfDTovoid = dart.constFn(dart.fnType(dart.void, [TreeNodeOfD()])))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    var ListOfSunburstArcRendererElementOfD = () => (ListOfSunburstArcRendererElementOfD = dart.constFn(core.List$(SunburstArcRendererElementOfD())))();
    var JSArrayOfAnimatedArcListOfD = () => (JSArrayOfAnimatedArcListOfD = dart.constFn(_interceptors.JSArray$(AnimatedArcListOfD())))();
    var VoidToListOfAnimatedArcListOfD = () => (VoidToListOfAnimatedArcListOfD = dart.constFn(dart.fnType(ListOfAnimatedArcListOfD(), [])))();
    var AnimatedArcOfD = () => (AnimatedArcOfD = dart.constFn(arc_renderer_element.AnimatedArc$(D)))();
    var AnimatedArcOfDTobool = () => (AnimatedArcOfDTobool = dart.constFn(dart.fnType(core.bool, [AnimatedArcOfD()])))();
    var TreeNodeOfDTobool = () => (TreeNodeOfDTobool = dart.constFn(dart.fnType(core.bool, [TreeNodeOfD()])))();
    var DN = () => (DN = dart.constFn(dart.nullable(D)))();
    var ImmutableSeriesOfDTovoid = () => (ImmutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [ImmutableSeriesOfD()])))();
    var StringAndListOfAnimatedArcListOfDTovoid = () => (StringAndListOfAnimatedArcListOfDTovoid = dart.constFn(dart.fnType(dart.void, [core.String, ListOfAnimatedArcListOfD()])))();
    var IterableOfMutableSeriesOfD = () => (IterableOfMutableSeriesOfD = dart.constFn(core.Iterable$(MutableSeriesOfD())))();
    class SunburstArcRenderer extends base_arc_renderer.BaseArcRenderer$(D) {
      get config() {
        return this[S$.config$5];
      }
      set config(value) {
        super.config = value;
      }
      get arcRendererDecorators() {
        return this[S$.arcRendererDecorators$3];
      }
      set arcRendererDecorators(value) {
        super.arcRendererDecorators = value;
      }
      static new(opts) {
        let t31, t31$;
        let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
        let config = opts && 'config' in opts ? opts.config : null;
        return new (sunburst_arc_renderer.SunburstArcRenderer$(D))._internal({rendererId: (t31 = rendererId, t31 == null ? "sunburst" : t31), config: (t31$ = config, t31$ == null ? new (sunburst_arc_renderer_config.SunburstArcRendererConfig$(D)).new() : t31$)});
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        this[S$._nodeToArcRenderElementMap][S$.$clear]();
        seriesList[S$.$forEach](dart.fn(series => {
          let elements = JSArrayOfSunburstArcRendererElementOfD().of([]);
          let domainFn = series.domainFn;
          let measureFn = series.measureFn;
          let seriesMeasureTotal = 0.0;
          for (let i = 0; i < series.data[S$.$length]; i = i + 1) {
            let node = T$.TreeNodeOfObject().as(series.data[S$.$_get](i));
            let measure = measureFn(i);
            if (node.depth === 1 && measure != null) {
              seriesMeasureTotal = seriesMeasureTotal + dart.notNull(measure);
            }
          }
          let startAngle = this.config.startAngle;
          let arcLength = this.config.arcLength;
          let totalAngle = 0.0;
          let measures = T$.JSArrayOfnum().of([]);
          if (series.data[S$.$isEmpty]) {
            let angle = arcLength === 2 * 3.141592653589793 ? arcLength * 0.999999 : arcLength;
            let endAngle = startAngle + angle;
            let details = new (SunburstArcRendererElementOfD()).new({startAngle: startAngle, endAngle: endAngle, index: 0, key: 0, series: series});
            elements[S$.$add](details);
          } else {
            let root = TreeNodeOfD().as(series.data[S$.$first]);
            root.visit(dart.fn(node => {
              elements[S$.$addAll](this[S$._createArcRenderElementForNode](series, node));
            }, TreeNodeOfDTovoid()));
          }
          series.setAttr(T$.ListOfSunburstArcRendererElementOfObjectN(), sunburst_arc_renderer.arcElementsKey, elements);
        }, MutableSeriesOfDTovoid()));
      }
      [S$._createArcRenderElementForNode](series, node) {
        let t32, t31, t32$, t31$, t32$0, t31$0;
        let elements = JSArrayOfSunburstArcRendererElementOfD().of([]);
        let children = node.children;
        if (children[S$.$isNotEmpty]) {
          let childrenMeasureTotal = 0.0;
          for (let i = 0; i < children[S$.$length]; i = i + 1) {
            let child = children[S$.$elementAt](i);
            let measure = (t31 = series, t32 = series.data[S$.$indexOf](child), t31.measureFn(t32));
            if (measure != null) {
              childrenMeasureTotal = childrenMeasureTotal + dart.notNull(measure);
            }
          }
          let startAngle = this[S$._getParentStartAngle](node);
          for (let i = 0; i < children[S$.$length]; i = i + 1) {
            let child = children[S$.$elementAt](i);
            let arcIndex = series.data[S$.$indexOf](child);
            let measure = (t31$ = series, t32$ = arcIndex, t31$.measureFn(t32$));
            let domain = (t31$0 = series, t32$0 = arcIndex, t31$0.domainFn(t32$0));
            if (measure == null) {
              continue;
            }
            let percentOfLevel = dart.notNull(measure) / childrenMeasureTotal;
            let angle = this[S$._getParentArcLength](node) * percentOfLevel;
            let endAngle = startAngle + angle;
            let details = new (SunburstArcRendererElementOfD()).new({arcLength: angle, startAngle: startAngle, endAngle: endAngle, index: arcIndex, key: arcIndex, domain: domain, series: series});
            this[S$._nodeToArcRenderElementMap][S$.$_set](child, details);
            elements[S$.$add](details);
            startAngle = endAngle;
          }
        }
        return elements;
      }
      [S$._getParentArcLength](parent) {
        let t31;
        return (t31 = this[S$._nodeToArcRenderElementMap][S$.$_get](parent), t31 == null ? null : t31.arcLength) != null ? dart.nullCheck(dart.nullCheck(this[S$._nodeToArcRenderElementMap][S$.$_get](parent)).arcLength) : this.config.arcLength;
      }
      [S$._getParentStartAngle](parent) {
        return this[S$._nodeToArcRenderElementMap][S$.$_get](parent) != null ? dart.nullCheck(this[S$._nodeToArcRenderElementMap][S$.$_get](parent)).startAngle : this.config.startAngle;
      }
      update(seriesList, isAnimatingThisDraw) {
        ListOfImmutableSeriesOfD().as(seriesList);
        this[S$._currentKeys$3][S$.$clear]();
        let bounds = dart.nullCheck(this.chart).drawAreaBounds;
        let center = new (T$.PointOfdouble()).new((bounds[S$.$left] + bounds[S$.$width] / 2)[S$.$toDouble](), (bounds[S$.$top] + bounds[S$.$height] / 2)[S$.$toDouble]());
        let radius = bounds[S$.$height] < bounds[S$.$width] ? (bounds[S$.$height] / 2)[S$.$toDouble]() : (bounds[S$.$width] / 2)[S$.$toDouble]();
        if (this.config.arcRatio != null) {
          if (dart.nullCheck(this.config.arcRatio) < 0 || dart.nullCheck(this.config.arcRatio) > 1) {
            dart.throw(new core.ArgumentError.new("arcRatio must be between 0 and 1"));
          }
        }
        seriesList[S$.$forEach](dart.fn(series => {
          let t31, t31$;
          let colorFn = series.colorFn;
          let arcListKey = series.id;
          let elementsList = ListOfSunburstArcRendererElementOfD().as(series.getAttr(T$.ListOfSunburstArcRendererElementOfObject(), sunburst_arc_renderer.arcElementsKey));
          let arcLists = this[S$._seriesArcMap$1][S$.$putIfAbsent](arcListKey, dart.fn(() => JSArrayOfAnimatedArcListOfD().of([]), VoidToListOfAnimatedArcListOfD()));
          if (series.data[S$.$isEmpty]) {
            let arcList = new (AnimatedArcListOfD()).new();
            this[S$._seriesArcMap$1][S$.$putIfAbsent](arcListKey, dart.fn(() => JSArrayOfAnimatedArcListOfD().of([arcList]), VoidToListOfAnimatedArcListOfD()));
            let innerRadius = this[S$._calculateRadii](radius)[S$.$first];
            let details = elementsList[S$.$_get](0);
            let arcKey = "__no_data__";
            let animatingArc = iterable_extensions['IterableExtension|firstWhereOrNull'](AnimatedArcOfD(), arcList.arcs, dart.fn(arc => arc.key === arcKey, AnimatedArcOfDTobool()));
            arcList.center = center;
            arcList.radius = radius;
            arcList.innerRadius = innerRadius;
            arcList.series = series;
            arcList.stroke = this.config.noDataColor;
            arcList.strokeWidthPx = 0.0;
            if (animatingArc == null) {
              animatingArc = new (AnimatedArcOfD()).new(arcKey, null, null);
              arcList.arcs[S$.$add](animatingArc);
            } else {
              animatingArc.datum = null;
              animatingArc.domain = null;
            }
            this[S$._currentKeys$3][S$.$add](arcKey);
            let arcElement = new (SunburstArcRendererElementOfD()).new({startAngle: details.startAngle, endAngle: details.endAngle, color: this.config.noDataColor, series: series});
            animatingArc.setNewTarget(arcElement);
            arcLists[S$.$add](arcList);
          } else {
            let previousEndAngle = this.config.startAngle;
            let root = T$.TreeNodeOfObject().as(series.data[S$.$first]);
            let maxDepth = 0;
            root.visit(dart.fn(node => {
              maxDepth = math.max(core.int, maxDepth, node.depth);
            }, T$.TreeNodeOfObjectTovoid()));
            let maxDisplayLevel = math.min(core.int, maxDepth, this.config.maxDisplayLevel);
            let displayLevel = math.min(core.int, maxDepth, this.config.initialDisplayLevel);
            for (let i = 0; i < maxDisplayLevel; i = i + 1) {
              let arcList = arcLists[S$.$length] > i ? arcLists[S$.$_get](i) : new (AnimatedArcListOfD()).new();
              for (let node of this[S$._nodeToArcRenderElementMap][S$.$keys][S$.$where](dart.fn(e => e.depth === i + 1 && (e.depth <= displayLevel || this[S$._nodeToExpand].contains(e)), TreeNodeOfDTobool()))) {
                let radii = this[S$._calculateRadii](radius, maxDisplayLevel, i + 1);
                let innerRadius = radii[S$.$first];
                let outerRadius = radii[S$.$last];
                let arcIndex = series.data[S$.$indexOf](node);
                let datum = core.Object.as(series.data[S$.$_get](arcIndex));
                let details = this[S$._nodeToArcRenderElementMap][S$.$_get](node);
                let domainValue = dart.nullCheck(details).domain;
                let isLeaf = !node.hasChildren || (node.depth === displayLevel || this[S$._nodeToExpand].contains(node)) && !this[S$._nodeToExpand][S$.$any](dart.fn(e => node.children[S$.$contains](e), T$.TreeNodeTobool()));
                let isOuterMostRing = node.depth === maxDisplayLevel;
                let arcKey = series.id + "__" + dart.toString(domainValue);
                let animatingArc = iterable_extensions['IterableExtension|firstWhereOrNull'](AnimatedArcOfD(), arcList.arcs, dart.fn(arc => arc.key === arcKey, AnimatedArcOfDTobool()));
                arcList.center = center;
                arcList.radius = outerRadius;
                arcList.innerRadius = innerRadius;
                arcList.series = series;
                arcList.stroke = this.config.stroke;
                arcList.strokeWidthPx = this.config.strokeWidthPx;
                if (animatingArc == null) {
                  animatingArc = (t31 = new (AnimatedArcOfD()).new(arcKey, datum, DN().as(domainValue)), (() => {
                    t31.setNewTarget(new (SunburstArcRendererElementOfD()).new({color: dart.nullCheck(colorFn)(arcIndex), startAngle: previousEndAngle, endAngle: previousEndAngle, index: arcIndex, series: series, isLeaf: isLeaf, isOuterMostRing: isOuterMostRing}));
                    return t31;
                  })());
                  arcList.arcs[S$.$add](animatingArc);
                } else {
                  animatingArc.datum = datum;
                  previousEndAngle = (t31$ = animatingArc.previousArcEndAngle, t31$ == null ? 0.0 : t31$);
                }
                animatingArc.domain = DN().as(domainValue);
                this[S$._currentKeys$3][S$.$add](arcKey);
                let arcElement = new (SunburstArcRendererElementOfD()).new({color: dart.nullCheck(colorFn)(arcIndex), startAngle: details.startAngle, endAngle: details.endAngle, index: arcIndex, series: series, isLeaf: isLeaf, isOuterMostRing: isOuterMostRing});
                animatingArc.setNewTarget(arcElement);
              }
              if (arcLists[S$.$length] <= i && arcList.arcs[S$.$isNotEmpty]) {
                arcLists[S$.$add](arcList);
              }
            }
          }
        }, ImmutableSeriesOfDTovoid()));
        this[S$._seriesArcMap$1][S$.$forEach](dart.fn((key, arcLists) => {
          for (let arcList of arcLists) {
            for (let arcIndex = 0; arcIndex < arcList.arcs[S$.$length]; arcIndex = arcIndex + 1) {
              let arc = arcList.arcs[S$.$_get](arcIndex);
              let arcStartAngle = arc.previousArcStartAngle;
              if (this[S$._currentKeys$3][S$.$contains](arc.key) !== true) {
                let targetArcAngle = 2 * 3.141592653589793 + this.config.startAngle;
                for (let nextArc of arcList.arcs[S$.$where](dart.fn(arc => this[S$._currentKeys$3][S$.$contains](arc.key), AnimatedArcOfDTobool()))) {
                  let nextArcStartAngle = nextArc.newTargetArcStartAngle;
                  if (dart.nullCheck(arcStartAngle) < dart.nullCheck(nextArcStartAngle) && dart.notNull(nextArcStartAngle) < dart.notNull(targetArcAngle)) {
                    targetArcAngle = nextArcStartAngle;
                  }
                }
                arc.animateOut(targetArcAngle);
              }
            }
          }
        }, StringAndListOfAnimatedArcListOfDTovoid()));
      }
      paint(canvas, animationPercent) {
        if (animationPercent === 1.0) {
          let keysToRemove = T$.JSArrayOfString().of([]);
          this[S$._seriesArcMap$1][S$.$forEach](dart.fn((key, arcLists) => {
            let arcListToRemove = JSArrayOfAnimatedArcListOfD().of([]);
            for (let arcList of arcLists) {
              arcList.arcs[S$.$removeWhere](dart.fn(arc => arc.animatingOut, AnimatedArcOfDTobool()));
              if (arcList.arcs[S$.$isEmpty]) {
                arcListToRemove[S$.$add](arcList);
              }
            }
            arcListToRemove[S$.$forEach](dart.bind(arcLists, S$.$remove));
            if (arcLists[S$.$isEmpty]) {
              keysToRemove[S$.$add](key);
            }
          }, StringAndListOfAnimatedArcListOfDTovoid()));
          keysToRemove[S$.$forEach](dart.bind(this[S$._seriesArcMap$1], S$.$remove));
        }
        super.paint(canvas, animationPercent);
      }
      [S$._isNodeDisplayed](node) {
        return node != null && (node.depth <= this.config.initialDisplayLevel || this[S$._nodeToExpand].contains(node));
      }
      expandNode(node) {
        TreeNodeOfD().as(node);
        if (node === null) {
          this[S$._nodeToExpand].clear();
        } else if (node.hasChildren) {
          if (node.children[S$.$any](dart.fn(e => this[S$._nodeToExpand].contains(e), TreeNodeOfDTobool()))) {
            node.visit(dart.fn(e => {
              if (!node[S$.$_equals](e)) {
                this[S$._nodeToExpand].remove(e);
              }
            }, TreeNodeOfDTovoid()));
          } else {
            this[S$._nodeToExpand].add(node);
            this[S$._nodeToExpand].addAll(node.children);
          }
        }
      }
      assignMissingColors(seriesList, opts) {
        IterableOfMutableSeriesOfD().as(seriesList);
        let emptyCategoryUsesSinglePalette = opts && 'emptyCategoryUsesSinglePalette' in opts ? opts.emptyCategoryUsesSinglePalette : null;
        seriesList[S$.$forEach](dart.fn(series => {
          let t31;
          if (series.colorFn == null) {
            let root = TreeNodeOfD().as(series.data[S$.$first]);
            let firstLevelChildren = TreeNodeOfD().as(series.data[S$.$first]).children;
            let colorPalettes = style_factory.StyleFactory.style.getOrderedPalettes(root.children[S$.$length]);
            let nodeToColorMap = new _js_helper.LinkedMap.new();
            if (this.config.colorAssignmentStrategy === sunburst_arc_renderer_config.SunburstColorStrategy.newShadePerArc) {
              for (let i = 0; i < firstLevelChildren[S$.$length]; i = i + 1) {
                let numOfNodeInSubTree = 0;
                firstLevelChildren[S$.$elementAt](i).visit(dart.fn(node => {
                  numOfNodeInSubTree = numOfNodeInSubTree + 1;
                }, TreeNodeOfDTovoid()));
                let colorList = colorPalettes[S$.$_get](i).makeShades(numOfNodeInSubTree);
                numOfNodeInSubTree = 0;
                firstLevelChildren[S$.$elementAt](i).visit(dart.fn(node => {
                  nodeToColorMap[S$.$_set](node, colorList[S$.$_get](numOfNodeInSubTree));
                  numOfNodeInSubTree = numOfNodeInSubTree + 1;
                }, TreeNodeOfDTovoid()));
              }
            } else {
              let depthOfTree = 0;
              root.visit(dart.fn(node => {
                depthOfTree = math.max(core.int, depthOfTree, node.depth);
              }, TreeNodeOfDTovoid()));
              for (let i = 0; i < firstLevelChildren[S$.$length]; i = i + 1) {
                let colorList = colorPalettes[S$.$_get](i).makeShades(depthOfTree);
                firstLevelChildren[S$.$elementAt](i).visit(dart.fn(node => {
                  nodeToColorMap[S$.$_set](node, colorList[S$.$_get](node.depth - 1));
                }, TreeNodeOfDTovoid()));
              }
            }
            t31 = series;
            t31.colorFn == null ? t31.colorFn = dart.fn(index => {
              let t32;
              return color$.Color.as((t32 = nodeToColorMap[S$.$_get](series.data[S$.$_get](dart.nullCheck(index))), t32 == null ? color$.Color.black : t32));
            }, T$.intNToColor()) : null;
          }
        }, MutableSeriesOfDTovoid()));
      }
      [S$._calculateRadii](radius, maxDisplayLevel = 1, currentLevel = 1) {
        let baseInnerRadius = null;
        if (this.config.arcRatio != null) {
          baseInnerRadius = math.max(core.double, radius - radius * dart.nullCheck(this.config.arcRatio), 0.0)[S$.$toDouble]();
        } else if (this.config.arcWidth != null) {
          baseInnerRadius = math.max(core.double, radius - dart.nullCheck(this.config.arcWidth), 0.0)[S$.$toDouble]();
        } else {
          baseInnerRadius = 0.0;
        }
        if (this.config.arcWidths != null && dart.nullCheck(this.config.arcWidths)[S$.$isNotEmpty]) {
          let arcWidths = this[S$._ensureConfigLengthCoversMaxDisplayLevel](dart.nullCheck(this.config.arcWidths), maxDisplayLevel);
          let sumOfPreviousLevelRadii = currentLevel > 1 ? arcWidths[S$.$take](currentLevel - 1)[S$.$reduce](dart.fn((a, b) => a + b, T$.intAndintToint())) : 0;
          let innerRadius = dart.dsend(baseInnerRadius, '+', [sumOfPreviousLevelRadii]);
          return T$.JSArrayOfdouble().of([core.double.as(innerRadius), core.double.as(dart.dsend(dart.dsend(innerRadius, '+', [arcWidths[S$.$_get](currentLevel - 1)]), '-', [this.config.strokeWidthPx]))]);
        } else {
          let totalRadius = radius - core.num.as(baseInnerRadius);
          let radiusDenom = null;
          let sumOfPreviousLevelRadiiFactor = null;
          let currentLevelRadiusFactor = null;
          if (this.config.arcRatios != null && dart.nullCheck(this.config.arcRatios)[S$.$isNotEmpty]) {
            let arcRatios = this[S$._ensureConfigLengthCoversMaxDisplayLevel](dart.nullCheck(this.config.arcRatios), maxDisplayLevel);
            radiusDenom = arcRatios[S$.$reduce](dart.fn((a, b) => a + b, T$.intAndintToint()));
            sumOfPreviousLevelRadiiFactor = currentLevel > 1 ? arcRatios[S$.$take](currentLevel - 1)[S$.$reduce](dart.fn((a, b) => a + b, T$.intAndintToint())) : 0;
            currentLevelRadiusFactor = arcRatios[S$.$_get](currentLevel - 1);
          } else {
            radiusDenom = maxDisplayLevel;
            sumOfPreviousLevelRadiiFactor = currentLevel - 1;
            currentLevelRadiusFactor = 1;
          }
          let innerRadius = dart.dsend(baseInnerRadius, '+', [totalRadius * core.num.as(sumOfPreviousLevelRadiiFactor) / core.num.as(radiusDenom)]);
          let outerRadius = dart.dsend(dart.dsend(baseInnerRadius, '+', [totalRadius * core.num.as(dart.dsend(sumOfPreviousLevelRadiiFactor, '+', [currentLevelRadiusFactor])) / core.num.as(radiusDenom)]), '-', [this.config.strokeWidthPx]);
          return T$.JSArrayOfdouble().of([core.double.as(innerRadius), core.double.as(outerRadius)]);
        }
      }
      getArcLists(opts) {
        let seriesId = opts && 'seriesId' in opts ? opts.seriesId : null;
        if (seriesId == null) {
          return this[S$._seriesArcMap$1][S$.$values][S$.$first];
        }
        let arcList = this[S$._seriesArcMap$1][S$.$_get](seriesId);
        if (arcList == null) return JSArrayOfAnimatedArcListOfD().of([]);
        return arcList;
      }
      [S$._ensureConfigLengthCoversMaxDisplayLevel](configParam, maxDisplayLevel) {
        let arcWidths = null;
        if (configParam[S$.$length] < maxDisplayLevel) {
          arcWidths = T$.ListOfint().generate(maxDisplayLevel, dart.fn(i => configParam[S$.$length] > i ? configParam[S$.$_get](i) : configParam[S$.$last], T$.intToint()));
        } else {
          arcWidths = T$.ListOfint().from(configParam);
        }
        return arcWidths;
      }
    }
    (SunburstArcRenderer._internal = function(opts) {
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      this[S$._seriesArcMap$1] = new (IdentityMapOfString$ListOfAnimatedArcListOfD()).new();
      this[S$._nodeToArcRenderElementMap] = new (LinkedMapOfTreeNodeOfD$SunburstArcRendererElement()).new();
      this[S$._currentKeys$3] = T$.JSArrayOfString().of([]);
      this[S$._nodeToExpand] = new (T$._HashSetOfTreeNode()).new();
      this[S$.config$5] = config;
      this[S$.arcRendererDecorators$3] = config.arcRendererDecorators;
      SunburstArcRenderer.__proto__.new.call(this, {rendererId: rendererId, config: config});
      ;
    }).prototype = SunburstArcRenderer.prototype;
    dart.addTypeTests(SunburstArcRenderer);
    SunburstArcRenderer.prototype[_is_SunburstArcRenderer_default] = true;
    dart.addTypeCaches(SunburstArcRenderer);
    dart.setMethodSignature(SunburstArcRenderer, () => ({
      __proto__: dart.getMethods(SunburstArcRenderer.__proto__),
      [S$._createArcRenderElementForNode]: dart.fnType(core.List$(sunburst_arc_renderer.SunburstArcRendererElement$(D)), [processed_series.MutableSeries$(D), tree.TreeNode$(D)]),
      [S$._getParentArcLength]: dart.fnType(core.double, [tree.TreeNode$(D)]),
      [S$._getParentStartAngle]: dart.fnType(core.double, [tree.TreeNode$(D)]),
      update: dart.fnType(dart.void, [dart.nullable(core.Object), core.bool]),
      [S$._isNodeDisplayed]: dart.fnType(core.bool, [dart.nullable(tree.TreeNode$(D))]),
      expandNode: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$._calculateRadii]: dart.fnType(core.List$(core.double), [core.double], [core.int, core.int]),
      getArcLists: dart.fnType(core.List$(arc_renderer_element.AnimatedArcList$(D)), [], {seriesId: dart.nullable(core.String)}, {}),
      [S$._ensureConfigLengthCoversMaxDisplayLevel]: dart.fnType(core.List$(core.int), [core.List$(core.int), core.int])
    }));
    dart.setLibraryUri(SunburstArcRenderer, I[46]);
    dart.setFieldSignature(SunburstArcRenderer, () => ({
      __proto__: dart.getFields(SunburstArcRenderer.__proto__),
      config: dart.finalFieldType(sunburst_arc_renderer_config.SunburstArcRendererConfig$(D)),
      arcRendererDecorators: dart.finalFieldType(core.List$(arc_renderer_decorator.ArcRendererDecorator$(D))),
      [S$._seriesArcMap$1]: dart.finalFieldType(collection.LinkedHashMap$(core.String, core.List$(arc_renderer_element.AnimatedArcList$(D)))),
      [S$._nodeToArcRenderElementMap]: dart.finalFieldType(collection.LinkedHashMap$(tree.TreeNode$(D), sunburst_arc_renderer.SunburstArcRendererElement)),
      [S$._currentKeys$3]: dart.finalFieldType(core.List$(core.String)),
      [S$._nodeToExpand]: dart.finalFieldType(collection.HashSet$(tree.TreeNode))
    }));
    return SunburstArcRenderer;
  });
  sunburst_arc_renderer.SunburstArcRenderer = sunburst_arc_renderer.SunburstArcRenderer$();
  dart.addTypeTests(sunburst_arc_renderer.SunburstArcRenderer, _is_SunburstArcRenderer_default);
  const _is_SunburstArcRendererElement_default = Symbol('_is_SunburstArcRendererElement_default');
  sunburst_arc_renderer.SunburstArcRendererElement$ = dart.generic(D => {
    var SunburstArcRendererElementOfD = () => (SunburstArcRendererElementOfD = dart.constFn(sunburst_arc_renderer.SunburstArcRendererElement$(D)))();
    class SunburstArcRendererElement extends arc_renderer_element.ArcRendererElement$(D) {
      get arcLength() {
        return this[S$.arcLength$1];
      }
      set arcLength(value) {
        this[S$.arcLength$1] = value;
      }
      get isLeaf() {
        return this[S$.isLeaf$1];
      }
      set isLeaf(value) {
        this[S$.isLeaf$1] = value;
      }
      get isOuterMostRing() {
        return this[S$.isOuterMostRing];
      }
      set isOuterMostRing(value) {
        this[S$.isOuterMostRing] = value;
      }
      clone() {
        return new (SunburstArcRendererElementOfD()).new({arcLength: this.arcLength, startAngle: this.startAngle, endAngle: this.endAngle, color: this.color == null ? null : new color$.Color.fromOther({color: dart.nullCheck(this.color)}), index: this.index, key: this.key, series: this.series, isLeaf: this.isLeaf, isOuterMostRing: this.isOuterMostRing});
      }
    }
    (SunburstArcRendererElement.new = function(opts) {
      let startAngle = opts && 'startAngle' in opts ? opts.startAngle : null;
      let endAngle = opts && 'endAngle' in opts ? opts.endAngle : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let arcLength = opts && 'arcLength' in opts ? opts.arcLength : null;
      let isLeaf = opts && 'isLeaf' in opts ? opts.isLeaf : null;
      let isOuterMostRing = opts && 'isOuterMostRing' in opts ? opts.isOuterMostRing : null;
      this[S$.arcLength$1] = arcLength;
      this[S$.isLeaf$1] = isLeaf;
      this[S$.isOuterMostRing] = isOuterMostRing;
      SunburstArcRendererElement.__proto__.new.call(this, {startAngle: startAngle, endAngle: endAngle, series: series, color: color, index: index, key: key, domain: domain});
      ;
    }).prototype = SunburstArcRendererElement.prototype;
    dart.addTypeTests(SunburstArcRendererElement);
    SunburstArcRendererElement.prototype[_is_SunburstArcRendererElement_default] = true;
    dart.addTypeCaches(SunburstArcRendererElement);
    dart.setMethodSignature(SunburstArcRendererElement, () => ({
      __proto__: dart.getMethods(SunburstArcRendererElement.__proto__),
      clone: dart.fnType(sunburst_arc_renderer.SunburstArcRendererElement$(D), [])
    }));
    dart.setLibraryUri(SunburstArcRendererElement, I[46]);
    dart.setFieldSignature(SunburstArcRendererElement, () => ({
      __proto__: dart.getFields(SunburstArcRendererElement.__proto__),
      arcLength: dart.fieldType(dart.nullable(core.double)),
      isLeaf: dart.fieldType(dart.nullable(core.bool)),
      isOuterMostRing: dart.fieldType(dart.nullable(core.bool))
    }));
    return SunburstArcRendererElement;
  });
  sunburst_arc_renderer.SunburstArcRendererElement = sunburst_arc_renderer.SunburstArcRendererElement$();
  dart.addTypeTests(sunburst_arc_renderer.SunburstArcRendererElement, _is_SunburstArcRendererElement_default);
  dart.defineLazy(sunburst_arc_renderer, {
    /*sunburst_arc_renderer.arcElementsKey*/get arcElementsKey() {
      return C[30] || CT.C30;
    }
  }, false);
  const _is_Tree_default = Symbol('_is_Tree_default');
  tree.Tree$ = dart.generic((T, D) => {
    var TreeNodeOfT = () => (TreeNodeOfT = dart.constFn(tree.TreeNode$(T)))();
    var JSArrayOfTreeNodeOfT = () => (JSArrayOfTreeNodeOfT = dart.constFn(_interceptors.JSArray$(TreeNodeOfT())))();
    var SeriesOfTreeNodeOfT$D = () => (SeriesOfTreeNodeOfT$D = dart.constFn(series$.Series$(TreeNodeOfT(), D)))();
    class Tree extends core.Object {
      get id() {
        return this[S$.id$1];
      }
      set id(value) {
        super.id = value;
      }
      get root() {
        return this[S$.root];
      }
      set root(value) {
        super.root = value;
      }
      get domainFn() {
        return this[S$.domainFn];
      }
      set domainFn(value) {
        super.domainFn = value;
      }
      get measureFn() {
        return this[S$.measureFn];
      }
      set measureFn(value) {
        super.measureFn = value;
      }
      get colorFn() {
        return this[S$.colorFn];
      }
      set colorFn(value) {
        super.colorFn = value;
      }
      get fillColorFn() {
        return this[S$.fillColorFn];
      }
      set fillColorFn(value) {
        super.fillColorFn = value;
      }
      get patternColorFn() {
        return this[S$.patternColorFn];
      }
      set patternColorFn(value) {
        super.patternColorFn = value;
      }
      get fillPatternFn() {
        return this[S$.fillPatternFn];
      }
      set fillPatternFn(value) {
        super.fillPatternFn = value;
      }
      get strokeWidthPxFn() {
        return this[S$.strokeWidthPxFn];
      }
      set strokeWidthPxFn(value) {
        super.strokeWidthPxFn = value;
      }
      get labelFn() {
        return this[S$.labelFn];
      }
      set labelFn(value) {
        super.labelFn = value;
      }
      get labelStyleFn() {
        return this[S$.labelStyleFn];
      }
      set labelStyleFn(value) {
        super.labelStyleFn = value;
      }
      get attributes() {
        return this[S$.attributes];
      }
      set attributes(value) {
        super.attributes = value;
      }
      static new(opts) {
        let id = opts && 'id' in opts ? opts.id : null;
        let root = opts && 'root' in opts ? opts.root : null;
        let domainFn = opts && 'domainFn' in opts ? opts.domainFn : null;
        let measureFn = opts && 'measureFn' in opts ? opts.measureFn : null;
        let colorFn = opts && 'colorFn' in opts ? opts.colorFn : null;
        let fillColorFn = opts && 'fillColorFn' in opts ? opts.fillColorFn : null;
        let patternColorFn = opts && 'patternColorFn' in opts ? opts.patternColorFn : null;
        let fillPatternFn = opts && 'fillPatternFn' in opts ? opts.fillPatternFn : null;
        let strokeWidthPxFn = opts && 'strokeWidthPxFn' in opts ? opts.strokeWidthPxFn : null;
        let labelFn = opts && 'labelFn' in opts ? opts.labelFn : null;
        let labelStyleFn = opts && 'labelStyleFn' in opts ? opts.labelStyleFn : null;
        return new (tree.Tree$(T, D)).__({id: id, root: root, domainFn: dart.nullCheck(tree._castFrom(T, D, domainFn)), measureFn: dart.nullCheck(tree._castFrom(T, T$.numN(), measureFn)), colorFn: tree._castFrom(T, color$.Color, colorFn), fillColorFn: tree._castFrom(T, color$.Color, fillColorFn), fillPatternFn: tree._castFrom(T, chart_canvas.FillPatternType, fillPatternFn), patternColorFn: tree._castFrom(T, color$.Color, patternColorFn), strokeWidthPxFn: tree._castFrom(T, core.num, strokeWidthPxFn), labelFn: tree._castFrom(T, core.String, labelFn), labelStyleFn: tree._castFrom(T, axis_spec.TextStyleSpec, labelStyleFn)});
      }
      toSeries() {
        let t31;
        let data = JSArrayOfTreeNodeOfT().of([]);
        this.root.visit(dart.bind(data, S$.$add));
        t31 = SeriesOfTreeNodeOfT$D().new({id: this.id, data: data, domainFn: this.domainFn, measureFn: this.measureFn, colorFn: this.colorFn, fillColorFn: this.fillColorFn, fillPatternFn: this.fillPatternFn, patternColorFn: this.patternColorFn, strokeWidthPxFn: this.strokeWidthPxFn, labelAccessorFn: this.labelFn, insideLabelStyleAccessorFn: this.labelStyleFn});
        return (() => {
          t31.attributes.mergeFrom(this.attributes);
          return t31;
        })();
      }
      setAttribute(R, key, value) {
        this.attributes.setAttr(R, key, value);
      }
      getAttribute(R, key) {
        return this.attributes.getAttr(R, key);
      }
    }
    (Tree.__ = function(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let root = opts && 'root' in opts ? opts.root : null;
      let domainFn = opts && 'domainFn' in opts ? opts.domainFn : null;
      let measureFn = opts && 'measureFn' in opts ? opts.measureFn : null;
      let colorFn = opts && 'colorFn' in opts ? opts.colorFn : null;
      let fillColorFn = opts && 'fillColorFn' in opts ? opts.fillColorFn : null;
      let fillPatternFn = opts && 'fillPatternFn' in opts ? opts.fillPatternFn : null;
      let patternColorFn = opts && 'patternColorFn' in opts ? opts.patternColorFn : null;
      let strokeWidthPxFn = opts && 'strokeWidthPxFn' in opts ? opts.strokeWidthPxFn : null;
      let labelFn = opts && 'labelFn' in opts ? opts.labelFn : null;
      let labelStyleFn = opts && 'labelStyleFn' in opts ? opts.labelStyleFn : null;
      this[S$.attributes] = new tree.TreeAttributes.new();
      this[S$.id$1] = id;
      this[S$.root] = root;
      this[S$.domainFn] = domainFn;
      this[S$.measureFn] = measureFn;
      this[S$.colorFn] = colorFn;
      this[S$.fillColorFn] = fillColorFn;
      this[S$.fillPatternFn] = fillPatternFn;
      this[S$.patternColorFn] = patternColorFn;
      this[S$.strokeWidthPxFn] = strokeWidthPxFn;
      this[S$.labelFn] = labelFn;
      this[S$.labelStyleFn] = labelStyleFn;
      ;
    }).prototype = Tree.prototype;
    dart.addTypeTests(Tree);
    Tree.prototype[_is_Tree_default] = true;
    dart.addTypeCaches(Tree);
    dart.setMethodSignature(Tree, () => ({
      __proto__: dart.getMethods(Tree.__proto__),
      toSeries: dart.fnType(series$.Series$(tree.TreeNode$(T), D), []),
      setAttribute: dart.gFnType(R => [dart.void, [series$.AttributeKey$(R), R]], R => [dart.nullable(core.Object)]),
      getAttribute: dart.gFnType(R => [dart.nullable(R), [series$.AttributeKey$(R)]], R => [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(Tree, I[47]);
    dart.setFieldSignature(Tree, () => ({
      __proto__: dart.getFields(Tree.__proto__),
      id: dart.finalFieldType(core.String),
      root: dart.finalFieldType(tree.TreeNode$(T)),
      domainFn: dart.finalFieldType(dart.fnType(D, [tree.TreeNode$(T), dart.nullable(core.int)])),
      measureFn: dart.finalFieldType(dart.fnType(dart.nullable(core.num), [tree.TreeNode$(T), dart.nullable(core.int)])),
      colorFn: dart.finalFieldType(dart.nullable(dart.fnType(color$.Color, [tree.TreeNode$(T), dart.nullable(core.int)]))),
      fillColorFn: dart.finalFieldType(dart.nullable(dart.fnType(color$.Color, [tree.TreeNode$(T), dart.nullable(core.int)]))),
      patternColorFn: dart.finalFieldType(dart.nullable(dart.fnType(color$.Color, [tree.TreeNode$(T), dart.nullable(core.int)]))),
      fillPatternFn: dart.finalFieldType(dart.nullable(dart.fnType(chart_canvas.FillPatternType, [tree.TreeNode$(T), dart.nullable(core.int)]))),
      strokeWidthPxFn: dart.finalFieldType(dart.nullable(dart.fnType(core.num, [tree.TreeNode$(T), dart.nullable(core.int)]))),
      labelFn: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [tree.TreeNode$(T), dart.nullable(core.int)]))),
      labelStyleFn: dart.finalFieldType(dart.nullable(dart.fnType(axis_spec.TextStyleSpec, [tree.TreeNode$(T), dart.nullable(core.int)]))),
      attributes: dart.finalFieldType(tree.TreeAttributes)
    }));
    return Tree;
  });
  tree.Tree = tree.Tree$();
  dart.addTypeTests(tree.Tree, _is_Tree_default);
  const _is_TreeNode_default = Symbol('_is_TreeNode_default');
  tree.TreeNode$ = dart.generic(T => {
    var TreeNodeOfT = () => (TreeNodeOfT = dart.constFn(tree.TreeNode$(T)))();
    var JSArrayOfTreeNodeOfT = () => (JSArrayOfTreeNodeOfT = dart.constFn(_interceptors.JSArray$(TreeNodeOfT())))();
    var TreeNodeNOfT = () => (TreeNodeNOfT = dart.constFn(dart.nullable(TreeNodeOfT())))();
    var TreeNodeOfTTovoid = () => (TreeNodeOfTTovoid = dart.constFn(dart.fnType(dart.void, [TreeNodeOfT()])))();
    var IterableOfTreeNodeOfT = () => (IterableOfTreeNodeOfT = dart.constFn(core.Iterable$(TreeNodeOfT())))();
    var ListQueueOfTreeNodeOfT = () => (ListQueueOfTreeNodeOfT = dart.constFn(collection.ListQueue$(TreeNodeOfT())))();
    class TreeNode extends core.Object {
      get data() {
        return this[S$.data];
      }
      set data(value) {
        super.data = value;
      }
      get parent() {
        return this[S$.parent];
      }
      set parent(value) {
        this[S$.parent] = TreeNodeNOfT().as(value);
      }
      get depth() {
        return this[S$._depth];
      }
      set depth(val) {
        this[S$._depth] = val;
      }
      get children() {
        return this[S$._children];
      }
      get hasChildren() {
        return this[S$._children][S$.$isNotEmpty];
      }
      addChild(child) {
        TreeNodeOfT().as(child);
        child.parent = this;
        let delta = this.depth - child.depth + 1;
        if (delta !== 0) child.visit(dart.fn(node => {
          let t31;
          t31 = node;
          return t31.depth = t31.depth + delta;
        }, TreeNodeOfTTovoid()));
        this[S$._children][S$.$add](child);
      }
      addChildren(newChildren) {
        IterableOfTreeNodeOfT().as(newChildren);
        newChildren[S$.$forEach](dart.bind(this, 'addChild'));
      }
      visit(f) {
        let t31;
        let queue = (t31 = new (ListQueueOfTreeNodeOfT()).new(), (() => {
          t31.add(this);
          return t31;
        })());
        while (queue[S$.$isNotEmpty]) {
          let node = queue.removeFirst();
          f(node);
          queue.addAll(node.children);
        }
      }
    }
    (TreeNode.new = function(data) {
      this[S$._children] = JSArrayOfTreeNodeOfT().of([]);
      this[S$._depth] = 0;
      this[S$.parent] = null;
      this[S$.data] = data;
      ;
    }).prototype = TreeNode.prototype;
    dart.addTypeTests(TreeNode);
    TreeNode.prototype[_is_TreeNode_default] = true;
    dart.addTypeCaches(TreeNode);
    dart.setMethodSignature(TreeNode, () => ({
      __proto__: dart.getMethods(TreeNode.__proto__),
      addChild: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addChildren: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      visit: dart.fnType(dart.void, [dart.fnType(dart.void, [tree.TreeNode$(T)])])
    }));
    dart.setGetterSignature(TreeNode, () => ({
      __proto__: dart.getGetters(TreeNode.__proto__),
      depth: core.int,
      children: core.Iterable$(tree.TreeNode$(T)),
      hasChildren: core.bool
    }));
    dart.setSetterSignature(TreeNode, () => ({
      __proto__: dart.getSetters(TreeNode.__proto__),
      depth: core.int
    }));
    dart.setLibraryUri(TreeNode, I[47]);
    dart.setFieldSignature(TreeNode, () => ({
      __proto__: dart.getFields(TreeNode.__proto__),
      data: dart.finalFieldType(T),
      [S$._children]: dart.finalFieldType(core.List$(tree.TreeNode$(T))),
      [S$._depth]: dart.fieldType(core.int),
      parent: dart.fieldType(dart.nullable(tree.TreeNode$(T)))
    }));
    return TreeNode;
  });
  tree.TreeNode = tree.TreeNode$();
  dart.addTypeTests(tree.TreeNode, _is_TreeNode_default);
  tree.TreeAttributes = class TreeAttributes extends typed_registry.TypedRegistry {};
  (tree.TreeAttributes.new = function() {
    tree.TreeAttributes.__proto__.new.call(this);
    ;
  }).prototype = tree.TreeAttributes.prototype;
  dart.addTypeTests(tree.TreeAttributes);
  dart.addTypeCaches(tree.TreeAttributes);
  dart.setLibraryUri(tree.TreeAttributes, I[47]);
  tree._castFrom = function _castFrom(T, R, f) {
    return f == null ? null : dart.fn((node, index) => f(node.data, index), dart.fnType(R, [tree.TreeNode$(T), T$.intN()]));
  };
  const _is_SunburstChart_default = Symbol('_is_SunburstChart_default');
  sunburst_chart.SunburstChart$ = dart.generic(D => {
    var SunburstArcRendererOfD = () => (SunburstArcRendererOfD = dart.constFn(sunburst_arc_renderer.SunburstArcRenderer$(D)))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    var TreeNodeOfD = () => (TreeNodeOfD = dart.constFn(tree.TreeNode$(D)))();
    class SunburstChart extends base_chart.BaseChart$(D) {
      makeDefaultRenderer() {
        let t31;
        t31 = SunburstArcRendererOfD().new();
        return (() => {
          t31.rendererId = "default";
          return t31;
        })();
      }
      getDatumDetails(type) {
        let entries = JSArrayOfDatumDetailsOfD().of([]);
        for (let seriesDatum of this.getSelectionModel(type).selectedDatum) {
          let rendererId = seriesDatum.series.getAttr(core.String, series_renderer.rendererIdKey);
          let renderer = this.getSeriesRenderer(rendererId);
          if (!SunburstArcRendererOfD().is(renderer)) dart.assertFailed(null, I[48], 45, 14, "renderer is SunburstArcRenderer<D>");
          let details = SunburstArcRendererOfD().as(renderer).getExpandedDatumDetails(seriesDatum);
          if (details !== null) {
            entries[S$.$add](details);
          }
        }
        return entries;
      }
      get centerContentBounds() {
        if (!SunburstArcRendererOfD().is(this.defaultRenderer)) dart.assertFailed(null, I[48], 59, 12, "defaultRenderer is SunburstArcRenderer<D>");
        return SunburstArcRendererOfD().as(this.defaultRenderer).centerContentBounds;
      }
      expandNode(node) {
        TreeNodeOfD().as(node);
        if (!SunburstArcRendererOfD().is(this.defaultRenderer)) dart.assertFailed(null, I[48], 64, 12, "defaultRenderer is SunburstArcRenderer<D>");
        SunburstArcRendererOfD().as(this.defaultRenderer).expandNode(node);
      }
    }
    (SunburstChart.new = function(opts) {
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      SunburstChart.__proto__.new.call(this, {layoutConfig: layoutConfig});
      ;
    }).prototype = SunburstChart.prototype;
    dart.addTypeTests(SunburstChart);
    SunburstChart.prototype[_is_SunburstChart_default] = true;
    dart.addTypeCaches(SunburstChart);
    dart.setMethodSignature(SunburstChart, () => ({
      __proto__: dart.getMethods(SunburstChart.__proto__),
      makeDefaultRenderer: dart.fnType(series_renderer.SeriesRenderer$(D), []),
      getDatumDetails: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [selection_model.SelectionModelType]),
      expandNode: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(SunburstChart, () => ({
      __proto__: dart.getGetters(SunburstChart.__proto__),
      centerContentBounds: dart.nullable(math.Rectangle$(core.int))
    }));
    dart.setLibraryUri(SunburstChart, I[49]);
    return SunburstChart;
  });
  sunburst_chart.SunburstChart = sunburst_chart.SunburstChart$();
  dart.addTypeTests(sunburst_chart.SunburstChart, _is_SunburstChart_default);
  const _is_SunburstRingExpander_default = Symbol('_is_SunburstRingExpander_default');
  sunburst_ring_expander.SunburstRingExpander$ = dart.generic(D => {
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var TreeNodeOfD = () => (TreeNodeOfD = dart.constFn(tree.TreeNode$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var SunburstChartOfD = () => (SunburstChartOfD = dart.constFn(sunburst_chart.SunburstChart$(D)))();
    class SunburstRingExpander extends core.Object {
      get selectionModelType() {
        return this[S$.selectionModelType];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get [S$._chart$6]() {
        let t31;
        t31 = this[S$.__SunburstRingExpander__chart];
        return t31 == null ? dart.throw(new _internal.LateError.fieldNI("_chart")) : t31;
      }
      set [S$._chart$6](t31) {
        this[S$.__SunburstRingExpander__chart] = t31;
      }
      [S$._selectionChanged](selectionModel) {
        SelectionModelOfD().as(selectionModel);
        if (selectionModel.selectedDatum[S$.$isNotEmpty]) {
          this[S$._chart$6].expandNode(TreeNodeOfD().as(selectionModel.selectedDatum[S$.$first].datum));
          this[S$._chart$6].redraw({skipLayout: true, skipAnimation: true});
        }
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        if (!sunburst_chart.SunburstChart.is(chart)) {
          dart.throw(new core.ArgumentError.new("SunburstRingExpander can only be attached to a Sunburst chart"));
        }
        this[S$._chart$6] = SunburstChartOfD().as(chart);
        chart.getSelectionModel(this.selectionModelType).addSelectionUpdatedListener(dart.bind(this, S$._selectionChanged));
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.getSelectionModel(this.selectionModelType).addSelectionUpdatedListener(dart.bind(this, S$._selectionChanged));
      }
      get role() {
        return "sunburstRingExpander-" + dart.str(this.selectionModelType);
      }
    }
    (SunburstRingExpander.new = function(selectionModelType = C[31] || CT.C31) {
      this[S$.__SunburstRingExpander__chart] = null;
      this[S$.selectionModelType] = selectionModelType;
      ;
    }).prototype = SunburstRingExpander.prototype;
    dart.addTypeTests(SunburstRingExpander);
    SunburstRingExpander.prototype[_is_SunburstRingExpander_default] = true;
    dart.addTypeCaches(SunburstRingExpander);
    SunburstRingExpander[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(SunburstRingExpander, () => ({
      __proto__: dart.getMethods(SunburstRingExpander.__proto__),
      [S$._selectionChanged]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(SunburstRingExpander, () => ({
      __proto__: dart.getGetters(SunburstRingExpander.__proto__),
      [S$._chart$6]: sunburst_chart.SunburstChart$(D),
      role: core.String
    }));
    dart.setSetterSignature(SunburstRingExpander, () => ({
      __proto__: dart.getSetters(SunburstRingExpander.__proto__),
      [S$._chart$6]: sunburst_chart.SunburstChart$(D)
    }));
    dart.setLibraryUri(SunburstRingExpander, I[50]);
    dart.setFieldSignature(SunburstRingExpander, () => ({
      __proto__: dart.getFields(SunburstRingExpander.__proto__),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      [S$.__SunburstRingExpander__chart]: dart.fieldType(dart.nullable(sunburst_chart.SunburstChart$(D)))
    }));
    return SunburstRingExpander;
  });
  sunburst_ring_expander.SunburstRingExpander = sunburst_ring_expander.SunburstRingExpander$();
  dart.addTypeTests(sunburst_ring_expander.SunburstRingExpander, _is_SunburstRingExpander_default);
  const _is_SlidingViewport_default = Symbol('_is_SlidingViewport_default');
  sliding_viewport.SlidingViewport$ = dart.generic(D => {
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    class SlidingViewport extends core.Object {
      get selectionModelType() {
        return this[S$.selectionModelType$1];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get [S$._chart$7]() {
        let t32;
        t32 = this[S$.__SlidingViewport__chart];
        return t32 == null ? dart.throw(new _internal.LateError.fieldNI("_chart")) : t32;
      }
      set [S$._chart$7](t32) {
        this[S$.__SlidingViewport__chart] = t32;
      }
      [S$._selectionChanged$1](selectionModel) {
        let t34, t33;
        SelectionModelOfD().as(selectionModel);
        if (selectionModel.hasAnySelection === false) {
          return;
        }
        let domainAxis = dart.nullCheck(this[S$._chart$7].domainAxis);
        let selectedDatum = selectionModel.selectedDatum[S$.$first];
        let domainLocation = dart.nullCheck(domainAxis.getLocation((t33 = selectedDatum.series, t34 = selectedDatum.index, t33.domainFn(t34))));
        let viewportCenter = dart.nullCheck(domainAxis.range).start + dart.nullCheck(domainAxis.range).width / 2;
        let translatePx = domainAxis.viewportTranslatePx + (viewportCenter - domainLocation);
        domainAxis.setViewportSettings(domainAxis.viewportScalingFactor, translatePx);
        this[S$._chart$7].redraw();
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        if (!cartesian_chart.CartesianChart.is(chart)) dart.assertFailed(null, I[51], 59, 12, "chart is CartesianChart");
        this[S$._chart$7] = CartesianChartOfD().as(chart);
        chart.getSelectionModel(this.selectionModelType).addSelectionChangedListener(dart.bind(this, S$._selectionChanged$1));
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.getSelectionModel(this.selectionModelType).removeSelectionChangedListener(dart.bind(this, S$._selectionChanged$1));
      }
      get role() {
        return "slidingViewport-" + dart.str(this.selectionModelType);
      }
    }
    (SlidingViewport.new = function(selectionModelType = C[32] || CT.C32) {
      this[S$.__SlidingViewport__chart] = null;
      this[S$.selectionModelType$1] = selectionModelType;
      ;
    }).prototype = SlidingViewport.prototype;
    dart.addTypeTests(SlidingViewport);
    SlidingViewport.prototype[_is_SlidingViewport_default] = true;
    dart.addTypeCaches(SlidingViewport);
    SlidingViewport[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(SlidingViewport, () => ({
      __proto__: dart.getMethods(SlidingViewport.__proto__),
      [S$._selectionChanged$1]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(SlidingViewport, () => ({
      __proto__: dart.getGetters(SlidingViewport.__proto__),
      [S$._chart$7]: cartesian_chart.CartesianChart$(D),
      role: core.String
    }));
    dart.setSetterSignature(SlidingViewport, () => ({
      __proto__: dart.getSetters(SlidingViewport.__proto__),
      [S$._chart$7]: cartesian_chart.CartesianChart$(D)
    }));
    dart.setLibraryUri(SlidingViewport, I[52]);
    dart.setFieldSignature(SlidingViewport, () => ({
      __proto__: dart.getFields(SlidingViewport.__proto__),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      [S$.__SlidingViewport__chart]: dart.fieldType(dart.nullable(cartesian_chart.CartesianChart$(D)))
    }));
    return SlidingViewport;
  });
  sliding_viewport.SlidingViewport = sliding_viewport.SlidingViewport$();
  dart.addTypeTests(sliding_viewport.SlidingViewport, _is_SlidingViewport_default);
  const _is_Slider_default = Symbol('_is_Slider_default');
  slider.Slider$ = dart.generic(D => {
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var SliderEventListenerOfD = () => (SliderEventListenerOfD = dart.constFn(slider.SliderEventListener$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var _AnimatedSliderOfD = () => (_AnimatedSliderOfD = dart.constFn(slider._AnimatedSlider$(D)))();
    var _SliderElementOfD = () => (_SliderElementOfD = dart.constFn(slider._SliderElement$(D)))();
    var DN = () => (DN = dart.constFn(dart.nullable(D)))();
    var PointOfintAndDNAndString__Tovoid = () => (PointOfintAndDNAndString__Tovoid = dart.constFn(dart.fnType(dart.void, [T$.PointOfint(), DN(), core.String, slider.SliderListenerDragState])))();
    var PointOfintAndDNAndString__ToNvoid = () => (PointOfintAndDNAndString__ToNvoid = dart.constFn(dart.nullable(PointOfintAndDNAndString__Tovoid())))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    var _SliderLayoutViewOfD = () => (_SliderLayoutViewOfD = dart.constFn(slider._SliderLayoutView$(D)))();
    class Slider extends core.Object {
      get layoutPaintOrder() {
        return this[S$.layoutPaintOrder$4];
      }
      set layoutPaintOrder(value) {
        this[S$.layoutPaintOrder$4] = value;
      }
      get eventTrigger() {
        return this[S$.eventTrigger];
      }
      set eventTrigger(value) {
        super.eventTrigger = value;
      }
      get snapToDatum() {
        return this[S$.snapToDatum];
      }
      set snapToDatum(value) {
        super.snapToDatum = value;
      }
      get [S$._view]() {
        let t33;
        t33 = this[S$.__Slider__view];
        return t33 == null ? dart.throw(new _internal.LateError.fieldNI("_view")) : t33;
      }
      set [S$._view](t33) {
        this[S$.__Slider__view] = t33;
      }
      get [S$._gestureListener]() {
        let t34;
        t34 = this[S$.__Slider__gestureListener];
        return t34 == null ? dart.throw(new _internal.LateError.fieldNI("_gestureListener")) : t34;
      }
      set [S$._gestureListener](t34) {
        this[S$.__Slider__gestureListener] = t34;
      }
      get [S$._lifecycleListener$1]() {
        let t35;
        t35 = this[S$.__Slider__lifecycleListener];
        return t35 == null ? dart.throw(new _internal.LateError.fieldNI("_lifecycleListener")) : t35;
      }
      set [S$._lifecycleListener$1](t35) {
        this[S$.__Slider__lifecycleListener] = t35;
      }
      get [S$._sliderEventListener]() {
        let t36;
        t36 = this[S$.__Slider__sliderEventListener];
        return t36 == null ? dart.throw(new _internal.LateError.fieldNI("_sliderEventListener")) : t36;
      }
      set [S$._sliderEventListener](t36) {
        this[S$.__Slider__sliderEventListener] = t36;
      }
      [S$._onTapTest](chartPoint) {
        this[S$._delaySelect] = this.eventTrigger === selection_trigger.SelectionTrigger.longPressHold;
        this[S$._handleDrag] = this[S$._sliderContainsPoint](chartPoint);
        return this[S$._handleDrag];
      }
      [S$._onLongPressSelect](chartPoint) {
        this[S$._delaySelect] = false;
        return this[S$._onSelect](chartPoint);
      }
      [S$._onSelect](chartPoint, ignored = null) {
        if (!this[S$._handleDrag] || this[S$._delaySelect]) {
          return false;
        }
        let positionChanged = this[S$._moveSliderToPoint](chartPoint);
        if (positionChanged) {
          this[S$._dragStateToFireOnPostRender] = slider.SliderListenerDragState.drag;
          dart.nullCheck(this[S$._chart$8]).redraw({skipAnimation: true, skipLayout: true});
        }
        return true;
      }
      [S$._onDragEnd](chartPoint, __, ___) {
        if (this[S$._delaySelect]) {
          return false;
        }
        this[S$._handleDrag] = false;
        if (this.snapToDatum) {
          let details = dart.nullCheck(this[S$._chart$8]).getNearestDatumDetailPerSeries(chartPoint, true);
          if (details[S$.$isNotEmpty] && dart.nullCheck(details[S$.$_get](0).chartPosition).x != null) {
            if (!dart.equals(this[S$._domainValue], details[S$.$_get](0).domain)) {
              this[S$._moveSliderToDomain](details[S$.$_get](0).domain);
              this[S$._dragStateToFireOnPostRender] = slider.SliderListenerDragState.end;
              dart.nullCheck(this[S$._chart$8]).redraw({skipAnimation: false, skipLayout: true});
            }
          }
        } else {
          this[S$._moveSliderToPoint](chartPoint);
          this[S$._dragStateToFireOnPostRender] = slider.SliderListenerDragState.end;
          dart.nullCheck(this[S$._chart$8]).redraw({skipAnimation: true, skipLayout: true});
        }
        return false;
      }
      [S$._sliderContainsPoint](chartPoint) {
        return dart.nullCheck(this[S$._handleBounds])[S$.$containsPoint](chartPoint);
      }
      [S$._setInitialDragState](_) {
        ListOfMutableSeriesOfD().as(_);
        this[S$._dragStateToFireOnPostRender] = slider.SliderListenerDragState.initial;
      }
      [S$._updateViewData]() {
        this[S$._sliderHandle] == null ? this[S$._sliderHandle] = new (_AnimatedSliderOfD()).new() : null;
        if (this[S$._domainValue] == null) {
          let newDomainValue = dart.nullCheck(dart.nullCheck(this[S$._chart$8]).domainAxis).getDomain(this[S$._view].drawBounds[S$.$left] + this[S$._view].drawBounds[S$.$width] / 2);
          this[S$._domainValue] = typeof newDomainValue == 'number' ? D.as(newDomainValue[S$.$round]()[S$.$toDouble]()) : newDomainValue;
        }
        this[S$._moveSliderToDomain](this[S$._domainValue]);
        let _handleBounds = dart.nullCheck(this[S$._handleBounds]);
        let _domainCenterPoint = dart.nullCheck(this[S$._domainCenterPoint]);
        let element = new (_SliderElementOfD()).new({domainCenterPoint: new (T$.PointOfint()).new(_domainCenterPoint.x, _domainCenterPoint.y), buttonBounds: new (T$.RectangleOfint()).new(_handleBounds[S$.$left], _handleBounds[S$.$top], _handleBounds[S$.$width], _handleBounds[S$.$height]), fill: this[S$._style].fillColor, stroke: this[S$._style].strokeColor, strokeWidthPx: this[S$._style].strokeWidthPx});
        dart.nullCheck(this[S$._sliderHandle]).setNewTarget(element);
        this[S$._view].sliderHandle = dart.nullCheck(this[S$._sliderHandle]);
      }
      [S$._fireChangeEvent](_) {
        if (dart.wrapType(slider.SliderListenerDragState) === null || PointOfintAndDNAndString__ToNvoid().as(this[S$._sliderEventListener].onChange) == null) {
          return;
        }
        let dragState = this[S$._dragStateToFireOnPostRender];
        if (dragState === slider.SliderListenerDragState.initial && dart.equals(this[S$._previousDomainCenterPoint], this[S$._domainCenterPoint])) {
          dragState = null;
        }
        this[S$._dragStateToFireOnPostRender] = null;
        this[S$._previousDomainCenterPoint] = this[S$._domainCenterPoint];
        if (dragState == null) {
          return;
        }
        dart.nullCheck(PointOfintAndDNAndString__ToNvoid().as(this[S$._sliderEventListener].onChange))(new (T$.PointOfint()).new(dart.nullCheck(this[S$._domainCenterPoint]).x, dart.nullCheck(this[S$._domainCenterPoint]).y), this[S$._domainValue], this[S$._roleId], dragState);
      }
      [S$._moveSliderToPoint](point) {
        let positionChanged = false;
        if (this[S$._chart$8] != null) {
          let viewBounds = this[S$._view].componentBounds;
          let positionX = math$.clamp(point.x, viewBounds[S$.$left], viewBounds[S$.$right]);
          let previousYPosition = this[S$._handleBounds] == null ? 0.0 : dart.nullCheck(this[S$._handleBounds])[S$.$top] + this[S$._style].handleSize[S$.$height] / 2 - this[S$._style].handleOffset.y;
          let positionY = point.y;
          if (point.y === 0) {
            if (this[S$._handleBounds] == null) {
              positionY = viewBounds[S$.$bottom][S$.$toDouble]();
            } else {
              positionY = previousYPosition;
            }
          }
          positionY = math$.clamp(positionY, viewBounds[S$.$top], viewBounds[S$.$bottom])[S$.$toDouble]();
          let positionXChanged = this[S$._previousDomainCenterPoint] != null && positionX !== dart.nullCheck(this[S$._previousDomainCenterPoint]).x;
          let positionYChanged = this[S$._style].handlePosition === slider.SliderHandlePosition.manual && this[S$._handleBounds] != null && positionY !== previousYPosition;
          positionChanged = positionXChanged || positionYChanged;
          this[S$._domainValue] = dart.nullCheck(dart.nullCheck(this[S$._chart$8]).domainAxis).getDomain(positionX[S$.$toDouble]());
          if (this[S$._domainCenterPoint] != null) {
            this[S$._domainCenterPoint] = new (T$.PointOfint()).new(positionX[S$.$round](), dart.nullCheck(this[S$._domainCenterPoint]).y);
          } else {
            this[S$._domainCenterPoint] = new (T$.PointOfint()).new(positionX[S$.$round](), (viewBounds[S$.$top] + viewBounds[S$.$height] / 2)[S$.$round]());
          }
          let handleReferenceY = null;
          switch (this[S$._style].handlePosition) {
            case C[36] || CT.C36:
            {
              handleReferenceY = dart.nullCheck(this[S$._domainCenterPoint]).y;
              break;
            }
            case C[37] || CT.C37:
            {
              handleReferenceY = viewBounds[S$.$top];
              break;
            }
            case C[38] || CT.C38:
            {
              handleReferenceY = positionY;
              break;
            }
            default:
            {
              dart.throw(new core.ArgumentError.new("Slider does not support the handle position " + "\"" + dart.str(this[S$._style].handlePosition) + "\""));
            }
          }
          this[S$._handleBounds] = new (T$.RectangleOfint()).new((dart.nullCheck(this[S$._domainCenterPoint]).x - this[S$._style].handleSize[S$.$width] / 2 + this[S$._style].handleOffset.x)[S$.$round](), (handleReferenceY - this[S$._style].handleSize[S$.$height] / 2 + this[S$._style].handleOffset.y)[S$.$round](), this[S$._style].handleSize[S$.$width], this[S$._style].handleSize[S$.$height]);
        }
        return positionChanged;
      }
      [S$._moveSliderToDomain](domain, opts) {
        let measure = opts && 'measure' in opts ? opts.measure : null;
        let x = dart.nullCheck(dart.nullCheck(dart.nullCheck(this[S$._chart$8]).domainAxis).getLocation(domain));
        let y = measure != null ? dart.nullCheck(dart.nullCheck(this[S$._chart$8]).getMeasureAxis().getLocation(measure)) : 0.0;
        return this[S$._moveSliderToPoint](new (T$.PointOfdouble()).new(x, y));
      }
      moveSliderToDomain(domain, opts) {
        D.as(domain);
        let measure = opts && 'measure' in opts ? opts.measure : null;
        let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : true;
        if (this[S$._chart$8] == null || dart.equals(domain, this[S$._domainValue])) {
          return;
        }
        let positionChanged = this[S$._moveSliderToDomain](domain, {measure: measure});
        if (positionChanged) {
          this[S$._dragStateToFireOnPostRender] = slider.SliderListenerDragState.end;
          dart.nullCheck(this[S$._chart$8]).redraw({skipAnimation: skipAnimation, skipLayout: true});
        }
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        if (!CartesianChartOfD().is(chart)) {
          dart.throw(new core.ArgumentError.new("Slider can only be attached to a cartesian chart."));
        }
        this[S$._chart$8] = chart;
        if (!chart.vertical) dart.assertFailed(null, I[53], 524, 12, "chart.vertical");
        this[S$._view] = new (_SliderLayoutViewOfD()).new({layoutPaintOrder: this.layoutPaintOrder, handleRenderer: this[S$._handleRenderer]});
        chart.addView(this[S$._view]);
        chart.addGestureListener(this[S$._gestureListener]);
        chart.addLifecycleListener(this[S$._lifecycleListener$1]);
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.removeView(this[S$._view]);
        chart.removeGestureListener(this[S$._gestureListener]);
        chart.removeLifecycleListener(this[S$._lifecycleListener$1]);
        this[S$._chart$8] = null;
      }
      get role() {
        return "Slider-" + dart.str(this.eventTrigger) + "-" + this[S$._roleId];
      }
    }
    (Slider.new = function(opts) {
      let t33, t33$, t33$0;
      let eventTrigger = opts && 'eventTrigger' in opts ? opts.eventTrigger : C[33] || CT.C33;
      let handleRenderer = opts && 'handleRenderer' in opts ? opts.handleRenderer : null;
      let initialDomainValue = opts && 'initialDomainValue' in opts ? opts.initialDomainValue : null;
      let onChangeCallback = opts && 'onChangeCallback' in opts ? opts.onChangeCallback : null;
      let roleId = opts && 'roleId' in opts ? opts.roleId : null;
      let snapToDatum = opts && 'snapToDatum' in opts ? opts.snapToDatum : false;
      let style = opts && 'style' in opts ? opts.style : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 150;
      this[S$.__Slider__view] = null;
      this[S$.__Slider__gestureListener] = null;
      this[S$.__Slider__lifecycleListener] = null;
      this[S$.__Slider__sliderEventListener] = null;
      this[S$._chart$8] = null;
      this[S$._sliderHandle] = null;
      this[S$._delaySelect] = false;
      this[S$._handleDrag] = false;
      this[S$._domainCenterPoint] = null;
      this[S$._previousDomainCenterPoint] = null;
      this[S$._handleBounds] = null;
      this[S$._dragStateToFireOnPostRender] = null;
      this[S$.eventTrigger] = eventTrigger;
      this[S$.snapToDatum] = snapToDatum;
      this[S$.layoutPaintOrder$4] = layoutPaintOrder;
      this[S$._handleRenderer] = (t33 = handleRenderer, t33 == null ? new symbol_renderer.RectSymbolRenderer.new() : t33);
      this[S$._roleId] = (t33$ = roleId, t33$ == null ? "" : t33$);
      this[S$._style] = (t33$0 = style, t33$0 == null ? new slider.SliderStyle.new() : t33$0);
      this[S$._domainValue] = initialDomainValue;
      if (this[S$._domainValue] != null) {
        this[S$._dragStateToFireOnPostRender] = slider.SliderListenerDragState.initial;
      }
      switch (this.eventTrigger) {
        case C[33] || CT.C33:
        {
          this[S$._gestureListener] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, S$._onTapTest), onTap: dart.bind(this, S$._onSelect), onDragStart: dart.bind(this, S$._onSelect), onDragUpdate: dart.bind(this, S$._onSelect), onDragEnd: dart.bind(this, S$._onDragEnd)});
          break;
        }
        case C[34] || CT.C34:
        {
          this[S$._gestureListener] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, S$._onTapTest), onLongPress: dart.bind(this, S$._onSelect), onDragStart: dart.bind(this, S$._onSelect), onDragUpdate: dart.bind(this, S$._onSelect), onDragEnd: dart.bind(this, S$._onDragEnd)});
          break;
        }
        case C[35] || CT.C35:
        {
          this[S$._gestureListener] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, S$._onTapTest), onLongPress: dart.bind(this, S$._onLongPressSelect), onDragStart: dart.bind(this, S$._onSelect), onDragUpdate: dart.bind(this, S$._onSelect), onDragEnd: dart.bind(this, S$._onDragEnd)});
          break;
        }
        default:
        {
          dart.throw(new core.ArgumentError.new("Slider does not support the event trigger " + "\"" + dart.str(this.eventTrigger) + "\""));
        }
      }
      this[S$._lifecycleListener$1] = new (LifecycleListenerOfD()).new({onData: dart.bind(this, S$._setInitialDragState), onAxisConfigured: dart.bind(this, S$._updateViewData), onPostrender: dart.bind(this, S$._fireChangeEvent)});
      this[S$._sliderEventListener] = new (SliderEventListenerOfD()).new({onChange: onChangeCallback});
    }).prototype = Slider.prototype;
    dart.addTypeTests(Slider);
    Slider.prototype[_is_Slider_default] = true;
    dart.addTypeCaches(Slider);
    Slider[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(Slider, () => ({
      __proto__: dart.getMethods(Slider.__proto__),
      [S$._onTapTest]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [S$._onLongPressSelect]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [S$._onSelect]: dart.fnType(core.bool, [math.Point$(core.double)], [dart.nullable(core.double)]),
      [S$._onDragEnd]: dart.fnType(core.bool, [math.Point$(core.double), core.double, core.double]),
      [S$._sliderContainsPoint]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [S$._setInitialDragState]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$._updateViewData]: dart.fnType(dart.void, []),
      [S$._fireChangeEvent]: dart.fnType(dart.void, [chart_canvas.ChartCanvas]),
      [S$._moveSliderToPoint]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [S$._moveSliderToDomain]: dart.fnType(core.bool, [dart.nullable(D)], {measure: dart.nullable(core.num)}, {}),
      moveSliderToDomain: dart.fnType(dart.void, [dart.nullable(core.Object)], {measure: dart.nullable(core.num), skipAnimation: core.bool}, {}),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(Slider, () => ({
      __proto__: dart.getGetters(Slider.__proto__),
      [S$._view]: slider._SliderLayoutView$(D),
      [S$._gestureListener]: gesture_listener.GestureListener,
      [S$._lifecycleListener$1]: base_chart.LifecycleListener$(D),
      [S$._sliderEventListener]: slider.SliderEventListener$(D),
      role: core.String
    }));
    dart.setSetterSignature(Slider, () => ({
      __proto__: dart.getSetters(Slider.__proto__),
      [S$._view]: slider._SliderLayoutView$(D),
      [S$._gestureListener]: gesture_listener.GestureListener,
      [S$._lifecycleListener$1]: base_chart.LifecycleListener$(D),
      [S$._sliderEventListener]: slider.SliderEventListener$(D)
    }));
    dart.setLibraryUri(Slider, I[54]);
    dart.setFieldSignature(Slider, () => ({
      __proto__: dart.getFields(Slider.__proto__),
      [S$.__Slider__view]: dart.fieldType(dart.nullable(slider._SliderLayoutView$(D))),
      [S$.__Slider__gestureListener]: dart.fieldType(dart.nullable(gesture_listener.GestureListener)),
      [S$.__Slider__lifecycleListener]: dart.fieldType(dart.nullable(base_chart.LifecycleListener$(D))),
      [S$.__Slider__sliderEventListener]: dart.fieldType(dart.nullable(slider.SliderEventListener$(D))),
      layoutPaintOrder: dart.fieldType(core.int),
      eventTrigger: dart.finalFieldType(selection_trigger.SelectionTrigger),
      [S$._handleRenderer]: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      [S$._roleId]: dart.finalFieldType(core.String),
      snapToDatum: dart.finalFieldType(core.bool),
      [S$._style]: dart.finalFieldType(slider.SliderStyle),
      [S$._chart$8]: dart.fieldType(dart.nullable(cartesian_chart.CartesianChart$(D))),
      [S$._sliderHandle]: dart.fieldType(dart.nullable(slider._AnimatedSlider$(D))),
      [S$._delaySelect]: dart.fieldType(core.bool),
      [S$._handleDrag]: dart.fieldType(core.bool),
      [S$._domainCenterPoint]: dart.fieldType(dart.nullable(math.Point$(core.int))),
      [S$._previousDomainCenterPoint]: dart.fieldType(dart.nullable(math.Point$(core.int))),
      [S$._handleBounds]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      [S$._domainValue]: dart.fieldType(dart.nullable(D)),
      [S$._dragStateToFireOnPostRender]: dart.fieldType(dart.nullable(slider.SliderListenerDragState))
    }));
    return Slider;
  });
  slider.Slider = slider.Slider$();
  dart.addTypeTests(slider.Slider, _is_Slider_default);
  slider.SliderStyle = class SliderStyle extends core.Object {
    get fillColor() {
      return this[S$.fillColor$2];
    }
    set fillColor(value) {
      this[S$.fillColor$2] = value;
    }
    get handleOffset() {
      return this[S$.handleOffset];
    }
    set handleOffset(value) {
      this[S$.handleOffset] = value;
    }
    get handlePosition() {
      return this[S$.handlePosition];
    }
    set handlePosition(value) {
      this[S$.handlePosition] = value;
    }
    get handleSize() {
      return this[S$.handleSize];
    }
    set handleSize(value) {
      this[S$.handleSize] = value;
    }
    get strokeWidthPx() {
      return this[S$.strokeWidthPx$8];
    }
    set strokeWidthPx(value) {
      this[S$.strokeWidthPx$8] = value;
    }
    get strokeColor() {
      return this[S$.strokeColor$2];
    }
    set strokeColor(value) {
      this[S$.strokeColor$2] = value;
    }
    _equals(other) {
      if (other == null) return false;
      return slider.SliderStyle.is(other) && this.fillColor._equals(other.fillColor) && this.handleOffset._equals(other.handleOffset) && this.handleSize[S$.$_equals](other.handleSize) && this.strokeWidthPx === other.strokeWidthPx && this.strokeColor._equals(other.strokeColor);
    }
    get hashCode() {
      let hashcode = this.fillColor.hashCode;
      hashcode = hashcode * 37 + this.handleOffset.hashCode;
      hashcode = hashcode * 37 + this.handleSize[S$.$hashCode];
      hashcode = hashcode * 37 + this.strokeWidthPx[S$.$hashCode];
      hashcode = hashcode * 37 + this.strokeColor.hashCode;
      hashcode = hashcode * 37 + this.handlePosition[S$.$hashCode];
      return hashcode;
    }
  };
  (slider.SliderStyle.new = function(opts) {
    let t37, t37$;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let handleOffset = opts && 'handleOffset' in opts ? opts.handleOffset : C[39] || CT.C39;
    let handleSize = opts && 'handleSize' in opts ? opts.handleSize : C[40] || CT.C40;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let handlePosition = opts && 'handlePosition' in opts ? opts.handlePosition : C[36] || CT.C36;
    let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 2;
    this[S$.strokeColor$2] = style_factory.StyleFactory.style.sliderStrokeColor;
    this[S$.handleOffset] = handleOffset;
    this[S$.handleSize] = handleSize;
    this[S$.handlePosition] = handlePosition;
    this[S$.strokeWidthPx$8] = strokeWidthPx;
    this[S$.fillColor$2] = (t37 = fillColor, t37 == null ? style_factory.StyleFactory.style.sliderFillColor : t37);
    this[S$.strokeColor$2] = (t37$ = strokeColor, t37$ == null ? style_factory.StyleFactory.style.sliderStrokeColor : t37$);
    ;
  }).prototype = slider.SliderStyle.prototype;
  dart.addTypeTests(slider.SliderStyle);
  dart.addTypeCaches(slider.SliderStyle);
  dart.setLibraryUri(slider.SliderStyle, I[54]);
  dart.setFieldSignature(slider.SliderStyle, () => ({
    __proto__: dart.getFields(slider.SliderStyle.__proto__),
    fillColor: dart.fieldType(color$.Color),
    handleOffset: dart.fieldType(math.Point$(core.double)),
    handlePosition: dart.fieldType(slider.SliderHandlePosition),
    handleSize: dart.fieldType(math.Rectangle$(core.int)),
    strokeWidthPx: dart.fieldType(core.double),
    strokeColor: dart.fieldType(color$.Color)
  }));
  dart.defineExtensionMethods(slider.SliderStyle, ['_equals']);
  dart.defineExtensionAccessors(slider.SliderStyle, ['hashCode']);
  slider.SliderHandlePosition = class SliderHandlePosition extends core.Object {
    toString() {
      return this[S$._name$6];
    }
  };
  (slider.SliderHandlePosition.new = function(index, _name) {
    this.index = index;
    this[S$._name$6] = _name;
    ;
  }).prototype = slider.SliderHandlePosition.prototype;
  dart.addTypeTests(slider.SliderHandlePosition);
  dart.addTypeCaches(slider.SliderHandlePosition);
  dart.setLibraryUri(slider.SliderHandlePosition, I[54]);
  dart.setFieldSignature(slider.SliderHandlePosition, () => ({
    __proto__: dart.getFields(slider.SliderHandlePosition.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(slider.SliderHandlePosition, ['toString']);
  slider.SliderHandlePosition.middle = C[36] || CT.C36;
  slider.SliderHandlePosition.top = C[37] || CT.C37;
  slider.SliderHandlePosition.manual = C[38] || CT.C38;
  slider.SliderHandlePosition.values = C[41] || CT.C41;
  layout_view.LayoutView = class LayoutView extends core.Object {};
  (layout_view.LayoutView.new = function() {
    ;
  }).prototype = layout_view.LayoutView.prototype;
  dart.addTypeTests(layout_view.LayoutView);
  dart.addTypeCaches(layout_view.LayoutView);
  dart.setLibraryUri(layout_view.LayoutView, I[8]);
  const _is__SliderLayoutView_default = Symbol('_is__SliderLayoutView_default');
  slider._SliderLayoutView$ = dart.generic(D => {
    var _AnimatedSliderOfD = () => (_AnimatedSliderOfD = dart.constFn(slider._AnimatedSlider$(D)))();
    class _SliderLayoutView extends layout_view.LayoutView {
      get layoutConfig() {
        return this[S$.layoutConfig$1];
      }
      set layoutConfig(value) {
        super.layoutConfig = value;
      }
      get graphicsFactory() {
        return this[S$.graphicsFactory$3];
      }
      set graphicsFactory(value) {
        this[S$.graphicsFactory$3] = value;
      }
      get [S$._drawAreaBounds$1]() {
        let t37;
        t37 = this[S$.___SliderLayoutView__drawAreaBounds];
        return t37 == null ? dart.throw(new _internal.LateError.fieldNI("_drawAreaBounds")) : t37;
      }
      set [S$._drawAreaBounds$1](t37) {
        this[S$.___SliderLayoutView__drawAreaBounds] = t37;
      }
      get drawBounds() {
        return this[S$._drawAreaBounds$1];
      }
      set sliderHandle(value) {
        _AnimatedSliderOfD().as(value);
        this[S$._sliderHandle] = value;
      }
      measure(maxWidth, maxHeight) {
        return null;
      }
      layout(componentBounds, drawAreaBounds) {
        this[S$._drawAreaBounds$1] = drawAreaBounds;
      }
      paint(canvas, animationPercent) {
        let sliderElement = dart.nullCheck(this[S$._sliderHandle]).getCurrentSlider(animationPercent);
        canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([new (T$.PointOfnum()).new(sliderElement.domainCenterPoint.x, this[S$._drawAreaBounds$1][S$.$top]), new (T$.PointOfnum()).new(sliderElement.domainCenterPoint.x, this[S$._drawAreaBounds$1][S$.$bottom])]), stroke: sliderElement.stroke, strokeWidthPx: sliderElement.strokeWidthPx});
        this[S$._handleRenderer].paint(canvas, sliderElement.buttonBounds, {fillColor: sliderElement.fill, strokeColor: sliderElement.stroke, strokeWidthPx: sliderElement.strokeWidthPx});
      }
      get componentBounds() {
        return this[S$._drawAreaBounds$1];
      }
      get isSeriesRenderer() {
        return false;
      }
    }
    (_SliderLayoutView.new = function(opts) {
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let handleRenderer = opts && 'handleRenderer' in opts ? opts.handleRenderer : null;
      this[S$.___SliderLayoutView__drawAreaBounds] = null;
      this[S$.graphicsFactory$3] = null;
      this[S$._sliderHandle] = null;
      this[S$.layoutConfig$1] = new layout_view.LayoutViewConfig.new({paintOrder: layoutPaintOrder, position: layout_view.LayoutPosition.DrawArea, positionOrder: 0});
      this[S$._handleRenderer] = handleRenderer;
      ;
    }).prototype = _SliderLayoutView.prototype;
    dart.addTypeTests(_SliderLayoutView);
    _SliderLayoutView.prototype[_is__SliderLayoutView_default] = true;
    dart.addTypeCaches(_SliderLayoutView);
    dart.setMethodSignature(_SliderLayoutView, () => ({
      __proto__: dart.getMethods(_SliderLayoutView.__proto__),
      measure: dart.fnType(dart.nullable(layout_view.ViewMeasuredSizes), [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double])
    }));
    dart.setGetterSignature(_SliderLayoutView, () => ({
      __proto__: dart.getGetters(_SliderLayoutView.__proto__),
      [S$._drawAreaBounds$1]: math.Rectangle$(core.int),
      drawBounds: math.Rectangle$(core.int),
      componentBounds: math.Rectangle$(core.int),
      isSeriesRenderer: core.bool
    }));
    dart.setSetterSignature(_SliderLayoutView, () => ({
      __proto__: dart.getSetters(_SliderLayoutView.__proto__),
      [S$._drawAreaBounds$1]: math.Rectangle$(core.int),
      sliderHandle: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(_SliderLayoutView, I[54]);
    dart.setFieldSignature(_SliderLayoutView, () => ({
      __proto__: dart.getFields(_SliderLayoutView.__proto__),
      layoutConfig: dart.finalFieldType(layout_view.LayoutViewConfig),
      [S$.___SliderLayoutView__drawAreaBounds]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      graphicsFactory: dart.fieldType(dart.nullable(graphics_factory.GraphicsFactory)),
      [S$._handleRenderer]: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      [S$._sliderHandle]: dart.fieldType(dart.nullable(slider._AnimatedSlider$(D)))
    }));
    return _SliderLayoutView;
  });
  slider._SliderLayoutView = slider._SliderLayoutView$();
  dart.addTypeTests(slider._SliderLayoutView, _is__SliderLayoutView_default);
  const _is__SliderElement_default = Symbol('_is__SliderElement_default');
  slider._SliderElement$ = dart.generic(D => {
    var _SliderElementOfD = () => (_SliderElementOfD = dart.constFn(slider._SliderElement$(D)))();
    class _SliderElement extends core.Object {
      clone() {
        return new (_SliderElementOfD()).new({domainCenterPoint: this.domainCenterPoint, buttonBounds: this.buttonBounds, fill: this.fill, stroke: this.stroke, strokeWidthPx: this.strokeWidthPx});
      }
      updateAnimationPercent(previous, target, animationPercent) {
        _SliderElementOfD().as(previous);
        _SliderElementOfD().as(target);
        let previousPoint = previous.domainCenterPoint;
        let targetPoint = target.domainCenterPoint;
        let x = (targetPoint.x - previousPoint.x) * animationPercent + previousPoint.x;
        let y = (targetPoint.y - previousPoint.y) * animationPercent + previousPoint.y;
        this.domainCenterPoint = new (T$.PointOfint()).new(x[S$.$round](), y[S$.$round]());
        let previousBounds = previous.buttonBounds;
        let targetBounds = target.buttonBounds;
        let top = (targetBounds[S$.$top] - previousBounds[S$.$top]) * animationPercent + previousBounds[S$.$top];
        let right = (targetBounds[S$.$right] - previousBounds[S$.$right]) * animationPercent + previousBounds[S$.$right];
        let bottom = (targetBounds[S$.$bottom] - previousBounds[S$.$bottom]) * animationPercent + previousBounds[S$.$bottom];
        let left = (targetBounds[S$.$left] - previousBounds[S$.$left]) * animationPercent + previousBounds[S$.$left];
        this.buttonBounds = new (T$.RectangleOfint()).new(left[S$.$round](), top[S$.$round](), (right - left)[S$.$round](), (bottom - top)[S$.$round]());
        this.fill = chart_canvas.getAnimatedColor(previous.fill, target.fill, animationPercent);
        this.stroke = chart_canvas.getAnimatedColor(previous.stroke, target.stroke, animationPercent);
        this.strokeWidthPx = (target.strokeWidthPx - previous.strokeWidthPx) * animationPercent + previous.strokeWidthPx;
      }
    }
    (_SliderElement.new = function(opts) {
      let domainCenterPoint = opts && 'domainCenterPoint' in opts ? opts.domainCenterPoint : null;
      let buttonBounds = opts && 'buttonBounds' in opts ? opts.buttonBounds : null;
      let fill = opts && 'fill' in opts ? opts.fill : null;
      let stroke = opts && 'stroke' in opts ? opts.stroke : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      this.domainCenterPoint = domainCenterPoint;
      this.buttonBounds = buttonBounds;
      this.fill = fill;
      this.stroke = stroke;
      this.strokeWidthPx = strokeWidthPx;
      ;
    }).prototype = _SliderElement.prototype;
    dart.addTypeTests(_SliderElement);
    _SliderElement.prototype[_is__SliderElement_default] = true;
    dart.addTypeCaches(_SliderElement);
    dart.setMethodSignature(_SliderElement, () => ({
      __proto__: dart.getMethods(_SliderElement.__proto__),
      clone: dart.fnType(slider._SliderElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object), core.double])
    }));
    dart.setLibraryUri(_SliderElement, I[54]);
    dart.setFieldSignature(_SliderElement, () => ({
      __proto__: dart.getFields(_SliderElement.__proto__),
      domainCenterPoint: dart.fieldType(math.Point$(core.int)),
      buttonBounds: dart.fieldType(math.Rectangle$(core.int)),
      fill: dart.fieldType(color$.Color),
      stroke: dart.fieldType(color$.Color),
      strokeWidthPx: dart.fieldType(core.double)
    }));
    return _SliderElement;
  });
  slider._SliderElement = slider._SliderElement$();
  dart.addTypeTests(slider._SliderElement, _is__SliderElement_default);
  const _is__AnimatedSlider_default = Symbol('_is__AnimatedSlider_default');
  slider._AnimatedSlider$ = dart.generic(D => {
    var _SliderElementOfD = () => (_SliderElementOfD = dart.constFn(slider._SliderElement$(D)))();
    class _AnimatedSlider extends core.Object {
      get [S$._targetSlider]() {
        let t38;
        t38 = this[S$.___AnimatedSlider__targetSlider];
        return t38 == null ? dart.throw(new _internal.LateError.fieldNI("_targetSlider")) : t38;
      }
      set [S$._targetSlider](t38) {
        this[S$.___AnimatedSlider__targetSlider] = t38;
      }
      animateOut() {
        let newTarget = dart.nullCheck(this[S$._currentSlider]).clone();
        let targetBounds = newTarget.buttonBounds;
        let top = targetBounds[S$.$top];
        let right = targetBounds[S$.$left] + targetBounds[S$.$width] / 2;
        let bottom = targetBounds[S$.$bottom];
        let left = right;
        newTarget.buttonBounds = new (T$.RectangleOfint()).new(left[S$.$round](), top[S$.$round](), (right - left)[S$.$round](), (bottom - top)[S$.$round]());
        newTarget.strokeWidthPx = 0.0;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        _SliderElementOfD().as(newTarget);
        this.animatingOut = false;
        this[S$._currentSlider] == null ? this[S$._currentSlider] = newTarget.clone() : null;
        this[S$._previousSlider] = dart.nullCheck(this[S$._currentSlider]).clone();
        this[S$._targetSlider] = newTarget;
      }
      getCurrentSlider(animationPercent) {
        if (animationPercent === 1.0 || this[S$._previousSlider] == null) {
          this[S$._currentSlider] = this[S$._targetSlider];
          this[S$._previousSlider] = this[S$._targetSlider];
          return dart.nullCheck(this[S$._currentSlider]);
        }
        dart.nullCheck(this[S$._currentSlider]).updateAnimationPercent(dart.nullCheck(this[S$._previousSlider]), this[S$._targetSlider], animationPercent);
        return dart.nullCheck(this[S$._currentSlider]);
      }
    }
    (_AnimatedSlider.new = function() {
      this[S$._previousSlider] = null;
      this[S$.___AnimatedSlider__targetSlider] = null;
      this[S$._currentSlider] = null;
      this.animatingOut = false;
      ;
    }).prototype = _AnimatedSlider.prototype;
    dart.addTypeTests(_AnimatedSlider);
    _AnimatedSlider.prototype[_is__AnimatedSlider_default] = true;
    dart.addTypeCaches(_AnimatedSlider);
    dart.setMethodSignature(_AnimatedSlider, () => ({
      __proto__: dart.getMethods(_AnimatedSlider.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      getCurrentSlider: dart.fnType(slider._SliderElement$(D), [core.double])
    }));
    dart.setGetterSignature(_AnimatedSlider, () => ({
      __proto__: dart.getGetters(_AnimatedSlider.__proto__),
      [S$._targetSlider]: slider._SliderElement$(D)
    }));
    dart.setSetterSignature(_AnimatedSlider, () => ({
      __proto__: dart.getSetters(_AnimatedSlider.__proto__),
      [S$._targetSlider]: slider._SliderElement$(D)
    }));
    dart.setLibraryUri(_AnimatedSlider, I[54]);
    dart.setFieldSignature(_AnimatedSlider, () => ({
      __proto__: dart.getFields(_AnimatedSlider.__proto__),
      [S$._previousSlider]: dart.fieldType(dart.nullable(slider._SliderElement$(D))),
      [S$.___AnimatedSlider__targetSlider]: dart.fieldType(dart.nullable(slider._SliderElement$(D))),
      [S$._currentSlider]: dart.fieldType(dart.nullable(slider._SliderElement$(D))),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedSlider;
  });
  slider._AnimatedSlider = slider._AnimatedSlider$();
  dart.addTypeTests(slider._AnimatedSlider, _is__AnimatedSlider_default);
  const _is_SliderEventListener_default = Symbol('_is_SliderEventListener_default');
  slider.SliderEventListener$ = dart.generic(D => {
    class SliderEventListener extends core.Object {
      get onChange() {
        return this[S$.onChange];
      }
      set onChange(value) {
        super.onChange = value;
      }
    }
    (SliderEventListener.new = function(opts) {
      let onChange = opts && 'onChange' in opts ? opts.onChange : null;
      this[S$.onChange] = onChange;
      ;
    }).prototype = SliderEventListener.prototype;
    dart.addTypeTests(SliderEventListener);
    SliderEventListener.prototype[_is_SliderEventListener_default] = true;
    dart.addTypeCaches(SliderEventListener);
    dart.setLibraryUri(SliderEventListener, I[54]);
    dart.setFieldSignature(SliderEventListener, () => ({
      __proto__: dart.getFields(SliderEventListener.__proto__),
      onChange: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [math.Point$(core.int), dart.nullable(D), core.String, slider.SliderListenerDragState])))
    }));
    return SliderEventListener;
  });
  slider.SliderEventListener = slider.SliderEventListener$();
  dart.addTypeTests(slider.SliderEventListener, _is_SliderEventListener_default);
  slider.SliderListenerDragState = class SliderListenerDragState extends core.Object {
    toString() {
      return this[S$._name$6];
    }
  };
  (slider.SliderListenerDragState.new = function(index, _name) {
    this.index = index;
    this[S$._name$6] = _name;
    ;
  }).prototype = slider.SliderListenerDragState.prototype;
  dart.addTypeTests(slider.SliderListenerDragState);
  dart.addTypeCaches(slider.SliderListenerDragState);
  dart.setLibraryUri(slider.SliderListenerDragState, I[54]);
  dart.setFieldSignature(slider.SliderListenerDragState, () => ({
    __proto__: dart.getFields(slider.SliderListenerDragState.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(slider.SliderListenerDragState, ['toString']);
  slider.SliderListenerDragState.initial = C[42] || CT.C42;
  slider.SliderListenerDragState.drag = C[43] || CT.C43;
  slider.SliderListenerDragState.end = C[44] || CT.C44;
  slider.SliderListenerDragState.values = C[45] || CT.C45;
  const _is_SliderTester_default = Symbol('_is_SliderTester_default');
  slider.SliderTester$ = dart.generic(D => {
    class SliderTester extends core.Object {
      get behavior() {
        return this[S$.behavior];
      }
      set behavior(value) {
        super.behavior = value;
      }
      get domainCenterPoint() {
        return this.behavior[S$._domainCenterPoint];
      }
      get domainValue() {
        return this.behavior[S$._domainValue];
      }
      get handleBounds() {
        return this.behavior[S$._handleBounds];
      }
      layout(componentBounds, drawAreaBounds) {
        this.behavior[S$._view].layout(componentBounds, drawAreaBounds);
      }
      get view() {
        return this.behavior[S$._view];
      }
    }
    (SliderTester.new = function(behavior) {
      this[S$.behavior] = behavior;
      ;
    }).prototype = SliderTester.prototype;
    dart.addTypeTests(SliderTester);
    SliderTester.prototype[_is_SliderTester_default] = true;
    dart.addTypeCaches(SliderTester);
    dart.setMethodSignature(SliderTester, () => ({
      __proto__: dart.getMethods(SliderTester.__proto__),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)])
    }));
    dart.setGetterSignature(SliderTester, () => ({
      __proto__: dart.getGetters(SliderTester.__proto__),
      domainCenterPoint: dart.nullable(math.Point$(core.int)),
      domainValue: dart.nullable(D),
      handleBounds: dart.nullable(math.Rectangle$(core.int)),
      view: slider._SliderLayoutView$(D)
    }));
    dart.setLibraryUri(SliderTester, I[54]);
    dart.setFieldSignature(SliderTester, () => ({
      __proto__: dart.getFields(SliderTester.__proto__),
      behavior: dart.finalFieldType(slider.Slider$(D))
    }));
    return SliderTester;
  });
  slider.SliderTester = slider.SliderTester$();
  dart.addTypeTests(slider.SliderTester, _is_SliderTester_default);
  const _is_SelectNearest_default = Symbol('_is_SelectNearest_default');
  select_nearest.SelectNearest$ = dart.generic(D => {
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var JSArrayOfImmutableSeriesOfD = () => (JSArrayOfImmutableSeriesOfD = dart.constFn(_interceptors.JSArray$(ImmutableSeriesOfD())))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var JSArrayOfSeriesDatumOfD = () => (JSArrayOfSeriesDatumOfD = dart.constFn(_interceptors.JSArray$(SeriesDatumOfD())))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var DatumDetailsOfDAndDatumDetailsOfDToint = () => (DatumDetailsOfDAndDatumDetailsOfDToint = dart.constFn(dart.fnType(core.int, [DatumDetailsOfD(), DatumDetailsOfD()])))();
    var SeriesDatumOfDTobool = () => (SeriesDatumOfDTobool = dart.constFn(dart.fnType(core.bool, [SeriesDatumOfD()])))();
    var ListOfSeriesDatumOfD = () => (ListOfSeriesDatumOfD = dart.constFn(core.List$(SeriesDatumOfD())))();
    var SeriesDatumOfDAndSeriesDatumOfDToint = () => (SeriesDatumOfDAndSeriesDatumOfDToint = dart.constFn(dart.fnType(core.int, [SeriesDatumOfD(), SeriesDatumOfD()])))();
    var DatumDetailsOfDToSeriesDatumOfD = () => (DatumDetailsOfDToSeriesDatumOfD = dart.constFn(dart.fnType(SeriesDatumOfD(), [DatumDetailsOfD()])))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class SelectNearest extends core.Object {
      get selectionModelType() {
        return this[S$.selectionModelType$2];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get eventTrigger() {
        return this[S$.eventTrigger$1];
      }
      set eventTrigger(value) {
        super.eventTrigger = value;
      }
      get selectionMode() {
        return this[S$.selectionMode];
      }
      set selectionMode(value) {
        super.selectionMode = value;
      }
      get selectAcrossAllSeriesRendererComponents() {
        return this[S$.selectAcrossAllSeriesRendererComponents];
      }
      set selectAcrossAllSeriesRendererComponents(value) {
        super.selectAcrossAllSeriesRendererComponents = value;
      }
      get selectClosestSeries() {
        return this[S$.selectClosestSeries];
      }
      set selectClosestSeries(value) {
        super.selectClosestSeries = value;
      }
      get maximumDomainDistancePx() {
        return this[S$.maximumDomainDistancePx];
      }
      set maximumDomainDistancePx(value) {
        super.maximumDomainDistancePx = value;
      }
      get hoverEventDelay() {
        return this[S$.hoverEventDelay];
      }
      set hoverEventDelay(value) {
        super.hoverEventDelay = value;
      }
      get [S$._listener$2]() {
        let t39;
        t39 = this[S$.__SelectNearest__listener];
        return t39 == null ? dart.throw(new _internal.LateError.fieldNI("_listener")) : t39;
      }
      set [S$._listener$2](t39) {
        this[S$.__SelectNearest__listener] = t39;
      }
      [S$._onTapTest$1](chartPoint) {
        this[S$._delaySelect$1] = this.eventTrigger === selection_trigger.SelectionTrigger.longPressHold;
        return dart.nullCheck(this[S$._chart$9]).pointWithinRenderer(chartPoint);
      }
      [S$._onLongPressSelect$1](chartPoint) {
        this[S$._delaySelect$1] = false;
        return this[S$._onSelect$1](chartPoint);
      }
      [S$._onSelect$1](chartPoint, ignored = null) {
        if (this[S$._chart$9] == null) return false;
        if (this[S$._delaySelect$1]) return false;
        let details = dart.nullCheck(this[S$._chart$9]).getNearestDatumDetailPerSeries(chartPoint, this.selectAcrossAllSeriesRendererComponents);
        let seriesList = JSArrayOfImmutableSeriesOfD().of([]);
        let seriesDatumList = JSArrayOfSeriesDatumOfD().of([]);
        if (details !== null && details[S$.$isNotEmpty]) {
          details[S$.$sort](dart.fn((a, b) => dart.nullCheck(a.domainDistance)[S$.$compareTo](dart.nullCheck(b.domainDistance)), DatumDetailsOfDAndDatumDetailsOfDToint()));
          if (this.maximumDomainDistancePx == null || dart.nullCheck(details[S$.$_get](0).domainDistance) <= dart.nullCheck(this.maximumDomainDistancePx)) {
            seriesDatumList = this[S$._extractSeriesFromNearestSelection](details);
            seriesDatumList[S$.$removeWhere](dart.fn(datum => datum.series.overlaySeries, SeriesDatumOfDTobool()));
            if (this.selectClosestSeries && seriesList[S$.$isEmpty]) {
              if (dart.nullCheck(details[S$.$first].series).overlaySeries) {
                let sortedSeriesDatumList = ListOfSeriesDatumOfD().from(seriesDatumList);
                sortedSeriesDatumList[S$.$sort](dart.fn((a, b) => {
                  let detailsA = DatumDetailsOfD().as(a.datum);
                  let detailsB = DatumDetailsOfD().as(b.datum);
                  return dart.nullCheck(detailsA.domainDistance)[S$.$compareTo](dart.nullCheck(detailsB.domainDistance));
                }, SeriesDatumOfDAndSeriesDatumOfDToint()));
                seriesList[S$.$add](sortedSeriesDatumList[S$.$first].series);
              } else {
                seriesList[S$.$add](dart.nullCheck(details[S$.$first].series));
              }
            }
          }
        }
        return dart.nullCheck(this[S$._chart$9]).getSelectionModel(this.selectionModelType).updateSelection(seriesDatumList, seriesList);
      }
      [S$._extractSeriesFromNearestSelection](details) {
        switch (this.selectionMode) {
          case C[46] || CT.C46:
          {
            return this[S$._expandToDomain](details[S$.$first]);
          }
          case C[49] || CT.C49:
          {
            return details[S$.$map](SeriesDatumOfD(), dart.fn(datumDetails => new (SeriesDatumOfD()).new(dart.nullCheck(datumDetails.series), datumDetails.datum), DatumDetailsOfDToSeriesDatumOfD()))[S$.$toList]();
          }
          case C[50] || CT.C50:
          {
            return JSArrayOfSeriesDatumOfD().of([new (SeriesDatumOfD()).new(dart.nullCheck(details[S$.$first].series), details[S$.$first].datum)]);
          }
        }
      }
      [S$._onDeselectAll](_, __, ___) {
        if (this[S$._delaySelect$1]) {
          return false;
        }
        dart.nullCheck(this[S$._chart$9]).getSelectionModel(this.selectionModelType).updateSelection(JSArrayOfSeriesDatumOfD().of([]), JSArrayOfImmutableSeriesOfD().of([]));
        return false;
      }
      [S$._expandToDomain](nearestDetails) {
        let data = JSArrayOfSeriesDatumOfD().of([new (SeriesDatumOfD()).new(dart.nullCheck(nearestDetails.series), nearestDetails.datum)]);
        let nearestDomain = nearestDetails.domain;
        for (let series of dart.nullCheck(this[S$._chart$9]).currentSeriesList) {
          let domainFn = series.domainFn;
          let domainLowerBoundFn = series.domainLowerBoundFn;
          let domainUpperBoundFn = series.domainUpperBoundFn;
          let testBounds = domainLowerBoundFn != null && domainUpperBoundFn != null;
          for (let i = 0; i < series.data[S$.$length]; i = i + 1) {
            let datum = series.data[S$.$_get](i);
            let domain = domainFn(i);
            if (dart.equals(nearestDetails.series, series) && dart.equals(nearestDetails.datum, datum)) {
              continue;
            }
            if (dart.equals(domain, nearestDomain)) {
              data[S$.$add](new (SeriesDatumOfD()).new(series, datum));
            } else if (testBounds) {
              let domainLowerBound = dart.nullCheck(domainLowerBoundFn)(i);
              let domainUpperBound = dart.nullCheck(domainUpperBoundFn)(i);
              let addDatum = false;
              if (domainLowerBound != null && domainUpperBound != null) {
                if (core.int.is(domain)) {
                  addDatum = core.int.as(domainLowerBound) <= core.int.as(nearestDomain) && nearestDomain <= core.int.as(domainUpperBound);
                } else if (typeof domain == 'number') {
                  addDatum = core.double.as(domainLowerBound) <= core.double.as(nearestDomain) && nearestDomain <= core.double.as(domainUpperBound);
                } else if (core.DateTime.is(domain)) {
                  addDatum = dart.equals(domainLowerBound, nearestDomain) || dart.equals(domainUpperBound, nearestDomain) || core.DateTime.as(domainLowerBound).isBefore(core.DateTime.as(nearestDomain)) && nearestDomain.isBefore(core.DateTime.as(domainUpperBound));
                }
              }
              if (addDatum) {
                data[S$.$add](new (SeriesDatumOfD()).new(series, datum));
              }
            }
          }
        }
        return data;
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        this[S$._chart$9] = chart;
        chart.addGestureListener(this[S$._listener$2]);
        switch (this.eventTrigger) {
          case C[48] || CT.C48:
          case C[33] || CT.C33:
          case C[34] || CT.C34:
          case C[35] || CT.C35:
          {
            chart.registerTappable(this);
            break;
          }
          case C[47] || CT.C47:
          default:
          {
            chart.unregisterTappable(this);
            break;
          }
        }
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.removeGestureListener(this[S$._listener$2]);
        chart.unregisterTappable(this);
        this[S$._chart$9] = null;
      }
      get role() {
        return "SelectNearest-" + dart.str(this.selectionModelType);
      }
    }
    (SelectNearest.new = function(opts) {
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : C[32] || CT.C32;
      let selectionMode = opts && 'selectionMode' in opts ? opts.selectionMode : C[46] || CT.C46;
      let selectAcrossAllSeriesRendererComponents = opts && 'selectAcrossAllSeriesRendererComponents' in opts ? opts.selectAcrossAllSeriesRendererComponents : true;
      let selectClosestSeries = opts && 'selectClosestSeries' in opts ? opts.selectClosestSeries : true;
      let eventTrigger = opts && 'eventTrigger' in opts ? opts.eventTrigger : C[47] || CT.C47;
      let maximumDomainDistancePx = opts && 'maximumDomainDistancePx' in opts ? opts.maximumDomainDistancePx : null;
      let hoverEventDelay = opts && 'hoverEventDelay' in opts ? opts.hoverEventDelay : null;
      this[S$.__SelectNearest__listener] = null;
      this[S$._chart$9] = null;
      this[S$._delaySelect$1] = false;
      this[S$.selectionModelType$2] = selectionModelType;
      this[S$.selectionMode] = selectionMode;
      this[S$.selectAcrossAllSeriesRendererComponents] = selectAcrossAllSeriesRendererComponents;
      this[S$.selectClosestSeries] = selectClosestSeries;
      this[S$.eventTrigger$1] = eventTrigger;
      this[S$.maximumDomainDistancePx] = maximumDomainDistancePx;
      this[S$.hoverEventDelay] = hoverEventDelay;
      switch (this.eventTrigger) {
        case C[48] || CT.C48:
        {
          this[S$._listener$2] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, S$._onTapTest$1), onTap: dart.bind(this, S$._onSelect$1)});
          break;
        }
        case C[33] || CT.C33:
        {
          this[S$._listener$2] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, S$._onTapTest$1), onTap: dart.bind(this, S$._onSelect$1), onDragStart: dart.bind(this, S$._onSelect$1), onDragUpdate: dart.bind(this, S$._onSelect$1)});
          break;
        }
        case C[34] || CT.C34:
        {
          this[S$._listener$2] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, S$._onTapTest$1), onLongPress: dart.bind(this, S$._onSelect$1), onDragStart: dart.bind(this, S$._onSelect$1), onDragUpdate: dart.bind(this, S$._onSelect$1), onDragEnd: dart.bind(this, S$._onDeselectAll)});
          break;
        }
        case C[35] || CT.C35:
        {
          this[S$._listener$2] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, S$._onTapTest$1), onLongPress: dart.bind(this, S$._onLongPressSelect$1), onDragStart: dart.bind(this, S$._onSelect$1), onDragUpdate: dart.bind(this, S$._onSelect$1), onDragEnd: dart.bind(this, S$._onDeselectAll)});
          break;
        }
        case C[47] || CT.C47:
        default:
        {
          this[S$._listener$2] = new gesture_listener.GestureListener.new({onHover: this.hoverEventDelay == null ? dart.bind(this, S$._onSelect$1) : rate_limit_utils.throttle(T$.PointOfdouble(), core.bool, dart.bind(this, S$._onSelect$1), {delay: new core.Duration.new({milliseconds: dart.nullCheck(this.hoverEventDelay)}), defaultReturn: false})});
          break;
        }
      }
    }).prototype = SelectNearest.prototype;
    dart.addTypeTests(SelectNearest);
    SelectNearest.prototype[_is_SelectNearest_default] = true;
    dart.addTypeCaches(SelectNearest);
    SelectNearest[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(SelectNearest, () => ({
      __proto__: dart.getMethods(SelectNearest.__proto__),
      [S$._onTapTest$1]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [S$._onLongPressSelect$1]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [S$._onSelect$1]: dart.fnType(core.bool, [math.Point$(core.double)], [dart.nullable(core.double)]),
      [S$._extractSeriesFromNearestSelection]: dart.fnType(core.List$(series_datum.SeriesDatum$(D)), [core.List$(datum_details.DatumDetails$(D))]),
      [S$._onDeselectAll]: dart.fnType(core.bool, [math.Point$(core.double), core.double, core.double]),
      [S$._expandToDomain]: dart.fnType(core.List$(series_datum.SeriesDatum$(D)), [datum_details.DatumDetails$(D)]),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(SelectNearest, () => ({
      __proto__: dart.getGetters(SelectNearest.__proto__),
      [S$._listener$2]: gesture_listener.GestureListener,
      role: core.String
    }));
    dart.setSetterSignature(SelectNearest, () => ({
      __proto__: dart.getSetters(SelectNearest.__proto__),
      [S$._listener$2]: gesture_listener.GestureListener
    }));
    dart.setLibraryUri(SelectNearest, I[55]);
    dart.setFieldSignature(SelectNearest, () => ({
      __proto__: dart.getFields(SelectNearest.__proto__),
      [S$.__SelectNearest__listener]: dart.fieldType(dart.nullable(gesture_listener.GestureListener)),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      eventTrigger: dart.finalFieldType(selection_trigger.SelectionTrigger),
      selectionMode: dart.finalFieldType(select_nearest.SelectionMode),
      selectAcrossAllSeriesRendererComponents: dart.finalFieldType(core.bool),
      selectClosestSeries: dart.finalFieldType(core.bool),
      maximumDomainDistancePx: dart.finalFieldType(dart.nullable(core.int)),
      hoverEventDelay: dart.finalFieldType(dart.nullable(core.int)),
      [S$._chart$9]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      [S$._delaySelect$1]: dart.fieldType(core.bool)
    }));
    return SelectNearest;
  });
  select_nearest.SelectNearest = select_nearest.SelectNearest$();
  dart.addTypeTests(select_nearest.SelectNearest, _is_SelectNearest_default);
  select_nearest.SelectionMode = class SelectionMode extends core.Object {
    toString() {
      return this[S$._name$7];
    }
  };
  (select_nearest.SelectionMode.new = function(index, _name) {
    this.index = index;
    this[S$._name$7] = _name;
    ;
  }).prototype = select_nearest.SelectionMode.prototype;
  dart.addTypeTests(select_nearest.SelectionMode);
  dart.addTypeCaches(select_nearest.SelectionMode);
  dart.setLibraryUri(select_nearest.SelectionMode, I[55]);
  dart.setFieldSignature(select_nearest.SelectionMode, () => ({
    __proto__: dart.getFields(select_nearest.SelectionMode.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name$7]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(select_nearest.SelectionMode, ['toString']);
  select_nearest.SelectionMode.expandToDomain = C[46] || CT.C46;
  select_nearest.SelectionMode.selectOverlapping = C[49] || CT.C49;
  select_nearest.SelectionMode.single = C[50] || CT.C50;
  select_nearest.SelectionMode.values = C[51] || CT.C51;
  const _is_LockSelection_default = Symbol('_is_LockSelection_default');
  lock_selection.LockSelection$ = dart.generic(D => {
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class LockSelection extends core.Object {
      get selectionModelType() {
        return this[S$.selectionModelType$3];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get eventTrigger() {
        return this[S$0.eventTrigger$2];
      }
      set eventTrigger(value) {
        super.eventTrigger = value;
      }
      get [S$0._listener$3]() {
        let t40;
        t40 = this[S$0.__LockSelection__listener];
        return t40 == null ? dart.throw(new _internal.LateError.fieldNI("_listener")) : t40;
      }
      set [S$0._listener$3](t40) {
        this[S$0.__LockSelection__listener] = t40;
      }
      [S$0._onTapTest$2](chartPoint) {
        return dart.nullCheck(this[S$0._chart$10]).pointWithinRenderer(chartPoint);
      }
      [S$0._onSelect$2](chartPoint, ignored = null) {
        if (!dart.nullCheck(this[S$0._chart$10]).pointWithinRenderer(chartPoint)) {
          return false;
        }
        let selectionModel = dart.nullCheck(this[S$0._chart$10]).getSelectionModel(this.selectionModelType);
        if (selectionModel === null) {
          return false;
        }
        if (!selectionModel.locked && !selectionModel.hasAnySelection) {
          return false;
        }
        selectionModel.locked = !selectionModel.locked;
        if (!selectionModel.locked) {
          selectionModel.clearSelection();
        }
        return false;
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        this[S$0._chart$10] = chart;
        chart.addGestureListener(this[S$0._listener$3]);
        switch (this.eventTrigger) {
          case C[48] || CT.C48:
          case C[33] || CT.C33:
          case C[34] || CT.C34:
          case C[35] || CT.C35:
          {
            chart.registerTappable(this);
            break;
          }
          case C[47] || CT.C47:
          default:
          {
            chart.unregisterTappable(this);
            break;
          }
        }
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.removeGestureListener(this[S$0._listener$3]);
        chart.unregisterTappable(this);
        this[S$0._chart$10] = null;
      }
      get role() {
        return "LockSelection-" + dart.str(this.selectionModelType);
      }
    }
    (LockSelection.new = function(opts) {
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : C[32] || CT.C32;
      this[S$0.__LockSelection__listener] = null;
      this[S$0.eventTrigger$2] = selection_trigger.SelectionTrigger.tap;
      this[S$0._chart$10] = null;
      this[S$.selectionModelType$3] = selectionModelType;
      switch (this.eventTrigger) {
        case C[48] || CT.C48:
        {
          this[S$0._listener$3] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, S$0._onTapTest$2), onTap: dart.bind(this, S$0._onSelect$2)});
          break;
        }
        default:
        {
          dart.throw(new core.ArgumentError.new("LockSelection does not support the event " + "trigger \"" + dart.str(this.eventTrigger) + "\""));
        }
      }
    }).prototype = LockSelection.prototype;
    dart.addTypeTests(LockSelection);
    LockSelection.prototype[_is_LockSelection_default] = true;
    dart.addTypeCaches(LockSelection);
    LockSelection[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(LockSelection, () => ({
      __proto__: dart.getMethods(LockSelection.__proto__),
      [S$0._onTapTest$2]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [S$0._onSelect$2]: dart.fnType(core.bool, [math.Point$(core.double)], [dart.nullable(core.double)]),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(LockSelection, () => ({
      __proto__: dart.getGetters(LockSelection.__proto__),
      [S$0._listener$3]: gesture_listener.GestureListener,
      role: core.String
    }));
    dart.setSetterSignature(LockSelection, () => ({
      __proto__: dart.getSetters(LockSelection.__proto__),
      [S$0._listener$3]: gesture_listener.GestureListener
    }));
    dart.setLibraryUri(LockSelection, I[56]);
    dart.setFieldSignature(LockSelection, () => ({
      __proto__: dart.getFields(LockSelection.__proto__),
      [S$0.__LockSelection__listener]: dart.fieldType(dart.nullable(gesture_listener.GestureListener)),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      eventTrigger: dart.finalFieldType(selection_trigger.SelectionTrigger),
      [S$0._chart$10]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D)))
    }));
    return LockSelection;
  });
  lock_selection.LockSelection = lock_selection.LockSelection$();
  dart.addTypeTests(lock_selection.LockSelection, _is_LockSelection_default);
  const _is_RangeAnnotation_default = Symbol('_is_RangeAnnotation_default');
  range_annotation.RangeAnnotation$ = dart.generic(D => {
    var _AnimatedAnnotationOfD = () => (_AnimatedAnnotationOfD = dart.constFn(range_annotation._AnimatedAnnotation$(D)))();
    var IdentityMapOfString$_AnimatedAnnotationOfD = () => (IdentityMapOfString$_AnimatedAnnotationOfD = dart.constFn(_js_helper.IdentityMap$(core.String, _AnimatedAnnotationOfD())))();
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    var _RangeAnnotationLayoutViewOfD = () => (_RangeAnnotationLayoutViewOfD = dart.constFn(range_annotation._RangeAnnotationLayoutView$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var _AnnotationElementOfD = () => (_AnnotationElementOfD = dart.constFn(range_annotation._AnnotationElement$(D)))();
    var StringAnd_AnimatedAnnotationOfDTovoid = () => (StringAnd_AnimatedAnnotationOfDTovoid = dart.constFn(dart.fnType(dart.void, [core.String, _AnimatedAnnotationOfD()])))();
    class RangeAnnotation extends core.Object {
      get annotations() {
        return this[S$0.annotations];
      }
      set annotations(value) {
        super.annotations = value;
      }
      get defaultColor() {
        return this[S$0.defaultColor];
      }
      set defaultColor(value) {
        super.defaultColor = value;
      }
      get defaultLabelAnchor() {
        return this[S$0.defaultLabelAnchor];
      }
      set defaultLabelAnchor(value) {
        super.defaultLabelAnchor = value;
      }
      get defaultLabelDirection() {
        return this[S$0.defaultLabelDirection];
      }
      set defaultLabelDirection(value) {
        super.defaultLabelDirection = value;
      }
      get defaultLabelPosition() {
        return this[S$0.defaultLabelPosition];
      }
      set defaultLabelPosition(value) {
        super.defaultLabelPosition = value;
      }
      get defaultLabelStyleSpec() {
        return this[S$0.defaultLabelStyleSpec];
      }
      set defaultLabelStyleSpec(value) {
        super.defaultLabelStyleSpec = value;
      }
      get defaultStrokeWidthPx() {
        return this[S$0.defaultStrokeWidthPx];
      }
      set defaultStrokeWidthPx(value) {
        super.defaultStrokeWidthPx = value;
      }
      get extendAxis() {
        return this[S$0.extendAxis];
      }
      set extendAxis(value) {
        super.extendAxis = value;
      }
      get labelPadding() {
        return this[S$0.labelPadding$2];
      }
      set labelPadding(value) {
        super.labelPadding = value;
      }
      get layoutPaintOrder() {
        return this[S$0.layoutPaintOrder$5];
      }
      set layoutPaintOrder(value) {
        super.layoutPaintOrder = value;
      }
      get [S$0._chart$11]() {
        let t41;
        t41 = this[S$0.__RangeAnnotation__chart];
        return t41 == null ? dart.throw(new _internal.LateError.fieldNI("_chart")) : t41;
      }
      set [S$0._chart$11](t41) {
        this[S$0.__RangeAnnotation__chart] = t41;
      }
      get [S$0._view$1]() {
        let t42;
        t42 = this[S$0.__RangeAnnotation__view];
        return t42 == null ? dart.throw(new _internal.LateError.fieldNI("_view")) : t42;
      }
      set [S$0._view$1](t42) {
        this[S$0.__RangeAnnotation__view] = t42;
      }
      get [S$0._lifecycleListener$2]() {
        let t43;
        t43 = this[S$0.__RangeAnnotation__lifecycleListener];
        return t43 == null ? dart.throw(new _internal.LateError.fieldNI("_lifecycleListener")) : t43;
      }
      set [S$0._lifecycleListener$2](t43) {
        this[S$0.__RangeAnnotation__lifecycleListener] = t43;
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        if (!CartesianChartOfD().is(chart)) {
          dart.throw(new core.ArgumentError.new("RangeAnnotation can only be attached to a CartesianChart<D>"));
        }
        this[S$0._chart$11] = chart;
        this[S$0._view$1] = new (_RangeAnnotationLayoutViewOfD()).new({defaultColor: this.defaultColor, labelPadding: this.labelPadding, chart: this[S$0._chart$11], rangeAnnotation: this, layoutPaintOrder: this.layoutPaintOrder});
        chart.addView(this[S$0._view$1]);
        chart.addLifecycleListener(this[S$0._lifecycleListener$2]);
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.removeView(this[S$0._view$1]);
        chart.removeLifecycleListener(this[S$0._lifecycleListener$2]);
        this[S$0._view$1].chart = null;
      }
      shouldShowLabels(annotation) {
        return true;
      }
      [S$0._updateAxisRange](seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        if (this.extendAxis) {
          for (let annotation of this.annotations) {
            let axis = null;
            switch (annotation.axisType) {
              case C[52] || CT.C52:
              {
                axis = dart.nullCheck(this[S$0._chart$11].domainAxis);
                break;
              }
              case C[53] || CT.C53:
              {
                axis = this[S$0._chart$11].getMeasureAxis({axisId: annotation.axisId});
                break;
              }
            }
            if (T$.RangeAnnotationSegmentOfObject().is(annotation)) {
              axis.addDomainValue(annotation.startValue);
              axis.addDomainValue(annotation.endValue);
            } else if (T$.LineAnnotationSegmentOfObject().is(annotation)) {
              axis.addDomainValue(annotation.value);
            }
          }
        }
      }
      [S$0._updateViewData$1]() {
        this[S$0._currentKeys$4][S$.$clear]();
        const updateAnnotation = (T, axis, annotation) => {
          let t44, t44$, t44$0, t44$1, t44$2, t44$3;
          let key = annotation.key;
          let color = (t44 = annotation.color, t44 == null ? this.defaultColor : t44);
          let startLabel = annotation.startLabel;
          let endLabel = annotation.endLabel;
          let middleLabel = annotation.middleLabel;
          let labelAnchor = (t44$ = annotation.labelAnchor, t44$ == null ? this.defaultLabelAnchor : t44$);
          let labelDirection = (t44$0 = annotation.labelDirection, t44$0 == null ? this.defaultLabelDirection : t44$0);
          if (labelDirection === range_annotation.AnnotationLabelDirection.auto) {
            switch (annotation.axisType) {
              case C[52] || CT.C52:
              {
                labelDirection = range_annotation.AnnotationLabelDirection.vertical;
                break;
              }
              case C[53] || CT.C53:
              {
                labelDirection = range_annotation.AnnotationLabelDirection.horizontal;
                break;
              }
            }
          }
          let labelPosition = (t44$1 = annotation.labelPosition, t44$1 == null ? this.defaultLabelPosition : t44$1);
          let labelStyleSpec = (t44$2 = annotation.labelStyleSpec, t44$2 == null ? this.defaultLabelStyleSpec : t44$2);
          let dashPattern = T$.LineAnnotationSegmentOfObject().is(annotation) ? annotation.dashPattern : null;
          let strokeWidthPx = T$.LineAnnotationSegmentOfObject().is(annotation) ? annotation.strokeWidthPx : 0.0;
          let isRange = range_annotation.RangeAnnotationSegment.is(annotation);
          let startValue = null;
          let endValue = null;
          if (T$.RangeAnnotationSegmentOfObject().is(annotation)) {
            startValue = T.as(annotation.startValue);
            endValue = T.as(annotation.endValue);
          } else if (T$.LineAnnotationSegmentOfObject().is(annotation)) {
            startValue = endValue = T.as(annotation.value);
          } else {
            dart.throw(new core.UnsupportedError.new("Unrecognized annotation type: " + dart.str(annotation[S$.$runtimeType])));
          }
          let annotationDatum = this[S$0._getAnnotationDatum](T, startValue, endValue, axis, annotation.axisType);
          let animatingAnnotation = this[S$0._annotationMap][S$.$_get](key);
          if (animatingAnnotation == null) {
            animatingAnnotation = (t44$3 = new (_AnimatedAnnotationOfD()).new({key: key}), (() => {
              t44$3.setNewTarget(new (_AnnotationElementOfD()).new({annotation: annotationDatum, annotationSegment: annotation, color: color, dashPattern: dashPattern, startLabel: startLabel, endLabel: endLabel, middleLabel: middleLabel, isRange: isRange, labelAnchor: labelAnchor, labelDirection: labelDirection, labelPosition: labelPosition, labelStyleSpec: labelStyleSpec, strokeWidthPx: strokeWidthPx}));
              return t44$3;
            })());
            this[S$0._annotationMap][S$.$_set](key, animatingAnnotation);
          }
          this[S$0._currentKeys$4][S$.$add](key);
          let annotationElement = new (_AnnotationElementOfD()).new({annotation: annotationDatum, annotationSegment: annotation, color: color, dashPattern: dashPattern, startLabel: startLabel, endLabel: endLabel, middleLabel: middleLabel, isRange: isRange, labelAnchor: labelAnchor, labelDirection: labelDirection, labelPosition: labelPosition, labelStyleSpec: labelStyleSpec, strokeWidthPx: strokeWidthPx});
          animatingAnnotation.setNewTarget(annotationElement);
        };
        dart.fn(updateAnnotation, T$.AxisOfTAndAnnotationSegmentOfObjectTovoid());
        for (let annotation of this.annotations) {
          switch (annotation.axisType) {
            case C[52] || CT.C52:
            {
              updateAnnotation(D, dart.nullCheck(this[S$0._chart$11].domainAxis), annotation);
              break;
            }
            case C[53] || CT.C53:
            {
              updateAnnotation(core.num, this[S$0._chart$11].getMeasureAxis({axisId: annotation.axisId}), annotation);
              break;
            }
          }
        }
        this[S$0._annotationMap][S$.$forEach](dart.fn((key, annotation) => {
          if (!this[S$0._currentKeys$4][S$.$contains](annotation.key)) {
            annotation.animateOut();
          }
        }, StringAnd_AnimatedAnnotationOfDTovoid()));
        this[S$0._view$1].annotationMap = this[S$0._annotationMap];
      }
      [S$0._getAnnotationDatum](T, startValue, endValue, axis, axisType) {
        let startPosition = (dart.nullCheck(axis.getLocation(startValue)) * 100)[S$.$round]() / 100;
        let endPosition = (dart.nullCheck(axis.getLocation(endValue)) * 100)[S$.$round]() / 100;
        return new range_annotation._DatumAnnotation.new({startPosition: startPosition, endPosition: endPosition, axisType: axisType});
      }
      get role() {
        return "RangeAnnotation";
      }
    }
    (RangeAnnotation.new = function(annotations, opts) {
      let t41, t41$, t41$0, t41$1, t41$2, t41$3, t41$4, t41$5;
      let defaultColor = opts && 'defaultColor' in opts ? opts.defaultColor : null;
      let defaultLabelAnchor = opts && 'defaultLabelAnchor' in opts ? opts.defaultLabelAnchor : null;
      let defaultLabelDirection = opts && 'defaultLabelDirection' in opts ? opts.defaultLabelDirection : null;
      let defaultLabelPosition = opts && 'defaultLabelPosition' in opts ? opts.defaultLabelPosition : null;
      let defaultLabelStyleSpec = opts && 'defaultLabelStyleSpec' in opts ? opts.defaultLabelStyleSpec : null;
      let extendAxis = opts && 'extendAxis' in opts ? opts.extendAxis : null;
      let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : null;
      let defaultStrokeWidthPx = opts && 'defaultStrokeWidthPx' in opts ? opts.defaultStrokeWidthPx : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      this[S$0.__RangeAnnotation__chart] = null;
      this[S$0.__RangeAnnotation__view] = null;
      this[S$0.__RangeAnnotation__lifecycleListener] = null;
      this[S$0._annotationMap] = new (IdentityMapOfString$_AnimatedAnnotationOfD()).new();
      this[S$0._currentKeys$4] = T$.JSArrayOfString().of([]);
      this[S$0.annotations] = annotations;
      this[S$0.defaultColor] = style_factory.StyleFactory.style.rangeAnnotationColor;
      this[S$0.defaultLabelAnchor] = (t41 = defaultLabelAnchor, t41 == null ? range_annotation.RangeAnnotation._defaultLabelAnchor : t41);
      this[S$0.defaultLabelDirection] = (t41$ = defaultLabelDirection, t41$ == null ? range_annotation.RangeAnnotation._defaultLabelDirection : t41$);
      this[S$0.defaultLabelPosition] = (t41$0 = defaultLabelPosition, t41$0 == null ? range_annotation.RangeAnnotation._defaultLabelPosition : t41$0);
      this[S$0.defaultLabelStyleSpec] = (t41$1 = defaultLabelStyleSpec, t41$1 == null ? range_annotation.RangeAnnotation._defaultLabelStyle : t41$1);
      this[S$0.extendAxis] = (t41$2 = extendAxis, t41$2 == null ? true : t41$2);
      this[S$0.labelPadding$2] = (t41$3 = labelPadding, t41$3 == null ? 5 : t41$3);
      this[S$0.defaultStrokeWidthPx] = (t41$4 = defaultStrokeWidthPx, t41$4 == null ? 2 : t41$4);
      this[S$0.layoutPaintOrder$5] = (t41$5 = layoutPaintOrder, t41$5 == null ? -10 : t41$5);
      this[S$0._lifecycleListener$2] = new (LifecycleListenerOfD()).new({onPostprocess: dart.bind(this, S$0._updateAxisRange), onAxisConfigured: dart.bind(this, S$0._updateViewData$1)});
    }).prototype = RangeAnnotation.prototype;
    dart.addTypeTests(RangeAnnotation);
    RangeAnnotation.prototype[_is_RangeAnnotation_default] = true;
    dart.addTypeCaches(RangeAnnotation);
    RangeAnnotation[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(RangeAnnotation, () => ({
      __proto__: dart.getMethods(RangeAnnotation.__proto__),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      shouldShowLabels: dart.fnType(core.bool, [range_annotation.AnnotationSegment$(core.Object)]),
      [S$0._updateAxisRange]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._updateViewData$1]: dart.fnType(dart.void, []),
      [S$0._getAnnotationDatum]: dart.gFnType(T => [range_annotation._DatumAnnotation, [T, T, axis$.Axis$(T), range_annotation.RangeAnnotationAxisType]], T => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(RangeAnnotation, () => ({
      __proto__: dart.getGetters(RangeAnnotation.__proto__),
      [S$0._chart$11]: cartesian_chart.CartesianChart$(D),
      [S$0._view$1]: range_annotation._RangeAnnotationLayoutView$(D),
      [S$0._lifecycleListener$2]: base_chart.LifecycleListener$(D),
      role: core.String
    }));
    dart.setSetterSignature(RangeAnnotation, () => ({
      __proto__: dart.getSetters(RangeAnnotation.__proto__),
      [S$0._chart$11]: cartesian_chart.CartesianChart$(D),
      [S$0._view$1]: range_annotation._RangeAnnotationLayoutView$(D),
      [S$0._lifecycleListener$2]: base_chart.LifecycleListener$(D)
    }));
    dart.setLibraryUri(RangeAnnotation, I[57]);
    dart.setFieldSignature(RangeAnnotation, () => ({
      __proto__: dart.getFields(RangeAnnotation.__proto__),
      annotations: dart.finalFieldType(core.List$(range_annotation.AnnotationSegment$(core.Object))),
      defaultColor: dart.finalFieldType(color$.Color),
      defaultLabelAnchor: dart.finalFieldType(range_annotation.AnnotationLabelAnchor),
      defaultLabelDirection: dart.finalFieldType(range_annotation.AnnotationLabelDirection),
      defaultLabelPosition: dart.finalFieldType(range_annotation.AnnotationLabelPosition),
      defaultLabelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      defaultStrokeWidthPx: dart.finalFieldType(core.double),
      extendAxis: dart.finalFieldType(core.bool),
      labelPadding: dart.finalFieldType(core.int),
      layoutPaintOrder: dart.finalFieldType(core.int),
      [S$0.__RangeAnnotation__chart]: dart.fieldType(dart.nullable(cartesian_chart.CartesianChart$(D))),
      [S$0.__RangeAnnotation__view]: dart.fieldType(dart.nullable(range_annotation._RangeAnnotationLayoutView$(D))),
      [S$0.__RangeAnnotation__lifecycleListener]: dart.fieldType(dart.nullable(base_chart.LifecycleListener$(D))),
      [S$0._annotationMap]: dart.finalFieldType(collection.LinkedHashMap$(core.String, range_annotation._AnimatedAnnotation$(D))),
      [S$0._currentKeys$4]: dart.finalFieldType(core.List$(core.String))
    }));
    return RangeAnnotation;
  });
  range_annotation.RangeAnnotation = range_annotation.RangeAnnotation$();
  dart.defineLazy(range_annotation.RangeAnnotation, {
    /*range_annotation.RangeAnnotation._defaultLabelAnchor*/get _defaultLabelAnchor() {
      return C[54] || CT.C54;
    },
    /*range_annotation.RangeAnnotation._defaultLabelDirection*/get _defaultLabelDirection() {
      return C[55] || CT.C55;
    },
    /*range_annotation.RangeAnnotation._defaultLabelPosition*/get _defaultLabelPosition() {
      return C[56] || CT.C56;
    },
    /*range_annotation.RangeAnnotation._defaultLabelPadding*/get _defaultLabelPadding() {
      return 5;
    },
    /*range_annotation.RangeAnnotation._defaultLabelStyle*/get _defaultLabelStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 12, color: color$.Color.black});
    }
  }, false);
  dart.addTypeTests(range_annotation.RangeAnnotation, _is_RangeAnnotation_default);
  const _is__RangeAnnotationLayoutView_default = Symbol('_is__RangeAnnotationLayoutView_default');
  range_annotation._RangeAnnotationLayoutView$ = dart.generic(D => {
    var CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    var CartesianChartNOfD = () => (CartesianChartNOfD = dart.constFn(dart.nullable(CartesianChartOfD())))();
    var _AnimatedAnnotationOfD = () => (_AnimatedAnnotationOfD = dart.constFn(range_annotation._AnimatedAnnotation$(D)))();
    var LinkedHashMapOfString$_AnimatedAnnotationOfD = () => (LinkedHashMapOfString$_AnimatedAnnotationOfD = dart.constFn(collection.LinkedHashMap$(core.String, _AnimatedAnnotationOfD())))();
    var StringAnd_AnimatedAnnotationOfDTovoid = () => (StringAnd_AnimatedAnnotationOfDTovoid = dart.constFn(dart.fnType(dart.void, [core.String, _AnimatedAnnotationOfD()])))();
    class _RangeAnnotationLayoutView extends layout_view.LayoutView {
      get layoutConfig() {
        return this[S$0.layoutConfig$2];
      }
      set layoutConfig(value) {
        super.layoutConfig = value;
      }
      get chart() {
        return this[S$0.chart$1];
      }
      set chart(value) {
        this[S$0.chart$1] = CartesianChartNOfD().as(value);
      }
      get graphicsFactory() {
        return this[S$0.graphicsFactory$4];
      }
      set graphicsFactory(value) {
        this[S$0.graphicsFactory$4] = value;
      }
      get isRtl() {
        return dart.nullCheck(this.chart).context.isRtl;
      }
      get [S$0._drawAreaBounds$2]() {
        let t44;
        t44 = this[S$0.___RangeAnnotationLayoutView__drawAreaBounds];
        return t44 == null ? dart.throw(new _internal.LateError.fieldNI("_drawAreaBounds")) : t44;
      }
      set [S$0._drawAreaBounds$2](t44) {
        this[S$0.___RangeAnnotationLayoutView__drawAreaBounds] = t44;
      }
      get drawBounds() {
        return this[S$0._drawAreaBounds$2];
      }
      set annotationMap(value) {
        LinkedHashMapOfString$_AnimatedAnnotationOfD().as(value);
        this[S$0._annotationMap] = value;
      }
      measure(maxWidth, maxHeight) {
        return null;
      }
      layout(componentBounds, drawAreaBounds) {
        this[S$0._drawAreaBounds$2] = drawAreaBounds;
      }
      paint(canvas, animationPercent) {
        let _annotationMap = this[S$0._annotationMap];
        if (_annotationMap == null) {
          return;
        }
        if (animationPercent === 1.0) {
          let keysToRemove = T$.JSArrayOfString().of([]);
          _annotationMap[S$.$forEach](dart.fn((key, annotation) => {
            if (annotation.animatingOut) {
              keysToRemove[S$.$add](key);
            }
          }, StringAnd_AnimatedAnnotationOfDTovoid()));
          keysToRemove[S$.$forEach](dart.bind(_annotationMap, S$.$remove));
        }
        _annotationMap[S$.$forEach](dart.fn((key, annotation) => {
          let annotationElement = annotation.getCurrentAnnotation(animationPercent);
          let bounds = this[S$0._getAnnotationBounds](annotationElement);
          if (annotationElement.isRange) {
            canvas.drawRect(bounds, {fill: annotationElement.color});
          } else {
            let points = this[S$0._getLineAnnotationPoints](annotationElement);
            canvas.drawLine({dashPattern: annotationElement.dashPattern, points: points, stroke: annotationElement.color, strokeWidthPx: annotationElement.strokeWidthPx});
          }
          let labelStyle = this[S$0._getTextStyle$1](dart.nullCheck(this.graphicsFactory), annotationElement.labelStyleSpec);
          let rotation = annotationElement.labelDirection === range_annotation.AnnotationLabelDirection.vertical ? -3.141592653589793 / 2 : 0.0;
          if (this.rangeAnnotation.shouldShowLabels(annotationElement.annotationSegment)) {
            let labels = (() => {
              let t45 = new (T$0.LinkedMapOf_AnnotationLabelType$StringN()).new();
              if (annotationElement.startLabel != null) t45[S$.$_set](range_annotation._AnnotationLabelType.start, annotationElement.startLabel);
              if (annotationElement.endLabel != null) t45[S$.$_set](range_annotation._AnnotationLabelType.end, annotationElement.endLabel);
              if (annotationElement.middleLabel != null) t45[S$.$_set](range_annotation._AnnotationLabelType.middle, annotationElement.middleLabel);
              return t45;
            })();
            labels[S$.$forEach](dart.fn((labelType, label) => {
              let t46;
              let labelElement = (t46 = dart.nullCheck(this.graphicsFactory).createTextElement(dart.nullCheck(label)), (() => {
                t46.maxWidthStrategy = text_element.MaxWidthStrategy.ellipsize;
                t46.textStyle = labelStyle;
                return t46;
              })());
              labelElement.maxWidth = this[S$0._getLabelMaxWidth](bounds, annotationElement, labelElement);
              let labelPoint = this[S$0._getLabelPosition](labelType, bounds, annotationElement, labelElement);
              if (labelPoint != null) {
                canvas.drawText(labelElement, labelPoint.x, labelPoint.y, {rotation: rotation});
              }
            }, T$0._AnnotationLabelTypeAndStringNTovoid()));
          }
        }, StringAnd_AnimatedAnnotationOfDTovoid()));
      }
      [S$0._getAnnotationBounds](annotationElement) {
        let bounds = null;
        switch (annotationElement.annotation.axisType) {
          case C[52] || CT.C52:
          {
            bounds = new (T$.RectangleOfnum()).new(annotationElement.annotation.startPosition, this[S$0._drawAreaBounds$2][S$.$top], annotationElement.annotation.endPosition - annotationElement.annotation.startPosition, this[S$0._drawAreaBounds$2][S$.$height]);
            break;
          }
          case C[53] || CT.C53:
          {
            bounds = new (T$.RectangleOfnum()).new(this[S$0._drawAreaBounds$2][S$.$left], annotationElement.annotation.endPosition, this[S$0._drawAreaBounds$2][S$.$width], annotationElement.annotation.startPosition - annotationElement.annotation.endPosition);
            break;
          }
        }
        return bounds;
      }
      [S$0._getLineAnnotationPoints](annotationElement) {
        let points = T$.JSArrayOfPointOfnum().of([]);
        switch (annotationElement.annotation.axisType) {
          case C[52] || CT.C52:
          {
            points[S$.$add](new (T$.PointOfnum()).new(annotationElement.annotation.startPosition, this[S$0._drawAreaBounds$2][S$.$top]));
            points[S$.$add](new (T$.PointOfnum()).new(annotationElement.annotation.endPosition, this[S$0._drawAreaBounds$2][S$.$bottom]));
            break;
          }
          case C[53] || CT.C53:
          {
            points[S$.$add](new (T$.PointOfnum()).new(this[S$0._drawAreaBounds$2][S$.$left], annotationElement.annotation.startPosition));
            points[S$.$add](new (T$.PointOfnum()).new(this[S$0._drawAreaBounds$2][S$.$right], annotationElement.annotation.endPosition));
            break;
          }
        }
        return points;
      }
      [S$0._getLabelMaxWidth](bounds, annotationElement, labelElement) {
        let maxWidth = 0;
        let calculatedLabelPosition = this[S$0._resolveAutoLabelPosition](bounds, annotationElement, labelElement);
        if (annotationElement.labelPosition === range_annotation.AnnotationLabelPosition.margin && annotationElement.annotation.axisType === range_annotation.RangeAnnotationAxisType.measure) {
          switch (annotationElement.annotation.axisType) {
            case C[52] || CT.C52:
            {
              break;
            }
            case C[53] || CT.C53:
            {
              switch (annotationElement.labelAnchor) {
                case C[57] || CT.C57:
                {
                  maxWidth = dart.nullCheck(this.chart).marginLeft - this.labelPadding;
                  break;
                }
                case C[54] || CT.C54:
                {
                  maxWidth = dart.nullCheck(this.chart).marginRight - this.labelPadding;
                  break;
                }
                case C[58] || CT.C58:
                {
                  break;
                }
              }
              break;
            }
          }
        } else {
          if (calculatedLabelPosition === range_annotation.AnnotationLabelPosition.outside) {
            maxWidth = annotationElement.labelDirection === range_annotation.AnnotationLabelDirection.horizontal ? this.drawBounds[S$.$width] : this.drawBounds[S$.$height];
          } else {
            maxWidth = annotationElement.labelDirection === range_annotation.AnnotationLabelDirection.horizontal ? bounds[S$.$width] : bounds[S$.$height];
          }
        }
        return maxWidth[S$.$round]();
      }
      [S$0._getLabelPosition](labelType, bounds, annotationElement, labelElement) {
        switch (annotationElement.annotation.axisType) {
          case C[52] || CT.C52:
          {
            return this[S$0._getDomainLabelPosition](labelType, bounds, annotationElement, labelElement);
          }
          case C[53] || CT.C53:
          {
            return this[S$0._getMeasureLabelPosition](labelType, bounds, annotationElement, labelElement);
          }
        }
      }
      [S$0._getDomainLabelPosition](labelType, bounds, annotationElement, labelElement) {
        if (annotationElement.labelDirection === range_annotation.AnnotationLabelDirection.vertical) {
          return this[S$0._getDomainLabelPositionVertical](labelType, bounds, annotationElement, labelElement);
        } else {
          return this[S$0._getDomainLabelPositionHorizontal](labelType, bounds, annotationElement, labelElement);
        }
      }
      [S$0._getDomainLabelPositionHorizontal](labelType, bounds, annotationElement, labelElement) {
        let labelX = 0;
        let labelY = 0;
        let calculatedLabelPosition = this[S$0._resolveAutoLabelPosition](bounds, annotationElement, labelElement);
        switch (annotationElement.labelAnchor) {
          case C[58] || CT.C58:
          {
            labelY = bounds[S$.$top] + bounds[S$.$height] / 2 - labelElement.measurement.verticalSliceWidth / 2 - this.labelPadding;
            break;
          }
          case C[54] || CT.C54:
          {
            if (annotationElement.labelPosition === range_annotation.AnnotationLabelPosition.margin) {
              labelY = bounds[S$.$top] - labelElement.measurement.verticalSliceWidth - this.labelPadding;
            } else {
              labelY = bounds[S$.$top] + this.labelPadding;
            }
            break;
          }
          case C[57] || CT.C57:
          {
            if (annotationElement.labelPosition === range_annotation.AnnotationLabelPosition.margin) {
              labelY = bounds[S$.$bottom] + this.labelPadding;
            } else {
              labelY = bounds[S$.$bottom] - labelElement.measurement.verticalSliceWidth - this.labelPadding;
            }
            break;
          }
        }
        switch (calculatedLabelPosition) {
          case C[59] || CT.C59:
          case C[56] || CT.C56:
          {
            dart.throw(new core.ArgumentError.new(range_annotation._unresolvedAutoMessage));
          }
          case C[63] || CT.C63:
          {
            switch (labelType) {
              case C[60] || CT.C60:
              {
                labelX = bounds[S$.$left] - labelElement.measurement.horizontalSliceWidth - this.labelPadding;
                break;
              }
              case C[61] || CT.C61:
              {
                labelX = bounds[S$.$right] + this.labelPadding;
                break;
              }
              case C[62] || CT.C62:
              {
                labelX = bounds[S$.$left] + (bounds[S$.$width] - labelElement.measurement.horizontalSliceWidth) / 2;
                break;
              }
            }
            labelElement.textDirection = this.isRtl ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
          case C[64] || CT.C64:
          {
            switch (labelType) {
              case C[60] || CT.C60:
              {
                labelX = bounds[S$.$left] + this.labelPadding;
                break;
              }
              case C[61] || CT.C61:
              {
                labelX = bounds[S$.$right] - labelElement.measurement.horizontalSliceWidth - this.labelPadding;
                break;
              }
              case C[62] || CT.C62:
              {
                labelX = bounds[S$.$left] + (bounds[S$.$width] - labelElement.measurement.horizontalSliceWidth) / 2;
                break;
              }
            }
            labelElement.textDirection = this.isRtl ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
        }
        return new (T$.PointOfint()).new(labelX[S$.$round](), labelY[S$.$round]());
      }
      [S$0._getDomainLabelPositionVertical](labelType, bounds, annotationElement, labelElement) {
        let labelX = 0;
        let labelY = 0;
        let calculatedLabelPosition = this[S$0._resolveAutoLabelPosition](bounds, annotationElement, labelElement);
        switch (annotationElement.labelAnchor) {
          case C[58] || CT.C58:
          {
            labelY = bounds[S$.$top] + bounds[S$.$height] / 2 + labelElement.measurement.horizontalSliceWidth / 2 + this.labelPadding;
            break;
          }
          case C[54] || CT.C54:
          {
            if (annotationElement.labelPosition === range_annotation.AnnotationLabelPosition.margin) {
              labelY = bounds[S$.$top] + labelElement.measurement.horizontalSliceWidth + this.labelPadding;
            } else {
              labelY = bounds[S$.$top] + labelElement.measurement.horizontalSliceWidth + this.labelPadding;
            }
            break;
          }
          case C[57] || CT.C57:
          {
            if (annotationElement.labelPosition === range_annotation.AnnotationLabelPosition.margin) {
              labelY = bounds[S$.$bottom] + this.labelPadding;
            } else {
              labelY = bounds[S$.$bottom] - labelElement.measurement.horizontalSliceWidth - this.labelPadding;
            }
            break;
          }
        }
        switch (calculatedLabelPosition) {
          case C[59] || CT.C59:
          case C[56] || CT.C56:
          {
            dart.throw(new core.ArgumentError.new(range_annotation._unresolvedAutoMessage));
          }
          case C[63] || CT.C63:
          {
            switch (labelType) {
              case C[60] || CT.C60:
              {
                labelX = bounds[S$.$left] - labelElement.measurement.verticalSliceWidth - this.labelPadding;
                break;
              }
              case C[61] || CT.C61:
              {
                labelX = bounds[S$.$right] + this.labelPadding;
                break;
              }
              case C[62] || CT.C62:
              {
                labelX = bounds[S$.$left] + (bounds[S$.$width] - labelElement.measurement.verticalSliceWidth) / 2;
                break;
              }
            }
            labelElement.textDirection = this.isRtl ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
          case C[64] || CT.C64:
          {
            switch (labelType) {
              case C[60] || CT.C60:
              {
                labelX = bounds[S$.$left] + this.labelPadding;
                break;
              }
              case C[61] || CT.C61:
              {
                labelX = bounds[S$.$right] - labelElement.measurement.verticalSliceWidth - this.labelPadding;
                break;
              }
              case C[62] || CT.C62:
              {
                labelX = bounds[S$.$left] + (bounds[S$.$width] - labelElement.measurement.verticalSliceWidth) / 2;
                break;
              }
            }
            labelElement.textDirection = this.isRtl ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
        }
        return new (T$.PointOfint()).new(labelX[S$.$round](), labelY[S$.$round]());
      }
      [S$0._getMeasureLabelPosition](labelType, bounds, annotationElement, labelElement) {
        if (annotationElement.labelDirection === range_annotation.AnnotationLabelDirection.vertical) {
          return this[S$0._getMeasureLabelPositionVertical](labelType, bounds, annotationElement, labelElement);
        } else {
          return this[S$0._getMeasureLabelPositionHorizontal](labelType, bounds, annotationElement, labelElement);
        }
      }
      [S$0._getMeasureLabelPositionHorizontal](labelType, bounds, annotationElement, labelElement) {
        let labelX = 0;
        let labelY = 0;
        let calculatedLabelPosition = this[S$0._resolveAutoLabelPosition](bounds, annotationElement, labelElement);
        switch (annotationElement.labelAnchor) {
          case C[58] || CT.C58:
          {
            labelX = bounds[S$.$left] + bounds[S$.$width] / 2 - labelElement.measurement.horizontalSliceWidth / 2;
            labelElement.textDirection = this.isRtl ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
          case C[54] || CT.C54:
          case C[57] || CT.C57:
          {
            if (annotationElement.labelPosition === range_annotation.AnnotationLabelPosition.margin) {
              let alignLeft = this.isRtl ? annotationElement.labelAnchor === range_annotation.AnnotationLabelAnchor.end : annotationElement.labelAnchor === range_annotation.AnnotationLabelAnchor.start;
              if (alignLeft) {
                labelX = bounds[S$.$left] - this.labelPadding;
                labelElement.textDirection = text_element.TextDirection.rtl;
              } else {
                labelX = bounds[S$.$right] + this.labelPadding;
                labelElement.textDirection = text_element.TextDirection.ltr;
              }
            } else {
              let alignLeft = this.isRtl ? annotationElement.labelAnchor === range_annotation.AnnotationLabelAnchor.end : annotationElement.labelAnchor === range_annotation.AnnotationLabelAnchor.start;
              if (alignLeft) {
                labelX = bounds[S$.$left] + this.labelPadding;
                labelElement.textDirection = text_element.TextDirection.ltr;
              } else {
                labelX = bounds[S$.$right] - this.labelPadding;
                labelElement.textDirection = text_element.TextDirection.rtl;
              }
            }
            break;
          }
        }
        switch (calculatedLabelPosition) {
          case C[59] || CT.C59:
          case C[56] || CT.C56:
          {
            dart.throw(new core.ArgumentError.new(range_annotation._unresolvedAutoMessage));
          }
          case C[63] || CT.C63:
          {
            switch (labelType) {
              case C[60] || CT.C60:
              {
                labelY = bounds[S$.$bottom] + this.labelPadding;
                break;
              }
              case C[61] || CT.C61:
              {
                labelY = bounds[S$.$top] - labelElement.measurement.verticalSliceWidth - this.labelPadding;
                break;
              }
              case C[62] || CT.C62:
              {
                labelY = bounds[S$.$top] + (bounds[S$.$height] - labelElement.measurement.verticalSliceWidth) / 2;
                break;
              }
            }
            break;
          }
          case C[64] || CT.C64:
          {
            switch (labelType) {
              case C[60] || CT.C60:
              {
                labelY = bounds[S$.$bottom] - labelElement.measurement.verticalSliceWidth - this.labelPadding;
                break;
              }
              case C[61] || CT.C61:
              {
                labelY = bounds[S$.$top] + this.labelPadding;
                break;
              }
              case C[62] || CT.C62:
              {
                labelY = bounds[S$.$top] + (bounds[S$.$height] - labelElement.measurement.verticalSliceWidth) / 2;
                break;
              }
            }
            break;
          }
        }
        return new (T$.PointOfint()).new(labelX[S$.$round](), labelY[S$.$round]());
      }
      [S$0._getMeasureLabelPositionVertical](labelType, bounds, annotationElement, labelElement) {
        let labelX = 0;
        let labelY = 0;
        let calculatedLabelPosition = this[S$0._resolveAutoLabelPosition](bounds, annotationElement, labelElement);
        switch (annotationElement.labelAnchor) {
          case C[58] || CT.C58:
          {
            labelX = bounds[S$.$left] + bounds[S$.$width] / 2 - labelElement.measurement.verticalSliceWidth / 2;
            labelElement.textDirection = this.isRtl ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
          case C[54] || CT.C54:
          case C[57] || CT.C57:
          {
            if (annotationElement.labelPosition === range_annotation.AnnotationLabelPosition.margin) {
              let alignLeft = this.isRtl ? annotationElement.labelAnchor === range_annotation.AnnotationLabelAnchor.end : annotationElement.labelAnchor === range_annotation.AnnotationLabelAnchor.start;
              if (alignLeft) {
                labelX = bounds[S$.$left] - labelElement.measurement.verticalSliceWidth - this.labelPadding;
                labelElement.textDirection = text_element.TextDirection.ltr;
              } else {
                labelX = bounds[S$.$right] + this.labelPadding;
                labelElement.textDirection = text_element.TextDirection.ltr;
              }
            } else {
              let alignLeft = this.isRtl ? annotationElement.labelAnchor === range_annotation.AnnotationLabelAnchor.end : annotationElement.labelAnchor === range_annotation.AnnotationLabelAnchor.start;
              if (alignLeft) {
                labelX = bounds[S$.$left] + this.labelPadding;
                labelElement.textDirection = text_element.TextDirection.ltr;
              } else {
                labelX = bounds[S$.$right] - labelElement.measurement.verticalSliceWidth - this.labelPadding;
                labelElement.textDirection = text_element.TextDirection.ltr;
              }
            }
            break;
          }
        }
        switch (calculatedLabelPosition) {
          case C[59] || CT.C59:
          case C[56] || CT.C56:
          {
            dart.throw(new core.ArgumentError.new(range_annotation._unresolvedAutoMessage));
          }
          case C[63] || CT.C63:
          {
            switch (labelType) {
              case C[60] || CT.C60:
              {
                labelY = bounds[S$.$bottom] + labelElement.measurement.horizontalSliceWidth + this.labelPadding;
                break;
              }
              case C[61] || CT.C61:
              {
                labelY = bounds[S$.$top] - this.labelPadding;
                break;
              }
              case C[62] || CT.C62:
              {
                labelY = bounds[S$.$bottom] + (labelElement.measurement.horizontalSliceWidth - bounds[S$.$height]) / 2;
                break;
              }
            }
            break;
          }
          case C[64] || CT.C64:
          {
            switch (labelType) {
              case C[60] || CT.C60:
              {
                labelY = bounds[S$.$bottom] - this.labelPadding;
                break;
              }
              case C[61] || CT.C61:
              {
                labelY = bounds[S$.$top] + labelElement.measurement.horizontalSliceWidth + this.labelPadding;
                break;
              }
              case C[62] || CT.C62:
              {
                labelY = bounds[S$.$bottom] + (labelElement.measurement.horizontalSliceWidth - bounds[S$.$height]) / 2;
                break;
              }
            }
            break;
          }
        }
        return new (T$.PointOfint()).new(labelX[S$.$round](), labelY[S$.$round]());
      }
      [S$0._resolveAutoLabelPosition](bounds, annotationElement, labelElement) {
        let calculatedLabelPosition = annotationElement.labelPosition;
        if (calculatedLabelPosition === range_annotation.AnnotationLabelPosition.auto || calculatedLabelPosition === range_annotation.AnnotationLabelPosition.margin) {
          let isDomain = annotationElement.annotation.axisType === range_annotation.RangeAnnotationAxisType.domain;
          let annotationBoundsSize = isDomain ? bounds[S$.$width] : bounds[S$.$height];
          let drawBoundsSize = isDomain ? this.drawBounds[S$.$width] : this.drawBounds[S$.$height];
          let isVertical = annotationElement.labelDirection === range_annotation.AnnotationLabelDirection.vertical;
          let labelSize = isDomain && isVertical || !isDomain && !isVertical ? labelElement.measurement.verticalSliceWidth : labelElement.measurement.horizontalSliceWidth;
          let totalPadding = this.labelPadding * 2;
          let insideBarWidth = annotationBoundsSize - totalPadding;
          let outsideBarWidth = drawBoundsSize - annotationBoundsSize - totalPadding;
          calculatedLabelPosition = insideBarWidth >= outsideBarWidth || labelSize < insideBarWidth ? range_annotation.AnnotationLabelPosition.inside : range_annotation.AnnotationLabelPosition.outside;
        }
        return calculatedLabelPosition;
      }
      get componentBounds() {
        return this[S$0._drawAreaBounds$2];
      }
      get isSeriesRenderer() {
        return false;
      }
      [S$0._getTextStyle$1](graphicsFactory, labelSpec) {
        let t47, t47$, t46;
        t46 = graphicsFactory.createTextPaint();
        return (() => {
          t46.color = (t47 = labelSpec.color, t47 == null ? color$.Color.black : t47);
          t46.fontFamily = labelSpec.fontFamily;
          t46.fontSize = (t47$ = labelSpec.fontSize, t47$ == null ? 12 : t47$);
          t46.lineHeight = labelSpec.lineHeight;
          return t46;
        })();
      }
    }
    (_RangeAnnotationLayoutView.new = function(opts) {
      let defaultColor = opts && 'defaultColor' in opts ? opts.defaultColor : null;
      let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : null;
      let chart = opts && 'chart' in opts ? opts.chart : null;
      let rangeAnnotation = opts && 'rangeAnnotation' in opts ? opts.rangeAnnotation : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      this[S$0.___RangeAnnotationLayoutView__drawAreaBounds] = null;
      this[S$0.graphicsFactory$4] = null;
      this[S$0._annotationMap] = null;
      this.defaultColor = defaultColor;
      this.labelPadding = labelPadding;
      this[S$0.chart$1] = chart;
      this.rangeAnnotation = rangeAnnotation;
      this.layoutPaintOrder = layoutPaintOrder;
      this[S$0.layoutConfig$2] = new layout_view.LayoutViewConfig.new({paintOrder: layoutPaintOrder, position: layout_view.LayoutPosition.DrawArea, positionOrder: 0});
      ;
    }).prototype = _RangeAnnotationLayoutView.prototype;
    dart.addTypeTests(_RangeAnnotationLayoutView);
    _RangeAnnotationLayoutView.prototype[_is__RangeAnnotationLayoutView_default] = true;
    dart.addTypeCaches(_RangeAnnotationLayoutView);
    dart.setMethodSignature(_RangeAnnotationLayoutView, () => ({
      __proto__: dart.getMethods(_RangeAnnotationLayoutView.__proto__),
      measure: dart.fnType(dart.nullable(layout_view.ViewMeasuredSizes), [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      [S$0._getAnnotationBounds]: dart.fnType(math.Rectangle$(core.num), [range_annotation._AnnotationElement$(D)]),
      [S$0._getLineAnnotationPoints]: dart.fnType(core.List$(math.Point$(core.num)), [range_annotation._AnnotationElement$(D)]),
      [S$0._getLabelMaxWidth]: dart.fnType(core.int, [math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [S$0._getLabelPosition]: dart.fnType(dart.nullable(math.Point$(core.int)), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [S$0._getDomainLabelPosition]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [S$0._getDomainLabelPositionHorizontal]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [S$0._getDomainLabelPositionVertical]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [S$0._getMeasureLabelPosition]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [S$0._getMeasureLabelPositionHorizontal]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [S$0._getMeasureLabelPositionVertical]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [S$0._resolveAutoLabelPosition]: dart.fnType(range_annotation.AnnotationLabelPosition, [math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [S$0._getTextStyle$1]: dart.fnType(text_style.TextStyle, [graphics_factory.GraphicsFactory, axis_spec.TextStyleSpec])
    }));
    dart.setGetterSignature(_RangeAnnotationLayoutView, () => ({
      __proto__: dart.getGetters(_RangeAnnotationLayoutView.__proto__),
      isRtl: core.bool,
      [S$0._drawAreaBounds$2]: math.Rectangle$(core.int),
      drawBounds: math.Rectangle$(core.int),
      componentBounds: math.Rectangle$(core.int),
      isSeriesRenderer: core.bool
    }));
    dart.setSetterSignature(_RangeAnnotationLayoutView, () => ({
      __proto__: dart.getSetters(_RangeAnnotationLayoutView.__proto__),
      [S$0._drawAreaBounds$2]: math.Rectangle$(core.int),
      annotationMap: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(_RangeAnnotationLayoutView, I[57]);
    dart.setFieldSignature(_RangeAnnotationLayoutView, () => ({
      __proto__: dart.getFields(_RangeAnnotationLayoutView.__proto__),
      layoutConfig: dart.finalFieldType(layout_view.LayoutViewConfig),
      defaultColor: dart.finalFieldType(color$.Color),
      labelPadding: dart.finalFieldType(core.int),
      rangeAnnotation: dart.finalFieldType(range_annotation.RangeAnnotation$(D)),
      layoutPaintOrder: dart.finalFieldType(core.int),
      chart: dart.fieldType(dart.nullable(cartesian_chart.CartesianChart$(D))),
      [S$0.___RangeAnnotationLayoutView__drawAreaBounds]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      graphicsFactory: dart.fieldType(dart.nullable(graphics_factory.GraphicsFactory)),
      [S$0._annotationMap]: dart.fieldType(dart.nullable(collection.LinkedHashMap$(core.String, range_annotation._AnimatedAnnotation$(D))))
    }));
    return _RangeAnnotationLayoutView;
  });
  range_annotation._RangeAnnotationLayoutView = range_annotation._RangeAnnotationLayoutView$();
  dart.addTypeTests(range_annotation._RangeAnnotationLayoutView, _is__RangeAnnotationLayoutView_default);
  range_annotation._DatumAnnotation = class _DatumAnnotation extends core.Object {
    static from(other, startPosition = null, endPosition = null) {
      let t46, t46$;
      return new range_annotation._DatumAnnotation.new({startPosition: (t46 = startPosition, t46 == null ? other.startPosition : t46), endPosition: (t46$ = endPosition, t46$ == null ? other.endPosition : t46$), axisType: other.axisType});
    }
  };
  (range_annotation._DatumAnnotation.new = function(opts) {
    let startPosition = opts && 'startPosition' in opts ? opts.startPosition : null;
    let endPosition = opts && 'endPosition' in opts ? opts.endPosition : null;
    let axisType = opts && 'axisType' in opts ? opts.axisType : null;
    this.startPosition = startPosition;
    this.endPosition = endPosition;
    this.axisType = axisType;
    ;
  }).prototype = range_annotation._DatumAnnotation.prototype;
  dart.addTypeTests(range_annotation._DatumAnnotation);
  dart.addTypeCaches(range_annotation._DatumAnnotation);
  dart.setLibraryUri(range_annotation._DatumAnnotation, I[57]);
  dart.setFieldSignature(range_annotation._DatumAnnotation, () => ({
    __proto__: dart.getFields(range_annotation._DatumAnnotation.__proto__),
    startPosition: dart.finalFieldType(core.double),
    endPosition: dart.finalFieldType(core.double),
    axisType: dart.finalFieldType(range_annotation.RangeAnnotationAxisType)
  }));
  const _is__AnnotationElement_default = Symbol('_is__AnnotationElement_default');
  range_annotation._AnnotationElement$ = dart.generic(D => {
    var _AnnotationElementOfD = () => (_AnnotationElementOfD = dart.constFn(range_annotation._AnnotationElement$(D)))();
    class _AnnotationElement extends core.Object {
      clone() {
        return new (_AnnotationElementOfD()).new({annotation: range_annotation._DatumAnnotation.from(this.annotation), annotationSegment: this.annotationSegment, color: this.color != null ? new color$.Color.fromOther({color: dart.nullCheck(this.color)}) : null, startLabel: this.startLabel, endLabel: this.endLabel, middleLabel: this.middleLabel, isRange: this.isRange, labelAnchor: this.labelAnchor, labelDirection: this.labelDirection, labelPosition: this.labelPosition, labelStyleSpec: this.labelStyleSpec, dashPattern: this.dashPattern, strokeWidthPx: this.strokeWidthPx});
      }
      updateAnimationPercent(previous, target, animationPercent) {
        _AnnotationElementOfD().as(previous);
        _AnnotationElementOfD().as(target);
        let targetAnnotation = target.annotation;
        let previousAnnotation = previous.annotation;
        let startPosition = (targetAnnotation.startPosition - previousAnnotation.startPosition) * animationPercent + previousAnnotation.startPosition;
        let endPosition = (targetAnnotation.endPosition - previousAnnotation.endPosition) * animationPercent + previousAnnotation.endPosition;
        this.annotation = range_annotation._DatumAnnotation.from(targetAnnotation, startPosition, endPosition);
        this.color = chart_canvas.getAnimatedColor(dart.nullCheck(previous.color), dart.nullCheck(target.color), animationPercent);
        this.strokeWidthPx = (target.strokeWidthPx - previous.strokeWidthPx) * animationPercent + previous.strokeWidthPx;
      }
    }
    (_AnnotationElement.new = function(opts) {
      let annotation = opts && 'annotation' in opts ? opts.annotation : null;
      let annotationSegment = opts && 'annotationSegment' in opts ? opts.annotationSegment : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let startLabel = opts && 'startLabel' in opts ? opts.startLabel : null;
      let endLabel = opts && 'endLabel' in opts ? opts.endLabel : null;
      let middleLabel = opts && 'middleLabel' in opts ? opts.middleLabel : null;
      let isRange = opts && 'isRange' in opts ? opts.isRange : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelDirection = opts && 'labelDirection' in opts ? opts.labelDirection : null;
      let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      this.annotation = annotation;
      this.annotationSegment = annotationSegment;
      this.color = color;
      this.startLabel = startLabel;
      this.endLabel = endLabel;
      this.middleLabel = middleLabel;
      this.isRange = isRange;
      this.labelAnchor = labelAnchor;
      this.labelDirection = labelDirection;
      this.labelPosition = labelPosition;
      this.labelStyleSpec = labelStyleSpec;
      this.dashPattern = dashPattern;
      this.strokeWidthPx = strokeWidthPx;
      ;
    }).prototype = _AnnotationElement.prototype;
    dart.addTypeTests(_AnnotationElement);
    _AnnotationElement.prototype[_is__AnnotationElement_default] = true;
    dart.addTypeCaches(_AnnotationElement);
    dart.setMethodSignature(_AnnotationElement, () => ({
      __proto__: dart.getMethods(_AnnotationElement.__proto__),
      clone: dart.fnType(range_annotation._AnnotationElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object), core.double])
    }));
    dart.setLibraryUri(_AnnotationElement, I[57]);
    dart.setFieldSignature(_AnnotationElement, () => ({
      __proto__: dart.getFields(_AnnotationElement.__proto__),
      annotation: dart.fieldType(range_annotation._DatumAnnotation),
      annotationSegment: dart.finalFieldType(range_annotation.AnnotationSegment$(core.Object)),
      color: dart.fieldType(dart.nullable(color$.Color)),
      startLabel: dart.finalFieldType(dart.nullable(core.String)),
      endLabel: dart.finalFieldType(dart.nullable(core.String)),
      middleLabel: dart.finalFieldType(dart.nullable(core.String)),
      isRange: dart.finalFieldType(core.bool),
      labelAnchor: dart.finalFieldType(range_annotation.AnnotationLabelAnchor),
      labelDirection: dart.finalFieldType(range_annotation.AnnotationLabelDirection),
      labelPosition: dart.finalFieldType(range_annotation.AnnotationLabelPosition),
      labelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      dashPattern: dart.finalFieldType(dart.nullable(core.List$(core.int))),
      strokeWidthPx: dart.fieldType(core.double)
    }));
    return _AnnotationElement;
  });
  range_annotation._AnnotationElement = range_annotation._AnnotationElement$();
  dart.addTypeTests(range_annotation._AnnotationElement, _is__AnnotationElement_default);
  range_annotation._AnnotationLabelType = class _AnnotationLabelType extends core.Object {
    toString() {
      return this[S$0._name$8];
    }
  };
  (range_annotation._AnnotationLabelType.new = function(index, _name) {
    this.index = index;
    this[S$0._name$8] = _name;
    ;
  }).prototype = range_annotation._AnnotationLabelType.prototype;
  dart.addTypeTests(range_annotation._AnnotationLabelType);
  dart.addTypeCaches(range_annotation._AnnotationLabelType);
  dart.setLibraryUri(range_annotation._AnnotationLabelType, I[57]);
  dart.setFieldSignature(range_annotation._AnnotationLabelType, () => ({
    __proto__: dart.getFields(range_annotation._AnnotationLabelType.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$8]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(range_annotation._AnnotationLabelType, ['toString']);
  range_annotation._AnnotationLabelType.start = C[60] || CT.C60;
  range_annotation._AnnotationLabelType.end = C[61] || CT.C61;
  range_annotation._AnnotationLabelType.middle = C[62] || CT.C62;
  range_annotation._AnnotationLabelType.values = C[65] || CT.C65;
  const _is__AnimatedAnnotation_default = Symbol('_is__AnimatedAnnotation_default');
  range_annotation._AnimatedAnnotation$ = dart.generic(D => {
    var _AnnotationElementOfD = () => (_AnnotationElementOfD = dart.constFn(range_annotation._AnnotationElement$(D)))();
    class _AnimatedAnnotation extends core.Object {
      get [S$0._targetAnnotation]() {
        let t46;
        t46 = this[S$0.___AnimatedAnnotation__targetAnnotation];
        return t46 == null ? dart.throw(new _internal.LateError.fieldNI("_targetAnnotation")) : t46;
      }
      set [S$0._targetAnnotation](t46) {
        this[S$0.___AnimatedAnnotation__targetAnnotation] = t46;
      }
      animateOut() {
        let newTarget = dart.nullCheck(this[S$0._currentAnnotation]).clone();
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        _AnnotationElementOfD().as(newTarget);
        this.animatingOut = false;
        this[S$0._currentAnnotation] == null ? this[S$0._currentAnnotation] = newTarget.clone() : null;
        this[S$0._previousAnnotation] = dart.nullCheck(this[S$0._currentAnnotation]).clone();
        this[S$0._targetAnnotation] = newTarget;
      }
      getCurrentAnnotation(animationPercent) {
        if (animationPercent === 1.0 || this[S$0._previousAnnotation] == null) {
          this[S$0._currentAnnotation] = this[S$0._targetAnnotation];
          this[S$0._previousAnnotation] = this[S$0._targetAnnotation];
          return dart.nullCheck(this[S$0._currentAnnotation]);
        }
        dart.nullCheck(this[S$0._currentAnnotation]).updateAnimationPercent(dart.nullCheck(this[S$0._previousAnnotation]), this[S$0._targetAnnotation], animationPercent);
        return dart.nullCheck(this[S$0._currentAnnotation]);
      }
    }
    (_AnimatedAnnotation.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      this[S$0._previousAnnotation] = null;
      this[S$0.___AnimatedAnnotation__targetAnnotation] = null;
      this[S$0._currentAnnotation] = null;
      this.animatingOut = false;
      this.key = key;
      ;
    }).prototype = _AnimatedAnnotation.prototype;
    dart.addTypeTests(_AnimatedAnnotation);
    _AnimatedAnnotation.prototype[_is__AnimatedAnnotation_default] = true;
    dart.addTypeCaches(_AnimatedAnnotation);
    dart.setMethodSignature(_AnimatedAnnotation, () => ({
      __proto__: dart.getMethods(_AnimatedAnnotation.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      getCurrentAnnotation: dart.fnType(range_annotation._AnnotationElement$(D), [core.double])
    }));
    dart.setGetterSignature(_AnimatedAnnotation, () => ({
      __proto__: dart.getGetters(_AnimatedAnnotation.__proto__),
      [S$0._targetAnnotation]: range_annotation._AnnotationElement$(D)
    }));
    dart.setSetterSignature(_AnimatedAnnotation, () => ({
      __proto__: dart.getSetters(_AnimatedAnnotation.__proto__),
      [S$0._targetAnnotation]: range_annotation._AnnotationElement$(D)
    }));
    dart.setLibraryUri(_AnimatedAnnotation, I[57]);
    dart.setFieldSignature(_AnimatedAnnotation, () => ({
      __proto__: dart.getFields(_AnimatedAnnotation.__proto__),
      key: dart.finalFieldType(core.String),
      [S$0._previousAnnotation]: dart.fieldType(dart.nullable(range_annotation._AnnotationElement$(D))),
      [S$0.___AnimatedAnnotation__targetAnnotation]: dart.fieldType(dart.nullable(range_annotation._AnnotationElement$(D))),
      [S$0._currentAnnotation]: dart.fieldType(dart.nullable(range_annotation._AnnotationElement$(D))),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedAnnotation;
  });
  range_annotation._AnimatedAnnotation = range_annotation._AnimatedAnnotation$();
  dart.addTypeTests(range_annotation._AnimatedAnnotation, _is__AnimatedAnnotation_default);
  const _is_RangeAnnotationTester_default = Symbol('_is_RangeAnnotationTester_default');
  range_annotation.RangeAnnotationTester$ = dart.generic(D => {
    class RangeAnnotationTester extends core.Object {
      get behavior() {
        return this[S$0.behavior$1];
      }
      set behavior(value) {
        super.behavior = value;
      }
      set graphicsFactory(value) {
        this.behavior[S$0._view$1].graphicsFactory = value;
      }
      mockLayout(bounds) {
        this.behavior[S$0._view$1].layout(bounds, bounds);
      }
      doesAnnotationExist(opts) {
        let startPosition = opts && 'startPosition' in opts ? opts.startPosition : null;
        let endPosition = opts && 'endPosition' in opts ? opts.endPosition : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let startLabel = opts && 'startLabel' in opts ? opts.startLabel : null;
        let endLabel = opts && 'endLabel' in opts ? opts.endLabel : null;
        let middleLabel = opts && 'middleLabel' in opts ? opts.middleLabel : null;
        let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
        let labelDirection = opts && 'labelDirection' in opts ? opts.labelDirection : null;
        let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : null;
        for (let a of this.behavior[S$0._annotationMap][S$.$values]) {
          let currentAnnotation = dart.nullCheck(a[S$0._currentAnnotation]);
          let annotation = currentAnnotation.annotation;
          if (annotation.startPosition === startPosition && annotation.endPosition === endPosition && dart.equals(currentAnnotation.color, color) && currentAnnotation.startLabel == startLabel && currentAnnotation.endLabel == endLabel && currentAnnotation.middleLabel == middleLabel && currentAnnotation.labelAnchor === labelAnchor && currentAnnotation.labelDirection === labelDirection && currentAnnotation.labelPosition === labelPosition && (!range_annotation.LineAnnotationSegment.is(currentAnnotation) || dart.equals(currentAnnotation.dashPattern, dashPattern))) {
            return true;
          }
        }
        return false;
      }
    }
    (RangeAnnotationTester.new = function(behavior) {
      this[S$0.behavior$1] = behavior;
      ;
    }).prototype = RangeAnnotationTester.prototype;
    dart.addTypeTests(RangeAnnotationTester);
    RangeAnnotationTester.prototype[_is_RangeAnnotationTester_default] = true;
    dart.addTypeCaches(RangeAnnotationTester);
    dart.setMethodSignature(RangeAnnotationTester, () => ({
      __proto__: dart.getMethods(RangeAnnotationTester.__proto__),
      mockLayout: dart.fnType(dart.void, [math.Rectangle$(core.int)]),
      doesAnnotationExist: dart.fnType(core.bool, [], {color: dart.nullable(color$.Color), dashPattern: dart.nullable(core.List$(core.int)), endLabel: dart.nullable(core.String), endPosition: dart.nullable(core.num), labelAnchor: dart.nullable(range_annotation.AnnotationLabelAnchor), labelDirection: dart.nullable(range_annotation.AnnotationLabelDirection), labelPosition: dart.nullable(range_annotation.AnnotationLabelPosition), middleLabel: dart.nullable(core.String), startLabel: dart.nullable(core.String), startPosition: dart.nullable(core.num)}, {})
    }));
    dart.setSetterSignature(RangeAnnotationTester, () => ({
      __proto__: dart.getSetters(RangeAnnotationTester.__proto__),
      graphicsFactory: graphics_factory.GraphicsFactory
    }));
    dart.setLibraryUri(RangeAnnotationTester, I[57]);
    dart.setFieldSignature(RangeAnnotationTester, () => ({
      __proto__: dart.getFields(RangeAnnotationTester.__proto__),
      behavior: dart.finalFieldType(range_annotation.RangeAnnotation$(D))
    }));
    return RangeAnnotationTester;
  });
  range_annotation.RangeAnnotationTester = range_annotation.RangeAnnotationTester$();
  dart.addTypeTests(range_annotation.RangeAnnotationTester, _is_RangeAnnotationTester_default);
  const _is_AnnotationSegment_default = Symbol('_is_AnnotationSegment_default');
  range_annotation.AnnotationSegment$ = dart.generic(D => {
    class AnnotationSegment extends core.Object {
      get axisType() {
        return this[S$0.axisType];
      }
      set axisType(value) {
        super.axisType = value;
      }
      get axisId() {
        return this[S$0.axisId];
      }
      set axisId(value) {
        super.axisId = value;
      }
      get color() {
        return this[S$0.color$3];
      }
      set color(value) {
        super.color = value;
      }
      get startLabel() {
        return this[S$0.startLabel];
      }
      set startLabel(value) {
        super.startLabel = value;
      }
      get endLabel() {
        return this[S$0.endLabel];
      }
      set endLabel(value) {
        super.endLabel = value;
      }
      get middleLabel() {
        return this[S$0.middleLabel];
      }
      set middleLabel(value) {
        super.middleLabel = value;
      }
      get labelAnchor() {
        return this[S$0.labelAnchor];
      }
      set labelAnchor(value) {
        super.labelAnchor = value;
      }
      get labelDirection() {
        return this[S$0.labelDirection];
      }
      set labelDirection(value) {
        super.labelDirection = value;
      }
      get labelPosition() {
        return this[S$0.labelPosition$1];
      }
      set labelPosition(value) {
        super.labelPosition = value;
      }
      get labelStyleSpec() {
        return this[S$0.labelStyleSpec$1];
      }
      set labelStyleSpec(value) {
        super.labelStyleSpec = value;
      }
    }
    (AnnotationSegment.new = function(axisType, opts) {
      let axisId = opts && 'axisId' in opts ? opts.axisId : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let startLabel = opts && 'startLabel' in opts ? opts.startLabel : null;
      let endLabel = opts && 'endLabel' in opts ? opts.endLabel : null;
      let middleLabel = opts && 'middleLabel' in opts ? opts.middleLabel : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelDirection = opts && 'labelDirection' in opts ? opts.labelDirection : null;
      let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      this[S$0.axisType] = axisType;
      this[S$0.axisId] = axisId;
      this[S$0.color$3] = color;
      this[S$0.startLabel] = startLabel;
      this[S$0.endLabel] = endLabel;
      this[S$0.middleLabel] = middleLabel;
      this[S$0.labelAnchor] = labelAnchor;
      this[S$0.labelDirection] = labelDirection;
      this[S$0.labelPosition$1] = labelPosition;
      this[S$0.labelStyleSpec$1] = labelStyleSpec;
      ;
    }).prototype = AnnotationSegment.prototype;
    dart.addTypeTests(AnnotationSegment);
    AnnotationSegment.prototype[_is_AnnotationSegment_default] = true;
    dart.addTypeCaches(AnnotationSegment);
    dart.setLibraryUri(AnnotationSegment, I[57]);
    dart.setFieldSignature(AnnotationSegment, () => ({
      __proto__: dart.getFields(AnnotationSegment.__proto__),
      axisType: dart.finalFieldType(range_annotation.RangeAnnotationAxisType),
      axisId: dart.finalFieldType(dart.nullable(core.String)),
      color: dart.finalFieldType(dart.nullable(color$.Color)),
      startLabel: dart.finalFieldType(dart.nullable(core.String)),
      endLabel: dart.finalFieldType(dart.nullable(core.String)),
      middleLabel: dart.finalFieldType(dart.nullable(core.String)),
      labelAnchor: dart.finalFieldType(dart.nullable(range_annotation.AnnotationLabelAnchor)),
      labelDirection: dart.finalFieldType(dart.nullable(range_annotation.AnnotationLabelDirection)),
      labelPosition: dart.finalFieldType(dart.nullable(range_annotation.AnnotationLabelPosition)),
      labelStyleSpec: dart.finalFieldType(dart.nullable(axis_spec.TextStyleSpec))
    }));
    return AnnotationSegment;
  });
  range_annotation.AnnotationSegment = range_annotation.AnnotationSegment$();
  dart.addTypeTests(range_annotation.AnnotationSegment, _is_AnnotationSegment_default);
  const _is_RangeAnnotationSegment_default = Symbol('_is_RangeAnnotationSegment_default');
  range_annotation.RangeAnnotationSegment$ = dart.generic(D => {
    class RangeAnnotationSegment extends range_annotation.AnnotationSegment$(D) {
      get startValue() {
        return this[S$0.startValue];
      }
      set startValue(value) {
        super.startValue = value;
      }
      get endValue() {
        return this[S$0.endValue];
      }
      set endValue(value) {
        super.endValue = value;
      }
      get key() {
        return "r::" + dart.str(this.axisType) + "::" + dart.str(this.axisId) + "::" + dart.str(this.startValue) + "::" + dart.str(this.endValue);
      }
    }
    (RangeAnnotationSegment.new = function(startValue, endValue, axisType, opts) {
      let axisId = opts && 'axisId' in opts ? opts.axisId : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let startLabel = opts && 'startLabel' in opts ? opts.startLabel : null;
      let endLabel = opts && 'endLabel' in opts ? opts.endLabel : null;
      let middleLabel = opts && 'middleLabel' in opts ? opts.middleLabel : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelDirection = opts && 'labelDirection' in opts ? opts.labelDirection : null;
      let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      this[S$0.startValue] = startValue;
      this[S$0.endValue] = endValue;
      RangeAnnotationSegment.__proto__.new.call(this, axisType, {axisId: axisId, color: color, startLabel: startLabel, endLabel: endLabel, middleLabel: middleLabel, labelAnchor: labelAnchor, labelDirection: labelDirection, labelPosition: labelPosition, labelStyleSpec: labelStyleSpec});
      ;
    }).prototype = RangeAnnotationSegment.prototype;
    dart.addTypeTests(RangeAnnotationSegment);
    RangeAnnotationSegment.prototype[_is_RangeAnnotationSegment_default] = true;
    dart.addTypeCaches(RangeAnnotationSegment);
    dart.setGetterSignature(RangeAnnotationSegment, () => ({
      __proto__: dart.getGetters(RangeAnnotationSegment.__proto__),
      key: core.String
    }));
    dart.setLibraryUri(RangeAnnotationSegment, I[57]);
    dart.setFieldSignature(RangeAnnotationSegment, () => ({
      __proto__: dart.getFields(RangeAnnotationSegment.__proto__),
      startValue: dart.finalFieldType(D),
      endValue: dart.finalFieldType(D)
    }));
    return RangeAnnotationSegment;
  });
  range_annotation.RangeAnnotationSegment = range_annotation.RangeAnnotationSegment$();
  dart.addTypeTests(range_annotation.RangeAnnotationSegment, _is_RangeAnnotationSegment_default);
  const _is_LineAnnotationSegment_default = Symbol('_is_LineAnnotationSegment_default');
  range_annotation.LineAnnotationSegment$ = dart.generic(D => {
    class LineAnnotationSegment extends range_annotation.AnnotationSegment$(D) {
      get value() {
        return this[S$0.value];
      }
      set value(value) {
        super.value = value;
      }
      get dashPattern() {
        return this[S$0.dashPattern$1];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get strokeWidthPx() {
        return this[S$0.strokeWidthPx$9];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get key() {
        return "l::" + dart.str(this.axisType) + "::" + dart.str(this.axisId) + "::" + dart.str(this.value);
      }
    }
    (LineAnnotationSegment.new = function(value, axisType, opts) {
      let axisId = opts && 'axisId' in opts ? opts.axisId : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let startLabel = opts && 'startLabel' in opts ? opts.startLabel : null;
      let endLabel = opts && 'endLabel' in opts ? opts.endLabel : null;
      let middleLabel = opts && 'middleLabel' in opts ? opts.middleLabel : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelDirection = opts && 'labelDirection' in opts ? opts.labelDirection : null;
      let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 2;
      this[S$0.value] = value;
      this[S$0.dashPattern$1] = dashPattern;
      this[S$0.strokeWidthPx$9] = strokeWidthPx;
      LineAnnotationSegment.__proto__.new.call(this, axisType, {axisId: axisId, color: color, startLabel: startLabel, endLabel: endLabel, middleLabel: middleLabel, labelAnchor: labelAnchor, labelDirection: labelDirection, labelPosition: labelPosition, labelStyleSpec: labelStyleSpec});
      ;
    }).prototype = LineAnnotationSegment.prototype;
    dart.addTypeTests(LineAnnotationSegment);
    LineAnnotationSegment.prototype[_is_LineAnnotationSegment_default] = true;
    dart.addTypeCaches(LineAnnotationSegment);
    dart.setGetterSignature(LineAnnotationSegment, () => ({
      __proto__: dart.getGetters(LineAnnotationSegment.__proto__),
      key: core.String
    }));
    dart.setLibraryUri(LineAnnotationSegment, I[57]);
    dart.setFieldSignature(LineAnnotationSegment, () => ({
      __proto__: dart.getFields(LineAnnotationSegment.__proto__),
      value: dart.finalFieldType(D),
      dashPattern: dart.finalFieldType(dart.nullable(core.List$(core.int))),
      strokeWidthPx: dart.finalFieldType(core.double)
    }));
    return LineAnnotationSegment;
  });
  range_annotation.LineAnnotationSegment = range_annotation.LineAnnotationSegment$();
  dart.addTypeTests(range_annotation.LineAnnotationSegment, _is_LineAnnotationSegment_default);
  range_annotation.RangeAnnotationAxisType = class RangeAnnotationAxisType extends core.Object {
    toString() {
      return this[S$0._name$8];
    }
  };
  (range_annotation.RangeAnnotationAxisType.new = function(index, _name) {
    this.index = index;
    this[S$0._name$8] = _name;
    ;
  }).prototype = range_annotation.RangeAnnotationAxisType.prototype;
  dart.addTypeTests(range_annotation.RangeAnnotationAxisType);
  dart.addTypeCaches(range_annotation.RangeAnnotationAxisType);
  dart.setLibraryUri(range_annotation.RangeAnnotationAxisType, I[57]);
  dart.setFieldSignature(range_annotation.RangeAnnotationAxisType, () => ({
    __proto__: dart.getFields(range_annotation.RangeAnnotationAxisType.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$8]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(range_annotation.RangeAnnotationAxisType, ['toString']);
  range_annotation.RangeAnnotationAxisType.domain = C[52] || CT.C52;
  range_annotation.RangeAnnotationAxisType.measure = C[53] || CT.C53;
  range_annotation.RangeAnnotationAxisType.values = C[66] || CT.C66;
  range_annotation.AnnotationLabelAnchor = class AnnotationLabelAnchor extends core.Object {
    toString() {
      return this[S$0._name$8];
    }
  };
  (range_annotation.AnnotationLabelAnchor.new = function(index, _name) {
    this.index = index;
    this[S$0._name$8] = _name;
    ;
  }).prototype = range_annotation.AnnotationLabelAnchor.prototype;
  dart.addTypeTests(range_annotation.AnnotationLabelAnchor);
  dart.addTypeCaches(range_annotation.AnnotationLabelAnchor);
  dart.setLibraryUri(range_annotation.AnnotationLabelAnchor, I[57]);
  dart.setFieldSignature(range_annotation.AnnotationLabelAnchor, () => ({
    __proto__: dart.getFields(range_annotation.AnnotationLabelAnchor.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$8]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(range_annotation.AnnotationLabelAnchor, ['toString']);
  range_annotation.AnnotationLabelAnchor.start = C[57] || CT.C57;
  range_annotation.AnnotationLabelAnchor.middle = C[58] || CT.C58;
  range_annotation.AnnotationLabelAnchor.end = C[54] || CT.C54;
  range_annotation.AnnotationLabelAnchor.values = C[67] || CT.C67;
  range_annotation.AnnotationLabelDirection = class AnnotationLabelDirection extends core.Object {
    toString() {
      return this[S$0._name$8];
    }
  };
  (range_annotation.AnnotationLabelDirection.new = function(index, _name) {
    this.index = index;
    this[S$0._name$8] = _name;
    ;
  }).prototype = range_annotation.AnnotationLabelDirection.prototype;
  dart.addTypeTests(range_annotation.AnnotationLabelDirection);
  dart.addTypeCaches(range_annotation.AnnotationLabelDirection);
  dart.setLibraryUri(range_annotation.AnnotationLabelDirection, I[57]);
  dart.setFieldSignature(range_annotation.AnnotationLabelDirection, () => ({
    __proto__: dart.getFields(range_annotation.AnnotationLabelDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$8]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(range_annotation.AnnotationLabelDirection, ['toString']);
  range_annotation.AnnotationLabelDirection.auto = C[55] || CT.C55;
  range_annotation.AnnotationLabelDirection.horizontal = C[68] || CT.C68;
  range_annotation.AnnotationLabelDirection.vertical = C[69] || CT.C69;
  range_annotation.AnnotationLabelDirection.values = C[70] || CT.C70;
  range_annotation.AnnotationLabelPosition = class AnnotationLabelPosition extends core.Object {
    toString() {
      return this[S$0._name$8];
    }
  };
  (range_annotation.AnnotationLabelPosition.new = function(index, _name) {
    this.index = index;
    this[S$0._name$8] = _name;
    ;
  }).prototype = range_annotation.AnnotationLabelPosition.prototype;
  dart.addTypeTests(range_annotation.AnnotationLabelPosition);
  dart.addTypeCaches(range_annotation.AnnotationLabelPosition);
  dart.setLibraryUri(range_annotation.AnnotationLabelPosition, I[57]);
  dart.setFieldSignature(range_annotation.AnnotationLabelPosition, () => ({
    __proto__: dart.getFields(range_annotation.AnnotationLabelPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$8]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(range_annotation.AnnotationLabelPosition, ['toString']);
  range_annotation.AnnotationLabelPosition.auto = C[56] || CT.C56;
  range_annotation.AnnotationLabelPosition.outside = C[63] || CT.C63;
  range_annotation.AnnotationLabelPosition.inside = C[64] || CT.C64;
  range_annotation.AnnotationLabelPosition.margin = C[59] || CT.C59;
  range_annotation.AnnotationLabelPosition.values = C[71] || CT.C71;
  dart.defineLazy(range_annotation, {
    /*range_annotation._defaultStrokeWidthPx*/get _defaultStrokeWidthPx() {
      return 2;
    },
    /*range_annotation._unresolvedAutoMessage*/get _unresolvedAutoMessage() {
      return "Unresolved AnnotationLabelPosition.auto";
    }
  }, false);
  const _is_LinePointHighlighter_default = Symbol('_is_LinePointHighlighter_default');
  line_point_highlighter.LinePointHighlighter$ = dart.generic(D => {
    var _AnimatedPointOfD = () => (_AnimatedPointOfD = dart.constFn(line_point_highlighter._AnimatedPoint$(D)))();
    var IdentityMapOfString$_AnimatedPointOfD = () => (IdentityMapOfString$_AnimatedPointOfD = dart.constFn(_js_helper.IdentityMap$(core.String, _AnimatedPointOfD())))();
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var _LinePointLayoutViewOfD = () => (_LinePointLayoutViewOfD = dart.constFn(line_point_highlighter._LinePointLayoutView$(D)))();
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    var _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_point_highlighter._DatumPoint$(D)))();
    var _PointRendererElementOfD = () => (_PointRendererElementOfD = dart.constFn(line_point_highlighter._PointRendererElement$(D)))();
    var StringAnd_AnimatedPointOfDTovoid = () => (StringAnd_AnimatedPointOfDTovoid = dart.constFn(dart.fnType(dart.void, [core.String, _AnimatedPointOfD()])))();
    class LinePointHighlighter extends core.Object {
      get selectionModelType() {
        return this[S$0.selectionModelType$4];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get defaultRadiusPx() {
        return this[S$0.defaultRadiusPx];
      }
      set defaultRadiusPx(value) {
        super.defaultRadiusPx = value;
      }
      get radiusPaddingPx() {
        return this[S$0.radiusPaddingPx];
      }
      set radiusPaddingPx(value) {
        super.radiusPaddingPx = value;
      }
      get showHorizontalFollowLine() {
        return this[S$0.showHorizontalFollowLine];
      }
      set showHorizontalFollowLine(value) {
        super.showHorizontalFollowLine = value;
      }
      get showVerticalFollowLine() {
        return this[S$0.showVerticalFollowLine];
      }
      set showVerticalFollowLine(value) {
        super.showVerticalFollowLine = value;
      }
      get dashPattern() {
        return this[S$0.dashPattern$2];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get drawFollowLinesAcrossChart() {
        return this[S$0.drawFollowLinesAcrossChart];
      }
      set drawFollowLinesAcrossChart(value) {
        super.drawFollowLinesAcrossChart = value;
      }
      get symbolRenderer() {
        return this[S$0.symbolRenderer$6];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get [S$0._chart$12]() {
        let t47;
        t47 = this[S$0.__LinePointHighlighter__chart];
        return t47 == null ? dart.throw(new _internal.LateError.fieldNI("_chart")) : t47;
      }
      set [S$0._chart$12](t47) {
        this[S$0.__LinePointHighlighter__chart] = t47;
      }
      get [S$0._view$2]() {
        let t48;
        t48 = this[S$0.__LinePointHighlighter__view];
        return t48 == null ? dart.throw(new _internal.LateError.fieldNI("_view")) : t48;
      }
      set [S$0._view$2](t48) {
        this[S$0.__LinePointHighlighter__view] = t48;
      }
      get [S$0._lifecycleListener$3]() {
        let t49;
        t49 = this[S$0.__LinePointHighlighter__lifecycleListener];
        return t49 == null ? dart.throw(new _internal.LateError.fieldNI("_lifecycleListener")) : t49;
      }
      set [S$0._lifecycleListener$3](t49) {
        this[S$0.__LinePointHighlighter__lifecycleListener] = t49;
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        this[S$0._chart$12] = chart;
        this[S$0._view$2] = new (_LinePointLayoutViewOfD()).new({chart: chart, layoutPaintOrder: 110, showHorizontalFollowLine: this.showHorizontalFollowLine, showVerticalFollowLine: this.showVerticalFollowLine, dashPattern: this.dashPattern, drawFollowLinesAcrossChart: this.drawFollowLinesAcrossChart, symbolRenderer: this.symbolRenderer});
        if (cartesian_chart.CartesianChart.is(chart)) {
          if (!cartesian_chart.CartesianChart.as(chart).vertical) dart.assertFailed(null, I[58], 157, 14, "(chart as CartesianChart).vertical");
        }
        chart.addView(this[S$0._view$2]);
        chart.addLifecycleListener(this[S$0._lifecycleListener$3]);
        chart.getSelectionModel(this.selectionModelType).addSelectionChangedListener(dart.bind(this, S$0._selectionChanged$2));
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.removeView(this[S$0._view$2]);
        chart.getSelectionModel(this.selectionModelType).removeSelectionChangedListener(dart.bind(this, S$0._selectionChanged$2));
        chart.removeLifecycleListener(this[S$0._lifecycleListener$3]);
      }
      [S$0._selectionChanged$2](selectionModel) {
        SelectionModelOfD().as(selectionModel);
        this[S$0._chart$12].redraw({skipLayout: true, skipAnimation: true});
      }
      [S$0._updateViewData$2]() {
        let t50;
        this[S$0._currentKeys$5][S$.$clear]();
        let selectedDatumDetails = this[S$0._chart$12].getSelectedDatumDetails(this.selectionModelType);
        let newSeriesMap = new (IdentityMapOfString$_AnimatedPointOfD()).new();
        for (let detail of selectedDatumDetails) {
          if (detail === null) {
            continue;
          }
          let series = dart.nullCheck(detail.series);
          let datum = detail.datum;
          let domainAxis = ImmutableAxisOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
          let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
          let lineKey = series.id;
          let radiusPx = detail.radiusPx != null ? dart.nullCheck(detail.radiusPx)[S$.$toDouble]() + this.radiusPaddingPx : this.defaultRadiusPx;
          let pointKey = lineKey + "::" + dart.str(detail.domain) + "::" + dart.str(detail.measure);
          let animatingPoint = null;
          if (this[S$0._seriesPointMap][S$.$containsKey](pointKey)) {
            animatingPoint = dart.nullCheck(this[S$0._seriesPointMap][S$.$_get](pointKey));
          } else {
            let point = new (_DatumPointOfD()).new({datum: datum, domain: detail.domain, series: series, x: domainAxis.getLocation(detail.domain), y: measureAxis.getLocation(0.0)});
            animatingPoint = (t50 = new (_AnimatedPointOfD()).new({key: pointKey, overlaySeries: series.overlaySeries}), (() => {
              t50.setNewTarget(new (_PointRendererElementOfD()).new({point: point, color: detail.color, fillColor: detail.fillColor, radiusPx: radiusPx, measureAxisPosition: measureAxis.getLocation(0.0), strokeWidthPx: detail.strokeWidthPx, symbolRenderer: detail.symbolRenderer}));
              return t50;
            })());
          }
          newSeriesMap[S$.$_set](pointKey, animatingPoint);
          let point = new (_DatumPointOfD()).new({datum: datum, domain: detail.domain, series: series, x: dart.nullCheck(detail.chartPosition).x, y: dart.nullCheck(detail.chartPosition).y});
          this[S$0._currentKeys$5][S$.$add](pointKey);
          let pointElement = new (_PointRendererElementOfD()).new({point: point, color: detail.color, fillColor: detail.fillColor, radiusPx: radiusPx, measureAxisPosition: measureAxis.getLocation(0.0), strokeWidthPx: detail.strokeWidthPx, symbolRenderer: detail.symbolRenderer});
          animatingPoint.setNewTarget(pointElement);
        }
        this[S$0._seriesPointMap][S$.$forEach](dart.fn((key, point) => {
          if (this[S$0._currentKeys$5][S$.$contains](point.key) !== true) {
            point.animateOut();
            newSeriesMap[S$.$_set](point.key, point);
          }
        }, StringAnd_AnimatedPointOfDTovoid()));
        this[S$0._seriesPointMap] = newSeriesMap;
        this[S$0._view$2].seriesPointMap = this[S$0._seriesPointMap];
      }
      get role() {
        return "LinePointHighlighter-" + dart.str(this.selectionModelType);
      }
    }
    (LinePointHighlighter.new = function(opts) {
      let t47, t47$, t47$0, t47$1, t47$2, t47$3, t47$4, t47$5;
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : null;
      let defaultRadiusPx = opts && 'defaultRadiusPx' in opts ? opts.defaultRadiusPx : null;
      let radiusPaddingPx = opts && 'radiusPaddingPx' in opts ? opts.radiusPaddingPx : null;
      let showHorizontalFollowLine = opts && 'showHorizontalFollowLine' in opts ? opts.showHorizontalFollowLine : null;
      let showVerticalFollowLine = opts && 'showVerticalFollowLine' in opts ? opts.showVerticalFollowLine : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let drawFollowLinesAcrossChart = opts && 'drawFollowLinesAcrossChart' in opts ? opts.drawFollowLinesAcrossChart : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[S$0.__LinePointHighlighter__chart] = null;
      this[S$0.__LinePointHighlighter__view] = null;
      this[S$0.__LinePointHighlighter__lifecycleListener] = null;
      this[S$0._seriesPointMap] = new (IdentityMapOfString$_AnimatedPointOfD()).new();
      this[S$0._currentKeys$5] = T$.JSArrayOfString().of([]);
      this[S$0.selectionModelType$4] = (t47 = selectionModelType, t47 == null ? selection_model.SelectionModelType.info : t47);
      this[S$0.defaultRadiusPx] = (t47$ = defaultRadiusPx, t47$ == null ? 4.0 : t47$);
      this[S$0.radiusPaddingPx] = (t47$0 = radiusPaddingPx, t47$0 == null ? 2.0 : t47$0);
      this[S$0.showHorizontalFollowLine] = (t47$1 = showHorizontalFollowLine, t47$1 == null ? line_point_highlighter.LinePointHighlighterFollowLineType.none : t47$1);
      this[S$0.showVerticalFollowLine] = (t47$2 = showVerticalFollowLine, t47$2 == null ? line_point_highlighter.LinePointHighlighterFollowLineType.nearest : t47$2);
      this[S$0.dashPattern$2] = (t47$3 = dashPattern, t47$3 == null ? T$0.JSArrayOfint().of([1, 3]) : t47$3);
      this[S$0.drawFollowLinesAcrossChart] = (t47$4 = drawFollowLinesAcrossChart, t47$4 == null ? true : t47$4);
      this[S$0.symbolRenderer$6] = (t47$5 = symbolRenderer, t47$5 == null ? new symbol_renderer.CircleSymbolRenderer.new() : t47$5);
      this[S$0._lifecycleListener$3] = new (LifecycleListenerOfD()).new({onAxisConfigured: dart.bind(this, S$0._updateViewData$2)});
    }).prototype = LinePointHighlighter.prototype;
    dart.addTypeTests(LinePointHighlighter);
    LinePointHighlighter.prototype[_is_LinePointHighlighter_default] = true;
    dart.addTypeCaches(LinePointHighlighter);
    LinePointHighlighter[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(LinePointHighlighter, () => ({
      __proto__: dart.getMethods(LinePointHighlighter.__proto__),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._selectionChanged$2]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._updateViewData$2]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(LinePointHighlighter, () => ({
      __proto__: dart.getGetters(LinePointHighlighter.__proto__),
      [S$0._chart$12]: base_chart.BaseChart$(D),
      [S$0._view$2]: line_point_highlighter._LinePointLayoutView$(D),
      [S$0._lifecycleListener$3]: base_chart.LifecycleListener$(D),
      role: core.String
    }));
    dart.setSetterSignature(LinePointHighlighter, () => ({
      __proto__: dart.getSetters(LinePointHighlighter.__proto__),
      [S$0._chart$12]: base_chart.BaseChart$(D),
      [S$0._view$2]: line_point_highlighter._LinePointLayoutView$(D),
      [S$0._lifecycleListener$3]: base_chart.LifecycleListener$(D)
    }));
    dart.setLibraryUri(LinePointHighlighter, I[59]);
    dart.setFieldSignature(LinePointHighlighter, () => ({
      __proto__: dart.getFields(LinePointHighlighter.__proto__),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      defaultRadiusPx: dart.finalFieldType(core.double),
      radiusPaddingPx: dart.finalFieldType(core.double),
      showHorizontalFollowLine: dart.finalFieldType(line_point_highlighter.LinePointHighlighterFollowLineType),
      showVerticalFollowLine: dart.finalFieldType(line_point_highlighter.LinePointHighlighterFollowLineType),
      dashPattern: dart.finalFieldType(dart.nullable(core.List$(core.int))),
      drawFollowLinesAcrossChart: dart.finalFieldType(core.bool),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      [S$0.__LinePointHighlighter__chart]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      [S$0.__LinePointHighlighter__view]: dart.fieldType(dart.nullable(line_point_highlighter._LinePointLayoutView$(D))),
      [S$0.__LinePointHighlighter__lifecycleListener]: dart.fieldType(dart.nullable(base_chart.LifecycleListener$(D))),
      [S$0._seriesPointMap]: dart.fieldType(collection.LinkedHashMap$(core.String, line_point_highlighter._AnimatedPoint$(D))),
      [S$0._currentKeys$5]: dart.finalFieldType(core.List$(core.String))
    }));
    return LinePointHighlighter;
  });
  line_point_highlighter.LinePointHighlighter = line_point_highlighter.LinePointHighlighter$();
  dart.addTypeTests(line_point_highlighter.LinePointHighlighter, _is_LinePointHighlighter_default);
  const _is__LinePointLayoutView_default = Symbol('_is__LinePointLayoutView_default');
  line_point_highlighter._LinePointLayoutView$ = dart.generic(D => {
    var _AnimatedPointOfD = () => (_AnimatedPointOfD = dart.constFn(line_point_highlighter._AnimatedPoint$(D)))();
    var LinkedHashMapOfString$_AnimatedPointOfD = () => (LinkedHashMapOfString$_AnimatedPointOfD = dart.constFn(collection.LinkedHashMap$(core.String, _AnimatedPointOfD())))();
    var LinkedHashMapNOfString$_AnimatedPointOfD = () => (LinkedHashMapNOfString$_AnimatedPointOfD = dart.constFn(dart.nullable(LinkedHashMapOfString$_AnimatedPointOfD())))();
    var StringAnd_AnimatedPointOfDTovoid = () => (StringAnd_AnimatedPointOfDTovoid = dart.constFn(dart.fnType(dart.void, [core.String, _AnimatedPointOfD()])))();
    var _PointRendererElementOfD = () => (_PointRendererElementOfD = dart.constFn(line_point_highlighter._PointRendererElement$(D)))();
    var JSArrayOf_PointRendererElementOfD = () => (JSArrayOf_PointRendererElementOfD = dart.constFn(_interceptors.JSArray$(_PointRendererElementOfD())))();
    class _LinePointLayoutView extends layout_view.LayoutView {
      get layoutConfig() {
        return this[S$0.layoutConfig$3];
      }
      set layoutConfig(value) {
        super.layoutConfig = value;
      }
      get graphicsFactory() {
        return this[S$0.graphicsFactory$5];
      }
      set graphicsFactory(value) {
        this[S$0.graphicsFactory$5] = value;
      }
      get [S$0._drawAreaBounds$3]() {
        let t50;
        t50 = this[S$0.___LinePointLayoutView__drawAreaBounds];
        return t50 == null ? dart.throw(new _internal.LateError.fieldNI("_drawAreaBounds")) : t50;
      }
      set [S$0._drawAreaBounds$3](t50) {
        this[S$0.___LinePointLayoutView__drawAreaBounds] = t50;
      }
      get drawBounds() {
        return this[S$0._drawAreaBounds$3];
      }
      set seriesPointMap(value) {
        LinkedHashMapNOfString$_AnimatedPointOfD().as(value);
        this[S$0._seriesPointMap] = value;
      }
      measure(maxWidth, maxHeight) {
        return null;
      }
      layout(componentBounds, drawAreaBounds) {
        this[S$0._drawAreaBounds$3] = drawAreaBounds;
      }
      paint(canvas, animationPercent) {
        let t51;
        let _seriesPointMap = this[S$0._seriesPointMap];
        if (_seriesPointMap == null) {
          return;
        }
        if (animationPercent === 1.0) {
          let keysToRemove = T$.JSArrayOfString().of([]);
          _seriesPointMap[S$.$forEach](dart.fn((key, point) => {
            if (point.animatingOut) {
              keysToRemove[S$.$add](key);
            }
          }, StringAnd_AnimatedPointOfDTovoid()));
          keysToRemove[S$.$forEach](dart.bind(_seriesPointMap, S$.$remove));
        }
        let points = JSArrayOf_PointRendererElementOfD().of([]);
        _seriesPointMap[S$.$forEach](dart.fn((key, point) => {
          points[S$.$add](point.getCurrentPoint(animationPercent));
        }, StringAnd_AnimatedPointOfDTovoid()));
        let endPointPerValueVertical = new (T$0.IdentityMapOfint$int()).new();
        let endPointPerValueHorizontal = new (T$0.IdentityMapOfint$int()).new();
        for (let pointElement of points) {
          if (pointElement.point.x == null || pointElement.point.y == null) {
            continue;
          }
          let point = pointElement.point.toPoint();
          let roundedX = point.x[S$.$round]();
          let roundedY = point.y[S$.$round]();
          if (endPointPerValueVertical[S$.$_get](roundedX) == null) {
            endPointPerValueVertical[S$.$_set](roundedX, roundedY);
          } else {
            if (this.showVerticalFollowLine !== line_point_highlighter.LinePointHighlighterFollowLineType.nearest) {
              endPointPerValueVertical[S$.$_set](roundedX, math.min(core.int, dart.nullCheck(endPointPerValueVertical[S$.$_get](roundedX)), roundedY));
            }
          }
          if (endPointPerValueHorizontal[S$.$_get](roundedY) == null) {
            endPointPerValueHorizontal[S$.$_set](roundedY, roundedX);
          } else {
            if (this.showHorizontalFollowLine !== line_point_highlighter.LinePointHighlighterFollowLineType.nearest) {
              endPointPerValueHorizontal[S$.$_set](roundedY, math.max(core.int, dart.nullCheck(endPointPerValueHorizontal[S$.$_get](roundedY)), roundedX));
            }
          }
        }
        let shouldShowHorizontalFollowLine = this.showHorizontalFollowLine === line_point_highlighter.LinePointHighlighterFollowLineType.all || this.showHorizontalFollowLine === line_point_highlighter.LinePointHighlighterFollowLineType.nearest;
        let shouldShowVerticalFollowLine = this.showVerticalFollowLine === line_point_highlighter.LinePointHighlighterFollowLineType.all || this.showVerticalFollowLine === line_point_highlighter.LinePointHighlighterFollowLineType.nearest;
        let paintedHorizontalLinePositions = T$.JSArrayOfnum().of([]);
        let paintedVerticalLinePositions = T$.JSArrayOfnum().of([]);
        let drawBounds = this.chart.drawableLayoutAreaBounds;
        let rtl = this.chart.context.isRtl;
        for (let pointElement of points) {
          if (pointElement.point.x == null || pointElement.point.y == null) {
            continue;
          }
          let point = pointElement.point.toPoint();
          let roundedX = point.x[S$.$round]();
          let roundedY = point.y[S$.$round]();
          if (shouldShowHorizontalFollowLine && !paintedHorizontalLinePositions[S$.$contains](roundedY)) {
            let leftBound = null;
            let rightBound = null;
            if (this.drawFollowLinesAcrossChart) {
              leftBound = drawBounds[S$.$left];
              rightBound = drawBounds[S$.$left] + drawBounds[S$.$width];
            } else {
              let x = dart.nullCheck(endPointPerValueHorizontal[S$.$_get](roundedY));
              leftBound = rtl ? x : drawBounds[S$.$left];
              rightBound = rtl ? drawBounds[S$.$left] + drawBounds[S$.$width] : x;
            }
            canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([new (T$.PointOfnum()).new(leftBound, point.y), new (T$.PointOfnum()).new(rightBound, point.y)]), stroke: style_factory.StyleFactory.style.linePointHighlighterColor, strokeWidthPx: 1.0, dashPattern: this.dashPattern});
            if (this.showHorizontalFollowLine === line_point_highlighter.LinePointHighlighterFollowLineType.nearest) {
              shouldShowHorizontalFollowLine = false;
            }
            paintedHorizontalLinePositions[S$.$add](roundedY);
          }
          if (shouldShowVerticalFollowLine && !paintedVerticalLinePositions[S$.$contains](roundedX)) {
            let topBound = this.drawFollowLinesAcrossChart ? drawBounds[S$.$top] : dart.nullCheck(endPointPerValueVertical[S$.$_get](roundedX));
            canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([new (T$.PointOfnum()).new(point.x, topBound), new (T$.PointOfnum()).new(point.x, drawBounds[S$.$top] + drawBounds[S$.$height])]), stroke: style_factory.StyleFactory.style.linePointHighlighterColor, strokeWidthPx: 1.0, dashPattern: this.dashPattern});
            if (this.showVerticalFollowLine === line_point_highlighter.LinePointHighlighterFollowLineType.nearest) {
              shouldShowVerticalFollowLine = false;
            }
            paintedVerticalLinePositions[S$.$add](roundedX);
          }
          if (!shouldShowHorizontalFollowLine && !shouldShowVerticalFollowLine) {
            break;
          }
        }
        for (let pointElement of points) {
          if (pointElement.point.x == null || pointElement.point.y == null) {
            continue;
          }
          let point = pointElement.point.toPoint();
          let bounds = new (T$.RectangleOfdouble()).new(point.x - pointElement.radiusPx, point.y - pointElement.radiusPx, pointElement.radiusPx * 2, pointElement.radiusPx * 2);
          (t51 = pointElement.symbolRenderer, t51 == null ? this.symbolRenderer : t51).paint(canvas, bounds, {fillColor: pointElement.fillColor, strokeColor: pointElement.color, strokeWidthPx: pointElement.strokeWidthPx});
        }
      }
      get componentBounds() {
        return this[S$0._drawAreaBounds$3];
      }
      get isSeriesRenderer() {
        return false;
      }
    }
    (_LinePointLayoutView.new = function(opts) {
      let chart = opts && 'chart' in opts ? opts.chart : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let showHorizontalFollowLine = opts && 'showHorizontalFollowLine' in opts ? opts.showHorizontalFollowLine : null;
      let showVerticalFollowLine = opts && 'showVerticalFollowLine' in opts ? opts.showVerticalFollowLine : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let drawFollowLinesAcrossChart = opts && 'drawFollowLinesAcrossChart' in opts ? opts.drawFollowLinesAcrossChart : null;
      this[S$0.___LinePointLayoutView__drawAreaBounds] = null;
      this[S$0.graphicsFactory$5] = null;
      this[S$0._seriesPointMap] = null;
      this.chart = chart;
      this.showHorizontalFollowLine = showHorizontalFollowLine;
      this.showVerticalFollowLine = showVerticalFollowLine;
      this.symbolRenderer = symbolRenderer;
      this.dashPattern = dashPattern;
      this.drawFollowLinesAcrossChart = drawFollowLinesAcrossChart;
      this[S$0.layoutConfig$3] = new layout_view.LayoutViewConfig.new({paintOrder: 110, position: layout_view.LayoutPosition.DrawArea, positionOrder: layoutPaintOrder});
      ;
    }).prototype = _LinePointLayoutView.prototype;
    dart.addTypeTests(_LinePointLayoutView);
    _LinePointLayoutView.prototype[_is__LinePointLayoutView_default] = true;
    dart.addTypeCaches(_LinePointLayoutView);
    dart.setMethodSignature(_LinePointLayoutView, () => ({
      __proto__: dart.getMethods(_LinePointLayoutView.__proto__),
      measure: dart.fnType(dart.nullable(layout_view.ViewMeasuredSizes), [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double])
    }));
    dart.setGetterSignature(_LinePointLayoutView, () => ({
      __proto__: dart.getGetters(_LinePointLayoutView.__proto__),
      [S$0._drawAreaBounds$3]: math.Rectangle$(core.int),
      drawBounds: math.Rectangle$(core.int),
      componentBounds: math.Rectangle$(core.int),
      isSeriesRenderer: core.bool
    }));
    dart.setSetterSignature(_LinePointLayoutView, () => ({
      __proto__: dart.getSetters(_LinePointLayoutView.__proto__),
      [S$0._drawAreaBounds$3]: math.Rectangle$(core.int),
      seriesPointMap: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(_LinePointLayoutView, I[59]);
    dart.setFieldSignature(_LinePointLayoutView, () => ({
      __proto__: dart.getFields(_LinePointLayoutView.__proto__),
      layoutConfig: dart.finalFieldType(layout_view.LayoutViewConfig),
      showHorizontalFollowLine: dart.finalFieldType(line_point_highlighter.LinePointHighlighterFollowLineType),
      showVerticalFollowLine: dart.finalFieldType(line_point_highlighter.LinePointHighlighterFollowLineType),
      chart: dart.finalFieldType(base_chart.BaseChart$(D)),
      dashPattern: dart.finalFieldType(dart.nullable(core.List$(core.int))),
      [S$0.___LinePointLayoutView__drawAreaBounds]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      drawFollowLinesAcrossChart: dart.finalFieldType(core.bool),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      graphicsFactory: dart.fieldType(dart.nullable(graphics_factory.GraphicsFactory)),
      [S$0._seriesPointMap]: dart.fieldType(dart.nullable(collection.LinkedHashMap$(core.String, line_point_highlighter._AnimatedPoint$(D))))
    }));
    return _LinePointLayoutView;
  });
  line_point_highlighter._LinePointLayoutView = line_point_highlighter._LinePointLayoutView$();
  dart.addTypeTests(line_point_highlighter._LinePointLayoutView, _is__LinePointLayoutView_default);
  const _is__DatumPoint_default$ = Symbol('_is__DatumPoint_default');
  line_point_highlighter._DatumPoint$ = dart.generic(D => {
    class _DatumPoint extends math$.NullablePoint {
      static from(other, x = null, y = null) {
        let t51, t51$;
        return new (line_point_highlighter._DatumPoint$(D)).new({datum: other.datum, domain: other.domain, series: other.series, x: (t51 = x, t51 == null ? other.x : t51), y: (t51$ = y, t51$ == null ? other.y : t51$)});
      }
    }
    (_DatumPoint.new = function(opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      this.datum = datum;
      this.domain = domain;
      this.series = series;
      _DatumPoint.__proto__.new.call(this, x, y);
      ;
    }).prototype = _DatumPoint.prototype;
    dart.addTypeTests(_DatumPoint);
    _DatumPoint.prototype[_is__DatumPoint_default$] = true;
    dart.addTypeCaches(_DatumPoint);
    dart.setLibraryUri(_DatumPoint, I[59]);
    dart.setFieldSignature(_DatumPoint, () => ({
      __proto__: dart.getFields(_DatumPoint.__proto__),
      datum: dart.finalFieldType(dart.dynamic),
      domain: dart.finalFieldType(dart.nullable(D)),
      series: dart.finalFieldType(dart.nullable(processed_series.ImmutableSeries$(D)))
    }));
    return _DatumPoint;
  });
  line_point_highlighter._DatumPoint = line_point_highlighter._DatumPoint$();
  dart.addTypeTests(line_point_highlighter._DatumPoint, _is__DatumPoint_default$);
  const _is__PointRendererElement_default = Symbol('_is__PointRendererElement_default');
  line_point_highlighter._PointRendererElement$ = dart.generic(D => {
    var _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_point_highlighter._DatumPoint$(D)))();
    var _PointRendererElementOfD = () => (_PointRendererElementOfD = dart.constFn(line_point_highlighter._PointRendererElement$(D)))();
    class _PointRendererElement extends core.Object {
      get point() {
        return this[S$0.point$1];
      }
      set point(value) {
        this[S$0.point$1] = _DatumPointOfD().as(value);
      }
      clone() {
        return new (_PointRendererElementOfD()).new({point: this.point, color: this.color, fillColor: this.fillColor, measureAxisPosition: this.measureAxisPosition, radiusPx: this.radiusPx, strokeWidthPx: this.strokeWidthPx, symbolRenderer: this.symbolRenderer});
      }
      updateAnimationPercent(previous, target, animationPercent) {
        _PointRendererElementOfD().as(previous);
        _PointRendererElementOfD().as(target);
        let targetPoint = target.point;
        let previousPoint = previous.point;
        let x = this[S$0._lerpDouble$1](previousPoint.x, targetPoint.x, animationPercent);
        let y = this[S$0._lerpDouble$1](previousPoint.y, targetPoint.y, animationPercent);
        this.point = _DatumPointOfD().from(targetPoint, x, y);
        this.color = chart_canvas.getAnimatedColor(dart.nullCheck(previous.color), dart.nullCheck(target.color), animationPercent);
        this.fillColor = chart_canvas.getAnimatedColor(dart.nullCheck(previous.fillColor), dart.nullCheck(target.fillColor), animationPercent);
        this.radiusPx = dart.nullCheck(this[S$0._lerpDouble$1](previous.radiusPx, target.radiusPx, animationPercent));
        let targetStrokeWidthPx = target.strokeWidthPx;
        let previousStrokeWidthPx = previous.strokeWidthPx;
        if (targetStrokeWidthPx != null && previousStrokeWidthPx != null) {
          this.strokeWidthPx = (dart.notNull(targetStrokeWidthPx) - dart.notNull(previousStrokeWidthPx)) * animationPercent + dart.notNull(previousStrokeWidthPx);
        } else {
          this.strokeWidthPx = null;
        }
      }
      [S$0._lerpDouble$1](a, b, t) {
        if (a == null || b == null) return null;
        return dart.notNull(a) + (dart.notNull(b) - dart.notNull(a)) * t;
      }
    }
    (_PointRendererElement.new = function(opts) {
      let point = opts && 'point' in opts ? opts.point : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : null;
      let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[S$0.point$1] = point;
      this.color = color;
      this.fillColor = fillColor;
      this.radiusPx = radiusPx;
      this.measureAxisPosition = measureAxisPosition;
      this.strokeWidthPx = strokeWidthPx;
      this.symbolRenderer = symbolRenderer;
      ;
    }).prototype = _PointRendererElement.prototype;
    dart.addTypeTests(_PointRendererElement);
    _PointRendererElement.prototype[_is__PointRendererElement_default] = true;
    dart.addTypeCaches(_PointRendererElement);
    dart.setMethodSignature(_PointRendererElement, () => ({
      __proto__: dart.getMethods(_PointRendererElement.__proto__),
      clone: dart.fnType(line_point_highlighter._PointRendererElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object), core.double]),
      [S$0._lerpDouble$1]: dart.fnType(dart.nullable(core.double), [dart.nullable(core.double), dart.nullable(core.double), core.double])
    }));
    dart.setLibraryUri(_PointRendererElement, I[59]);
    dart.setFieldSignature(_PointRendererElement, () => ({
      __proto__: dart.getFields(_PointRendererElement.__proto__),
      point: dart.fieldType(line_point_highlighter._DatumPoint$(D)),
      color: dart.fieldType(dart.nullable(color$.Color)),
      fillColor: dart.fieldType(dart.nullable(color$.Color)),
      radiusPx: dart.fieldType(core.double),
      measureAxisPosition: dart.fieldType(dart.nullable(core.double)),
      strokeWidthPx: dart.fieldType(dart.nullable(core.double)),
      symbolRenderer: dart.fieldType(dart.nullable(symbol_renderer.SymbolRenderer))
    }));
    return _PointRendererElement;
  });
  line_point_highlighter._PointRendererElement = line_point_highlighter._PointRendererElement$();
  dart.addTypeTests(line_point_highlighter._PointRendererElement, _is__PointRendererElement_default);
  const _is__AnimatedPoint_default = Symbol('_is__AnimatedPoint_default');
  line_point_highlighter._AnimatedPoint$ = dart.generic(D => {
    var _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_point_highlighter._DatumPoint$(D)))();
    var _PointRendererElementOfD = () => (_PointRendererElementOfD = dart.constFn(line_point_highlighter._PointRendererElement$(D)))();
    class _AnimatedPoint extends core.Object {
      get [S$0._targetPoint$1]() {
        let t51;
        t51 = this[S$0.___AnimatedPoint__targetPoint];
        return t51 == null ? dart.throw(new _internal.LateError.fieldNI("_targetPoint")) : t51;
      }
      set [S$0._targetPoint$1](t51) {
        this[S$0.___AnimatedPoint__targetPoint] = t51;
      }
      animateOut() {
        let newTarget = dart.nullCheck(this[S$0._currentPoint$1]).clone();
        let targetPoint = newTarget.point;
        let newPoint = _DatumPointOfD().from(targetPoint, targetPoint.x, dart.nullCheck(newTarget.measureAxisPosition)[S$.$roundToDouble]());
        newTarget.point = newPoint;
        newTarget.radiusPx = 0.0;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        _PointRendererElementOfD().as(newTarget);
        this.animatingOut = false;
        this[S$0._currentPoint$1] == null ? this[S$0._currentPoint$1] = newTarget.clone() : null;
        this[S$0._previousPoint$1] = dart.nullCheck(this[S$0._currentPoint$1]).clone();
        this[S$0._targetPoint$1] = newTarget;
      }
      getCurrentPoint(animationPercent) {
        if (animationPercent === 1.0 || this[S$0._previousPoint$1] == null) {
          this[S$0._currentPoint$1] = this[S$0._targetPoint$1];
          this[S$0._previousPoint$1] = this[S$0._targetPoint$1];
          return dart.nullCheck(this[S$0._currentPoint$1]);
        }
        dart.nullCheck(this[S$0._currentPoint$1]).updateAnimationPercent(dart.nullCheck(this[S$0._previousPoint$1]), this[S$0._targetPoint$1], animationPercent);
        return dart.nullCheck(this[S$0._currentPoint$1]);
      }
    }
    (_AnimatedPoint.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : null;
      this[S$0._previousPoint$1] = null;
      this[S$0.___AnimatedPoint__targetPoint] = null;
      this[S$0._currentPoint$1] = null;
      this.animatingOut = false;
      this.key = key;
      this.overlaySeries = overlaySeries;
      ;
    }).prototype = _AnimatedPoint.prototype;
    dart.addTypeTests(_AnimatedPoint);
    _AnimatedPoint.prototype[_is__AnimatedPoint_default] = true;
    dart.addTypeCaches(_AnimatedPoint);
    dart.setMethodSignature(_AnimatedPoint, () => ({
      __proto__: dart.getMethods(_AnimatedPoint.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      getCurrentPoint: dart.fnType(line_point_highlighter._PointRendererElement$(D), [core.double])
    }));
    dart.setGetterSignature(_AnimatedPoint, () => ({
      __proto__: dart.getGetters(_AnimatedPoint.__proto__),
      [S$0._targetPoint$1]: line_point_highlighter._PointRendererElement$(D)
    }));
    dart.setSetterSignature(_AnimatedPoint, () => ({
      __proto__: dart.getSetters(_AnimatedPoint.__proto__),
      [S$0._targetPoint$1]: line_point_highlighter._PointRendererElement$(D)
    }));
    dart.setLibraryUri(_AnimatedPoint, I[59]);
    dart.setFieldSignature(_AnimatedPoint, () => ({
      __proto__: dart.getFields(_AnimatedPoint.__proto__),
      key: dart.finalFieldType(core.String),
      overlaySeries: dart.finalFieldType(core.bool),
      [S$0._previousPoint$1]: dart.fieldType(dart.nullable(line_point_highlighter._PointRendererElement$(D))),
      [S$0.___AnimatedPoint__targetPoint]: dart.fieldType(dart.nullable(line_point_highlighter._PointRendererElement$(D))),
      [S$0._currentPoint$1]: dart.fieldType(dart.nullable(line_point_highlighter._PointRendererElement$(D))),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedPoint;
  });
  line_point_highlighter._AnimatedPoint = line_point_highlighter._AnimatedPoint$();
  dart.addTypeTests(line_point_highlighter._AnimatedPoint, _is__AnimatedPoint_default);
  line_point_highlighter.LinePointHighlighterFollowLineType = class LinePointHighlighterFollowLineType extends core.Object {
    toString() {
      return this[S$0._name$9];
    }
  };
  (line_point_highlighter.LinePointHighlighterFollowLineType.new = function(index, _name) {
    this.index = index;
    this[S$0._name$9] = _name;
    ;
  }).prototype = line_point_highlighter.LinePointHighlighterFollowLineType.prototype;
  dart.addTypeTests(line_point_highlighter.LinePointHighlighterFollowLineType);
  dart.addTypeCaches(line_point_highlighter.LinePointHighlighterFollowLineType);
  dart.setLibraryUri(line_point_highlighter.LinePointHighlighterFollowLineType, I[59]);
  dart.setFieldSignature(line_point_highlighter.LinePointHighlighterFollowLineType, () => ({
    __proto__: dart.getFields(line_point_highlighter.LinePointHighlighterFollowLineType.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$9]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(line_point_highlighter.LinePointHighlighterFollowLineType, ['toString']);
  line_point_highlighter.LinePointHighlighterFollowLineType.nearest = C[72] || CT.C72;
  line_point_highlighter.LinePointHighlighterFollowLineType.none = C[73] || CT.C73;
  line_point_highlighter.LinePointHighlighterFollowLineType.all = C[74] || CT.C74;
  line_point_highlighter.LinePointHighlighterFollowLineType.values = C[75] || CT.C75;
  const _is_LinePointHighlighterTester_default = Symbol('_is_LinePointHighlighterTester_default');
  line_point_highlighter.LinePointHighlighterTester$ = dart.generic(D => {
    var _AnimatedPointOfD = () => (_AnimatedPointOfD = dart.constFn(line_point_highlighter._AnimatedPoint$(D)))();
    var _AnimatedPointOfDTobool = () => (_AnimatedPointOfDTobool = dart.constFn(dart.fnType(core.bool, [_AnimatedPointOfD()])))();
    class LinePointHighlighterTester extends core.Object {
      get behavior() {
        return this[S$0.behavior$2];
      }
      set behavior(value) {
        super.behavior = value;
      }
      getSelectionLength() {
        return this.behavior[S$0._seriesPointMap][S$.$length];
      }
      isDatumSelected(datum) {
        D.as(datum);
        return this.behavior[S$0._seriesPointMap][S$.$values][S$.$any](dart.fn(point => dart.equals(dart.nullCheck(point[S$0._currentPoint$1]).point.datum, datum), _AnimatedPointOfDTobool()));
      }
    }
    (LinePointHighlighterTester.new = function(behavior) {
      this[S$0.behavior$2] = behavior;
      ;
    }).prototype = LinePointHighlighterTester.prototype;
    dart.addTypeTests(LinePointHighlighterTester);
    LinePointHighlighterTester.prototype[_is_LinePointHighlighterTester_default] = true;
    dart.addTypeCaches(LinePointHighlighterTester);
    dart.setMethodSignature(LinePointHighlighterTester, () => ({
      __proto__: dart.getMethods(LinePointHighlighterTester.__proto__),
      getSelectionLength: dart.fnType(core.int, []),
      isDatumSelected: dart.fnType(core.bool, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(LinePointHighlighterTester, I[59]);
    dart.setFieldSignature(LinePointHighlighterTester, () => ({
      __proto__: dart.getFields(LinePointHighlighterTester.__proto__),
      behavior: dart.finalFieldType(line_point_highlighter.LinePointHighlighter$(D))
    }));
    return LinePointHighlighterTester;
  });
  line_point_highlighter.LinePointHighlighterTester = line_point_highlighter.LinePointHighlighterTester$();
  dart.addTypeTests(line_point_highlighter.LinePointHighlighterTester, _is_LinePointHighlighterTester_default);
  const _is_PerSeriesLegendEntryGenerator_default = Symbol('_is_PerSeriesLegendEntryGenerator_default');
  per_series_legend_entry_generator.PerSeriesLegendEntryGenerator$ = dart.generic(D => {
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var MutableSeriesOfDTobool = () => (MutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [MutableSeriesOfD()])))();
    var LegendEntryOfD = () => (LegendEntryOfD = dart.constFn(legend_entry.LegendEntry$(D)))();
    var MutableSeriesOfDToLegendEntryOfD = () => (MutableSeriesOfDToLegendEntryOfD = dart.constFn(dart.fnType(LegendEntryOfD(), [MutableSeriesOfD()])))();
    var ListOfLegendEntryOfD = () => (ListOfLegendEntryOfD = dart.constFn(core.List$(LegendEntryOfD())))();
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ImmutableSeriesOfDTobool = () => (ImmutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [ImmutableSeriesOfD()])))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var SeriesDatumOfDTointN = () => (SeriesDatumOfDTointN = dart.constFn(dart.fnType(T$.intN(), [SeriesDatumOfD()])))();
    var MutableSeriesOfDTonum = () => (MutableSeriesOfDTonum = dart.constFn(dart.fnType(core.num, [MutableSeriesOfD()])))();
    class PerSeriesLegendEntryGenerator extends core.Object {
      get entryTextStyle() {
        return this[S$0.entryTextStyle];
      }
      set entryTextStyle(value) {
        this[S$0.entryTextStyle] = value;
      }
      get measureFormatter() {
        return this[S$0.measureFormatter];
      }
      set measureFormatter(value) {
        this[S$0.measureFormatter] = value;
      }
      get secondaryMeasureFormatter() {
        return this[S$0.secondaryMeasureFormatter];
      }
      set secondaryMeasureFormatter(value) {
        this[S$0.secondaryMeasureFormatter] = value;
      }
      get showOverlaySeries() {
        return this[S$0.showOverlaySeries];
      }
      set showOverlaySeries(value) {
        this[S$0.showOverlaySeries] = value;
      }
      get legendDefaultMeasure() {
        let t52;
        t52 = this[S$0.__PerSeriesLegendEntryGenerator_legendDefaultMeasure];
        return t52 == null ? dart.throw(new _internal.LateError.fieldNI("legendDefaultMeasure")) : t52;
      }
      set legendDefaultMeasure(t52) {
        this[S$0.__PerSeriesLegendEntryGenerator_legendDefaultMeasure] = t52;
      }
      getLegendEntries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        let legendEntries = seriesList[S$.$where](dart.fn(series => this.showOverlaySeries || !series.overlaySeries, MutableSeriesOfDTobool()))[S$.$map](LegendEntryOfD(), dart.fn(series => new (LegendEntryOfD()).new(series, dart.nullCheck(series.displayName), {color: dart.nullCheck(series.seriesColor), textStyle: this.entryTextStyle}), MutableSeriesOfDToLegendEntryOfD()))[S$.$toList]();
        if (this.legendDefaultMeasure !== legend_entry_generator.LegendDefaultMeasure.none) {
          this[S$0._updateFromSeriesList](legendEntries, seriesList);
        }
        return legendEntries;
      }
      updateLegendEntries(legendEntries, selectionModel, seriesList) {
        ListOfLegendEntryOfD().as(legendEntries);
        SelectionModelOfD().as(selectionModel);
        ListOfMutableSeriesOfD().as(seriesList);
        if (selectionModel.hasAnySelection) {
          this[S$0._updateFromSelection](legendEntries, selectionModel);
        } else {
          if (this.legendDefaultMeasure !== legend_entry_generator.LegendDefaultMeasure.none) {
            this[S$0._updateFromSeriesList](legendEntries, seriesList);
          } else {
            this[S$0._resetLegendEntryMeasures](legendEntries);
          }
        }
      }
      [S$0._updateFromSelection](legendEntries, selectionModel) {
        let t54, t53, t53$, t53$0, t53$1;
        let seriesAndMeasure = new (T$0.IdentityMapOfString$num()).new();
        let secondaryAxisSeriesIDs = new (T$0._IdentityHashSetOfString()).new();
        for (let selectedDatum of selectionModel.selectedDatum) {
          let series = selectedDatum.series;
          let seriesId = series.id;
          let measure = (t53$ = (t53 = series, t54 = selectedDatum.index, t53.measureFn(t54)), t53$ == null ? 0 : t53$);
          seriesAndMeasure[S$.$_set](seriesId, dart.notNull((t53$0 = seriesAndMeasure[S$.$_get](seriesId), t53$0 == null ? 0 : t53$0)) + measure);
          if (series.getAttr(core.String, axis$.measureAxisIdKey) === "secondaryMeasureAxisId") {
            secondaryAxisSeriesIDs.add(seriesId);
          }
        }
        for (let entry of legendEntries) {
          let seriesId = entry.series.id;
          let measureValue = (t53$1 = seriesAndMeasure[S$.$_get](seriesId), t53$1 == null ? null : t53$1[S$.$toDouble]());
          let formattedValue = secondaryAxisSeriesIDs.contains(seriesId) ? dart.nullCheck(this.secondaryMeasureFormatter)(measureValue) : dart.nullCheck(this.measureFormatter)(measureValue);
          entry.value = measureValue;
          entry.formattedValue = formattedValue;
          entry.isSelected = selectionModel.selectedSeries[S$.$any](dart.fn(selectedSeries => entry.series.id === selectedSeries.id, ImmutableSeriesOfDTobool()));
          entry.selectedDataIndexes = selectionModel.selectedDatum[S$.$map](T$.intN(), dart.fn(datum => datum.index, SeriesDatumOfDTointN()))[S$.$toList]();
        }
      }
      [S$0._resetLegendEntryMeasures](legendEntries) {
        for (let entry of legendEntries) {
          entry.value = null;
          entry.formattedValue = null;
          entry.isSelected = false;
        }
      }
      [S$0._updateFromSeriesList](legendEntries, seriesList) {
        let t54, t53, t54$, t53$, t53$0;
        function getMeasureTotal(series) {
          let t54, t53, t53$;
          let measureTotal = 0.0;
          for (let i = 0; i < series.data[S$.$length]; i = i + 1) {
            measureTotal = measureTotal + dart.notNull((t53$ = (t53 = series, t54 = i, t53.measureFn(t54)), t53$ == null ? 0.0 : t53$));
          }
          return measureTotal;
        }
        dart.fn(getMeasureTotal, MutableSeriesOfDTonum());
        let seriesAndMeasure = new (T$0.IdentityMapOfString$doubleN()).new();
        let seriesAndFormattedMeasure = new (T$0.IdentityMapOfString$String()).new();
        for (let series of seriesList) {
          let seriesId = series.id;
          let calculatedMeasure = null;
          switch (this.legendDefaultMeasure) {
            case C[76] || CT.C76:
            {
              calculatedMeasure = getMeasureTotal(series);
              break;
            }
            case C[77] || CT.C77:
            {
              calculatedMeasure = getMeasureTotal(series) / series.data[S$.$length];
              break;
            }
            case C[78] || CT.C78:
            {
              calculatedMeasure = (t53 = series, t54 = 0, t53.measureFn(t54));
              break;
            }
            case C[79] || CT.C79:
            {
              calculatedMeasure = (t53$ = series, t54$ = series.data[S$.$length] - 1, t53$.measureFn(t54$));
              break;
            }
            case C[80] || CT.C80:
            {
              break;
            }
          }
          seriesAndMeasure[S$.$_set](seriesId, (t53$0 = calculatedMeasure, t53$0 == null ? null : t53$0[S$.$toDouble]()));
          seriesAndFormattedMeasure[S$.$_set](seriesId, series.getAttr(core.String, axis$.measureAxisIdKey) === "secondaryMeasureAxisId" ? dart.nullCheck(this.secondaryMeasureFormatter)(calculatedMeasure) : dart.nullCheck(this.measureFormatter)(calculatedMeasure));
        }
        for (let entry of legendEntries) {
          let seriesId = entry.series.id;
          entry.value = seriesAndMeasure[S$.$_get](seriesId);
          entry.formattedValue = seriesAndFormattedMeasure[S$.$_get](seriesId);
          entry.isSelected = false;
        }
      }
      _equals(other) {
        if (other == null) return false;
        return per_series_legend_entry_generator.PerSeriesLegendEntryGenerator.is(other) && dart.equals(this.measureFormatter, other.measureFormatter) && dart.equals(this.secondaryMeasureFormatter, other.secondaryMeasureFormatter) && this.legendDefaultMeasure === other.legendDefaultMeasure && dart.equals(this.entryTextStyle, other.entryTextStyle);
      }
      get hashCode() {
        let hashcode = dart.hashCode(this.measureFormatter);
        hashcode = hashcode * 37 + dart.hashCode(this.secondaryMeasureFormatter);
        hashcode = hashcode * 37 + this.legendDefaultMeasure[S$.$hashCode];
        hashcode = hashcode * 37 + dart.hashCode(this.entryTextStyle);
        return hashcode;
      }
    }
    (PerSeriesLegendEntryGenerator.new = function() {
      this[S$0.entryTextStyle] = null;
      this[S$0.measureFormatter] = null;
      this[S$0.secondaryMeasureFormatter] = null;
      this[S$0.showOverlaySeries] = false;
      this[S$0.__PerSeriesLegendEntryGenerator_legendDefaultMeasure] = null;
      ;
    }).prototype = PerSeriesLegendEntryGenerator.prototype;
    dart.addTypeTests(PerSeriesLegendEntryGenerator);
    PerSeriesLegendEntryGenerator.prototype[_is_PerSeriesLegendEntryGenerator_default] = true;
    dart.addTypeCaches(PerSeriesLegendEntryGenerator);
    PerSeriesLegendEntryGenerator[dart.implements] = () => [legend_entry_generator.LegendEntryGenerator$(D)];
    dart.setMethodSignature(PerSeriesLegendEntryGenerator, () => ({
      __proto__: dart.getMethods(PerSeriesLegendEntryGenerator.__proto__),
      getLegendEntries: dart.fnType(core.List$(legend_entry.LegendEntry$(D)), [dart.nullable(core.Object)]),
      updateLegendEntries: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
      [S$0._updateFromSelection]: dart.fnType(dart.void, [core.List$(legend_entry.LegendEntry$(D)), selection_model.SelectionModel$(D)]),
      [S$0._resetLegendEntryMeasures]: dart.fnType(dart.void, [core.List$(legend_entry.LegendEntry$(D))]),
      [S$0._updateFromSeriesList]: dart.fnType(dart.void, [core.List$(legend_entry.LegendEntry$(D)), core.List$(processed_series.MutableSeries$(D))])
    }));
    dart.setGetterSignature(PerSeriesLegendEntryGenerator, () => ({
      __proto__: dart.getGetters(PerSeriesLegendEntryGenerator.__proto__),
      legendDefaultMeasure: legend_entry_generator.LegendDefaultMeasure
    }));
    dart.setSetterSignature(PerSeriesLegendEntryGenerator, () => ({
      __proto__: dart.getSetters(PerSeriesLegendEntryGenerator.__proto__),
      legendDefaultMeasure: legend_entry_generator.LegendDefaultMeasure
    }));
    dart.setLibraryUri(PerSeriesLegendEntryGenerator, I[60]);
    dart.setFieldSignature(PerSeriesLegendEntryGenerator, () => ({
      __proto__: dart.getFields(PerSeriesLegendEntryGenerator.__proto__),
      entryTextStyle: dart.fieldType(dart.nullable(axis_spec.TextStyleSpec)),
      measureFormatter: dart.fieldType(dart.nullable(dart.fnType(core.String, [dart.nullable(core.num)]))),
      secondaryMeasureFormatter: dart.fieldType(dart.nullable(dart.fnType(core.String, [dart.nullable(core.num)]))),
      showOverlaySeries: dart.fieldType(core.bool),
      [S$0.__PerSeriesLegendEntryGenerator_legendDefaultMeasure]: dart.fieldType(dart.nullable(legend_entry_generator.LegendDefaultMeasure))
    }));
    dart.defineExtensionMethods(PerSeriesLegendEntryGenerator, ['_equals']);
    dart.defineExtensionAccessors(PerSeriesLegendEntryGenerator, ['hashCode']);
    return PerSeriesLegendEntryGenerator;
  });
  per_series_legend_entry_generator.PerSeriesLegendEntryGenerator = per_series_legend_entry_generator.PerSeriesLegendEntryGenerator$();
  dart.addTypeTests(per_series_legend_entry_generator.PerSeriesLegendEntryGenerator, _is_PerSeriesLegendEntryGenerator_default);
  const _is_Legend_default = Symbol('_is_Legend_default');
  legend.Legend$ = dart.generic(D => {
    var LegendStateOfD = () => (LegendStateOfD = dart.constFn(legend.LegendState$(D)))();
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var MutableSeriesOfDAndMutableSeriesOfDToint = () => (MutableSeriesOfDAndMutableSeriesOfDToint = dart.constFn(dart.fnType(core.int, [MutableSeriesOfD(), MutableSeriesOfD()])))();
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class Legend extends core.Object {
      get selectionModelType() {
        return this[S$0.selectionModelType$5];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get legendState() {
        return this[S$0.legendState];
      }
      set legendState(value) {
        super.legendState = value;
      }
      get legendEntryGenerator() {
        return this[S$0.legendEntryGenerator];
      }
      set legendEntryGenerator(value) {
        super.legendEntryGenerator = value;
      }
      get graphicsFactory() {
        return this[S$0.graphicsFactory$6];
      }
      set graphicsFactory(value) {
        this[S$0.graphicsFactory$6] = value;
      }
      get behaviorPosition() {
        return this[S$0.behaviorPosition];
      }
      set behaviorPosition(value) {
        this[S$0.behaviorPosition] = value;
      }
      get outsideJustification() {
        return this[S$0.outsideJustification];
      }
      set outsideJustification(value) {
        this[S$0.outsideJustification] = value;
      }
      get insideJustification() {
        return this[S$0.insideJustification];
      }
      set insideJustification(value) {
        this[S$0.insideJustification] = value;
      }
      get cellPadding() {
        return this[S$0.cellPadding];
      }
      set cellPadding(value) {
        this[S$0.cellPadding] = value;
      }
      get legendPadding() {
        return this[S$0.legendPadding];
      }
      set legendPadding(value) {
        this[S$0.legendPadding] = value;
      }
      get titleTextStyle() {
        return this[S$0.titleTextStyle];
      }
      set titleTextStyle(value) {
        this[S$0.titleTextStyle] = value;
      }
      get legendTapHandling() {
        return this[S$0.legendTapHandling];
      }
      set legendTapHandling(value) {
        this[S$0.legendTapHandling] = value;
      }
      set title(t54) {
        this[S$0.__Legend_title] = t54;
      }
      get title() {
        let t55;
        t55 = this[S$0.__Legend_title];
        return t55 == null ? dart.throw(new _internal.LateError.fieldNI("title")) : t55;
      }
      get [S$0._chart$13]() {
        let t55;
        t55 = this[S$0.__Legend__chart];
        return t55 == null ? dart.throw(new _internal.LateError.fieldNI("_chart")) : t55;
      }
      set [S$0._chart$13](t55) {
        this[S$0.__Legend__chart] = t55;
      }
      get [S$0._lifecycleListener$4]() {
        let t56;
        t56 = this[S$0.__Legend__lifecycleListener];
        return t56 == null ? dart.throw(new _internal.LateError.fieldNI("_lifecycleListener")) : t56;
      }
      set [S$0._lifecycleListener$4](t56) {
        if (this[S$0.__Legend__lifecycleListener] == null)
          this[S$0.__Legend__lifecycleListener] = t56;
        else
          dart.throw(new _internal.LateError.fieldAI("_lifecycleListener"));
      }
      get [S$0._currentSeriesList$1]() {
        let t57;
        t57 = this[S$0.__Legend__currentSeriesList];
        return t57 == null ? dart.throw(new _internal.LateError.fieldNI("_currentSeriesList")) : t57;
      }
      set [S$0._currentSeriesList$1](t57) {
        this[S$0.__Legend__currentSeriesList] = t57;
      }
      defaultLegendMeasureFormatter(value) {
        return value == null ? "" : legend.Legend._decimalPattern.format(value);
      }
      get entryTextStyle() {
        return this.legendEntryGenerator.entryTextStyle;
      }
      set entryTextStyle(entryTextStyle) {
        this.legendEntryGenerator.entryTextStyle = entryTextStyle;
      }
      set customEntryOrder(customEntryOrder) {
        this[S$0._customEntryOrder] = customEntryOrder;
      }
      get showOverlaySeries() {
        return this.legendEntryGenerator.showOverlaySeries;
      }
      set showOverlaySeries(showOverlaySeries) {
        let t58;
        this.legendEntryGenerator.showOverlaySeries = (t58 = showOverlaySeries, t58 == null ? false : t58);
      }
      onData(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
      }
      [S$0._preProcess](seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        this[S$0._currentSeriesList$1] = ListOfMutableSeriesOfD().of(seriesList);
        this.preProcessSeriesList(seriesList);
      }
      preProcessSeriesList(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
      }
      [S$0._postProcess](seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        let selectionModel = this.chart.getSelectionModel(this.selectionModelType);
        if (!dart.equals(this.legendState[S$0._selectionModel], selectionModel) || !dart.equals(this[S$0._postProcessSeriesList], seriesList)) {
          let _customEntryOrder = this[S$0._customEntryOrder];
          if (_customEntryOrder != null) {
            this[S$0._currentSeriesList$1][S$.$sort](dart.fn((a, b) => {
              let a_index = _customEntryOrder[S$.$indexOf](a.id);
              let b_index = _customEntryOrder[S$.$indexOf](b.id);
              if (a_index === -1) {
                if (a_index === b_index) {
                  return dart.nullCheck(a.displayName)[S$.$compareTo](dart.nullCheck(b.displayName));
                }
                return 1;
              } else if (b_index === -1) {
                return -1;
              }
              return a_index[S$.$compareTo](b_index);
            }, MutableSeriesOfDAndMutableSeriesOfDToint()));
          }
          this.legendState[S$0._legendEntries] = this.legendEntryGenerator.getLegendEntries(this[S$0._currentSeriesList$1]);
          this.legendState[S$0._selectionModel] = selectionModel;
          this[S$0._postProcessSeriesList] = seriesList;
          this[S$0._updateLegendEntries]({seriesList: seriesList});
        }
      }
      [S$0._selectionChanged$3](selectionModel) {
        SelectionModelOfD().as(selectionModel);
        this.legendState[S$0._selectionModel] = selectionModel;
        this[S$0._updateLegendEntries]();
      }
      get chartContext() {
        return this[S$0._chart$13].context;
      }
      [S$0._updateLegendEntries](opts) {
        let t58;
        let seriesList = opts && 'seriesList' in opts ? opts.seriesList : null;
        this.legendEntryGenerator.updateLegendEntries(this.legendState[S$0._legendEntries], dart.nullCheck(this.legendState[S$0._selectionModel]), (t58 = seriesList, t58 == null ? this.chart.currentSeriesList : t58));
        this.updateLegend();
      }
      updateLegend() {
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        this[S$0._chart$13] = chart;
        chart.addLifecycleListener(this[S$0._lifecycleListener$4]);
        chart.getSelectionModel(this.selectionModelType).addSelectionChangedListener(dart.bind(this, S$0._selectionChanged$3));
        chart.addView(this);
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.getSelectionModel(this.selectionModelType).removeSelectionChangedListener(dart.bind(this, S$0._selectionChanged$3));
        chart.removeLifecycleListener(this[S$0._lifecycleListener$4]);
        chart.removeView(this);
      }
      get chart() {
        return this[S$0._chart$13];
      }
      get role() {
        return "legend-" + dart.str(this.selectionModelType);
      }
      get isRtl() {
        return this[S$0._chart$13].context.chartContainerIsRtl;
      }
      get isAxisFlipped() {
        return this[S$0._chart$13].context.isRtl;
      }
      get layoutConfig() {
        return new layout_view.LayoutViewConfig.new({position: this[S$0._layoutPosition], positionOrder: 30, paintOrder: 100});
      }
      get [S$0._layoutPosition]() {
        return layout_view.layoutPosition(this.behaviorPosition, this.outsideJustification, this.isRtl);
      }
      measure(maxWidth, maxHeight) {
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: 0, preferredHeight: 0});
      }
      layout(componentBounds, drawAreaBounds) {
        this[S$0._componentBounds$1] = componentBounds;
        this[S$0._drawAreaBounds$4] = drawAreaBounds;
        this.updateLegend();
      }
      paint(canvas, animationPercent) {
      }
      get componentBounds() {
        return this[S$0._componentBounds$1];
      }
      get isSeriesRenderer() {
        return false;
      }
      get drawAreaBounds() {
        return this[S$0._drawAreaBounds$4];
      }
    }
    (Legend.new = function(opts) {
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : null;
      let legendEntryGenerator = opts && 'legendEntryGenerator' in opts ? opts.legendEntryGenerator : null;
      let entryTextStyle = opts && 'entryTextStyle' in opts ? opts.entryTextStyle : null;
      this[S$0.legendState] = new (LegendStateOfD()).new();
      this[S$0.__Legend_title] = null;
      this[S$0.__Legend__chart] = null;
      this[S$0.__Legend__lifecycleListener] = null;
      this[S$0._componentBounds$1] = null;
      this[S$0._drawAreaBounds$4] = null;
      this[S$0.graphicsFactory$6] = null;
      this[S$0.behaviorPosition] = chart_behavior.BehaviorPosition.end;
      this[S$0.outsideJustification] = chart_behavior.OutsideJustification.startDrawArea;
      this[S$0.insideJustification] = chart_behavior.InsideJustification.topStart;
      this[S$0.cellPadding] = null;
      this[S$0.legendPadding] = null;
      this[S$0.titleTextStyle] = null;
      this[S$0.legendTapHandling] = legend.LegendTapHandling.hide;
      this[S$0.__Legend__currentSeriesList] = null;
      this[S$0._customEntryOrder] = null;
      this[S$0._postProcessSeriesList] = null;
      this[S$0.selectionModelType$5] = selectionModelType;
      this[S$0.legendEntryGenerator] = legendEntryGenerator;
      this[S$0._lifecycleListener$4] = new (LifecycleListenerOfD()).new({onPostprocess: dart.bind(this, S$0._postProcess), onPreprocess: dart.bind(this, S$0._preProcess), onData: dart.bind(this, 'onData')});
      this.legendEntryGenerator.entryTextStyle = entryTextStyle;
      this.showOverlaySeries = null;
    }).prototype = Legend.prototype;
    dart.addTypeTests(Legend);
    Legend.prototype[_is_Legend_default] = true;
    dart.addTypeCaches(Legend);
    Legend[dart.implements] = () => [chart_behavior.ChartBehavior$(D), layout_view.LayoutView];
    dart.setMethodSignature(Legend, () => ({
      __proto__: dart.getMethods(Legend.__proto__),
      defaultLegendMeasureFormatter: dart.fnType(core.String, [dart.nullable(core.num)]),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._preProcess]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      preProcessSeriesList: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._postProcess]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._selectionChanged$3]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._updateLegendEntries]: dart.fnType(dart.void, [], {seriesList: dart.nullable(core.List$(processed_series.MutableSeries$(D)))}, {}),
      updateLegend: dart.fnType(dart.void, []),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      measure: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double])
    }));
    dart.setGetterSignature(Legend, () => ({
      __proto__: dart.getGetters(Legend.__proto__),
      title: core.String,
      [S$0._chart$13]: base_chart.BaseChart$(D),
      [S$0._lifecycleListener$4]: base_chart.LifecycleListener$(D),
      [S$0._currentSeriesList$1]: core.List$(processed_series.MutableSeries$(D)),
      entryTextStyle: dart.nullable(axis_spec.TextStyleSpec),
      showOverlaySeries: core.bool,
      chartContext: chart_context.ChartContext,
      chart: base_chart.BaseChart$(D),
      role: core.String,
      isRtl: core.bool,
      isAxisFlipped: core.bool,
      layoutConfig: layout_view.LayoutViewConfig,
      [S$0._layoutPosition]: layout_view.LayoutPosition,
      componentBounds: dart.nullable(math.Rectangle$(core.int)),
      isSeriesRenderer: core.bool,
      drawAreaBounds: dart.nullable(math.Rectangle$(core.int))
    }));
    dart.setSetterSignature(Legend, () => ({
      __proto__: dart.getSetters(Legend.__proto__),
      title: core.String,
      [S$0._chart$13]: base_chart.BaseChart$(D),
      [S$0._lifecycleListener$4]: base_chart.LifecycleListener$(D),
      [S$0._currentSeriesList$1]: core.List$(processed_series.MutableSeries$(D)),
      entryTextStyle: dart.nullable(axis_spec.TextStyleSpec),
      customEntryOrder: dart.nullable(core.List$(core.String)),
      showOverlaySeries: dart.nullable(core.bool)
    }));
    dart.setLibraryUri(Legend, I[61]);
    dart.setFieldSignature(Legend, () => ({
      __proto__: dart.getFields(Legend.__proto__),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      legendState: dart.finalFieldType(legend.LegendState$(D)),
      legendEntryGenerator: dart.finalFieldType(legend_entry_generator.LegendEntryGenerator$(D)),
      [S$0.__Legend_title]: dart.fieldType(dart.nullable(core.String)),
      [S$0.__Legend__chart]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      [S$0.__Legend__lifecycleListener]: dart.fieldType(dart.nullable(base_chart.LifecycleListener$(D))),
      [S$0._componentBounds$1]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      [S$0._drawAreaBounds$4]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      graphicsFactory: dart.fieldType(dart.nullable(graphics_factory.GraphicsFactory)),
      behaviorPosition: dart.fieldType(chart_behavior.BehaviorPosition),
      outsideJustification: dart.fieldType(chart_behavior.OutsideJustification),
      insideJustification: dart.fieldType(chart_behavior.InsideJustification),
      cellPadding: dart.fieldType(dart.nullable(legend.LegendCellPadding)),
      legendPadding: dart.fieldType(dart.nullable(legend.LegendCellPadding)),
      titleTextStyle: dart.fieldType(dart.nullable(axis_spec.TextStyleSpec)),
      legendTapHandling: dart.fieldType(legend.LegendTapHandling),
      [S$0.__Legend__currentSeriesList]: dart.fieldType(dart.nullable(core.List$(processed_series.MutableSeries$(D)))),
      [S$0._customEntryOrder]: dart.fieldType(dart.nullable(core.List$(core.String))),
      [S$0._postProcessSeriesList]: dart.fieldType(dart.nullable(core.List$(processed_series.MutableSeries$(D))))
    }));
    return Legend;
  });
  legend.Legend = legend.Legend$();
  dart.defineLazy(legend.Legend, {
    /*legend.Legend._decimalPattern*/get _decimalPattern() {
      return number_format.NumberFormat.decimalPattern();
    }
  }, false);
  dart.addTypeTests(legend.Legend, _is_Legend_default);
  const _is_SeriesLegend_default = Symbol('_is_SeriesLegend_default');
  series_legend.SeriesLegend$ = dart.generic(D => {
    var PerSeriesLegendEntryGeneratorOfD = () => (PerSeriesLegendEntryGeneratorOfD = dart.constFn(per_series_legend_entry_generator.PerSeriesLegendEntryGenerator$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var MutableSeriesOfDToString = () => (MutableSeriesOfDToString = dart.constFn(dart.fnType(core.String, [MutableSeriesOfD()])))();
    var MutableSeriesOfDTobool = () => (MutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [MutableSeriesOfD()])))();
    class SeriesLegend extends legend.Legend$(D) {
      get [S$0._showMeasures]() {
        let t53;
        t53 = this[S$0.__SeriesLegend__showMeasures];
        return t53 == null ? dart.throw(new _internal.LateError.fieldNI("_showMeasures")) : t53;
      }
      set [S$0._showMeasures](t53) {
        this[S$0.__SeriesLegend__showMeasures] = t53;
      }
      set defaultHiddenSeries(defaultHiddenSeries) {
        let t54;
        this[S$0._defaultHiddenSeries] = defaultHiddenSeries;
        this[S$0._hiddenSeriesList].clear();
        t54 = this[S$0._defaultHiddenSeries];
        t54 == null ? null : t54[S$.$forEach](dart.bind(this, 'hideSeries'));
      }
      get defaultHiddenSeries() {
        return this[S$0._defaultHiddenSeries];
      }
      set alwaysVisibleSeries(alwaysVisibleSeries) {
        let t54;
        this[S$0._alwaysVisibleSeries] = alwaysVisibleSeries;
        t54 = this[S$0._alwaysVisibleSeries];
        t54 == null ? null : t54[S$.$forEach](dart.bind(this, 'showSeries'));
      }
      get alwaysVisibleSeries() {
        return this[S$0._alwaysVisibleSeries];
      }
      get showMeasures() {
        return this[S$0._showMeasures];
      }
      set showMeasures(showMeasures) {
        let t54;
        this[S$0._showMeasures] = (t54 = showMeasures, t54 == null ? false : t54);
      }
      get legendDefaultMeasure() {
        return this.legendEntryGenerator.legendDefaultMeasure;
      }
      set legendDefaultMeasure(legendDefaultMeasure) {
        let t54;
        this.legendEntryGenerator.legendDefaultMeasure = (t54 = legendDefaultMeasure, t54 == null ? legend_entry_generator.LegendDefaultMeasure.none : t54);
      }
      set measureFormatter(formatter) {
        let t54;
        this.legendEntryGenerator.measureFormatter = (t54 = formatter, t54 == null ? dart.bind(this, 'defaultLegendMeasureFormatter') : t54);
      }
      set secondaryMeasureFormatter(formatter) {
        let t54;
        this.legendEntryGenerator.secondaryMeasureFormatter = (t54 = formatter, t54 == null ? dart.bind(this, 'defaultLegendMeasureFormatter') : t54);
      }
      onData(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        let seriesIds = seriesList[S$.$map](core.String, dart.fn(series => series.id, MutableSeriesOfDToString()));
        this[S$0._hiddenSeriesList].removeWhere(dart.fn(id => !seriesIds[S$.$contains](id), T$.StringTobool()));
      }
      preProcessSeriesList(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        seriesList[S$.$removeWhere](dart.fn(series => this[S$0._hiddenSeriesList].contains(series.id), MutableSeriesOfDTobool()));
      }
      hideSeries(seriesId) {
        if (!this.isSeriesAlwaysVisible(seriesId)) {
          this[S$0._hiddenSeriesList].add(seriesId);
        }
      }
      showSeries(seriesId) {
        this[S$0._hiddenSeriesList].removeWhere(dart.fn(id => id === seriesId, T$.StringTobool()));
      }
      isSeriesHidden(seriesId) {
        return this[S$0._hiddenSeriesList].contains(seriesId);
      }
      isSeriesAlwaysVisible(seriesId) {
        return this[S$0._alwaysVisibleSeries] != null && dart.nullCheck(this[S$0._alwaysVisibleSeries])[S$.$contains](seriesId);
      }
    }
    (SeriesLegend.new = function(opts) {
      let t53, t53$;
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : null;
      let legendEntryGenerator = opts && 'legendEntryGenerator' in opts ? opts.legendEntryGenerator : null;
      let measureFormatter = opts && 'measureFormatter' in opts ? opts.measureFormatter : null;
      let secondaryMeasureFormatter = opts && 'secondaryMeasureFormatter' in opts ? opts.secondaryMeasureFormatter : null;
      let showMeasures = opts && 'showMeasures' in opts ? opts.showMeasures : null;
      let legendDefaultMeasure = opts && 'legendDefaultMeasure' in opts ? opts.legendDefaultMeasure : null;
      let entryTextStyle = opts && 'entryTextStyle' in opts ? opts.entryTextStyle : null;
      this[S$0._hiddenSeriesList] = T$.LinkedHashSetOfString().new();
      this[S$0._defaultHiddenSeries] = null;
      this[S$0._alwaysVisibleSeries] = null;
      this[S$0.__SeriesLegend__showMeasures] = null;
      SeriesLegend.__proto__.new.call(this, {selectionModelType: (t53 = selectionModelType, t53 == null ? selection_model.SelectionModelType.info : t53), legendEntryGenerator: (t53$ = legendEntryGenerator, t53$ == null ? new (PerSeriesLegendEntryGeneratorOfD()).new() : t53$), entryTextStyle: entryTextStyle});
      this.showMeasures = showMeasures;
      this.legendDefaultMeasure = legendDefaultMeasure;
      this.measureFormatter = measureFormatter;
      this.secondaryMeasureFormatter = secondaryMeasureFormatter;
    }).prototype = SeriesLegend.prototype;
    dart.addTypeTests(SeriesLegend);
    SeriesLegend.prototype[_is_SeriesLegend_default] = true;
    dart.addTypeCaches(SeriesLegend);
    dart.setMethodSignature(SeriesLegend, () => ({
      __proto__: dart.getMethods(SeriesLegend.__proto__),
      hideSeries: dart.fnType(dart.void, [core.String]),
      showSeries: dart.fnType(dart.void, [core.String]),
      isSeriesHidden: dart.fnType(core.bool, [core.String]),
      isSeriesAlwaysVisible: dart.fnType(core.bool, [core.String])
    }));
    dart.setGetterSignature(SeriesLegend, () => ({
      __proto__: dart.getGetters(SeriesLegend.__proto__),
      [S$0._showMeasures]: core.bool,
      defaultHiddenSeries: dart.nullable(core.List$(core.String)),
      alwaysVisibleSeries: dart.nullable(core.List$(core.String)),
      showMeasures: core.bool,
      legendDefaultMeasure: legend_entry_generator.LegendDefaultMeasure
    }));
    dart.setSetterSignature(SeriesLegend, () => ({
      __proto__: dart.getSetters(SeriesLegend.__proto__),
      [S$0._showMeasures]: core.bool,
      defaultHiddenSeries: dart.nullable(core.List$(core.String)),
      alwaysVisibleSeries: dart.nullable(core.List$(core.String)),
      showMeasures: dart.nullable(core.bool),
      legendDefaultMeasure: dart.nullable(legend_entry_generator.LegendDefaultMeasure),
      measureFormatter: dart.nullable(dart.fnType(core.String, [dart.nullable(core.num)])),
      secondaryMeasureFormatter: dart.nullable(dart.fnType(core.String, [dart.nullable(core.num)]))
    }));
    dart.setLibraryUri(SeriesLegend, I[62]);
    dart.setFieldSignature(SeriesLegend, () => ({
      __proto__: dart.getFields(SeriesLegend.__proto__),
      [S$0._hiddenSeriesList]: dart.finalFieldType(core.Set$(core.String)),
      [S$0._defaultHiddenSeries]: dart.fieldType(dart.nullable(core.List$(core.String))),
      [S$0._alwaysVisibleSeries]: dart.fieldType(dart.nullable(core.List$(core.String))),
      [S$0.__SeriesLegend__showMeasures]: dart.fieldType(dart.nullable(core.bool))
    }));
    return SeriesLegend;
  });
  series_legend.SeriesLegend = series_legend.SeriesLegend$();
  dart.addTypeTests(series_legend.SeriesLegend, _is_SeriesLegend_default);
  const _is_PerDatumLegendEntryGenerator_default = Symbol('_is_PerDatumLegendEntryGenerator_default');
  per_datum_legend_entry_generator.PerDatumLegendEntryGenerator$ = dart.generic(D => {
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var LegendEntryOfD = () => (LegendEntryOfD = dart.constFn(legend_entry.LegendEntry$(D)))();
    var JSArrayOfLegendEntryOfD = () => (JSArrayOfLegendEntryOfD = dart.constFn(_interceptors.JSArray$(LegendEntryOfD())))();
    var ListOfLegendEntryOfD = () => (ListOfLegendEntryOfD = dart.constFn(core.List$(LegendEntryOfD())))();
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ImmutableSeriesOfDTobool = () => (ImmutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [ImmutableSeriesOfD()])))();
    class PerDatumLegendEntryGenerator extends core.Object {
      get entryTextStyle() {
        return this[S$0.entryTextStyle$1];
      }
      set entryTextStyle(value) {
        this[S$0.entryTextStyle$1] = value;
      }
      get measureFormatter() {
        return this[S$0.measureFormatter$1];
      }
      set measureFormatter(value) {
        this[S$0.measureFormatter$1] = value;
      }
      get secondaryMeasureFormatter() {
        return this[S$0.secondaryMeasureFormatter$1];
      }
      set secondaryMeasureFormatter(value) {
        this[S$0.secondaryMeasureFormatter$1] = value;
      }
      get showOverlaySeries() {
        let t58;
        t58 = this[S$0.__PerDatumLegendEntryGenerator_showOverlaySeries];
        return t58 == null ? dart.throw(new _internal.LateError.fieldNI("showOverlaySeries")) : t58;
      }
      set showOverlaySeries(t58) {
        this[S$0.__PerDatumLegendEntryGenerator_showOverlaySeries] = t58;
      }
      get legendDefaultMeasure() {
        let t59;
        t59 = this[S$0.__PerDatumLegendEntryGenerator_legendDefaultMeasure];
        return t59 == null ? dart.throw(new _internal.LateError.fieldNI("legendDefaultMeasure")) : t59;
      }
      set legendDefaultMeasure(t59) {
        this[S$0.__PerDatumLegendEntryGenerator_legendDefaultMeasure] = t59;
      }
      getLegendEntries(seriesList) {
        let t61, t60;
        ListOfMutableSeriesOfD().as(seriesList);
        let legendEntries = JSArrayOfLegendEntryOfD().of([]);
        let series = seriesList[S$.$_get](0);
        for (let i = 0; i < series.data[S$.$length]; i = i + 1) {
          legendEntries[S$.$add](new (LegendEntryOfD()).new(series, dart.toString((t60 = series, t61 = i, t60.domainFn(t61))), {color: dart.nullCheck(series.colorFn)(i), datum: series.data[S$.$_get](i), datumIndex: i, textStyle: this.entryTextStyle}));
        }
        if (this.legendDefaultMeasure !== legend_entry_generator.LegendDefaultMeasure.none) {
          this[S$0._updateEntries](legendEntries);
        }
        return legendEntries;
      }
      updateLegendEntries(legendEntries, selectionModel, seriesList) {
        ListOfLegendEntryOfD().as(legendEntries);
        SelectionModelOfD().as(selectionModel);
        ListOfMutableSeriesOfD().as(seriesList);
        if (selectionModel.hasAnySelection) {
          this[S$0._updateFromSelection$1](legendEntries, selectionModel);
        } else {
          if (this.legendDefaultMeasure !== legend_entry_generator.LegendDefaultMeasure.none) {
            this[S$0._updateEntries](legendEntries);
          } else {
            this[S$0._resetLegendEntryMeasures$1](legendEntries);
          }
        }
      }
      [S$0._updateFromSelection$1](legendEntries, selectionModel) {
        let t61, t60;
        if (this.legendDefaultMeasure !== legend_entry_generator.LegendDefaultMeasure.none) {
          for (let entry of legendEntries) {
            let series = entry.series;
            let measure = (t60 = series, t61 = entry.datumIndex, t60.measureFn(t61));
            entry.value = dart.nullCheck(measure)[S$.$toDouble]();
            entry.formattedValue = this[S$0._getFormattedMeasureValue](series, measure);
            entry.isSelected = selectionModel.selectedSeries[S$.$any](dart.fn(selectedSeries => series.id === selectedSeries.id, ImmutableSeriesOfDTobool()));
          }
        }
      }
      [S$0._resetLegendEntryMeasures$1](legendEntries) {
        for (let entry of legendEntries) {
          entry.value = null;
          entry.formattedValue = null;
          entry.isSelected = false;
        }
      }
      [S$0._updateEntries](legendEntries) {
        let t61, t60;
        if (this.legendDefaultMeasure !== legend_entry_generator.LegendDefaultMeasure.none) {
          for (let entry of legendEntries) {
            let series = entry.series;
            let measure = (t60 = series, t61 = entry.datumIndex, t60.measureFn(t61));
            entry.value = dart.nullCheck(measure)[S$.$toDouble]();
            entry.formattedValue = this[S$0._getFormattedMeasureValue](series, measure);
            entry.isSelected = false;
          }
        }
      }
      [S$0._getFormattedMeasureValue](series, measure) {
        return series.getAttr(core.String, axis$.measureAxisIdKey) === "secondaryMeasureAxisId" ? dart.nullCheck(this.secondaryMeasureFormatter)(measure) : dart.nullCheck(this.measureFormatter)(measure);
      }
      _equals(other) {
        if (other == null) return false;
        return per_datum_legend_entry_generator.PerDatumLegendEntryGenerator.is(other) && dart.equals(this.measureFormatter, other.measureFormatter) && dart.equals(this.secondaryMeasureFormatter, other.secondaryMeasureFormatter) && this.legendDefaultMeasure === other.legendDefaultMeasure && dart.equals(this.entryTextStyle, other.entryTextStyle);
      }
      get hashCode() {
        let hashcode = dart.hashCode(this.measureFormatter);
        hashcode = hashcode * 37 + dart.hashCode(this.secondaryMeasureFormatter);
        hashcode = hashcode * 37 + this.legendDefaultMeasure[S$.$hashCode];
        hashcode = hashcode * 37 + dart.hashCode(this.entryTextStyle);
        return hashcode;
      }
    }
    (PerDatumLegendEntryGenerator.new = function() {
      this[S$0.entryTextStyle$1] = null;
      this[S$0.measureFormatter$1] = null;
      this[S$0.secondaryMeasureFormatter$1] = null;
      this[S$0.__PerDatumLegendEntryGenerator_showOverlaySeries] = null;
      this[S$0.__PerDatumLegendEntryGenerator_legendDefaultMeasure] = null;
      ;
    }).prototype = PerDatumLegendEntryGenerator.prototype;
    dart.addTypeTests(PerDatumLegendEntryGenerator);
    PerDatumLegendEntryGenerator.prototype[_is_PerDatumLegendEntryGenerator_default] = true;
    dart.addTypeCaches(PerDatumLegendEntryGenerator);
    PerDatumLegendEntryGenerator[dart.implements] = () => [legend_entry_generator.LegendEntryGenerator$(D)];
    dart.setMethodSignature(PerDatumLegendEntryGenerator, () => ({
      __proto__: dart.getMethods(PerDatumLegendEntryGenerator.__proto__),
      getLegendEntries: dart.fnType(core.List$(legend_entry.LegendEntry$(D)), [dart.nullable(core.Object)]),
      updateLegendEntries: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
      [S$0._updateFromSelection$1]: dart.fnType(dart.void, [core.List$(legend_entry.LegendEntry$(D)), selection_model.SelectionModel$(D)]),
      [S$0._resetLegendEntryMeasures$1]: dart.fnType(dart.void, [core.List$(legend_entry.LegendEntry$(D))]),
      [S$0._updateEntries]: dart.fnType(dart.void, [core.List$(legend_entry.LegendEntry$(D))]),
      [S$0._getFormattedMeasureValue]: dart.fnType(core.String, [processed_series.ImmutableSeries$(D), core.num])
    }));
    dart.setGetterSignature(PerDatumLegendEntryGenerator, () => ({
      __proto__: dart.getGetters(PerDatumLegendEntryGenerator.__proto__),
      showOverlaySeries: core.bool,
      legendDefaultMeasure: legend_entry_generator.LegendDefaultMeasure
    }));
    dart.setSetterSignature(PerDatumLegendEntryGenerator, () => ({
      __proto__: dart.getSetters(PerDatumLegendEntryGenerator.__proto__),
      showOverlaySeries: core.bool,
      legendDefaultMeasure: legend_entry_generator.LegendDefaultMeasure
    }));
    dart.setLibraryUri(PerDatumLegendEntryGenerator, I[63]);
    dart.setFieldSignature(PerDatumLegendEntryGenerator, () => ({
      __proto__: dart.getFields(PerDatumLegendEntryGenerator.__proto__),
      entryTextStyle: dart.fieldType(dart.nullable(axis_spec.TextStyleSpec)),
      measureFormatter: dart.fieldType(dart.nullable(dart.fnType(core.String, [dart.nullable(core.num)]))),
      secondaryMeasureFormatter: dart.fieldType(dart.nullable(dart.fnType(core.String, [dart.nullable(core.num)]))),
      [S$0.__PerDatumLegendEntryGenerator_showOverlaySeries]: dart.fieldType(dart.nullable(core.bool)),
      [S$0.__PerDatumLegendEntryGenerator_legendDefaultMeasure]: dart.fieldType(dart.nullable(legend_entry_generator.LegendDefaultMeasure))
    }));
    dart.defineExtensionMethods(PerDatumLegendEntryGenerator, ['_equals']);
    dart.defineExtensionAccessors(PerDatumLegendEntryGenerator, ['hashCode']);
    return PerDatumLegendEntryGenerator;
  });
  per_datum_legend_entry_generator.PerDatumLegendEntryGenerator = per_datum_legend_entry_generator.PerDatumLegendEntryGenerator$();
  dart.addTypeTests(per_datum_legend_entry_generator.PerDatumLegendEntryGenerator, _is_PerDatumLegendEntryGenerator_default);
  const _is_LegendEntryGenerator_default = Symbol('_is_LegendEntryGenerator_default');
  legend_entry_generator.LegendEntryGenerator$ = dart.generic(D => {
    class LegendEntryGenerator extends core.Object {}
    (LegendEntryGenerator.new = function() {
      ;
    }).prototype = LegendEntryGenerator.prototype;
    dart.addTypeTests(LegendEntryGenerator);
    LegendEntryGenerator.prototype[_is_LegendEntryGenerator_default] = true;
    dart.addTypeCaches(LegendEntryGenerator);
    dart.setLibraryUri(LegendEntryGenerator, I[64]);
    return LegendEntryGenerator;
  });
  legend_entry_generator.LegendEntryGenerator = legend_entry_generator.LegendEntryGenerator$();
  dart.addTypeTests(legend_entry_generator.LegendEntryGenerator, _is_LegendEntryGenerator_default);
  legend_entry_generator.LegendDefaultMeasure = class LegendDefaultMeasure extends core.Object {
    toString() {
      return this[S$0._name$10];
    }
  };
  (legend_entry_generator.LegendDefaultMeasure.new = function(index, _name) {
    this.index = index;
    this[S$0._name$10] = _name;
    ;
  }).prototype = legend_entry_generator.LegendDefaultMeasure.prototype;
  dart.addTypeTests(legend_entry_generator.LegendDefaultMeasure);
  dart.addTypeCaches(legend_entry_generator.LegendDefaultMeasure);
  dart.setLibraryUri(legend_entry_generator.LegendDefaultMeasure, I[64]);
  dart.setFieldSignature(legend_entry_generator.LegendDefaultMeasure, () => ({
    __proto__: dart.getFields(legend_entry_generator.LegendDefaultMeasure.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$10]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(legend_entry_generator.LegendDefaultMeasure, ['toString']);
  legend_entry_generator.LegendDefaultMeasure.none = C[80] || CT.C80;
  legend_entry_generator.LegendDefaultMeasure.sum = C[76] || CT.C76;
  legend_entry_generator.LegendDefaultMeasure.average = C[77] || CT.C77;
  legend_entry_generator.LegendDefaultMeasure.firstValue = C[78] || CT.C78;
  legend_entry_generator.LegendDefaultMeasure.lastValue = C[79] || CT.C79;
  legend_entry_generator.LegendDefaultMeasure.values = C[81] || CT.C81;
  legend_entry.LegendEntryBase = class LegendEntryBase extends core.Object {
    get label() {
      return this[S$0.label];
    }
    set label(value) {
      super.label = value;
    }
    get textStyle() {
      return this[S$0.textStyle];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get rowNumber() {
      return this[S$0.rowNumber];
    }
    set rowNumber(value) {
      this[S$0.rowNumber] = value;
    }
    get columnNumber() {
      return this[S$0.columnNumber];
    }
    set columnNumber(value) {
      this[S$0.columnNumber] = value;
    }
    get rowCount() {
      return this[S$0.rowCount];
    }
    set rowCount(value) {
      this[S$0.rowCount] = value;
    }
    get columnCount() {
      return this[S$0.columnCount];
    }
    set columnCount(value) {
      this[S$0.columnCount] = value;
    }
    get inFirstRow() {
      return this[S$0.inFirstRow];
    }
    set inFirstRow(value) {
      this[S$0.inFirstRow] = value;
    }
    get inFirstColumn() {
      return this[S$0.inFirstColumn];
    }
    set inFirstColumn(value) {
      this[S$0.inFirstColumn] = value;
    }
    get inLastRow() {
      return this[S$0.inLastRow];
    }
    set inLastRow(value) {
      this[S$0.inLastRow] = value;
    }
    get inLastColumn() {
      return this[S$0.inLastColumn];
    }
    set inLastColumn(value) {
      this[S$0.inLastColumn] = value;
    }
  };
  (legend_entry.LegendEntryBase.new = function(label, opts) {
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let rowNumber = opts && 'rowNumber' in opts ? opts.rowNumber : null;
    let columnNumber = opts && 'columnNumber' in opts ? opts.columnNumber : null;
    let rowCount = opts && 'rowCount' in opts ? opts.rowCount : null;
    let columnCount = opts && 'columnCount' in opts ? opts.columnCount : null;
    let inFirstRow = opts && 'inFirstRow' in opts ? opts.inFirstRow : null;
    let inFirstColumn = opts && 'inFirstColumn' in opts ? opts.inFirstColumn : null;
    let inLastRow = opts && 'inLastRow' in opts ? opts.inLastRow : null;
    let inLastColumn = opts && 'inLastColumn' in opts ? opts.inLastColumn : null;
    this[S$0.label] = label;
    this[S$0.textStyle] = textStyle;
    this[S$0.rowNumber] = rowNumber;
    this[S$0.columnNumber] = columnNumber;
    this[S$0.rowCount] = rowCount;
    this[S$0.columnCount] = columnCount;
    this[S$0.inFirstRow] = inFirstRow;
    this[S$0.inFirstColumn] = inFirstColumn;
    this[S$0.inLastRow] = inLastRow;
    this[S$0.inLastColumn] = inLastColumn;
    ;
  }).prototype = legend_entry.LegendEntryBase.prototype;
  dart.addTypeTests(legend_entry.LegendEntryBase);
  dart.addTypeCaches(legend_entry.LegendEntryBase);
  dart.setLibraryUri(legend_entry.LegendEntryBase, I[65]);
  dart.setFieldSignature(legend_entry.LegendEntryBase, () => ({
    __proto__: dart.getFields(legend_entry.LegendEntryBase.__proto__),
    label: dart.finalFieldType(core.String),
    textStyle: dart.finalFieldType(dart.nullable(axis_spec.TextStyleSpec)),
    rowNumber: dart.fieldType(dart.nullable(core.int)),
    columnNumber: dart.fieldType(dart.nullable(core.int)),
    rowCount: dart.fieldType(dart.nullable(core.int)),
    columnCount: dart.fieldType(dart.nullable(core.int)),
    inFirstRow: dart.fieldType(dart.nullable(core.bool)),
    inFirstColumn: dart.fieldType(dart.nullable(core.bool)),
    inLastRow: dart.fieldType(dart.nullable(core.bool)),
    inLastColumn: dart.fieldType(dart.nullable(core.bool))
  }));
  const _is_LegendCategory_default = Symbol('_is_LegendCategory_default');
  legend_entry.LegendCategory$ = dart.generic(D => {
    class LegendCategory extends legend_entry.LegendEntryBase {
      get entries() {
        return this[S$0.entries];
      }
      set entries(value) {
        super.entries = value;
      }
    }
    (LegendCategory.new = function(label, entries, opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let rowNumber = opts && 'rowNumber' in opts ? opts.rowNumber : null;
      let columnNumber = opts && 'columnNumber' in opts ? opts.columnNumber : null;
      let rowCount = opts && 'rowCount' in opts ? opts.rowCount : null;
      let columnCount = opts && 'columnCount' in opts ? opts.columnCount : null;
      let inFirstRow = opts && 'inFirstRow' in opts ? opts.inFirstRow : null;
      let inFirstColumn = opts && 'inFirstColumn' in opts ? opts.inFirstColumn : null;
      let inLastRow = opts && 'inLastRow' in opts ? opts.inLastRow : null;
      let inLastColumn = opts && 'inLastColumn' in opts ? opts.inLastColumn : null;
      this[S$0.entries] = entries;
      LegendCategory.__proto__.new.call(this, label, {textStyle: textStyle, rowNumber: rowNumber, columnNumber: columnNumber, rowCount: rowCount, columnCount: columnCount, inFirstRow: inFirstRow, inFirstColumn: inFirstColumn, inLastRow: inLastRow, inLastColumn: inLastColumn});
      ;
    }).prototype = LegendCategory.prototype;
    dart.addTypeTests(LegendCategory);
    LegendCategory.prototype[_is_LegendCategory_default] = true;
    dart.addTypeCaches(LegendCategory);
    dart.setLibraryUri(LegendCategory, I[65]);
    dart.setFieldSignature(LegendCategory, () => ({
      __proto__: dart.getFields(LegendCategory.__proto__),
      entries: dart.finalFieldType(dart.nullable(core.List$(legend_entry.LegendEntry$(D))))
    }));
    return LegendCategory;
  });
  legend_entry.LegendCategory = legend_entry.LegendCategory$();
  dart.addTypeTests(legend_entry.LegendCategory, _is_LegendCategory_default);
  const _is_LegendEntry_default = Symbol('_is_LegendEntry_default');
  legend_entry.LegendEntry$ = dart.generic(D => {
    class LegendEntry extends legend_entry.LegendEntryBase {
      get series() {
        return this[S$0.series$4];
      }
      set series(value) {
        super.series = value;
      }
      get datum() {
        return this[S$0.datum$2];
      }
      set datum(value) {
        super.datum = value;
      }
      get datumIndex() {
        return this[S$0.datumIndex];
      }
      set datumIndex(value) {
        super.datumIndex = value;
      }
      get domain() {
        return this[S$0.domain$4];
      }
      set domain(value) {
        super.domain = value;
      }
      get color() {
        return this[S$0.color$4];
      }
      set color(value) {
        super.color = value;
      }
      get value() {
        return this[S$0.value$1];
      }
      set value(value) {
        this[S$0.value$1] = value;
      }
      get selectedDataIndexes() {
        return this[S$0.selectedDataIndexes];
      }
      set selectedDataIndexes(value) {
        this[S$0.selectedDataIndexes] = value;
      }
      get formattedValue() {
        return this[S$0.formattedValue];
      }
      set formattedValue(value) {
        this[S$0.formattedValue] = value;
      }
      get isSelected() {
        return this[S$0.isSelected];
      }
      set isSelected(value) {
        this[S$0.isSelected] = value;
      }
      get symbolRenderer() {
        return dart.nullCheck(this.series.getAttr(T$0.SeriesRendererOfObject(), series_renderer.rendererKey)).symbolRenderer;
      }
      get dashPattern() {
        let t61, t60;
        t60 = this.series.dashPatternFn;
        return t60 == null ? null : t60((t61 = this.datumIndex, t61 == null ? 0 : t61));
      }
    }
    (LegendEntry.new = function(series, label, opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let datumIndex = opts && 'datumIndex' in opts ? opts.datumIndex : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let selectedDataIndexes = opts && 'selectedDataIndexes' in opts ? opts.selectedDataIndexes : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let isSelected = opts && 'isSelected' in opts ? opts.isSelected : false;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let rowNumber = opts && 'rowNumber' in opts ? opts.rowNumber : null;
      let columnNumber = opts && 'columnNumber' in opts ? opts.columnNumber : null;
      let rowCount = opts && 'rowCount' in opts ? opts.rowCount : null;
      let columnCount = opts && 'columnCount' in opts ? opts.columnCount : null;
      let inFirstRow = opts && 'inFirstRow' in opts ? opts.inFirstRow : null;
      let inFirstColumn = opts && 'inFirstColumn' in opts ? opts.inFirstColumn : null;
      let inLastRow = opts && 'inLastRow' in opts ? opts.inLastRow : null;
      let inLastColumn = opts && 'inLastColumn' in opts ? opts.inLastColumn : null;
      this[S$0.formattedValue] = null;
      this[S$0.series$4] = series;
      this[S$0.datum$2] = datum;
      this[S$0.datumIndex] = datumIndex;
      this[S$0.domain$4] = domain;
      this[S$0.value$1] = value;
      this[S$0.selectedDataIndexes] = selectedDataIndexes;
      this[S$0.color$4] = color;
      this[S$0.isSelected] = isSelected;
      LegendEntry.__proto__.new.call(this, label, {textStyle: textStyle, rowNumber: rowNumber, columnNumber: columnNumber, rowCount: rowCount, columnCount: columnCount, inFirstRow: inFirstRow, inFirstColumn: inFirstColumn, inLastRow: inLastRow, inLastColumn: inLastColumn});
      ;
    }).prototype = LegendEntry.prototype;
    dart.addTypeTests(LegendEntry);
    LegendEntry.prototype[_is_LegendEntry_default] = true;
    dart.addTypeCaches(LegendEntry);
    dart.setGetterSignature(LegendEntry, () => ({
      __proto__: dart.getGetters(LegendEntry.__proto__),
      symbolRenderer: dart.nullable(symbol_renderer.SymbolRenderer),
      dashPattern: dart.nullable(core.List$(core.int))
    }));
    dart.setLibraryUri(LegendEntry, I[65]);
    dart.setFieldSignature(LegendEntry, () => ({
      __proto__: dart.getFields(LegendEntry.__proto__),
      series: dart.finalFieldType(processed_series.ImmutableSeries$(D)),
      datum: dart.finalFieldType(dart.dynamic),
      datumIndex: dart.finalFieldType(dart.nullable(core.int)),
      domain: dart.finalFieldType(dart.nullable(D)),
      color: dart.finalFieldType(dart.nullable(color$.Color)),
      value: dart.fieldType(dart.nullable(core.double)),
      selectedDataIndexes: dart.fieldType(dart.nullable(core.List$(dart.nullable(core.int)))),
      formattedValue: dart.fieldType(dart.nullable(core.String)),
      isSelected: dart.fieldType(core.bool)
    }));
    return LegendEntry;
  });
  legend_entry.LegendEntry = legend_entry.LegendEntry$();
  dart.addTypeTests(legend_entry.LegendEntry, _is_LegendEntry_default);
  const _is_LegendState_default = Symbol('_is_LegendState_default');
  legend.LegendState$ = dart.generic(D => {
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var SelectionModelNOfD = () => (SelectionModelNOfD = dart.constFn(dart.nullable(SelectionModelOfD())))();
    var LegendEntryOfD = () => (LegendEntryOfD = dart.constFn(legend_entry.LegendEntry$(D)))();
    var ListOfLegendEntryOfD = () => (ListOfLegendEntryOfD = dart.constFn(core.List$(LegendEntryOfD())))();
    class LegendState extends core.Object {
      get [S$0._selectionModel]() {
        return this[S$0._selectionModel$1];
      }
      set [S$0._selectionModel](value) {
        this[S$0._selectionModel$1] = SelectionModelNOfD().as(value);
      }
      get [S$0._legendEntries]() {
        let t60;
        t60 = this[S$0.__LegendState__legendEntries];
        return t60 == null ? dart.throw(new _internal.LateError.fieldNI("_legendEntries")) : t60;
      }
      set [S$0._legendEntries](t60) {
        ListOfLegendEntryOfD().as(t60);
        this[S$0.__LegendState__legendEntries] = t60;
      }
      get legendEntries() {
        return this[S$0._legendEntries];
      }
      get selectionModel() {
        return this[S$0._selectionModel];
      }
    }
    (LegendState.new = function() {
      this[S$0.__LegendState__legendEntries] = null;
      this[S$0._selectionModel$1] = null;
      ;
    }).prototype = LegendState.prototype;
    dart.addTypeTests(LegendState);
    LegendState.prototype[_is_LegendState_default] = true;
    dart.addTypeCaches(LegendState);
    dart.setGetterSignature(LegendState, () => ({
      __proto__: dart.getGetters(LegendState.__proto__),
      [S$0._legendEntries]: core.List$(legend_entry.LegendEntry$(D)),
      legendEntries: core.List$(legend_entry.LegendEntry$(D)),
      selectionModel: dart.nullable(selection_model.SelectionModel$(D))
    }));
    dart.setSetterSignature(LegendState, () => ({
      __proto__: dart.getSetters(LegendState.__proto__),
      [S$0._legendEntries]: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(LegendState, I[61]);
    dart.setFieldSignature(LegendState, () => ({
      __proto__: dart.getFields(LegendState.__proto__),
      [S$0.__LegendState__legendEntries]: dart.fieldType(dart.nullable(core.List$(legend_entry.LegendEntry$(D)))),
      [S$0._selectionModel]: dart.fieldType(dart.nullable(selection_model.SelectionModel$(D)))
    }));
    return LegendState;
  });
  legend.LegendState = legend.LegendState$();
  dart.addTypeTests(legend.LegendState, _is_LegendState_default);
  legend.LegendCellPadding = class LegendCellPadding extends core.Object {
    get bottomPct() {
      return this[S$0.bottomPct];
    }
    set bottomPct(value) {
      super.bottomPct = value;
    }
    get bottomPx() {
      return this[S$0.bottomPx];
    }
    set bottomPx(value) {
      super.bottomPx = value;
    }
    get leftPct() {
      return this[S$0.leftPct];
    }
    set leftPct(value) {
      super.leftPct = value;
    }
    get leftPx() {
      return this[S$0.leftPx];
    }
    set leftPx(value) {
      super.leftPx = value;
    }
    get rightPct() {
      return this[S$0.rightPct];
    }
    set rightPct(value) {
      super.rightPct = value;
    }
    get rightPx() {
      return this[S$0.rightPx];
    }
    set rightPx(value) {
      super.rightPx = value;
    }
    get topPct() {
      return this[S$0.topPct];
    }
    set topPct(value) {
      super.topPct = value;
    }
    get topPx() {
      return this[S$0.topPx];
    }
    set topPx(value) {
      super.topPx = value;
    }
    bottom(height) {
      return this.bottomPct != null ? dart.nullCheck(this.bottomPct) * height : dart.nullCheck(this.bottomPx);
    }
    left(width) {
      return this.leftPct != null ? dart.nullCheck(this.leftPct) * width : dart.nullCheck(this.leftPx);
    }
    right(width) {
      return this.rightPct != null ? dart.nullCheck(this.rightPct) * width : dart.nullCheck(this.rightPx);
    }
    top(height) {
      return this.topPct != null ? dart.nullCheck(this.topPct) * height : dart.nullCheck(this.topPx);
    }
  };
  (legend.LegendCellPadding.fromLTRBPct = function(leftPct, topPct, rightPct, bottomPct) {
    this[S$0.leftPct] = leftPct;
    this[S$0.topPct] = topPct;
    this[S$0.rightPct] = rightPct;
    this[S$0.bottomPct] = bottomPct;
    this[S$0.leftPx] = null;
    this[S$0.topPx] = null;
    this[S$0.rightPx] = null;
    this[S$0.bottomPx] = null;
    ;
  }).prototype = legend.LegendCellPadding.prototype;
  (legend.LegendCellPadding.fromLTRBPx = function(leftPx, topPx, rightPx, bottomPx) {
    this[S$0.leftPx] = leftPx;
    this[S$0.topPx] = topPx;
    this[S$0.rightPx] = rightPx;
    this[S$0.bottomPx] = bottomPx;
    this[S$0.leftPct] = null;
    this[S$0.topPct] = null;
    this[S$0.rightPct] = null;
    this[S$0.bottomPct] = null;
    ;
  }).prototype = legend.LegendCellPadding.prototype;
  (legend.LegendCellPadding.fromTRBLPct = function(topPct, rightPct, bottomPct, leftPct) {
    this[S$0.topPct] = topPct;
    this[S$0.rightPct] = rightPct;
    this[S$0.bottomPct] = bottomPct;
    this[S$0.leftPct] = leftPct;
    this[S$0.topPx] = null;
    this[S$0.rightPx] = null;
    this[S$0.bottomPx] = null;
    this[S$0.leftPx] = null;
    ;
  }).prototype = legend.LegendCellPadding.prototype;
  (legend.LegendCellPadding.fromTRBLPx = function(topPx, rightPx, bottomPx, leftPx) {
    this[S$0.topPx] = topPx;
    this[S$0.rightPx] = rightPx;
    this[S$0.bottomPx] = bottomPx;
    this[S$0.leftPx] = leftPx;
    this[S$0.topPct] = null;
    this[S$0.rightPct] = null;
    this[S$0.bottomPct] = null;
    this[S$0.leftPct] = null;
    ;
  }).prototype = legend.LegendCellPadding.prototype;
  (legend.LegendCellPadding.allPct = function(value) {
    legend.LegendCellPadding.fromLTRBPct.call(this, value, value, value, value);
  }).prototype = legend.LegendCellPadding.prototype;
  (legend.LegendCellPadding.allPx = function(value) {
    legend.LegendCellPadding.fromLTRBPx.call(this, value, value, value, value);
  }).prototype = legend.LegendCellPadding.prototype;
  dart.addTypeTests(legend.LegendCellPadding);
  dart.addTypeCaches(legend.LegendCellPadding);
  dart.setMethodSignature(legend.LegendCellPadding, () => ({
    __proto__: dart.getMethods(legend.LegendCellPadding.__proto__),
    bottom: dart.fnType(core.double, [core.num]),
    left: dart.fnType(core.double, [core.num]),
    right: dart.fnType(core.double, [core.num]),
    top: dart.fnType(core.double, [core.num])
  }));
  dart.setLibraryUri(legend.LegendCellPadding, I[61]);
  dart.setFieldSignature(legend.LegendCellPadding, () => ({
    __proto__: dart.getFields(legend.LegendCellPadding.__proto__),
    bottomPct: dart.finalFieldType(dart.nullable(core.double)),
    bottomPx: dart.finalFieldType(dart.nullable(core.double)),
    leftPct: dart.finalFieldType(dart.nullable(core.double)),
    leftPx: dart.finalFieldType(dart.nullable(core.double)),
    rightPct: dart.finalFieldType(dart.nullable(core.double)),
    rightPx: dart.finalFieldType(dart.nullable(core.double)),
    topPct: dart.finalFieldType(dart.nullable(core.double)),
    topPx: dart.finalFieldType(dart.nullable(core.double))
  }));
  legend.LegendTapHandling = class LegendTapHandling extends core.Object {
    toString() {
      return this[S$0._name$11];
    }
  };
  (legend.LegendTapHandling.new = function(index, _name) {
    this.index = index;
    this[S$0._name$11] = _name;
    ;
  }).prototype = legend.LegendTapHandling.prototype;
  dart.addTypeTests(legend.LegendTapHandling);
  dart.addTypeCaches(legend.LegendTapHandling);
  dart.setLibraryUri(legend.LegendTapHandling, I[61]);
  dart.setFieldSignature(legend.LegendTapHandling, () => ({
    __proto__: dart.getFields(legend.LegendTapHandling.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(legend.LegendTapHandling, ['toString']);
  legend.LegendTapHandling.none = C[82] || CT.C82;
  legend.LegendTapHandling.hide = C[83] || CT.C83;
  legend.LegendTapHandling.values = C[84] || CT.C84;
  const _is_DatumLegend_default = Symbol('_is_DatumLegend_default');
  datum_legend.DatumLegend$ = dart.generic(D => {
    var PerDatumLegendEntryGeneratorOfD = () => (PerDatumLegendEntryGeneratorOfD = dart.constFn(per_datum_legend_entry_generator.PerDatumLegendEntryGenerator$(D)))();
    class DatumLegend extends legend.Legend$(D) {
      get [S$0._showMeasures$1]() {
        let t61;
        t61 = this[S$0.__DatumLegend__showMeasures];
        return t61 == null ? dart.throw(new _internal.LateError.fieldNI("_showMeasures")) : t61;
      }
      set [S$0._showMeasures$1](t61) {
        this[S$0.__DatumLegend__showMeasures] = t61;
      }
      get showMeasures() {
        return this[S$0._showMeasures$1];
      }
      set showMeasures(showMeasures) {
        let t62;
        this[S$0._showMeasures$1] = (t62 = showMeasures, t62 == null ? false : t62);
      }
      get legendDefaultMeasure() {
        return this.legendEntryGenerator.legendDefaultMeasure;
      }
      set legendDefaultMeasure(legendDefaultMeasure) {
        let t62;
        this.legendEntryGenerator.legendDefaultMeasure = (t62 = legendDefaultMeasure, t62 == null ? legend_entry_generator.LegendDefaultMeasure.none : t62);
      }
      set measureFormatter(formatter) {
        let t62;
        this.legendEntryGenerator.measureFormatter = (t62 = formatter, t62 == null ? dart.bind(this, 'defaultLegendMeasureFormatter') : t62);
      }
      set secondaryMeasureFormatter(formatter) {
        let t62;
        this.legendEntryGenerator.secondaryMeasureFormatter = (t62 = formatter, t62 == null ? dart.bind(this, 'defaultLegendMeasureFormatter') : t62);
      }
    }
    (DatumLegend.new = function(opts) {
      let t61, t61$;
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : null;
      let legendEntryGenerator = opts && 'legendEntryGenerator' in opts ? opts.legendEntryGenerator : null;
      let measureFormatter = opts && 'measureFormatter' in opts ? opts.measureFormatter : null;
      let secondaryMeasureFormatter = opts && 'secondaryMeasureFormatter' in opts ? opts.secondaryMeasureFormatter : null;
      let showMeasures = opts && 'showMeasures' in opts ? opts.showMeasures : null;
      let legendDefaultMeasure = opts && 'legendDefaultMeasure' in opts ? opts.legendDefaultMeasure : null;
      let entryTextStyle = opts && 'entryTextStyle' in opts ? opts.entryTextStyle : null;
      this[S$0.__DatumLegend__showMeasures] = null;
      DatumLegend.__proto__.new.call(this, {selectionModelType: (t61 = selectionModelType, t61 == null ? selection_model.SelectionModelType.info : t61), legendEntryGenerator: (t61$ = legendEntryGenerator, t61$ == null ? new (PerDatumLegendEntryGeneratorOfD()).new() : t61$), entryTextStyle: entryTextStyle});
      this.showMeasures = showMeasures;
      this.legendDefaultMeasure = legendDefaultMeasure;
      this.measureFormatter = measureFormatter;
      this.secondaryMeasureFormatter = secondaryMeasureFormatter;
    }).prototype = DatumLegend.prototype;
    dart.addTypeTests(DatumLegend);
    DatumLegend.prototype[_is_DatumLegend_default] = true;
    dart.addTypeCaches(DatumLegend);
    dart.setGetterSignature(DatumLegend, () => ({
      __proto__: dart.getGetters(DatumLegend.__proto__),
      [S$0._showMeasures$1]: core.bool,
      showMeasures: core.bool,
      legendDefaultMeasure: legend_entry_generator.LegendDefaultMeasure
    }));
    dart.setSetterSignature(DatumLegend, () => ({
      __proto__: dart.getSetters(DatumLegend.__proto__),
      [S$0._showMeasures$1]: core.bool,
      showMeasures: dart.nullable(core.bool),
      legendDefaultMeasure: dart.nullable(legend_entry_generator.LegendDefaultMeasure),
      measureFormatter: dart.nullable(dart.fnType(core.String, [dart.nullable(core.num)])),
      secondaryMeasureFormatter: dart.nullable(dart.fnType(core.String, [dart.nullable(core.num)]))
    }));
    dart.setLibraryUri(DatumLegend, I[66]);
    dart.setFieldSignature(DatumLegend, () => ({
      __proto__: dart.getFields(DatumLegend.__proto__),
      [S$0.__DatumLegend__showMeasures]: dart.fieldType(dart.nullable(core.bool))
    }));
    return DatumLegend;
  });
  datum_legend.DatumLegend = datum_legend.DatumLegend$();
  dart.addTypeTests(datum_legend.DatumLegend, _is_DatumLegend_default);
  const _is_InitialSelection_default = Symbol('_is_InitialSelection_default');
  initial_selection.InitialSelection$ = dart.generic(D => {
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class InitialSelection extends core.Object {
      get selectionModelType() {
        return this[S$0.selectionModelType$6];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get selectedSeriesConfig() {
        return this[S$0.selectedSeriesConfig];
      }
      set selectedSeriesConfig(value) {
        super.selectedSeriesConfig = value;
      }
      get selectedDataConfig() {
        return this[S$0.selectedDataConfig];
      }
      set selectedDataConfig(value) {
        super.selectedDataConfig = value;
      }
      get [S$0._lifecycleListener$5]() {
        let t62;
        t62 = this[S$0.__InitialSelection__lifecycleListener];
        return t62 == null ? dart.throw(new _internal.LateError.fieldNI("_lifecycleListener")) : t62;
      }
      set [S$0._lifecycleListener$5](t62) {
        this[S$0.__InitialSelection__lifecycleListener] = t62;
      }
      [S$0._setInitialSelection](seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        if (!this[S$0._firstDraw]) {
          return;
        }
        this[S$0._firstDraw] = false;
        let immutableModel = new (SelectionModelOfD()).fromConfig(this.selectedDataConfig, this.selectedSeriesConfig, seriesList);
        dart.nullCheck(this[S$0._chart$14]).getSelectionModel(this.selectionModelType).updateSelection(immutableModel.selectedDatum, immutableModel.selectedSeries, {notifyListeners: false});
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        this[S$0._chart$14] = chart;
        chart.addLifecycleListener(this[S$0._lifecycleListener$5]);
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.removeLifecycleListener(this[S$0._lifecycleListener$5]);
        this[S$0._chart$14] = null;
      }
      get role() {
        return "InitialSelection-" + dart.str(this.selectionModelType);
      }
    }
    (InitialSelection.new = function(opts) {
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : C[32] || CT.C32;
      let selectedDataConfig = opts && 'selectedDataConfig' in opts ? opts.selectedDataConfig : null;
      let selectedSeriesConfig = opts && 'selectedSeriesConfig' in opts ? opts.selectedSeriesConfig : null;
      this[S$0._chart$14] = null;
      this[S$0.__InitialSelection__lifecycleListener] = null;
      this[S$0._firstDraw] = true;
      this[S$0.selectionModelType$6] = selectionModelType;
      this[S$0.selectedDataConfig] = selectedDataConfig;
      this[S$0.selectedSeriesConfig] = selectedSeriesConfig;
      this[S$0._lifecycleListener$5] = new (LifecycleListenerOfD()).new({onData: dart.bind(this, S$0._setInitialSelection)});
    }).prototype = InitialSelection.prototype;
    dart.addTypeTests(InitialSelection);
    InitialSelection.prototype[_is_InitialSelection_default] = true;
    dart.addTypeCaches(InitialSelection);
    InitialSelection[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(InitialSelection, () => ({
      __proto__: dart.getMethods(InitialSelection.__proto__),
      [S$0._setInitialSelection]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(InitialSelection, () => ({
      __proto__: dart.getGetters(InitialSelection.__proto__),
      [S$0._lifecycleListener$5]: base_chart.LifecycleListener$(D),
      role: core.String
    }));
    dart.setSetterSignature(InitialSelection, () => ({
      __proto__: dart.getSetters(InitialSelection.__proto__),
      [S$0._lifecycleListener$5]: base_chart.LifecycleListener$(D)
    }));
    dart.setLibraryUri(InitialSelection, I[67]);
    dart.setFieldSignature(InitialSelection, () => ({
      __proto__: dart.getFields(InitialSelection.__proto__),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      selectedSeriesConfig: dart.finalFieldType(dart.nullable(core.List$(core.String))),
      selectedDataConfig: dart.finalFieldType(dart.nullable(core.List$(series_datum.SeriesDatumConfig$(D)))),
      [S$0._chart$14]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      [S$0.__InitialSelection__lifecycleListener]: dart.fieldType(dart.nullable(base_chart.LifecycleListener$(D))),
      [S$0._firstDraw]: dart.fieldType(core.bool)
    }));
    return InitialSelection;
  });
  initial_selection.InitialSelection = initial_selection.InitialSelection$();
  dart.addTypeTests(initial_selection.InitialSelection, _is_InitialSelection_default);
  const _is_DomainOutliner_default = Symbol('_is_DomainOutliner_default');
  domain_outliner.DomainOutliner$ = dart.generic(D => {
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class DomainOutliner extends core.Object {
      get selectionType() {
        return this[S$0.selectionType];
      }
      set selectionType(value) {
        super.selectionType = value;
      }
      get defaultStrokePx() {
        return this[S$0.defaultStrokePx];
      }
      set defaultStrokePx(value) {
        super.defaultStrokePx = value;
      }
      get strokePaddingPx() {
        return this[S$0.strokePaddingPx];
      }
      set strokePaddingPx(value) {
        super.strokePaddingPx = value;
      }
      get [S$0._chart$15]() {
        let t63;
        t63 = this[S$0.__DomainOutliner__chart];
        return t63 == null ? dart.throw(new _internal.LateError.fieldNI("_chart")) : t63;
      }
      set [S$0._chart$15](t63) {
        this[S$0.__DomainOutliner__chart] = t63;
      }
      get [S$0._lifecycleListener$6]() {
        let t64;
        t64 = this[S$0.__DomainOutliner__lifecycleListener];
        return t64 == null ? dart.throw(new _internal.LateError.fieldNI("_lifecycleListener")) : t64;
      }
      set [S$0._lifecycleListener$6](t64) {
        this[S$0.__DomainOutliner__lifecycleListener] = t64;
      }
      [S$0._selectionChange](selectionModel) {
        SelectionModelOfD().as(selectionModel);
        this[S$0._chart$15].redraw({skipLayout: true, skipAnimation: true});
      }
      [S$0._outline](seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        let selectionModel = this[S$0._chart$15].getSelectionModel(this.selectionType);
        for (let series of seriesList) {
          let strokeWidthPxFn = series.strokeWidthPxFn;
          let colorFn = series.colorFn;
          if (colorFn != null) {
            series.colorFn = dart.fn(index => {
              let color = colorFn(index);
              return selectionModel.isDatumSelected(series, index) ? color.darker : color;
            }, T$.intNToColor());
          }
          if (strokeWidthPxFn != null) {
            series.strokeWidthPxFn = dart.fn(index => {
              let strokeWidthPx = strokeWidthPxFn(index);
              if (!selectionModel.isDatumSelected(series, index)) {
                return strokeWidthPx;
              }
              return strokeWidthPx == null ? this.defaultStrokePx : dart.notNull(strokeWidthPx) + this.strokePaddingPx;
            }, T$.intNTonumN());
          }
        }
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        this[S$0._chart$15] = chart;
        chart.addLifecycleListener(this[S$0._lifecycleListener$6]);
        chart.getSelectionModel(this.selectionType).addSelectionChangedListener(dart.bind(this, S$0._selectionChange));
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.getSelectionModel(this.selectionType).removeSelectionChangedListener(dart.bind(this, S$0._selectionChange));
        chart.removeLifecycleListener(this[S$0._lifecycleListener$6]);
      }
      get role() {
        return "domainOutliner-" + dart.str(this.selectionType);
      }
    }
    (DomainOutliner.new = function(opts) {
      let t63, t63$;
      let selectionType = opts && 'selectionType' in opts ? opts.selectionType : C[32] || CT.C32;
      let defaultStrokePx = opts && 'defaultStrokePx' in opts ? opts.defaultStrokePx : null;
      let strokePaddingPx = opts && 'strokePaddingPx' in opts ? opts.strokePaddingPx : null;
      this[S$0.__DomainOutliner__chart] = null;
      this[S$0.__DomainOutliner__lifecycleListener] = null;
      this[S$0.selectionType] = selectionType;
      this[S$0.defaultStrokePx] = (t63 = defaultStrokePx, t63 == null ? 2.0 : t63);
      this[S$0.strokePaddingPx] = (t63$ = strokePaddingPx, t63$ == null ? 1.0 : t63$);
      this[S$0._lifecycleListener$6] = new (LifecycleListenerOfD()).new({onPostprocess: dart.bind(this, S$0._outline)});
    }).prototype = DomainOutliner.prototype;
    dart.addTypeTests(DomainOutliner);
    DomainOutliner.prototype[_is_DomainOutliner_default] = true;
    dart.addTypeCaches(DomainOutliner);
    DomainOutliner[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(DomainOutliner, () => ({
      __proto__: dart.getMethods(DomainOutliner.__proto__),
      [S$0._selectionChange]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._outline]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(DomainOutliner, () => ({
      __proto__: dart.getGetters(DomainOutliner.__proto__),
      [S$0._chart$15]: base_chart.BaseChart$(D),
      [S$0._lifecycleListener$6]: base_chart.LifecycleListener$(D),
      role: core.String
    }));
    dart.setSetterSignature(DomainOutliner, () => ({
      __proto__: dart.getSetters(DomainOutliner.__proto__),
      [S$0._chart$15]: base_chart.BaseChart$(D),
      [S$0._lifecycleListener$6]: base_chart.LifecycleListener$(D)
    }));
    dart.setLibraryUri(DomainOutliner, I[68]);
    dart.setFieldSignature(DomainOutliner, () => ({
      __proto__: dart.getFields(DomainOutliner.__proto__),
      selectionType: dart.finalFieldType(selection_model.SelectionModelType),
      defaultStrokePx: dart.finalFieldType(core.double),
      strokePaddingPx: dart.finalFieldType(core.double),
      [S$0.__DomainOutliner__chart]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      [S$0.__DomainOutliner__lifecycleListener]: dart.fieldType(dart.nullable(base_chart.LifecycleListener$(D)))
    }));
    return DomainOutliner;
  });
  domain_outliner.DomainOutliner = domain_outliner.DomainOutliner$();
  dart.addTypeTests(domain_outliner.DomainOutliner, _is_DomainOutliner_default);
  const _is_DomainHighlighter_default = Symbol('_is_DomainHighlighter_default');
  domain_highlighter.DomainHighlighter$ = dart.generic(D => {
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class DomainHighlighter extends core.Object {
      get selectionModelType() {
        return this[S$0.selectionModelType$7];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get [S$0._chart$16]() {
        let t65;
        t65 = this[S$0.__DomainHighlighter__chart];
        return t65 == null ? dart.throw(new _internal.LateError.fieldNI("_chart")) : t65;
      }
      set [S$0._chart$16](t65) {
        this[S$0.__DomainHighlighter__chart] = t65;
      }
      get [S$0._lifecycleListener$7]() {
        let t66;
        t66 = this[S$0.__DomainHighlighter__lifecycleListener];
        return t66 == null ? dart.throw(new _internal.LateError.fieldNI("_lifecycleListener")) : t66;
      }
      set [S$0._lifecycleListener$7](t66) {
        this[S$0.__DomainHighlighter__lifecycleListener] = t66;
      }
      [S$0._selectionChanged$4](selectionModel) {
        SelectionModelOfD().as(selectionModel);
        this[S$0._chart$16].redraw({skipLayout: true, skipAnimation: true});
      }
      [S$0._updateColorFunctions](seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        let selectionModel = this[S$0._chart$16].getSelectionModel(this.selectionModelType);
        seriesList[S$.$forEach](dart.fn(series => {
          let origColorFn = series.colorFn;
          if (origColorFn != null) {
            series.colorFn = dart.fn(index => {
              let origColor = origColorFn(index);
              if (selectionModel.isDatumSelected(series, index)) {
                return origColor.darker;
              } else {
                return origColor;
              }
            }, T$.intNToColor());
          }
        }, MutableSeriesOfDTovoid()));
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        this[S$0._chart$16] = chart;
        chart.addLifecycleListener(this[S$0._lifecycleListener$7]);
        chart.getSelectionModel(this.selectionModelType).addSelectionChangedListener(dart.bind(this, S$0._selectionChanged$4));
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.getSelectionModel(this.selectionModelType).removeSelectionChangedListener(dart.bind(this, S$0._selectionChanged$4));
        chart.removeLifecycleListener(this[S$0._lifecycleListener$7]);
      }
      get role() {
        return "domainHighlight-" + dart.str(this.selectionModelType);
      }
    }
    (DomainHighlighter.new = function(selectionModelType = C[32] || CT.C32) {
      this[S$0.__DomainHighlighter__chart] = null;
      this[S$0.__DomainHighlighter__lifecycleListener] = null;
      this[S$0.selectionModelType$7] = selectionModelType;
      this[S$0._lifecycleListener$7] = new (LifecycleListenerOfD()).new({onPostprocess: dart.bind(this, S$0._updateColorFunctions)});
    }).prototype = DomainHighlighter.prototype;
    dart.addTypeTests(DomainHighlighter);
    DomainHighlighter.prototype[_is_DomainHighlighter_default] = true;
    dart.addTypeCaches(DomainHighlighter);
    DomainHighlighter[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(DomainHighlighter, () => ({
      __proto__: dart.getMethods(DomainHighlighter.__proto__),
      [S$0._selectionChanged$4]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._updateColorFunctions]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(DomainHighlighter, () => ({
      __proto__: dart.getGetters(DomainHighlighter.__proto__),
      [S$0._chart$16]: base_chart.BaseChart$(D),
      [S$0._lifecycleListener$7]: base_chart.LifecycleListener$(D),
      role: core.String
    }));
    dart.setSetterSignature(DomainHighlighter, () => ({
      __proto__: dart.getSetters(DomainHighlighter.__proto__),
      [S$0._chart$16]: base_chart.BaseChart$(D),
      [S$0._lifecycleListener$7]: base_chart.LifecycleListener$(D)
    }));
    dart.setLibraryUri(DomainHighlighter, I[69]);
    dart.setFieldSignature(DomainHighlighter, () => ({
      __proto__: dart.getFields(DomainHighlighter.__proto__),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      [S$0.__DomainHighlighter__chart]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      [S$0.__DomainHighlighter__lifecycleListener]: dart.fieldType(dart.nullable(base_chart.LifecycleListener$(D)))
    }));
    return DomainHighlighter;
  });
  domain_highlighter.DomainHighlighter = domain_highlighter.DomainHighlighter$();
  dart.addTypeTests(domain_highlighter.DomainHighlighter, _is_DomainHighlighter_default);
  const _is_ChartTitle_default = Symbol('_is_ChartTitle_default');
  chart_title.ChartTitle$ = dart.generic(D => {
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var _ChartTitleLayoutViewOfD = () => (_ChartTitleLayoutViewOfD = dart.constFn(chart_title._ChartTitleLayoutView$(D)))();
    class ChartTitle extends core.Object {
      get [S$0._lifecycleListener$8]() {
        let t67;
        t67 = this[S$0.__ChartTitle__lifecycleListener];
        return t67 == null ? dart.throw(new _internal.LateError.fieldNI("_lifecycleListener")) : t67;
      }
      set [S$0._lifecycleListener$8](t67) {
        if (this[S$0.__ChartTitle__lifecycleListener] == null)
          this[S$0.__ChartTitle__lifecycleListener] = t67;
        else
          dart.throw(new _internal.LateError.fieldAI("_lifecycleListener"));
      }
      get behaviorPosition() {
        return this[S$0._config].behaviorPosition;
      }
      set behaviorPosition(behaviorPosition) {
        this[S$0._config].behaviorPosition = behaviorPosition;
      }
      get layoutMinSize() {
        return this[S$0._config].layoutMinSize;
      }
      set layoutMinSize(layoutMinSize) {
        this[S$0._config].layoutMinSize = layoutMinSize;
      }
      get layoutPreferredSize() {
        return this[S$0._config].layoutPreferredSize;
      }
      set layoutPreferredSize(layoutPreferredSize) {
        this[S$0._config].layoutPreferredSize = layoutPreferredSize;
      }
      get maxWidthStrategy() {
        return this[S$0._config].maxWidthStrategy;
      }
      set maxWidthStrategy(maxWidthStrategy) {
        this[S$0._config].maxWidthStrategy = maxWidthStrategy;
      }
      get title() {
        return this[S$0._config].title;
      }
      set title(title) {
        this[S$0._config].title = title;
      }
      get titleDirection() {
        return this[S$0._config].titleDirection;
      }
      set titleDirection(titleDirection) {
        this[S$0._config].titleDirection = titleDirection;
      }
      get titleOutsideJustification() {
        return this[S$0._config].titleOutsideJustification;
      }
      set titleOutsideJustification(titleOutsideJustification) {
        this[S$0._config].titleOutsideJustification = titleOutsideJustification;
      }
      get titlePadding() {
        return this[S$0._config].titlePadding;
      }
      set titlePadding(titlePadding) {
        this[S$0._config].titlePadding = titlePadding;
      }
      get titleStyleSpec() {
        return this[S$0._config].titleStyleSpec;
      }
      set titleStyleSpec(titleStyleSpec) {
        this[S$0._config].titleStyleSpec = titleStyleSpec;
      }
      get subTitle() {
        return this[S$0._config].subTitle;
      }
      set subTitle(subTitle) {
        this[S$0._config].subTitle = subTitle;
      }
      get subTitleStyleSpec() {
        return this[S$0._config].subTitleStyleSpec;
      }
      set subTitleStyleSpec(subTitleStyleSpec) {
        this[S$0._config].subTitleStyleSpec = subTitleStyleSpec;
      }
      get innerPadding() {
        return this[S$0._config].innerPadding;
      }
      set innerPadding(innerPadding) {
        this[S$0._config].innerPadding = innerPadding;
      }
      get outerPadding() {
        return this[S$0._config].outerPadding;
      }
      set outerPadding(outerPadding) {
        this[S$0._config].outerPadding = outerPadding;
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        this[S$0._chart$17] = chart;
        this[S$0._view$3] = new (_ChartTitleLayoutViewOfD()).new({layoutPaintOrder: 160, config: this[S$0._config], chart: this[S$0._chart$17]});
        chart.addView(dart.nullCheck(this[S$0._view$3]));
        chart.addLifecycleListener(this[S$0._lifecycleListener$8]);
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.removeView(dart.nullCheck(this[S$0._view$3]));
        chart.removeLifecycleListener(this[S$0._lifecycleListener$8]);
        this[S$0._chart$17] = null;
      }
      [S$0._updateViewData$3]() {
        dart.nullCheck(this[S$0._view$3]).config = this[S$0._config];
      }
      get role() {
        return "ChartTitle-" + dart.str(this[S$0._config].behaviorPosition);
      }
      get isRtl() {
        return dart.nullCheck(this[S$0._chart$17]).context.isRtl;
      }
    }
    (ChartTitle.new = function(title, opts) {
      let t67, t67$, t67$0, t67$1, t67$2, t67$3, t67$4, t67$5, t67$6;
      let behaviorPosition = opts && 'behaviorPosition' in opts ? opts.behaviorPosition : null;
      let innerPadding = opts && 'innerPadding' in opts ? opts.innerPadding : null;
      let layoutMinSize = opts && 'layoutMinSize' in opts ? opts.layoutMinSize : null;
      let layoutPreferredSize = opts && 'layoutPreferredSize' in opts ? opts.layoutPreferredSize : null;
      let outerPadding = opts && 'outerPadding' in opts ? opts.outerPadding : null;
      let maxWidthStrategy = opts && 'maxWidthStrategy' in opts ? opts.maxWidthStrategy : null;
      let titleDirection = opts && 'titleDirection' in opts ? opts.titleDirection : null;
      let titleOutsideJustification = opts && 'titleOutsideJustification' in opts ? opts.titleOutsideJustification : null;
      let titlePadding = opts && 'titlePadding' in opts ? opts.titlePadding : null;
      let titleStyleSpec = opts && 'titleStyleSpec' in opts ? opts.titleStyleSpec : null;
      let subTitle = opts && 'subTitle' in opts ? opts.subTitle : null;
      let subTitleStyleSpec = opts && 'subTitleStyleSpec' in opts ? opts.subTitleStyleSpec : null;
      this[S$0._chart$17] = null;
      this[S$0._view$3] = null;
      this[S$0.__ChartTitle__lifecycleListener] = null;
      this[S$0._config] = new chart_title._ChartTitleConfig.new({behaviorPosition: (t67 = behaviorPosition, t67 == null ? chart_title.ChartTitle._defaultBehaviorPosition : t67), innerPadding: (t67$ = innerPadding, t67$ == null ? 10 : t67$), layoutMinSize: layoutMinSize, layoutPreferredSize: layoutPreferredSize, outerPadding: (t67$0 = outerPadding, t67$0 == null ? 10 : t67$0), maxWidthStrategy: (t67$1 = maxWidthStrategy, t67$1 == null ? chart_title.ChartTitle._defaultMaxWidthStrategy : t67$1), title: title, titleDirection: (t67$2 = titleDirection, t67$2 == null ? chart_title.ChartTitle._defaultTitleDirection : t67$2), titleOutsideJustification: (t67$3 = titleOutsideJustification, t67$3 == null ? chart_title.ChartTitle._defaultTitleOutsideJustification : t67$3), titlePadding: (t67$4 = titlePadding, t67$4 == null ? 18 : t67$4), titleStyleSpec: (t67$5 = titleStyleSpec, t67$5 == null ? chart_title.ChartTitle._defaultTitleStyle : t67$5), subTitle: subTitle, subTitleStyleSpec: (t67$6 = subTitleStyleSpec, t67$6 == null ? chart_title.ChartTitle._defaultSubTitleStyle : t67$6)});
      this[S$0._lifecycleListener$8] = new (LifecycleListenerOfD()).new({onAxisConfigured: dart.bind(this, S$0._updateViewData$3)});
    }).prototype = ChartTitle.prototype;
    dart.addTypeTests(ChartTitle);
    ChartTitle.prototype[_is_ChartTitle_default] = true;
    dart.addTypeCaches(ChartTitle);
    ChartTitle[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(ChartTitle, () => ({
      __proto__: dart.getMethods(ChartTitle.__proto__),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._updateViewData$3]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(ChartTitle, () => ({
      __proto__: dart.getGetters(ChartTitle.__proto__),
      [S$0._lifecycleListener$8]: base_chart.LifecycleListener$(D),
      behaviorPosition: chart_behavior.BehaviorPosition,
      layoutMinSize: dart.nullable(core.int),
      layoutPreferredSize: dart.nullable(core.int),
      maxWidthStrategy: text_element.MaxWidthStrategy,
      title: core.String,
      titleDirection: chart_title.ChartTitleDirection,
      titleOutsideJustification: chart_behavior.OutsideJustification,
      titlePadding: core.int,
      titleStyleSpec: axis_spec.TextStyleSpec,
      subTitle: dart.nullable(core.String),
      subTitleStyleSpec: axis_spec.TextStyleSpec,
      innerPadding: core.int,
      outerPadding: core.int,
      role: core.String,
      isRtl: core.bool
    }));
    dart.setSetterSignature(ChartTitle, () => ({
      __proto__: dart.getSetters(ChartTitle.__proto__),
      [S$0._lifecycleListener$8]: base_chart.LifecycleListener$(D),
      behaviorPosition: chart_behavior.BehaviorPosition,
      layoutMinSize: dart.nullable(core.int),
      layoutPreferredSize: dart.nullable(core.int),
      maxWidthStrategy: text_element.MaxWidthStrategy,
      title: core.String,
      titleDirection: chart_title.ChartTitleDirection,
      titleOutsideJustification: chart_behavior.OutsideJustification,
      titlePadding: core.int,
      titleStyleSpec: axis_spec.TextStyleSpec,
      subTitle: dart.nullable(core.String),
      subTitleStyleSpec: axis_spec.TextStyleSpec,
      innerPadding: core.int,
      outerPadding: core.int
    }));
    dart.setLibraryUri(ChartTitle, I[70]);
    dart.setFieldSignature(ChartTitle, () => ({
      __proto__: dart.getFields(ChartTitle.__proto__),
      [S$0._config]: dart.finalFieldType(chart_title._ChartTitleConfig),
      [S$0._chart$17]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      [S$0._view$3]: dart.fieldType(dart.nullable(chart_title._ChartTitleLayoutView$(D))),
      [S$0.__ChartTitle__lifecycleListener]: dart.fieldType(dart.nullable(base_chart.LifecycleListener$(D)))
    }));
    return ChartTitle;
  });
  chart_title.ChartTitle = chart_title.ChartTitle$();
  dart.defineLazy(chart_title.ChartTitle, {
    /*chart_title.ChartTitle._defaultBehaviorPosition*/get _defaultBehaviorPosition() {
      return C[85] || CT.C85;
    },
    /*chart_title.ChartTitle._defaultMaxWidthStrategy*/get _defaultMaxWidthStrategy() {
      return C[86] || CT.C86;
    },
    /*chart_title.ChartTitle._defaultTitleDirection*/get _defaultTitleDirection() {
      return C[87] || CT.C87;
    },
    /*chart_title.ChartTitle._defaultTitleOutsideJustification*/get _defaultTitleOutsideJustification() {
      return C[88] || CT.C88;
    },
    /*chart_title.ChartTitle._defaultTitleStyle*/get _defaultTitleStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 18, color: style_factory.StyleFactory.style.tickColor});
    },
    /*chart_title.ChartTitle._defaultSubTitleStyle*/get _defaultSubTitleStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 14, color: style_factory.StyleFactory.style.tickColor});
    },
    /*chart_title.ChartTitle._defaultInnerPadding*/get _defaultInnerPadding() {
      return 10;
    },
    /*chart_title.ChartTitle._defaultTitlePadding*/get _defaultTitlePadding() {
      return 18;
    },
    /*chart_title.ChartTitle._defaultOuterPadding*/get _defaultOuterPadding() {
      return 10;
    }
  }, false);
  dart.addTypeTests(chart_title.ChartTitle, _is_ChartTitle_default);
  const _is__ChartTitleLayoutView_default = Symbol('_is__ChartTitleLayoutView_default');
  chart_title._ChartTitleLayoutView$ = dart.generic(D => {
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var BaseChartNOfD = () => (BaseChartNOfD = dart.constFn(dart.nullable(BaseChartOfD())))();
    class _ChartTitleLayoutView extends layout_view.LayoutView {
      get chart() {
        return this[S$0.chart$2];
      }
      set chart(value) {
        this[S$0.chart$2] = BaseChartNOfD().as(value);
      }
      get graphicsFactory() {
        return this[S$0.graphicsFactory$7];
      }
      set graphicsFactory(value) {
        this[S$0.graphicsFactory$7] = value;
      }
      get [S$0._layoutConfig]() {
        let t68;
        t68 = this[S$0.___ChartTitleLayoutView__layoutConfig];
        return t68 == null ? dart.throw(new _internal.LateError.fieldNI("_layoutConfig")) : t68;
      }
      set [S$0._layoutConfig](t68) {
        if (this[S$0.___ChartTitleLayoutView__layoutConfig] == null)
          this[S$0.___ChartTitleLayoutView__layoutConfig] = t68;
        else
          dart.throw(new _internal.LateError.fieldAI("_layoutConfig"));
      }
      get layoutConfig() {
        return this[S$0._layoutConfig];
      }
      get isRtl() {
        let t69, t69$;
        t69$ = (t69 = this.chart, t69 == null ? null : t69.context.isRtl);
        return t69$ == null ? false : t69$;
      }
      get [S$0._componentBounds$2]() {
        let t69;
        t69 = this[S$0.___ChartTitleLayoutView__componentBounds];
        return t69 == null ? dart.throw(new _internal.LateError.fieldNI("_componentBounds")) : t69;
      }
      set [S$0._componentBounds$2](t69) {
        this[S$0.___ChartTitleLayoutView__componentBounds] = t69;
      }
      get [S$0._drawAreaBounds$5]() {
        let t70;
        t70 = this[S$0.___ChartTitleLayoutView__drawAreaBounds];
        return t70 == null ? dart.throw(new _internal.LateError.fieldNI("_drawAreaBounds")) : t70;
      }
      set [S$0._drawAreaBounds$5](t70) {
        this[S$0.___ChartTitleLayoutView__drawAreaBounds] = t70;
      }
      set config(config) {
        this[S$0._config] = config;
        this.layoutConfig.position = this[S$0._layoutPosition$1];
      }
      measure(maxWidth, maxHeight) {
        let t71, t71$;
        let minWidth = null;
        let minHeight = null;
        let preferredWidth = 0;
        let preferredHeight = 0;
        let totalPadding = this[S$0._config].outerPadding + this[S$0._config].innerPadding + (this[S$0._config].subTitle != null ? this[S$0._config].titlePadding : 0.0);
        let graphicsFactory = dart.nullCheck(this.graphicsFactory);
        let textStyle = this[S$0._getTextStyle$2](graphicsFactory, this[S$0._config].titleStyleSpec);
        let textElement = (t71 = graphicsFactory.createTextElement(this[S$0._config].title), (() => {
          t71.maxWidthStrategy = this[S$0._config].maxWidthStrategy;
          t71.textStyle = textStyle;
          return t71;
        })());
        let subTitleTextStyle = this[S$0._getTextStyle$2](graphicsFactory, this[S$0._config].subTitleStyleSpec);
        let subTitleTextElement = this[S$0._config].subTitle == null ? null : (t71$ = graphicsFactory.createTextElement(dart.nullCheck(this[S$0._config].subTitle)), (() => {
          t71$.maxWidthStrategy = this[S$0._config].maxWidthStrategy;
          t71$.textStyle = subTitleTextStyle;
          return t71$;
        })());
        let resolvedTitleDirection = this[S$0._resolvedTitleDirection];
        switch (this[S$0._config].behaviorPosition) {
          case C[89] || CT.C89:
          case C[85] || CT.C85:
          {
            let textHeight = (resolvedTitleDirection === chart_title.ChartTitleDirection.vertical ? textElement.measurement.horizontalSliceWidth : textElement.measurement.verticalSliceWidth)[S$.$round]();
            let subTitleTextHeight = subTitleTextElement != null ? (resolvedTitleDirection === chart_title.ChartTitleDirection.vertical ? subTitleTextElement.measurement.horizontalSliceWidth : subTitleTextElement.measurement.verticalSliceWidth)[S$.$round]() : 0;
            let measuredHeight = (textHeight + subTitleTextHeight + totalPadding)[S$.$round]();
            minHeight = this[S$0._config].layoutMinSize != null ? math.min(core.int, dart.nullCheck(this[S$0._config].layoutMinSize), measuredHeight) : measuredHeight;
            preferredWidth = maxWidth;
            preferredHeight = this[S$0._config].layoutPreferredSize != null ? math.min(core.int, dart.nullCheck(this[S$0._config].layoutPreferredSize), maxHeight) : measuredHeight;
            break;
          }
          case C[90] || CT.C90:
          case C[91] || CT.C91:
          {
            let textWidth = (resolvedTitleDirection === chart_title.ChartTitleDirection.vertical ? textElement.measurement.verticalSliceWidth : textElement.measurement.horizontalSliceWidth)[S$.$round]();
            let subTitleTextWidth = subTitleTextElement != null ? (resolvedTitleDirection === chart_title.ChartTitleDirection.vertical ? subTitleTextElement.measurement.verticalSliceWidth : subTitleTextElement.measurement.horizontalSliceWidth)[S$.$round]() : 0;
            let measuredWidth = (textWidth + subTitleTextWidth + totalPadding)[S$.$round]();
            minWidth = this[S$0._config].layoutMinSize != null ? math.min(core.int, dart.nullCheck(this[S$0._config].layoutMinSize), measuredWidth) : measuredWidth;
            preferredWidth = this[S$0._config].layoutPreferredSize != null ? math.min(core.int, dart.nullCheck(this[S$0._config].layoutPreferredSize), maxWidth) : measuredWidth;
            preferredHeight = maxHeight;
            break;
          }
          case C[92] || CT.C92:
          {
            preferredWidth = this[S$0._drawAreaBounds$5] !== null ? math.min(core.int, this[S$0._drawAreaBounds$5][S$.$width], maxWidth) : maxWidth;
            preferredHeight = this[S$0._drawAreaBounds$5] !== null ? math.min(core.int, this[S$0._drawAreaBounds$5][S$.$height], maxHeight) : maxHeight;
            break;
          }
        }
        this[S$0._resetTextElementCache]();
        return new layout_view.ViewMeasuredSizes.new({minWidth: minWidth, minHeight: minHeight, preferredWidth: preferredWidth, preferredHeight: preferredHeight});
      }
      layout(componentBounds, drawAreaBounds) {
        this[S$0._componentBounds$2] = componentBounds;
        this[S$0._drawAreaBounds$5] = drawAreaBounds;
        this[S$0._resetTextElementCache]();
      }
      paint(canvas, animationPercent) {
        let t71, t71$;
        let resolvedTitleDirection = this[S$0._resolvedTitleDirection];
        let titleHeight = 0.0;
        let subTitleHeight = 0.0;
        if (this[S$0._config].title !== null) {
          if (this[S$0._titleTextElement] == null) {
            let textStyle = this[S$0._getTextStyle$2](dart.nullCheck(this.graphicsFactory), this[S$0._config].titleStyleSpec);
            this[S$0._titleTextElement] = (t71 = dart.nullCheck(this.graphicsFactory).createTextElement(this[S$0._config].title), (() => {
              t71.maxWidthStrategy = this[S$0._config].maxWidthStrategy;
              t71.textStyle = textStyle;
              return t71;
            })());
            dart.nullCheck(this[S$0._titleTextElement]).maxWidth = resolvedTitleDirection === chart_title.ChartTitleDirection.horizontal ? this[S$0._componentBounds$2][S$.$width] : this[S$0._componentBounds$2][S$.$height];
          }
          titleHeight = dart.nullCheck(this[S$0._titleTextElement]).measurement.verticalSliceWidth;
        }
        if (this[S$0._config].subTitle != null) {
          if (this[S$0._subTitleTextElement] == null) {
            let textStyle = this[S$0._getTextStyle$2](dart.nullCheck(this.graphicsFactory), this[S$0._config].subTitleStyleSpec);
            this[S$0._subTitleTextElement] = (t71$ = dart.nullCheck(this.graphicsFactory).createTextElement(dart.nullCheck(this[S$0._config].subTitle)), (() => {
              t71$.maxWidthStrategy = this[S$0._config].maxWidthStrategy;
              t71$.textStyle = textStyle;
              return t71$;
            })());
            dart.nullCheck(this[S$0._subTitleTextElement]).maxWidth = resolvedTitleDirection === chart_title.ChartTitleDirection.horizontal ? this[S$0._componentBounds$2][S$.$width] : this[S$0._componentBounds$2][S$.$height];
          }
          subTitleHeight = dart.nullCheck(this[S$0._subTitleTextElement]).measurement.verticalSliceWidth;
        }
        if (this[S$0._config].title !== null) {
          let labelPoint = this[S$0._getLabelPosition$1](true, this[S$0._componentBounds$2], resolvedTitleDirection, dart.nullCheck(this[S$0._titleTextElement]), titleHeight, subTitleHeight);
          if (labelPoint != null) {
            let rotation = resolvedTitleDirection === chart_title.ChartTitleDirection.vertical ? -3.141592653589793 / 2 : 0.0;
            canvas.drawText(dart.nullCheck(this[S$0._titleTextElement]), labelPoint.x, labelPoint.y, {rotation: rotation});
          }
        }
        if (this[S$0._config].subTitle != null) {
          let labelPoint = this[S$0._getLabelPosition$1](false, this[S$0._componentBounds$2], resolvedTitleDirection, dart.nullCheck(this[S$0._subTitleTextElement]), titleHeight, subTitleHeight);
          if (labelPoint != null) {
            let rotation = resolvedTitleDirection === chart_title.ChartTitleDirection.vertical ? -3.141592653589793 / 2 : 0.0;
            canvas.drawText(dart.nullCheck(this[S$0._subTitleTextElement]), labelPoint.x, labelPoint.y, {rotation: rotation});
          }
        }
      }
      [S$0._resetTextElementCache]() {
        this[S$0._titleTextElement] = null;
        this[S$0._subTitleTextElement] = null;
      }
      get [S$0._resolvedTitleDirection]() {
        let resolvedTitleDirection = this[S$0._config].titleDirection;
        if (resolvedTitleDirection === chart_title.ChartTitleDirection.auto) {
          switch (this[S$0._config].behaviorPosition) {
            case C[89] || CT.C89:
            case C[92] || CT.C92:
            case C[85] || CT.C85:
            {
              resolvedTitleDirection = chart_title.ChartTitleDirection.horizontal;
              break;
            }
            case C[90] || CT.C90:
            case C[91] || CT.C91:
            {
              resolvedTitleDirection = chart_title.ChartTitleDirection.vertical;
              break;
            }
          }
        }
        return resolvedTitleDirection;
      }
      get [S$0._layoutPosition$1]() {
        return layout_view.layoutPosition(this[S$0._config].behaviorPosition, this[S$0._config].titleOutsideJustification, this.isRtl);
      }
      [S$0._getLabelPosition$1](isPrimaryTitle, bounds, titleDirection, textElement, titleHeight, subTitleHeight) {
        switch (this[S$0._config].behaviorPosition) {
          case C[89] || CT.C89:
          case C[85] || CT.C85:
          {
            return this[S$0._getHorizontalLabelPosition](isPrimaryTitle, bounds, titleDirection, textElement, titleHeight, subTitleHeight);
          }
          case C[91] || CT.C91:
          case C[90] || CT.C90:
          {
            return this[S$0._getVerticalLabelPosition](isPrimaryTitle, bounds, titleDirection, textElement, titleHeight, subTitleHeight);
          }
          case C[92] || CT.C92:
          {
            return null;
          }
        }
      }
      [S$0._getHorizontalLabelPosition](isPrimaryTitle, bounds, titleDirection, textElement, titleHeight, subTitleHeight) {
        let labelX = 0;
        let labelY = 0;
        switch (this[S$0._config].titleOutsideJustification) {
          case C[88] || CT.C88:
          case C[93] || CT.C93:
          {
            let textWidth = (this.isRtl ? 1 : -1) * textElement.measurement.horizontalSliceWidth / 2;
            labelX = (bounds[S$.$left] + bounds[S$.$width] / 2 + textWidth)[S$.$round]();
            textElement.textDirection = this.isRtl ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
          case C[94] || CT.C94:
          case C[95] || CT.C95:
          case C[96] || CT.C96:
          case C[97] || CT.C97:
          {
            let alignLeft = this.isRtl ? this[S$0._config].titleOutsideJustification === chart_behavior.OutsideJustification.end || this[S$0._config].titleOutsideJustification === chart_behavior.OutsideJustification.endDrawArea : this[S$0._config].titleOutsideJustification === chart_behavior.OutsideJustification.start || this[S$0._config].titleOutsideJustification === chart_behavior.OutsideJustification.startDrawArea;
            let padding = this[S$0._config].titleOutsideJustification === chart_behavior.OutsideJustification.endDrawArea || this[S$0._config].titleOutsideJustification === chart_behavior.OutsideJustification.startDrawArea ? 0.0 : this[S$0._config].outerPadding;
            if (alignLeft) {
              labelX = (bounds[S$.$left] + padding)[S$.$round]();
              textElement.textDirection = text_element.TextDirection.ltr;
            } else {
              labelX = (bounds[S$.$right] - padding)[S$.$round]();
              textElement.textDirection = text_element.TextDirection.rtl;
            }
            break;
          }
        }
        if (this[S$0._config].behaviorPosition === chart_behavior.BehaviorPosition.bottom) {
          let padding = this[S$0._config].innerPadding + (isPrimaryTitle ? 0 : this[S$0._config].titlePadding + titleHeight);
          labelY = (bounds[S$.$top] + padding)[S$.$round]();
        } else {
          let padding = 0.0 + this[S$0._config].innerPadding;
          if (isPrimaryTitle) {
            padding = padding + ((subTitleHeight > 0 ? this[S$0._config].titlePadding + subTitleHeight : 0) + titleHeight);
          } else {
            padding = padding + subTitleHeight;
          }
          labelY = (bounds[S$.$bottom] - padding)[S$.$round]();
        }
        return new (T$.PointOfint()).new(labelX, labelY);
      }
      [S$0._getVerticalLabelPosition](isPrimaryTitle, bounds, titleDirection, textElement, titleHeight, subTitleHeight) {
        let labelX = 0;
        let labelY = 0;
        switch (this[S$0._config].titleOutsideJustification) {
          case C[88] || CT.C88:
          case C[93] || CT.C93:
          {
            let textWidth = (this.isRtl ? -1 : 1) * textElement.measurement.horizontalSliceWidth / 2;
            labelY = (bounds[S$.$top] + bounds[S$.$height] / 2 + textWidth)[S$.$round]();
            textElement.textDirection = this.isRtl ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
          case C[94] || CT.C94:
          case C[95] || CT.C95:
          case C[96] || CT.C96:
          case C[97] || CT.C97:
          {
            let alignLeft = this.isRtl ? this[S$0._config].titleOutsideJustification === chart_behavior.OutsideJustification.end || this[S$0._config].titleOutsideJustification === chart_behavior.OutsideJustification.endDrawArea : this[S$0._config].titleOutsideJustification === chart_behavior.OutsideJustification.start || this[S$0._config].titleOutsideJustification === chart_behavior.OutsideJustification.startDrawArea;
            let padding = this[S$0._config].titleOutsideJustification === chart_behavior.OutsideJustification.endDrawArea || this[S$0._config].titleOutsideJustification === chart_behavior.OutsideJustification.startDrawArea ? 0.0 : this[S$0._config].outerPadding;
            if (alignLeft) {
              labelY = (bounds[S$.$bottom] - padding)[S$.$round]();
              textElement.textDirection = text_element.TextDirection.ltr;
            } else {
              labelY = (bounds[S$.$top] + padding)[S$.$round]();
              textElement.textDirection = text_element.TextDirection.rtl;
            }
            break;
          }
        }
        if (this[S$0._layoutPosition$1] === layout_view.LayoutPosition.Right || this[S$0._layoutPosition$1] === layout_view.LayoutPosition.FullRight) {
          let padding = this[S$0._config].outerPadding + (isPrimaryTitle ? 0 : this[S$0._config].titlePadding + titleHeight);
          labelX = (bounds[S$.$left] + padding)[S$.$round]();
        } else {
          let padding = this[S$0._config].outerPadding + titleHeight + (isPrimaryTitle ? subTitleHeight > 0 ? this[S$0._config].titlePadding + subTitleHeight : 0 : 0.0);
          labelX = (bounds[S$.$right] - padding)[S$.$round]();
        }
        return new (T$.PointOfint()).new(labelX, labelY);
      }
      [S$0._getTextStyle$2](graphicsFactory, labelSpec) {
        let t72, t72$, t71;
        t71 = graphicsFactory.createTextPaint();
        return (() => {
          t71.color = (t72 = labelSpec.color, t72 == null ? style_factory.StyleFactory.style.tickColor : t72);
          t71.fontFamily = labelSpec.fontFamily;
          t71.fontSize = (t72$ = labelSpec.fontSize, t72$ == null ? 18 : t72$);
          t71.lineHeight = labelSpec.lineHeight;
          return t71;
        })();
      }
      get componentBounds() {
        return this[S$0._drawAreaBounds$5];
      }
      get isSeriesRenderer() {
        return false;
      }
    }
    (_ChartTitleLayoutView.new = function(opts) {
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let config = opts && 'config' in opts ? opts.config : null;
      let chart = opts && 'chart' in opts ? opts.chart : null;
      this[S$0.___ChartTitleLayoutView__layoutConfig] = null;
      this[S$0.___ChartTitleLayoutView__componentBounds] = null;
      this[S$0.___ChartTitleLayoutView__drawAreaBounds] = null;
      this[S$0.graphicsFactory$7] = null;
      this[S$0._titleTextElement] = null;
      this[S$0._subTitleTextElement] = null;
      this[S$0.chart$2] = chart;
      this[S$0._config] = config;
      this[S$0._layoutConfig] = new layout_view.LayoutViewConfig.new({paintOrder: layoutPaintOrder, position: this[S$0._layoutPosition$1], positionOrder: 40});
    }).prototype = _ChartTitleLayoutView.prototype;
    dart.addTypeTests(_ChartTitleLayoutView);
    _ChartTitleLayoutView.prototype[_is__ChartTitleLayoutView_default] = true;
    dart.addTypeCaches(_ChartTitleLayoutView);
    dart.setMethodSignature(_ChartTitleLayoutView, () => ({
      __proto__: dart.getMethods(_ChartTitleLayoutView.__proto__),
      measure: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      [S$0._resetTextElementCache]: dart.fnType(dart.void, []),
      [S$0._getLabelPosition$1]: dart.fnType(dart.nullable(math.Point$(core.int)), [core.bool, math.Rectangle$(core.num), chart_title.ChartTitleDirection, text_element.TextElement, core.double, core.double]),
      [S$0._getHorizontalLabelPosition]: dart.fnType(math.Point$(core.int), [core.bool, math.Rectangle$(core.num), chart_title.ChartTitleDirection, text_element.TextElement, core.double, core.double]),
      [S$0._getVerticalLabelPosition]: dart.fnType(math.Point$(core.int), [core.bool, math.Rectangle$(core.num), chart_title.ChartTitleDirection, text_element.TextElement, core.double, core.double]),
      [S$0._getTextStyle$2]: dart.fnType(text_style.TextStyle, [graphics_factory.GraphicsFactory, axis_spec.TextStyleSpec])
    }));
    dart.setGetterSignature(_ChartTitleLayoutView, () => ({
      __proto__: dart.getGetters(_ChartTitleLayoutView.__proto__),
      [S$0._layoutConfig]: layout_view.LayoutViewConfig,
      layoutConfig: layout_view.LayoutViewConfig,
      isRtl: core.bool,
      [S$0._componentBounds$2]: math.Rectangle$(core.int),
      [S$0._drawAreaBounds$5]: math.Rectangle$(core.int),
      [S$0._resolvedTitleDirection]: chart_title.ChartTitleDirection,
      [S$0._layoutPosition$1]: layout_view.LayoutPosition,
      componentBounds: math.Rectangle$(core.int),
      isSeriesRenderer: core.bool
    }));
    dart.setSetterSignature(_ChartTitleLayoutView, () => ({
      __proto__: dart.getSetters(_ChartTitleLayoutView.__proto__),
      [S$0._layoutConfig]: layout_view.LayoutViewConfig,
      [S$0._componentBounds$2]: math.Rectangle$(core.int),
      [S$0._drawAreaBounds$5]: math.Rectangle$(core.int),
      config: chart_title._ChartTitleConfig
    }));
    dart.setLibraryUri(_ChartTitleLayoutView, I[70]);
    dart.setFieldSignature(_ChartTitleLayoutView, () => ({
      __proto__: dart.getFields(_ChartTitleLayoutView.__proto__),
      [S$0.___ChartTitleLayoutView__layoutConfig]: dart.fieldType(dart.nullable(layout_view.LayoutViewConfig)),
      [S$0._config]: dart.fieldType(chart_title._ChartTitleConfig),
      chart: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      [S$0.___ChartTitleLayoutView__componentBounds]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      [S$0.___ChartTitleLayoutView__drawAreaBounds]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      graphicsFactory: dart.fieldType(dart.nullable(graphics_factory.GraphicsFactory)),
      [S$0._titleTextElement]: dart.fieldType(dart.nullable(text_element.TextElement)),
      [S$0._subTitleTextElement]: dart.fieldType(dart.nullable(text_element.TextElement))
    }));
    return _ChartTitleLayoutView;
  });
  chart_title._ChartTitleLayoutView = chart_title._ChartTitleLayoutView$();
  dart.addTypeTests(chart_title._ChartTitleLayoutView, _is__ChartTitleLayoutView_default);
  chart_title._ChartTitleConfig = class _ChartTitleConfig extends core.Object {};
  (chart_title._ChartTitleConfig.new = function(opts) {
    let behaviorPosition = opts && 'behaviorPosition' in opts ? opts.behaviorPosition : null;
    let layoutMinSize = opts && 'layoutMinSize' in opts ? opts.layoutMinSize : null;
    let layoutPreferredSize = opts && 'layoutPreferredSize' in opts ? opts.layoutPreferredSize : null;
    let maxWidthStrategy = opts && 'maxWidthStrategy' in opts ? opts.maxWidthStrategy : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let titleDirection = opts && 'titleDirection' in opts ? opts.titleDirection : null;
    let titleOutsideJustification = opts && 'titleOutsideJustification' in opts ? opts.titleOutsideJustification : null;
    let titleStyleSpec = opts && 'titleStyleSpec' in opts ? opts.titleStyleSpec : null;
    let subTitle = opts && 'subTitle' in opts ? opts.subTitle : null;
    let subTitleStyleSpec = opts && 'subTitleStyleSpec' in opts ? opts.subTitleStyleSpec : null;
    let innerPadding = opts && 'innerPadding' in opts ? opts.innerPadding : null;
    let titlePadding = opts && 'titlePadding' in opts ? opts.titlePadding : null;
    let outerPadding = opts && 'outerPadding' in opts ? opts.outerPadding : null;
    this.behaviorPosition = behaviorPosition;
    this.layoutMinSize = layoutMinSize;
    this.layoutPreferredSize = layoutPreferredSize;
    this.maxWidthStrategy = maxWidthStrategy;
    this.title = title;
    this.titleDirection = titleDirection;
    this.titleOutsideJustification = titleOutsideJustification;
    this.titleStyleSpec = titleStyleSpec;
    this.subTitle = subTitle;
    this.subTitleStyleSpec = subTitleStyleSpec;
    this.innerPadding = innerPadding;
    this.titlePadding = titlePadding;
    this.outerPadding = outerPadding;
    ;
  }).prototype = chart_title._ChartTitleConfig.prototype;
  dart.addTypeTests(chart_title._ChartTitleConfig);
  dart.addTypeCaches(chart_title._ChartTitleConfig);
  dart.setLibraryUri(chart_title._ChartTitleConfig, I[70]);
  dart.setFieldSignature(chart_title._ChartTitleConfig, () => ({
    __proto__: dart.getFields(chart_title._ChartTitleConfig.__proto__),
    behaviorPosition: dart.fieldType(chart_behavior.BehaviorPosition),
    layoutMinSize: dart.fieldType(dart.nullable(core.int)),
    layoutPreferredSize: dart.fieldType(dart.nullable(core.int)),
    maxWidthStrategy: dart.fieldType(text_element.MaxWidthStrategy),
    title: dart.fieldType(core.String),
    titleDirection: dart.fieldType(chart_title.ChartTitleDirection),
    titleOutsideJustification: dart.fieldType(chart_behavior.OutsideJustification),
    titleStyleSpec: dart.fieldType(axis_spec.TextStyleSpec),
    subTitle: dart.fieldType(dart.nullable(core.String)),
    subTitleStyleSpec: dart.fieldType(axis_spec.TextStyleSpec),
    innerPadding: dart.fieldType(core.int),
    titlePadding: dart.fieldType(core.int),
    outerPadding: dart.fieldType(core.int)
  }));
  chart_title.ChartTitleDirection = class ChartTitleDirection extends core.Object {
    toString() {
      return this[S$0._name$14];
    }
  };
  (chart_title.ChartTitleDirection.new = function(index, _name) {
    this.index = index;
    this[S$0._name$14] = _name;
    ;
  }).prototype = chart_title.ChartTitleDirection.prototype;
  dart.addTypeTests(chart_title.ChartTitleDirection);
  dart.addTypeCaches(chart_title.ChartTitleDirection);
  dart.setLibraryUri(chart_title.ChartTitleDirection, I[70]);
  dart.setFieldSignature(chart_title.ChartTitleDirection, () => ({
    __proto__: dart.getFields(chart_title.ChartTitleDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$14]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(chart_title.ChartTitleDirection, ['toString']);
  chart_title.ChartTitleDirection.auto = C[87] || CT.C87;
  chart_title.ChartTitleDirection.horizontal = C[98] || CT.C98;
  chart_title.ChartTitleDirection.vertical = C[99] || CT.C99;
  chart_title.ChartTitleDirection.values = C[100] || CT.C100;
  const _is_PercentInjector_default = Symbol('_is_PercentInjector_default');
  percent_injector.PercentInjector$ = dart.generic(D => {
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    class PercentInjector extends core.Object {
      get totalType() {
        return this[S$0.totalType];
      }
      set totalType(value) {
        super.totalType = value;
      }
      get [S$0._lifecycleListener$9]() {
        let t71;
        t71 = this[S$0.__PercentInjector__lifecycleListener];
        return t71 == null ? dart.throw(new _internal.LateError.fieldNI("_lifecycleListener")) : t71;
      }
      set [S$0._lifecycleListener$9](t71) {
        if (this[S$0.__PercentInjector__lifecycleListener] == null)
          this[S$0.__PercentInjector__lifecycleListener] = t71;
        else
          dart.throw(new _internal.LateError.fieldAI("_lifecycleListener"));
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        chart.addLifecycleListener(this[S$0._lifecycleListener$9]);
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.removeLifecycleListener(this[S$0._lifecycleListener$9]);
      }
      [S$0._onData](seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        seriesList[S$.$forEach](dart.fn(series => {
          series.setAttr(core.bool, percent_injector.percentInjectedKey, false);
        }, MutableSeriesOfDTovoid()));
      }
      [S$0._preProcess$1](seriesList) {
        let t72, t72$;
        ListOfMutableSeriesOfD().as(seriesList);
        let percentInjected = true;
        seriesList[S$.$forEach](dart.fn(series => {
          percentInjected = percentInjected && dart.nullCheck(series.getAttr(core.bool, percent_injector.percentInjectedKey));
        }, MutableSeriesOfDTovoid()));
        if (percentInjected) {
          return;
        }
        switch (this.totalType) {
          case C[101] || CT.C101:
          case C[102] || CT.C102:
          {
            let totalsByDomain = new (T$0.IdentityMapOfString$num()).new();
            let useSeriesCategory = this.totalType === percent_injector.PercentInjectorTotalType.domainBySeriesCategory;
            for (let series of seriesList) {
              let seriesCategory = series.seriesCategory;
              let rawMeasureFn = series.rawMeasureFn;
              let domainFn = series.domainFn;
              for (let index = 0; index < series.data[S$.$length]; index = index + 1) {
                let domain = domainFn(index);
                let measure = (t72 = rawMeasureFn(index), t72 == null ? 0.0 : t72);
                let key = useSeriesCategory ? dart.str(seriesCategory) + "__" + dart.str(domain) : dart.str(domain);
                totalsByDomain[S$.$_set](key, dart.notNull((t72$ = totalsByDomain[S$.$_get](key), t72$ == null ? 0.0 : t72$)) + measure);
              }
              series.measureFn = dart.fn(index => {
                let measure = rawMeasureFn(index);
                if (measure == null || measure === 0.0) {
                  return 0.0;
                }
                let domain = domainFn(index);
                let key = useSeriesCategory ? dart.str(series.seriesCategory) + "__" + dart.str(domain) : dart.str(domain);
                return dart.notNull(measure) / dart.nullCheck(totalsByDomain[S$.$_get](key));
              }, T$.intNTodouble());
              if (series.measureLowerBoundFn != null) {
                series.measureLowerBoundFn = dart.fn(index => {
                  let measureLowerBound = dart.nullCheck(series.rawMeasureLowerBoundFn)(index);
                  if (measureLowerBound == null || measureLowerBound === 0.0) {
                    return 0.0;
                  }
                  let domain = domainFn(index);
                  let key = useSeriesCategory ? dart.str(series.seriesCategory) + "__" + dart.str(domain) : dart.str(domain);
                  return dart.notNull(measureLowerBound) / dart.nullCheck(totalsByDomain[S$.$_get](key));
                }, T$.intNTodouble());
              }
              if (series.measureUpperBoundFn != null) {
                series.measureUpperBoundFn = dart.fn(index => {
                  let measureUpperBound = dart.nullCheck(series.rawMeasureUpperBoundFn)(index);
                  if (measureUpperBound == null || measureUpperBound === 0.0) {
                    return 0.0;
                  }
                  let domain = domainFn(index);
                  let key = useSeriesCategory ? dart.str(series.seriesCategory) + "__" + dart.str(domain) : dart.str(domain);
                  return dart.notNull(measureUpperBound) / dart.nullCheck(totalsByDomain[S$.$_get](key));
                }, T$.intNTodouble());
              }
              series.setAttr(core.bool, percent_injector.percentInjectedKey, true);
            }
            break;
          }
          case C[103] || CT.C103:
          {
            seriesList[S$.$forEach](dart.fn(series => {
              series.measureFn = dart.fn(index => {
                let t73, t72;
                return dart.nullCheck((t72 = series, t73 = index, t72.rawMeasureFn(t73))) / series.seriesMeasureTotal;
              }, T$.intNTodouble());
              if (series.measureLowerBoundFn != null) {
                series.measureLowerBoundFn = dart.fn(index => {
                  let t72;
                  return dart.notNull((t72 = dart.nullCheck(series.rawMeasureLowerBoundFn)(index), t72 == null ? 0 : t72)) / series.seriesMeasureTotal;
                }, T$.intNTodouble());
              }
              if (series.measureUpperBoundFn != null) {
                series.measureUpperBoundFn = dart.fn(index => {
                  let t72;
                  return dart.notNull((t72 = dart.nullCheck(series.rawMeasureUpperBoundFn)(index), t72 == null ? 0 : t72)) / series.seriesMeasureTotal;
                }, T$.intNTodouble());
              }
              series.setAttr(core.bool, percent_injector.percentInjectedKey, true);
            }, MutableSeriesOfDTovoid()));
            break;
          }
          default:
          {
            dart.throw(new core.ArgumentError.new("Unsupported totalType: " + dart.str(this.totalType)));
          }
        }
      }
      get role() {
        return "PercentInjector";
      }
    }
    (PercentInjector.new = function(opts) {
      let totalType = opts && 'totalType' in opts ? opts.totalType : C[101] || CT.C101;
      this[S$0.__PercentInjector__lifecycleListener] = null;
      this[S$0.totalType] = totalType;
      this[S$0._lifecycleListener$9] = new (LifecycleListenerOfD()).new({onPreprocess: dart.bind(this, S$0._preProcess$1), onData: dart.bind(this, S$0._onData)});
    }).prototype = PercentInjector.prototype;
    dart.addTypeTests(PercentInjector);
    PercentInjector.prototype[_is_PercentInjector_default] = true;
    dart.addTypeCaches(PercentInjector);
    PercentInjector[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(PercentInjector, () => ({
      __proto__: dart.getMethods(PercentInjector.__proto__),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._onData]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._preProcess$1]: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(PercentInjector, () => ({
      __proto__: dart.getGetters(PercentInjector.__proto__),
      [S$0._lifecycleListener$9]: base_chart.LifecycleListener$(D),
      role: core.String
    }));
    dart.setSetterSignature(PercentInjector, () => ({
      __proto__: dart.getSetters(PercentInjector.__proto__),
      [S$0._lifecycleListener$9]: base_chart.LifecycleListener$(D)
    }));
    dart.setLibraryUri(PercentInjector, I[71]);
    dart.setFieldSignature(PercentInjector, () => ({
      __proto__: dart.getFields(PercentInjector.__proto__),
      [S$0.__PercentInjector__lifecycleListener]: dart.fieldType(dart.nullable(base_chart.LifecycleListener$(D))),
      totalType: dart.finalFieldType(percent_injector.PercentInjectorTotalType)
    }));
    return PercentInjector;
  });
  percent_injector.PercentInjector = percent_injector.PercentInjector$();
  dart.addTypeTests(percent_injector.PercentInjector, _is_PercentInjector_default);
  percent_injector.PercentInjectorTotalType = class PercentInjectorTotalType extends core.Object {
    toString() {
      return this[S$0._name$15];
    }
  };
  (percent_injector.PercentInjectorTotalType.new = function(index, _name) {
    this.index = index;
    this[S$0._name$15] = _name;
    ;
  }).prototype = percent_injector.PercentInjectorTotalType.prototype;
  dart.addTypeTests(percent_injector.PercentInjectorTotalType);
  dart.addTypeCaches(percent_injector.PercentInjectorTotalType);
  dart.setLibraryUri(percent_injector.PercentInjectorTotalType, I[71]);
  dart.setFieldSignature(percent_injector.PercentInjectorTotalType, () => ({
    __proto__: dart.getFields(percent_injector.PercentInjectorTotalType.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$15]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(percent_injector.PercentInjectorTotalType, ['toString']);
  percent_injector.PercentInjectorTotalType.domain = C[101] || CT.C101;
  percent_injector.PercentInjectorTotalType.domainBySeriesCategory = C[102] || CT.C102;
  percent_injector.PercentInjectorTotalType.series = C[103] || CT.C103;
  percent_injector.PercentInjectorTotalType.values = C[104] || CT.C104;
  dart.defineLazy(percent_injector, {
    /*percent_injector.percentInjectedKey*/get percentInjectedKey() {
      return C[105] || CT.C105;
    }
  }, false);
  const _is_KeyboardDomainNavigator_default = Symbol('_is_KeyboardDomainNavigator_default');
  keyboard_domain_navigator.KeyboardDomainNavigator$ = dart.generic(D => {
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var JSArrayOfSeriesDatumOfD = () => (JSArrayOfSeriesDatumOfD = dart.constFn(_interceptors.JSArray$(SeriesDatumOfD())))();
    var JSArrayOfMutableSeriesOfD = () => (JSArrayOfMutableSeriesOfD = dart.constFn(_interceptors.JSArray$(MutableSeriesOfD())))();
    var JSArrayOfD = () => (JSArrayOfD = dart.constFn(_interceptors.JSArray$(D)))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var DatumDetailsOfDAndDatumDetailsOfDToint = () => (DatumDetailsOfDAndDatumDetailsOfDToint = dart.constFn(dart.fnType(core.int, [DatumDetailsOfD(), DatumDetailsOfD()])))();
    var ListOfSeriesDatumOfD = () => (ListOfSeriesDatumOfD = dart.constFn(core.List$(SeriesDatumOfD())))();
    var LinkedMapOfD$ListOfSeriesDatumOfD = () => (LinkedMapOfD$ListOfSeriesDatumOfD = dart.constFn(_js_helper.LinkedMap$(D, ListOfSeriesDatumOfD())))();
    var IdentityMapOfint$ListOfSeriesDatumOfD = () => (IdentityMapOfint$ListOfSeriesDatumOfD = dart.constFn(_js_helper.IdentityMap$(core.int, ListOfSeriesDatumOfD())))();
    var VoidToListOfSeriesDatumOfD = () => (VoidToListOfSeriesDatumOfD = dart.constFn(dart.fnType(ListOfSeriesDatumOfD(), [])))();
    var DAndListOfSeriesDatumOfDTovoid = () => (DAndListOfSeriesDatumOfDTovoid = dart.constFn(dart.fnType(dart.void, [D, ListOfSeriesDatumOfD()])))();
    class KeyboardDomainNavigator extends core.Object {
      get [S$0._chart$18]() {
        let t72;
        t72 = this[S$0.__KeyboardDomainNavigator__chart];
        return t72 == null ? dart.throw(new _internal.LateError.fieldNI("_chart")) : t72;
      }
      set [S$0._chart$18](t72) {
        this[S$0.__KeyboardDomainNavigator__chart] = t72;
      }
      get [S$0._lifecycleListener$10]() {
        let t73;
        t73 = this[S$0.__KeyboardDomainNavigator__lifecycleListener];
        return t73 == null ? dart.throw(new _internal.LateError.fieldNI("_lifecycleListener")) : t73;
      }
      set [S$0._lifecycleListener$10](t73) {
        if (this[S$0.__KeyboardDomainNavigator__lifecycleListener] == null)
          this[S$0.__KeyboardDomainNavigator__lifecycleListener] = t73;
        else
          dart.throw(new _internal.LateError.fieldAI("_lifecycleListener"));
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        this[S$0._chart$18] = chart;
        chart.addLifecycleListener(this[S$0._lifecycleListener$10]);
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.removeLifecycleListener(this[S$0._lifecycleListener$10]);
      }
      onData(_) {
        ListOfMutableSeriesOfD().as(_);
        this[S$0._domains] = null;
        this[S$0._datumPairs] = null;
        this[S$0._currentIndex] = -1;
      }
      handleEscape() {
        this[S$0._currentIndex] = -1;
        this.clearSelection();
        return true;
      }
      handleEnter() {
        this[S$0._currentIndex] = this[S$0._getActiveHoverDomainIndex]();
        this.selectDomain(this[S$0._currentIndex]);
        return true;
      }
      handlePreviousDomain() {
        if (this[S$0._datumPairs] == null) {
          this[S$0._generateSelectionDomains]();
        }
        let domainsLength = dart.nullCheck(this[S$0._datumPairs])[S$.$length];
        if (domainsLength === 0) {
          return false;
        }
        this[S$0._currentIndex] = this[S$0._getActiveHoverDomainIndex]();
        if (this[S$0._currentIndex] === -1) {
          this[S$0._currentIndex] = domainsLength - 1;
        } else {
          this[S$0._currentIndex] = this[S$0._currentIndex] === 0 ? -1 : this[S$0._currentIndex] - 1;
        }
        this[S$0._doNavigate](this[S$0._currentIndex]);
        return true;
      }
      handleNextDomain() {
        if (this[S$0._datumPairs] == null) {
          this[S$0._generateSelectionDomains]();
        }
        let domainsLength = dart.nullCheck(this[S$0._datumPairs])[S$.$length];
        if (domainsLength === 0) {
          return false;
        }
        this[S$0._currentIndex] = this[S$0._getActiveHoverDomainIndex]();
        if (this[S$0._currentIndex] === -1) {
          this[S$0._currentIndex] = 0;
        } else {
          this[S$0._currentIndex] = this[S$0._currentIndex] === domainsLength - 1 ? -1 : this[S$0._currentIndex] + 1;
        }
        this[S$0._doNavigate](this[S$0._currentIndex]);
        return true;
      }
      [S$0._doNavigate](domainIndex) {
        this[S$0._selectDomainIndex](selection_model.SelectionModelType.info, domainIndex);
      }
      selectDomain(domainIndex) {
        this[S$0._selectDomainIndex](selection_model.SelectionModelType.action, domainIndex);
      }
      clearSelection() {
        this[S$0._selectDomainIndex](selection_model.SelectionModelType.info, -1);
      }
      [S$0._selectDomainIndex](selectionModelType, domainIndex) {
        let selectionModel = this[S$0._chart$18].getSelectionModel(selectionModelType);
        if (selectionModel === null) {
          return false;
        }
        if (domainIndex === -1) {
          selectionModel.clearSelection();
        } else {
          let datumPairs = this[S$0._getDatumPairs](domainIndex);
          let seriesDatumList = JSArrayOfSeriesDatumOfD().of([]);
          let seriesList = JSArrayOfMutableSeriesOfD().of([]);
          for (let seriesDatum of datumPairs) {
            seriesDatumList[S$.$add](new (SeriesDatumOfD()).new(seriesDatum.series, seriesDatum.datum));
            if (!seriesList[S$.$contains](seriesDatum.series)) {
              seriesList[S$.$add](MutableSeriesOfD().as(seriesDatum.series));
            }
          }
          selectionModel.updateSelection(seriesDatumList, seriesList);
        }
        return true;
      }
      [S$0._getActiveHoverDomainIndex]() {
        let _domains = this[S$0._domains];
        if (_domains == null || _domains[S$.$isEmpty]) {
          return -1;
        }
        let selectionModel = this[S$0._chart$18].getSelectionModel(selection_model.SelectionModelType.info);
        if (!selectionModel.hasAnySelection) {
          return -1;
        }
        let details = this[S$0._chart$18].getSelectedDatumDetails(selection_model.SelectionModelType.info);
        if (details[S$.$isEmpty]) {
          return -1;
        }
        let firstDomain = dart.nullCheck(details[S$.$first].domain);
        if (0 <= this[S$0._currentIndex] && this[S$0._currentIndex] <= _domains[S$.$length] - 1 && dart.equals(_domains[S$.$_get](this[S$0._currentIndex]), firstDomain)) {
          return this[S$0._currentIndex];
        }
        return _domains[S$.$indexOf](firstDomain);
      }
      [S$0._generateSelectionDomains]() {
        this[S$0._domains] = JSArrayOfD().of([]);
        let allSeriesDatum = this[S$0._chart$18].getAllDatumDetails();
        if (cartesian_chart.CartesianChart.is(this[S$0._chart$18])) {
          let localChart = cartesian_chart.CartesianChart.as(this[S$0._chart$18]);
          if (localChart.vertical) {
            allSeriesDatum[S$.$sort](dart.fn((a, b) => {
              if (dart.nullCheck(a.chartPosition).x == dart.nullCheck(b.chartPosition).x) {
                return dart.nullCheck(a.series).seriesIndex[S$.$compareTo](dart.nullCheck(b.series).seriesIndex);
              }
              return dart.nullCheck(dart.nullCheck(a.chartPosition).x)[S$.$compareTo](dart.nullCheck(dart.nullCheck(b.chartPosition).x));
            }, DatumDetailsOfDAndDatumDetailsOfDToint()));
          } else {
            allSeriesDatum[S$.$sort](dart.fn((a, b) => {
              if (dart.nullCheck(a.chartPosition).y == dart.nullCheck(b.chartPosition).y) {
                return dart.nullCheck(a.series).seriesIndex[S$.$compareTo](dart.nullCheck(b.series).seriesIndex);
              }
              return dart.nullCheck(dart.nullCheck(a.chartPosition).y)[S$.$compareTo](dart.nullCheck(dart.nullCheck(b.chartPosition).y));
            }, DatumDetailsOfDAndDatumDetailsOfDToint()));
          }
        }
        let detailsByDomain = new (LinkedMapOfD$ListOfSeriesDatumOfD()).new();
        for (let datumDetails of allSeriesDatum) {
          if (datumDetails.measure != null) {
            let domain = dart.nullCheck(datumDetails.domain);
            if (detailsByDomain[S$.$_get](domain) == null) {
              dart.nullCheck(this[S$0._domains])[S$.$add](domain);
              detailsByDomain[S$.$_set](domain, JSArrayOfSeriesDatumOfD().of([]));
            }
            dart.nullCheck(detailsByDomain[S$.$_get](domain))[S$.$add](new (SeriesDatumOfD()).new(dart.nullCheck(datumDetails.series), datumDetails.datum));
          }
        }
        this[S$0._datumPairs] = new (IdentityMapOfint$ListOfSeriesDatumOfD()).new();
        let i = 0;
        detailsByDomain[S$.$forEach](dart.fn((key, value) => {
          dart.nullCheck(this[S$0._datumPairs])[S$.$putIfAbsent](i, dart.fn(() => value, VoidToListOfSeriesDatumOfD()));
          i = i + 1;
        }, DAndListOfSeriesDatumOfDTovoid()));
        this[S$0._currentIndex] = -1;
      }
      [S$0._getDatumPairs](domainIndex) {
        let t74;
        t74 = dart.nullCheck(this[S$0._datumPairs])[S$.$_get](domainIndex);
        return t74 == null ? JSArrayOfSeriesDatumOfD().of([]) : t74;
      }
      get role() {
        return "keyboard-domain-navigator";
      }
    }
    (KeyboardDomainNavigator.new = function() {
      this[S$0.__KeyboardDomainNavigator__chart] = null;
      this[S$0.__KeyboardDomainNavigator__lifecycleListener] = null;
      this[S$0._domains] = null;
      this[S$0._datumPairs] = null;
      this[S$0._currentIndex] = -1;
      this[S$0._lifecycleListener$10] = new (LifecycleListenerOfD()).new({onData: dart.bind(this, 'onData')});
    }).prototype = KeyboardDomainNavigator.prototype;
    dart.addTypeTests(KeyboardDomainNavigator);
    KeyboardDomainNavigator.prototype[_is_KeyboardDomainNavigator_default] = true;
    dart.addTypeCaches(KeyboardDomainNavigator);
    KeyboardDomainNavigator[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(KeyboardDomainNavigator, () => ({
      __proto__: dart.getMethods(KeyboardDomainNavigator.__proto__),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      handleEscape: dart.fnType(core.bool, []),
      handleEnter: dart.fnType(core.bool, []),
      handlePreviousDomain: dart.fnType(core.bool, []),
      handleNextDomain: dart.fnType(core.bool, []),
      [S$0._doNavigate]: dart.fnType(dart.void, [core.int]),
      selectDomain: dart.fnType(dart.void, [core.int]),
      clearSelection: dart.fnType(dart.void, []),
      [S$0._selectDomainIndex]: dart.fnType(core.bool, [selection_model.SelectionModelType, core.int]),
      [S$0._getActiveHoverDomainIndex]: dart.fnType(core.int, []),
      [S$0._generateSelectionDomains]: dart.fnType(dart.void, []),
      [S$0._getDatumPairs]: dart.fnType(core.List$(series_datum.SeriesDatum$(D)), [core.int])
    }));
    dart.setGetterSignature(KeyboardDomainNavigator, () => ({
      __proto__: dart.getGetters(KeyboardDomainNavigator.__proto__),
      [S$0._chart$18]: base_chart.BaseChart$(D),
      [S$0._lifecycleListener$10]: base_chart.LifecycleListener$(D),
      role: core.String
    }));
    dart.setSetterSignature(KeyboardDomainNavigator, () => ({
      __proto__: dart.getSetters(KeyboardDomainNavigator.__proto__),
      [S$0._chart$18]: base_chart.BaseChart$(D),
      [S$0._lifecycleListener$10]: base_chart.LifecycleListener$(D)
    }));
    dart.setLibraryUri(KeyboardDomainNavigator, I[72]);
    dart.setFieldSignature(KeyboardDomainNavigator, () => ({
      __proto__: dart.getFields(KeyboardDomainNavigator.__proto__),
      [S$0.__KeyboardDomainNavigator__chart]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      [S$0.__KeyboardDomainNavigator__lifecycleListener]: dart.fieldType(dart.nullable(base_chart.LifecycleListener$(D))),
      [S$0._domains]: dart.fieldType(dart.nullable(core.List$(D))),
      [S$0._datumPairs]: dart.fieldType(dart.nullable(core.Map$(core.int, core.List$(series_datum.SeriesDatum$(D))))),
      [S$0._currentIndex]: dart.fieldType(core.int)
    }));
    return KeyboardDomainNavigator;
  });
  keyboard_domain_navigator.KeyboardDomainNavigator = keyboard_domain_navigator.KeyboardDomainNavigator$();
  dart.addTypeTests(keyboard_domain_navigator.KeyboardDomainNavigator, _is_KeyboardDomainNavigator_default);
  dart.defineLazy(keyboard_domain_navigator, {
    /*keyboard_domain_navigator.NO_SELECTION*/get NO_SELECTION() {
      return -1;
    }
  }, false);
  const _is_A11yExploreBehavior_default = Symbol('_is_A11yExploreBehavior_default');
  a11y_explore_behavior.A11yExploreBehavior$ = dart.generic(D => {
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class A11yExploreBehavior extends core.Object {
      get exploreModeTrigger() {
        return this[S$0.exploreModeTrigger];
      }
      set exploreModeTrigger(value) {
        super.exploreModeTrigger = value;
      }
      get minimumWidth() {
        return this[S$0.minimumWidth];
      }
      set minimumWidth(value) {
        super.minimumWidth = value;
      }
      get exploreModeEnabledAnnouncement() {
        return this[S$0.exploreModeEnabledAnnouncement];
      }
      set exploreModeEnabledAnnouncement(value) {
        super.exploreModeEnabledAnnouncement = value;
      }
      get exploreModeDisabledAnnouncement() {
        return this[S$0.exploreModeDisabledAnnouncement];
      }
      set exploreModeDisabledAnnouncement(value) {
        super.exploreModeDisabledAnnouncement = value;
      }
      get [S$0._listener$4]() {
        let t77;
        t77 = this[S$0.__A11yExploreBehavior__listener];
        return t77 == null ? dart.throw(new _internal.LateError.fieldNI("_listener")) : t77;
      }
      set [S$0._listener$4](t77) {
        this[S$0.__A11yExploreBehavior__listener] = t77;
      }
      [S$0._toggleExploreMode](_) {
        if (this[S$0._exploreModeOn]) {
          this[S$0._exploreModeOn] = false;
          dart.nullCheck(this[S$0._chart$20]).context.disableA11yExploreMode({announcement: this.exploreModeDisabledAnnouncement});
        } else {
          this[S$0._exploreModeOn] = true;
          dart.nullCheck(this[S$0._chart$20]).context.enableA11yExploreMode(this.createA11yNodes(), {announcement: this.exploreModeEnabledAnnouncement});
        }
        return true;
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        this[S$0._chart$20] = chart;
        chart.addGestureListener(this[S$0._listener$4]);
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.removeGestureListener(this[S$0._listener$4]);
      }
    }
    (A11yExploreBehavior.new = function(opts) {
      let t77, t77$;
      let exploreModeTrigger = opts && 'exploreModeTrigger' in opts ? opts.exploreModeTrigger : null;
      let minimumWidth = opts && 'minimumWidth' in opts ? opts.minimumWidth : null;
      let exploreModeEnabledAnnouncement = opts && 'exploreModeEnabledAnnouncement' in opts ? opts.exploreModeEnabledAnnouncement : null;
      let exploreModeDisabledAnnouncement = opts && 'exploreModeDisabledAnnouncement' in opts ? opts.exploreModeDisabledAnnouncement : null;
      this[S$0._chart$20] = null;
      this[S$0.__A11yExploreBehavior__listener] = null;
      this[S$0._exploreModeOn] = false;
      this[S$0.exploreModeEnabledAnnouncement] = exploreModeEnabledAnnouncement;
      this[S$0.exploreModeDisabledAnnouncement] = exploreModeDisabledAnnouncement;
      this[S$0.exploreModeTrigger] = (t77 = exploreModeTrigger, t77 == null ? a11y_explore_behavior.ExploreModeTrigger.pressHold : t77);
      this[S$0.minimumWidth] = (t77$ = minimumWidth, t77$ == null ? 1.0 : t77$);
      if (!(this.minimumWidth >= 1.0)) dart.assertFailed(null, I[74], 58, 12, "this.minimumWidth >= 1.0");
      switch (this.exploreModeTrigger) {
        case C[107] || CT.C107:
        {
          this[S$0._listener$4] = new gesture_listener.GestureListener.new({onLongPress: dart.bind(this, S$0._toggleExploreMode)});
          break;
        }
        case C[108] || CT.C108:
        {
          this[S$0._listener$4] = new gesture_listener.GestureListener.new({onTap: dart.bind(this, S$0._toggleExploreMode)});
          break;
        }
      }
    }).prototype = A11yExploreBehavior.prototype;
    dart.addTypeTests(A11yExploreBehavior);
    A11yExploreBehavior.prototype[_is_A11yExploreBehavior_default] = true;
    dart.addTypeCaches(A11yExploreBehavior);
    A11yExploreBehavior[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(A11yExploreBehavior, () => ({
      __proto__: dart.getMethods(A11yExploreBehavior.__proto__),
      [S$0._toggleExploreMode]: dart.fnType(core.bool, [math.Point$(core.double)]),
      attachTo: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(A11yExploreBehavior, () => ({
      __proto__: dart.getGetters(A11yExploreBehavior.__proto__),
      [S$0._listener$4]: gesture_listener.GestureListener
    }));
    dart.setSetterSignature(A11yExploreBehavior, () => ({
      __proto__: dart.getSetters(A11yExploreBehavior.__proto__),
      [S$0._listener$4]: gesture_listener.GestureListener
    }));
    dart.setLibraryUri(A11yExploreBehavior, I[75]);
    dart.setFieldSignature(A11yExploreBehavior, () => ({
      __proto__: dart.getFields(A11yExploreBehavior.__proto__),
      exploreModeTrigger: dart.finalFieldType(a11y_explore_behavior.ExploreModeTrigger),
      minimumWidth: dart.finalFieldType(core.double),
      exploreModeEnabledAnnouncement: dart.finalFieldType(dart.nullable(core.String)),
      exploreModeDisabledAnnouncement: dart.finalFieldType(dart.nullable(core.String)),
      [S$0._chart$20]: dart.fieldType(dart.nullable(base_chart.BaseChart$(D))),
      [S$0.__A11yExploreBehavior__listener]: dart.fieldType(dart.nullable(gesture_listener.GestureListener)),
      [S$0._exploreModeOn]: dart.fieldType(core.bool)
    }));
    return A11yExploreBehavior;
  });
  a11y_explore_behavior.A11yExploreBehavior = a11y_explore_behavior.A11yExploreBehavior$();
  dart.addTypeTests(a11y_explore_behavior.A11yExploreBehavior, _is_A11yExploreBehavior_default);
  const _is_DomainA11yExploreBehavior_default = Symbol('_is_DomainA11yExploreBehavior_default');
  domain_a11y_explore_behavior.DomainA11yExploreBehavior$ = dart.generic(D => {
    var LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var ListOfSeriesDatumOfD = () => (ListOfSeriesDatumOfD = dart.constFn(core.List$(SeriesDatumOfD())))();
    var LinkedMapOfD$ListOfSeriesDatumOfD = () => (LinkedMapOfD$ListOfSeriesDatumOfD = dart.constFn(_js_helper.LinkedMap$(D, ListOfSeriesDatumOfD())))();
    var JSArrayOfSeriesDatumOfD = () => (JSArrayOfSeriesDatumOfD = dart.constFn(_interceptors.JSArray$(SeriesDatumOfD())))();
    var ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var JSArrayOfImmutableSeriesOfD = () => (JSArrayOfImmutableSeriesOfD = dart.constFn(_interceptors.JSArray$(ImmutableSeriesOfD())))();
    var DAndListOfSeriesDatumOfDTovoid = () => (DAndListOfSeriesDatumOfDTovoid = dart.constFn(dart.fnType(dart.void, [D, ListOfSeriesDatumOfD()])))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    var CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    class DomainA11yExploreBehavior extends a11y_explore_behavior.A11yExploreBehavior$(D) {
      get [S$0._lifecycleListener$11]() {
        let t74;
        t74 = this[S$0.__DomainA11yExploreBehavior__lifecycleListener];
        return t74 == null ? dart.throw(new _internal.LateError.fieldNI("_lifecycleListener")) : t74;
      }
      set [S$0._lifecycleListener$11](t74) {
        if (this[S$0.__DomainA11yExploreBehavior__lifecycleListener] == null)
          this[S$0.__DomainA11yExploreBehavior__lifecycleListener] = t74;
        else
          dart.throw(new _internal.LateError.fieldAI("_lifecycleListener"));
      }
      get [S$0._chart$19]() {
        let t75;
        t75 = this[S$0.__DomainA11yExploreBehavior__chart];
        return t75 == null ? dart.throw(new _internal.LateError.fieldNI("_chart")) : t75;
      }
      set [S$0._chart$19](t75) {
        this[S$0.__DomainA11yExploreBehavior__chart] = t75;
      }
      get [S$0._seriesList]() {
        let t76;
        t76 = this[S$0.__DomainA11yExploreBehavior__seriesList];
        return t76 == null ? dart.throw(new _internal.LateError.fieldNI("_seriesList")) : t76;
      }
      set [S$0._seriesList](t76) {
        this[S$0.__DomainA11yExploreBehavior__seriesList] = t76;
      }
      createA11yNodes() {
        let t78, t77;
        let nodes = T$0.JSArrayOf_DomainA11yNode().of([]);
        let selectionModel = this[S$0._chart$19].getSelectionModel(selection_model.SelectionModelType.info);
        let domainSeriesDatum = new (LinkedMapOfD$ListOfSeriesDatumOfD()).new();
        for (let series of this[S$0._seriesList]) {
          for (let index = 0; index < series.data[S$.$length]; index = index + 1) {
            let datum = series.data[S$.$_get](index);
            let domain = (t77 = series, t78 = index, t77.domainFn(t78));
            domainSeriesDatum[S$.$_get](domain) == null ? domainSeriesDatum[S$.$_set](domain, JSArrayOfSeriesDatumOfD().of([])) : null;
            dart.nullCheck(domainSeriesDatum[S$.$_get](domain))[S$.$add](new (SeriesDatumOfD()).new(series, datum));
          }
        }
        domainSeriesDatum[S$.$forEach](dart.fn((domain, seriesDatums) => {
          let t77;
          let a11yDescription = (t77 = seriesDatums, this[S$0._vocalizationCallback](t77));
          let firstSeries = seriesDatums[S$.$first].series;
          let domainAxis = ImmutableAxisOfD().as(firstSeries.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
          let location = dart.nullCheck(domainAxis.getLocation(domain));
          let stepSize = domainAxis.stepSize > this.minimumWidth ? domainAxis.stepSize : this.minimumWidth;
          nodes[S$.$add](domain_a11y_explore_behavior._DomainA11yNode.new(a11yDescription, {location: location, stepSize: stepSize, chartDrawBounds: this[S$0._chart$19].drawAreaBounds, isRtl: this[S$0._chart$19].context.isRtl, renderVertically: this[S$0._chart$19].vertical, onFocus: dart.fn(() => selectionModel.updateSelection(seriesDatums, JSArrayOfImmutableSeriesOfD().of([])), T$0.VoidTovoid())}));
        }, DAndListOfSeriesDatumOfDTovoid()));
        nodes[S$.$sort]();
        return nodes;
      }
      [S$0._updateSeriesList](seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        this[S$0._seriesList] = seriesList;
      }
      attachTo(chart) {
        BaseChartOfD().as(chart);
        if (!CartesianChartOfD().is(chart)) dart.assertFailed(null, I[73], 121, 12, "chart is CartesianChart<D>");
        this[S$0._chart$19] = CartesianChartOfD().as(chart);
        chart.addLifecycleListener(this[S$0._lifecycleListener$11]);
        super.attachTo(chart);
      }
      removeFrom(chart) {
        BaseChartOfD().as(chart);
        chart.removeLifecycleListener(this[S$0._lifecycleListener$11]);
      }
      get role() {
        return "DomainA11yExplore-" + dart.str(this.exploreModeTrigger);
      }
    }
    (DomainA11yExploreBehavior.new = function(opts) {
      let t74;
      let vocalizationCallback = opts && 'vocalizationCallback' in opts ? opts.vocalizationCallback : null;
      let exploreModeTrigger = opts && 'exploreModeTrigger' in opts ? opts.exploreModeTrigger : null;
      let minimumWidth = opts && 'minimumWidth' in opts ? opts.minimumWidth : null;
      let exploreModeEnabledAnnouncement = opts && 'exploreModeEnabledAnnouncement' in opts ? opts.exploreModeEnabledAnnouncement : null;
      let exploreModeDisabledAnnouncement = opts && 'exploreModeDisabledAnnouncement' in opts ? opts.exploreModeDisabledAnnouncement : null;
      this[S$0.__DomainA11yExploreBehavior__lifecycleListener] = null;
      this[S$0.__DomainA11yExploreBehavior__chart] = null;
      this[S$0.__DomainA11yExploreBehavior__seriesList] = null;
      this[S$0._vocalizationCallback] = (t74 = vocalizationCallback, t74 == null ? dart.gbind(C[106] || CT.C106, D) : t74);
      DomainA11yExploreBehavior.__proto__.new.call(this, {exploreModeTrigger: exploreModeTrigger, minimumWidth: minimumWidth, exploreModeEnabledAnnouncement: exploreModeEnabledAnnouncement, exploreModeDisabledAnnouncement: exploreModeDisabledAnnouncement});
      this[S$0._lifecycleListener$11] = new (LifecycleListenerOfD()).new({onPostprocess: dart.bind(this, S$0._updateSeriesList)});
    }).prototype = DomainA11yExploreBehavior.prototype;
    dart.addTypeTests(DomainA11yExploreBehavior);
    DomainA11yExploreBehavior.prototype[_is_DomainA11yExploreBehavior_default] = true;
    dart.addTypeCaches(DomainA11yExploreBehavior);
    dart.setMethodSignature(DomainA11yExploreBehavior, () => ({
      __proto__: dart.getMethods(DomainA11yExploreBehavior.__proto__),
      createA11yNodes: dart.fnType(core.List$(a11y_node.A11yNode), []),
      [S$0._updateSeriesList]: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(DomainA11yExploreBehavior, () => ({
      __proto__: dart.getGetters(DomainA11yExploreBehavior.__proto__),
      [S$0._lifecycleListener$11]: base_chart.LifecycleListener$(D),
      [S$0._chart$19]: cartesian_chart.CartesianChart$(D),
      [S$0._seriesList]: core.List$(processed_series.MutableSeries$(D)),
      role: core.String
    }));
    dart.setSetterSignature(DomainA11yExploreBehavior, () => ({
      __proto__: dart.getSetters(DomainA11yExploreBehavior.__proto__),
      [S$0._lifecycleListener$11]: base_chart.LifecycleListener$(D),
      [S$0._chart$19]: cartesian_chart.CartesianChart$(D),
      [S$0._seriesList]: core.List$(processed_series.MutableSeries$(D))
    }));
    dart.setLibraryUri(DomainA11yExploreBehavior, I[76]);
    dart.setFieldSignature(DomainA11yExploreBehavior, () => ({
      __proto__: dart.getFields(DomainA11yExploreBehavior.__proto__),
      [S$0._vocalizationCallback]: dart.finalFieldType(dart.fnType(core.String, [core.List$(series_datum.SeriesDatum$(D))])),
      [S$0.__DomainA11yExploreBehavior__lifecycleListener]: dart.fieldType(dart.nullable(base_chart.LifecycleListener$(D))),
      [S$0.__DomainA11yExploreBehavior__chart]: dart.fieldType(dart.nullable(cartesian_chart.CartesianChart$(D))),
      [S$0.__DomainA11yExploreBehavior__seriesList]: dart.fieldType(dart.nullable(core.List$(processed_series.MutableSeries$(D))))
    }));
    return DomainA11yExploreBehavior;
  });
  domain_a11y_explore_behavior.DomainA11yExploreBehavior = domain_a11y_explore_behavior.DomainA11yExploreBehavior$();
  dart.addTypeTests(domain_a11y_explore_behavior.DomainA11yExploreBehavior, _is_DomainA11yExploreBehavior_default);
  domain_a11y_explore_behavior._DomainA11yNode = class _DomainA11yNode extends a11y_node.A11yNode {
    static new(label, opts) {
      let location = opts && 'location' in opts ? opts.location : null;
      let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
      let chartDrawBounds = opts && 'chartDrawBounds' in opts ? opts.chartDrawBounds : null;
      let isRtl = opts && 'isRtl' in opts ? opts.isRtl : null;
      let renderVertically = opts && 'renderVertically' in opts ? opts.renderVertically : null;
      let onFocus = opts && 'onFocus' in opts ? opts.onFocus : null;
      let boundingBox = null;
      if (renderVertically) {
        let left = (location - stepSize / 2)[S$.$round]();
        let top = chartDrawBounds[S$.$top];
        let width = stepSize[S$.$round]();
        let height = chartDrawBounds[S$.$height];
        boundingBox = new (T$.RectangleOfint()).new(left, top, width, height);
      } else {
        let left = chartDrawBounds[S$.$left];
        let top = (location - stepSize / 2)[S$.$round]();
        let width = chartDrawBounds[S$.$width];
        let height = stepSize[S$.$round]();
        boundingBox = new (T$.RectangleOfint()).new(left, top, width, height);
      }
      return new domain_a11y_explore_behavior._DomainA11yNode._internal(label, boundingBox, {location: location, isRtl: isRtl, renderVertically: renderVertically, onFocus: onFocus});
    }
    compareTo(other) {
      domain_a11y_explore_behavior._DomainA11yNode.as(other);
      let result = this.location[S$.$compareTo](other.location);
      if (this.renderVertically && this.isRtl && result !== 0) {
        result = -result;
      }
      return result;
    }
  };
  (domain_a11y_explore_behavior._DomainA11yNode._internal = function(label, boundingBox, opts) {
    let location = opts && 'location' in opts ? opts.location : null;
    let isRtl = opts && 'isRtl' in opts ? opts.isRtl : null;
    let renderVertically = opts && 'renderVertically' in opts ? opts.renderVertically : null;
    let onFocus = opts && 'onFocus' in opts ? opts.onFocus : null;
    this.location = location;
    this.isRtl = isRtl;
    this.renderVertically = renderVertically;
    domain_a11y_explore_behavior._DomainA11yNode.__proto__.new.call(this, label, boundingBox, {onFocus: onFocus});
    ;
  }).prototype = domain_a11y_explore_behavior._DomainA11yNode.prototype;
  dart.addTypeTests(domain_a11y_explore_behavior._DomainA11yNode);
  dart.addTypeCaches(domain_a11y_explore_behavior._DomainA11yNode);
  domain_a11y_explore_behavior._DomainA11yNode[dart.implements] = () => [core.Comparable$(domain_a11y_explore_behavior._DomainA11yNode)];
  dart.setMethodSignature(domain_a11y_explore_behavior._DomainA11yNode, () => ({
    __proto__: dart.getMethods(domain_a11y_explore_behavior._DomainA11yNode.__proto__),
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [S$.$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(domain_a11y_explore_behavior._DomainA11yNode, I[76]);
  dart.setFieldSignature(domain_a11y_explore_behavior._DomainA11yNode, () => ({
    __proto__: dart.getFields(domain_a11y_explore_behavior._DomainA11yNode.__proto__),
    location: dart.finalFieldType(core.double),
    isRtl: dart.finalFieldType(core.bool),
    renderVertically: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(domain_a11y_explore_behavior._DomainA11yNode, ['compareTo']);
  domain_a11y_explore_behavior.domainVocalization = function domainVocalization(D, seriesDatums) {
    let datumIndex = seriesDatums[S$.$first].index;
    let domainFn = seriesDatums[S$.$first].series.domainFn;
    let domain = domainFn(datumIndex);
    return dart.toString(domain);
  };
  a11y_explore_behavior.ExploreModeTrigger = class ExploreModeTrigger extends core.Object {
    toString() {
      return this[S$0._name$16];
    }
  };
  (a11y_explore_behavior.ExploreModeTrigger.new = function(index, _name) {
    this.index = index;
    this[S$0._name$16] = _name;
    ;
  }).prototype = a11y_explore_behavior.ExploreModeTrigger.prototype;
  dart.addTypeTests(a11y_explore_behavior.ExploreModeTrigger);
  dart.addTypeCaches(a11y_explore_behavior.ExploreModeTrigger);
  dart.setLibraryUri(a11y_explore_behavior.ExploreModeTrigger, I[75]);
  dart.setFieldSignature(a11y_explore_behavior.ExploreModeTrigger, () => ({
    __proto__: dart.getFields(a11y_explore_behavior.ExploreModeTrigger.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$16]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(a11y_explore_behavior.ExploreModeTrigger, ['toString']);
  a11y_explore_behavior.ExploreModeTrigger.pressHold = C[107] || CT.C107;
  a11y_explore_behavior.ExploreModeTrigger.tap = C[108] || CT.C108;
  a11y_explore_behavior.ExploreModeTrigger.values = C[109] || CT.C109;
  const _is_AxisSpec_default = Symbol('_is_AxisSpec_default');
  axis_spec.AxisSpec$ = dart.generic(D => {
    var AxisOfD = () => (AxisOfD = dart.constFn(axis$.Axis$(D)))();
    var MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    class AxisSpec extends core.Object {
      get showAxisLine() {
        return this[S$0.showAxisLine];
      }
      set showAxisLine(value) {
        super.showAxisLine = value;
      }
      get renderSpec() {
        return this[S$0.renderSpec];
      }
      set renderSpec(value) {
        super.renderSpec = value;
      }
      get tickProviderSpec() {
        return this[S$0.tickProviderSpec];
      }
      set tickProviderSpec(value) {
        super.tickProviderSpec = value;
      }
      get tickFormatterSpec() {
        return this[S$0.tickFormatterSpec];
      }
      set tickFormatterSpec(value) {
        super.tickFormatterSpec = value;
      }
      get scaleSpec() {
        return this[S$0.scaleSpec];
      }
      set scaleSpec(value) {
        super.scaleSpec = value;
      }
      static from(other, opts) {
        let t78, t78$, t78$0, t78$1, t78$2;
        let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
        let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
        let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
        let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
        let scaleSpec = opts && 'scaleSpec' in opts ? opts.scaleSpec : null;
        return new (axis_spec.AxisSpec$(D)).new({renderSpec: (t78 = renderSpec, t78 == null ? other.renderSpec : t78), tickProviderSpec: (t78$ = tickProviderSpec, t78$ == null ? other.tickProviderSpec : t78$), tickFormatterSpec: (t78$0 = tickFormatterSpec, t78$0 == null ? other.tickFormatterSpec : t78$0), showAxisLine: (t78$1 = showAxisLine, t78$1 == null ? other.showAxisLine : t78$1), scaleSpec: (t78$2 = scaleSpec, t78$2 == null ? other.scaleSpec : t78$2)});
      }
      configure(axis, context, graphicsFactory) {
        AxisOfD().as(axis);
        axis.resetDefaultConfiguration();
        if (this.showAxisLine != null) {
          axis.forceDrawAxisLine = this.showAxisLine;
        }
        if (this.renderSpec != null) {
          axis.tickDrawStrategy = dart.nullCheck(this.renderSpec).createDrawStrategy(context, graphicsFactory);
        }
        if (this.tickProviderSpec != null) {
          axis.tickProvider = dart.nullCheck(this.tickProviderSpec).createTickProvider(context);
        }
        if (this.tickFormatterSpec != null) {
          axis.tickFormatter = dart.nullCheck(this.tickFormatterSpec).createTickFormatter(context);
        }
        if (this.scaleSpec != null) {
          axis.scale = MutableScaleOfD().as(dart.nullCheck(this.scaleSpec).createScale());
        }
      }
      createAxis() {
        return null;
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || axis_spec.AxisSpec.is(other) && dart.equals(this.renderSpec, other.renderSpec) && dart.equals(this.tickProviderSpec, other.tickProviderSpec) && dart.equals(this.tickFormatterSpec, other.tickFormatterSpec) && this.showAxisLine == other.showAxisLine && dart.equals(this.scaleSpec, other.scaleSpec);
      }
      get hashCode() {
        let hashcode = dart.hashCode(this.renderSpec);
        hashcode = hashcode * 37 + dart.hashCode(this.tickProviderSpec);
        hashcode = hashcode * 37 + dart.hashCode(this.tickFormatterSpec);
        hashcode = hashcode * 37 + dart.hashCode(this.showAxisLine);
        hashcode = this.hashCode * 37 + dart.hashCode(this.scaleSpec);
        return hashcode;
      }
    }
    (AxisSpec.new = function(opts) {
      let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
      let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
      let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
      let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
      let scaleSpec = opts && 'scaleSpec' in opts ? opts.scaleSpec : null;
      this[S$0.renderSpec] = renderSpec;
      this[S$0.tickProviderSpec] = tickProviderSpec;
      this[S$0.tickFormatterSpec] = tickFormatterSpec;
      this[S$0.showAxisLine] = showAxisLine;
      this[S$0.scaleSpec] = scaleSpec;
      ;
    }).prototype = AxisSpec.prototype;
    dart.addTypeTests(AxisSpec);
    AxisSpec.prototype[_is_AxisSpec_default] = true;
    dart.addTypeCaches(AxisSpec);
    dart.setMethodSignature(AxisSpec, () => ({
      __proto__: dart.getMethods(AxisSpec.__proto__),
      configure: dart.fnType(dart.void, [dart.nullable(core.Object), chart_context.ChartContext, graphics_factory.GraphicsFactory]),
      createAxis: dart.fnType(dart.nullable(axis$.Axis$(D)), [])
    }));
    dart.setLibraryUri(AxisSpec, I[77]);
    dart.setFieldSignature(AxisSpec, () => ({
      __proto__: dart.getFields(AxisSpec.__proto__),
      showAxisLine: dart.finalFieldType(dart.nullable(core.bool)),
      renderSpec: dart.finalFieldType(dart.nullable(axis_spec.RenderSpec$(D))),
      tickProviderSpec: dart.finalFieldType(dart.nullable(axis_spec.TickProviderSpec$(D))),
      tickFormatterSpec: dart.finalFieldType(dart.nullable(axis_spec.TickFormatterSpec$(D))),
      scaleSpec: dart.finalFieldType(dart.nullable(axis_spec.ScaleSpec$(D)))
    }));
    dart.defineExtensionMethods(AxisSpec, ['_equals']);
    dart.defineExtensionAccessors(AxisSpec, ['hashCode']);
    return AxisSpec;
  });
  axis_spec.AxisSpec = axis_spec.AxisSpec$();
  dart.addTypeTests(axis_spec.AxisSpec, _is_AxisSpec_default);
  numeric_axis_spec.NumericAxisSpec = class NumericAxisSpec extends axis_spec.AxisSpec$(core.num) {
    get viewport() {
      return this[S$0.viewport];
    }
    set viewport(value) {
      super.viewport = value;
    }
    static from(other, opts) {
      let t78, t78$, t78$0, t78$1, t78$2;
      let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
      let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
      let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
      let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
      let viewport = opts && 'viewport' in opts ? opts.viewport : null;
      return new numeric_axis_spec.NumericAxisSpec.new({renderSpec: (t78 = renderSpec, t78 == null ? other.renderSpec : t78), tickProviderSpec: T$0.NumericTickProviderSpecN().as((t78$ = tickProviderSpec, t78$ == null ? other.tickProviderSpec : t78$)), tickFormatterSpec: T$0.NumericTickFormatterSpecN().as((t78$0 = tickFormatterSpec, t78$0 == null ? other.tickFormatterSpec : t78$0)), showAxisLine: (t78$1 = showAxisLine, t78$1 == null ? other.showAxisLine : t78$1), viewport: (t78$2 = viewport, t78$2 == null ? other.viewport : t78$2)});
    }
    configure(axis, context, graphicsFactory) {
      T$.AxisOfnum().as(axis);
      super.configure(axis, context, graphicsFactory);
      if (axis$.NumericAxis.is(axis) && this.viewport != null) {
        axis.setScaleViewport(dart.nullCheck(this.viewport));
      }
    }
    createAxis() {
      return new axis$.NumericAxis.new();
    }
    _equals(other) {
      if (other == null) return false;
      return numeric_axis_spec.NumericAxisSpec.is(other) && dart.equals(this.viewport, other.viewport) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = hashcode * 37 + dart.hashCode(this.viewport);
      hashcode = hashcode * 37 + super.hashCode;
      return hashcode;
    }
  };
  (numeric_axis_spec.NumericAxisSpec.new = function(opts) {
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    this[S$0.viewport] = viewport;
    numeric_axis_spec.NumericAxisSpec.__proto__.new.call(this, {renderSpec: renderSpec, tickProviderSpec: tickProviderSpec, tickFormatterSpec: tickFormatterSpec, showAxisLine: showAxisLine});
    ;
  }).prototype = numeric_axis_spec.NumericAxisSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.NumericAxisSpec);
  dart.addTypeCaches(numeric_axis_spec.NumericAxisSpec);
  dart.setMethodSignature(numeric_axis_spec.NumericAxisSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.NumericAxisSpec.__proto__),
    createAxis: dart.fnType(axis$.NumericAxis, [])
  }));
  dart.setLibraryUri(numeric_axis_spec.NumericAxisSpec, I[78]);
  dart.setFieldSignature(numeric_axis_spec.NumericAxisSpec, () => ({
    __proto__: dart.getFields(numeric_axis_spec.NumericAxisSpec.__proto__),
    viewport: dart.finalFieldType(dart.nullable(numeric_extents.NumericExtents))
  }));
  dart.defineExtensionMethods(numeric_axis_spec.NumericAxisSpec, ['_equals']);
  dart.defineExtensionAccessors(numeric_axis_spec.NumericAxisSpec, ['hashCode']);
  percent_axis_spec.PercentAxisSpec = class PercentAxisSpec extends numeric_axis_spec.NumericAxisSpec {
    _equals(other) {
      if (other == null) return false;
      return percent_axis_spec.PercentAxisSpec.is(other) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = hashcode * 37 + this[S$.$runtimeType].hashCode;
      return hashcode;
    }
  };
  (percent_axis_spec.PercentAxisSpec.new = function(opts) {
    let t78, t78$, t78$0;
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    percent_axis_spec.PercentAxisSpec.__proto__.new.call(this, {renderSpec: renderSpec, tickProviderSpec: (t78 = tickProviderSpec, t78 == null ? C[110] || CT.C110 : t78), tickFormatterSpec: (t78$ = tickFormatterSpec, t78$ == null ? new numeric_axis_spec.BasicNumericTickFormatterSpec.fromNumberFormat(number_format.NumberFormat.percentPattern()) : t78$), showAxisLine: showAxisLine, viewport: (t78$0 = viewport, t78$0 == null ? C[111] || CT.C111 : t78$0)});
    ;
  }).prototype = percent_axis_spec.PercentAxisSpec.prototype;
  dart.addTypeTests(percent_axis_spec.PercentAxisSpec);
  dart.addTypeCaches(percent_axis_spec.PercentAxisSpec);
  dart.setLibraryUri(percent_axis_spec.PercentAxisSpec, I[79]);
  dart.defineExtensionMethods(percent_axis_spec.PercentAxisSpec, ['_equals']);
  dart.defineExtensionAccessors(percent_axis_spec.PercentAxisSpec, ['hashCode']);
  const _is_TickSpec_default = Symbol('_is_TickSpec_default');
  tick_spec.TickSpec$ = dart.generic(D => {
    class TickSpec extends core.Object {
      get value() {
        return this[S$0.value$2];
      }
      set value(value) {
        super.value = value;
      }
      get label() {
        return this[S$0.label$1];
      }
      set label(value) {
        super.label = value;
      }
      get style() {
        return this[S$0.style];
      }
      set style(value) {
        super.style = value;
      }
    }
    (TickSpec.new = function(value, opts) {
      let label = opts && 'label' in opts ? opts.label : null;
      let style = opts && 'style' in opts ? opts.style : null;
      this[S$0.value$2] = value;
      this[S$0.label$1] = label;
      this[S$0.style] = style;
      ;
    }).prototype = TickSpec.prototype;
    dart.addTypeTests(TickSpec);
    TickSpec.prototype[_is_TickSpec_default] = true;
    dart.addTypeCaches(TickSpec);
    dart.setLibraryUri(TickSpec, I[80]);
    dart.setFieldSignature(TickSpec, () => ({
      __proto__: dart.getFields(TickSpec.__proto__),
      value: dart.finalFieldType(D),
      label: dart.finalFieldType(dart.nullable(core.String)),
      style: dart.finalFieldType(dart.nullable(axis_spec.TextStyleSpec))
    }));
    return TickSpec;
  });
  tick_spec.TickSpec = tick_spec.TickSpec$();
  dart.addTypeTests(tick_spec.TickSpec, _is_TickSpec_default);
  const _is_RangeTickSpec_default = Symbol('_is_RangeTickSpec_default');
  range_tick_spec.RangeTickSpec$ = dart.generic(D => {
    class RangeTickSpec extends tick_spec.TickSpec$(D) {
      get rangeStartValue() {
        return this[S$0.rangeStartValue];
      }
      set rangeStartValue(value) {
        super.rangeStartValue = value;
      }
      get rangeEndValue() {
        return this[S$0.rangeEndValue];
      }
      set rangeEndValue(value) {
        super.rangeEndValue = value;
      }
    }
    (RangeTickSpec.new = function(value, opts) {
      let label = opts && 'label' in opts ? opts.label : null;
      let style = opts && 'style' in opts ? opts.style : null;
      let rangeStartValue = opts && 'rangeStartValue' in opts ? opts.rangeStartValue : null;
      let rangeEndValue = opts && 'rangeEndValue' in opts ? opts.rangeEndValue : null;
      this[S$0.rangeStartValue] = rangeStartValue;
      this[S$0.rangeEndValue] = rangeEndValue;
      RangeTickSpec.__proto__.new.call(this, value, {label: label, style: style});
      ;
    }).prototype = RangeTickSpec.prototype;
    dart.addTypeTests(RangeTickSpec);
    RangeTickSpec.prototype[_is_RangeTickSpec_default] = true;
    dart.addTypeCaches(RangeTickSpec);
    dart.setLibraryUri(RangeTickSpec, I[81]);
    dart.setFieldSignature(RangeTickSpec, () => ({
      __proto__: dart.getFields(RangeTickSpec.__proto__),
      rangeStartValue: dart.finalFieldType(D),
      rangeEndValue: dart.finalFieldType(D)
    }));
    return RangeTickSpec;
  });
  range_tick_spec.RangeTickSpec = range_tick_spec.RangeTickSpec$();
  dart.addTypeTests(range_tick_spec.RangeTickSpec, _is_RangeTickSpec_default);
  const _is_TickProvider_default = Symbol('_is_TickProvider_default');
  tick_provider.TickProvider$ = dart.generic(D => {
    class TickProvider extends core.Object {}
    (TickProvider.new = function() {
      ;
    }).prototype = TickProvider.prototype;
    dart.addTypeTests(TickProvider);
    TickProvider.prototype[_is_TickProvider_default] = true;
    dart.addTypeCaches(TickProvider);
    dart.setLibraryUri(TickProvider, I[82]);
    return TickProvider;
  });
  tick_provider.TickProvider = tick_provider.TickProvider$();
  dart.addTypeTests(tick_provider.TickProvider, _is_TickProvider_default);
  const _is_RangeTickProvider_default = Symbol('_is_RangeTickProvider_default');
  range_tick_provider.RangeTickProvider$ = dart.generic(D => {
    var MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    var TickFormatterOfD = () => (TickFormatterOfD = dart.constFn(tick_formatter.TickFormatter$(D)))();
    var MapOfD$String = () => (MapOfD$String = dart.constFn(core.Map$(D, core.String)))();
    var TickDrawStrategyOfD = () => (TickDrawStrategyOfD = dart.constFn(tick_draw_strategy.TickDrawStrategy$(D)))();
    var TickHintOfD = () => (TickHintOfD = dart.constFn(tick_provider.TickHint$(D)))();
    var TickHintNOfD = () => (TickHintNOfD = dart.constFn(dart.nullable(TickHintOfD())))();
    var TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    var JSArrayOfTickOfD = () => (JSArrayOfTickOfD = dart.constFn(_interceptors.JSArray$(TickOfD())))();
    var RangeTickSpecOfD = () => (RangeTickSpecOfD = dart.constFn(range_tick_spec.RangeTickSpec$(D)))();
    var TickSpecOfD = () => (TickSpecOfD = dart.constFn(tick_spec.TickSpec$(D)))();
    var TickSpecOfDToD = () => (TickSpecOfDToD = dart.constFn(dart.fnType(D, [TickSpecOfD()])))();
    var RangeTickOfD = () => (RangeTickOfD = dart.constFn(range_tick.RangeTick$(D)))();
    class RangeTickProvider extends tick_provider.TickProvider$(D) {
      get tickSpec() {
        return this[S$0.tickSpec];
      }
      set tickSpec(value) {
        super.tickSpec = value;
      }
      getTicks(opts) {
        let t78, t78$, t78$0, t78$1;
        let context = opts && 'context' in opts ? opts.context : null;
        let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
        let scale = opts && 'scale' in opts ? opts.scale : null;
        MutableScaleOfD().as(scale);
        let formatter = opts && 'formatter' in opts ? opts.formatter : null;
        TickFormatterOfD().as(formatter);
        let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
        MapOfD$String().as(formatterValueCache);
        let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
        TickDrawStrategyOfD().as(tickDrawStrategy);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
        let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
        TickHintNOfD().as(tickHint);
        let ticks = JSArrayOfTickOfD().of([]);
        let allTicksHaveLabels = true;
        for (let spec of this.tickSpec) {
          if (numeric_scale.NumericScale.is(scale) || date_time_scale.DateTimeScale.is(scale)) {
            scale.addDomain(spec.value);
            if (RangeTickSpecOfD().is(spec)) {
              scale.addDomain(spec.rangeStartValue);
              scale.addDomain(spec.rangeEndValue);
            }
          }
          allTicksHaveLabels = !!(allTicksHaveLabels & spec.label != null);
        }
        let formattedValues = null;
        if (!allTicksHaveLabels) {
          formattedValues = formatter.format(this.tickSpec[S$.$map](D, dart.fn(spec => spec.value, TickSpecOfDToD()))[S$.$toList](), formatterValueCache, {stepSize: scale.domainStepSize});
        }
        for (let i = 0; i < this.tickSpec[S$.$length]; i = i + 1) {
          let spec = this.tickSpec[S$.$_get](i);
          let tick = null;
          if (RangeTickSpecOfD().is(spec)) {
            if (scale.compareDomainValueToViewport(spec.rangeStartValue) === 0 && scale.compareDomainValueToViewport(spec.rangeEndValue) === 0) {
              tick = new (RangeTickOfD()).new({value: spec.value, textElement: graphicsFactory.createTextElement((t78 = spec.label, t78 == null ? dart.nullCheck(formattedValues)[S$.$_get](i) : t78)), locationPx: (dart.nullCheck(scale._get(spec.rangeStartValue)) + (dart.nullCheck(scale._get(spec.rangeEndValue)) - dart.nullCheck(scale._get(spec.rangeStartValue))) / 2)[S$.$toDouble](), rangeStartValue: spec.rangeStartValue, rangeStartLocationPx: dart.nullCheck(scale._get(spec.rangeStartValue))[S$.$toDouble](), rangeEndValue: spec.rangeEndValue, rangeEndLocationPx: dart.nullCheck(scale._get(spec.rangeEndValue))[S$.$toDouble]()});
            }
          } else {
            if (scale.compareDomainValueToViewport(spec.value) === 0) {
              tick = new (TickOfD()).new({value: spec.value, textElement: graphicsFactory.createTextElement((t78$ = spec.label, t78$ == null ? dart.nullCheck(formattedValues)[S$.$_get](i) : t78$)), locationPx: (t78$0 = scale._get(spec.value), t78$0 == null ? null : t78$0[S$.$toDouble]())});
            }
          }
          if (tick != null) {
            let style = spec.style;
            if (style != null) {
              dart.nullCheck(tick.textElement).textStyle = (t78$1 = graphicsFactory.createTextPaint(), (() => {
                t78$1.fontFamily = style.fontFamily;
                t78$1.fontSize = style.fontSize;
                t78$1.color = style.color;
                t78$1.lineHeight = style.lineHeight;
                return t78$1;
              })());
            }
            ticks[S$.$add](tick);
          }
        }
        tickDrawStrategy.decorateTicks(ticks);
        return ticks;
      }
      _equals(other) {
        if (other == null) return false;
        return range_tick_provider.RangeTickProvider.is(other) && this.tickSpec[S$.$_equals](other.tickSpec);
      }
      get hashCode() {
        return this.tickSpec[S$.$hashCode];
      }
    }
    (RangeTickProvider.new = function(tickSpec) {
      this[S$0.tickSpec] = tickSpec;
      ;
    }).prototype = RangeTickProvider.prototype;
    dart.addTypeTests(RangeTickProvider);
    RangeTickProvider.prototype[_is_RangeTickProvider_default] = true;
    dart.addTypeCaches(RangeTickProvider);
    dart.setMethodSignature(RangeTickProvider, () => ({
      __proto__: dart.getMethods(RangeTickProvider.__proto__),
      getTicks: dart.fnType(core.List$(tick.Tick$(D)), [], {context: dart.nullable(chart_context.ChartContext), formatter: dart.nullable(core.Object), formatterValueCache: dart.nullable(core.Object), graphicsFactory: graphics_factory.GraphicsFactory, orientation: dart.nullable(axis$.AxisOrientation), scale: dart.nullable(core.Object), tickDrawStrategy: dart.nullable(core.Object), tickHint: dart.nullable(core.Object), viewportExtensionEnabled: core.bool}, {})
    }));
    dart.setLibraryUri(RangeTickProvider, I[83]);
    dart.setFieldSignature(RangeTickProvider, () => ({
      __proto__: dart.getFields(RangeTickProvider.__proto__),
      tickSpec: dart.finalFieldType(core.List$(tick_spec.TickSpec$(D)))
    }));
    dart.defineExtensionMethods(RangeTickProvider, ['_equals']);
    dart.defineExtensionAccessors(RangeTickProvider, ['hashCode']);
    return RangeTickProvider;
  });
  range_tick_provider.RangeTickProvider = range_tick_provider.RangeTickProvider$();
  dart.addTypeTests(range_tick_provider.RangeTickProvider, _is_RangeTickProvider_default);
  ordinal_axis_spec.OrdinalAxisSpec = class OrdinalAxisSpec extends axis_spec.AxisSpec$(core.String) {
    get viewport() {
      return this[S$0.viewport$1];
    }
    set viewport(value) {
      super.viewport = value;
    }
    configure(axis, context, graphicsFactory) {
      T$0.AxisOfString().as(axis);
      super.configure(axis, context, graphicsFactory);
      if (axis$.OrdinalAxis.is(axis) && this.viewport != null) {
        axis.setScaleViewport(dart.nullCheck(this.viewport));
      }
    }
    createAxis() {
      return new axis$.OrdinalAxis.new();
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || ordinal_axis_spec.OrdinalAxisSpec.is(other) && dart.equals(this.viewport, other.viewport) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = hashcode * 37 + dart.hashCode(this.viewport);
      return hashcode;
    }
  };
  (ordinal_axis_spec.OrdinalAxisSpec.new = function(opts) {
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let scaleSpec = opts && 'scaleSpec' in opts ? opts.scaleSpec : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    this[S$0.viewport$1] = viewport;
    ordinal_axis_spec.OrdinalAxisSpec.__proto__.new.call(this, {renderSpec: renderSpec, tickProviderSpec: tickProviderSpec, tickFormatterSpec: tickFormatterSpec, showAxisLine: showAxisLine, scaleSpec: scaleSpec});
    ;
  }).prototype = ordinal_axis_spec.OrdinalAxisSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.OrdinalAxisSpec);
  dart.addTypeCaches(ordinal_axis_spec.OrdinalAxisSpec);
  dart.setMethodSignature(ordinal_axis_spec.OrdinalAxisSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.OrdinalAxisSpec.__proto__),
    createAxis: dart.fnType(axis$.OrdinalAxis, [])
  }));
  dart.setLibraryUri(ordinal_axis_spec.OrdinalAxisSpec, I[84]);
  dart.setFieldSignature(ordinal_axis_spec.OrdinalAxisSpec, () => ({
    __proto__: dart.getFields(ordinal_axis_spec.OrdinalAxisSpec.__proto__),
    viewport: dart.finalFieldType(dart.nullable(axis$.OrdinalViewport))
  }));
  dart.defineExtensionMethods(ordinal_axis_spec.OrdinalAxisSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.OrdinalAxisSpec, ['hashCode']);
  const _is_TickProviderSpec_default = Symbol('_is_TickProviderSpec_default');
  axis_spec.TickProviderSpec$ = dart.generic(D => {
    class TickProviderSpec extends core.Object {}
    (TickProviderSpec.new = function() {
      ;
    }).prototype = TickProviderSpec.prototype;
    dart.addTypeTests(TickProviderSpec);
    TickProviderSpec.prototype[_is_TickProviderSpec_default] = true;
    dart.addTypeCaches(TickProviderSpec);
    dart.setLibraryUri(TickProviderSpec, I[77]);
    return TickProviderSpec;
  });
  axis_spec.TickProviderSpec = axis_spec.TickProviderSpec$();
  dart.addTypeTests(axis_spec.TickProviderSpec, _is_TickProviderSpec_default);
  ordinal_axis_spec.OrdinalTickProviderSpec = class OrdinalTickProviderSpec extends axis_spec.TickProviderSpec$(core.String) {};
  (ordinal_axis_spec.OrdinalTickProviderSpec.new = function() {
    ;
  }).prototype = ordinal_axis_spec.OrdinalTickProviderSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.OrdinalTickProviderSpec);
  dart.addTypeCaches(ordinal_axis_spec.OrdinalTickProviderSpec);
  dart.setLibraryUri(ordinal_axis_spec.OrdinalTickProviderSpec, I[84]);
  const _is_TickFormatterSpec_default = Symbol('_is_TickFormatterSpec_default');
  axis_spec.TickFormatterSpec$ = dart.generic(D => {
    class TickFormatterSpec extends core.Object {}
    (TickFormatterSpec.new = function() {
      ;
    }).prototype = TickFormatterSpec.prototype;
    dart.addTypeTests(TickFormatterSpec);
    TickFormatterSpec.prototype[_is_TickFormatterSpec_default] = true;
    dart.addTypeCaches(TickFormatterSpec);
    dart.setLibraryUri(TickFormatterSpec, I[77]);
    return TickFormatterSpec;
  });
  axis_spec.TickFormatterSpec = axis_spec.TickFormatterSpec$();
  dart.addTypeTests(axis_spec.TickFormatterSpec, _is_TickFormatterSpec_default);
  ordinal_axis_spec.OrdinalTickFormatterSpec = class OrdinalTickFormatterSpec extends axis_spec.TickFormatterSpec$(core.String) {};
  (ordinal_axis_spec.OrdinalTickFormatterSpec.new = function() {
    ;
  }).prototype = ordinal_axis_spec.OrdinalTickFormatterSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.OrdinalTickFormatterSpec);
  dart.addTypeCaches(ordinal_axis_spec.OrdinalTickFormatterSpec);
  dart.setLibraryUri(ordinal_axis_spec.OrdinalTickFormatterSpec, I[84]);
  const _is_ScaleSpec_default = Symbol('_is_ScaleSpec_default');
  axis_spec.ScaleSpec$ = dart.generic(D => {
    class ScaleSpec extends core.Object {}
    (ScaleSpec.new = function() {
      ;
    }).prototype = ScaleSpec.prototype;
    dart.addTypeTests(ScaleSpec);
    ScaleSpec.prototype[_is_ScaleSpec_default] = true;
    dart.addTypeCaches(ScaleSpec);
    dart.setLibraryUri(ScaleSpec, I[77]);
    return ScaleSpec;
  });
  axis_spec.ScaleSpec = axis_spec.ScaleSpec$();
  dart.addTypeTests(axis_spec.ScaleSpec, _is_ScaleSpec_default);
  ordinal_axis_spec.OrdinalScaleSpec = class OrdinalScaleSpec extends axis_spec.ScaleSpec$(core.String) {};
  (ordinal_axis_spec.OrdinalScaleSpec.new = function() {
    ;
  }).prototype = ordinal_axis_spec.OrdinalScaleSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.OrdinalScaleSpec);
  dart.addTypeCaches(ordinal_axis_spec.OrdinalScaleSpec);
  dart.setLibraryUri(ordinal_axis_spec.OrdinalScaleSpec, I[84]);
  ordinal_axis_spec.BasicOrdinalTickProviderSpec = class BasicOrdinalTickProviderSpec extends core.Object {
    createTickProvider(context) {
      return new ordinal_tick_provider.OrdinalTickProvider.new();
    }
    _equals(other) {
      if (other == null) return false;
      return ordinal_axis_spec.BasicOrdinalTickProviderSpec.is(other);
    }
    get hashCode() {
      return 37;
    }
  };
  (ordinal_axis_spec.BasicOrdinalTickProviderSpec.new = function() {
    ;
  }).prototype = ordinal_axis_spec.BasicOrdinalTickProviderSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.BasicOrdinalTickProviderSpec);
  dart.addTypeCaches(ordinal_axis_spec.BasicOrdinalTickProviderSpec);
  ordinal_axis_spec.BasicOrdinalTickProviderSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalTickProviderSpec];
  dart.setMethodSignature(ordinal_axis_spec.BasicOrdinalTickProviderSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.BasicOrdinalTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(ordinal_tick_provider.OrdinalTickProvider, [chart_context.ChartContext])
  }));
  dart.setLibraryUri(ordinal_axis_spec.BasicOrdinalTickProviderSpec, I[84]);
  dart.defineExtensionMethods(ordinal_axis_spec.BasicOrdinalTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.BasicOrdinalTickProviderSpec, ['hashCode']);
  ordinal_axis_spec.StaticOrdinalTickProviderSpec = class StaticOrdinalTickProviderSpec extends core.Object {
    get tickSpecs() {
      return this[S$0.tickSpecs];
    }
    set tickSpecs(value) {
      super.tickSpecs = value;
    }
    createTickProvider(context) {
      return new (T$0.StaticTickProviderOfString()).new(this.tickSpecs);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || ordinal_axis_spec.StaticOrdinalTickProviderSpec.is(other) && this.tickSpecs[S$.$_equals](other.tickSpecs);
    }
    get hashCode() {
      return this.tickSpecs[S$.$hashCode];
    }
  };
  (ordinal_axis_spec.StaticOrdinalTickProviderSpec.new = function(tickSpecs) {
    this[S$0.tickSpecs] = tickSpecs;
    ;
  }).prototype = ordinal_axis_spec.StaticOrdinalTickProviderSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.StaticOrdinalTickProviderSpec);
  dart.addTypeCaches(ordinal_axis_spec.StaticOrdinalTickProviderSpec);
  ordinal_axis_spec.StaticOrdinalTickProviderSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalTickProviderSpec];
  dart.setMethodSignature(ordinal_axis_spec.StaticOrdinalTickProviderSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.StaticOrdinalTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(static_tick_provider.StaticTickProvider$(core.String), [chart_context.ChartContext])
  }));
  dart.setLibraryUri(ordinal_axis_spec.StaticOrdinalTickProviderSpec, I[84]);
  dart.setFieldSignature(ordinal_axis_spec.StaticOrdinalTickProviderSpec, () => ({
    __proto__: dart.getFields(ordinal_axis_spec.StaticOrdinalTickProviderSpec.__proto__),
    tickSpecs: dart.finalFieldType(core.List$(tick_spec.TickSpec$(core.String)))
  }));
  dart.defineExtensionMethods(ordinal_axis_spec.StaticOrdinalTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.StaticOrdinalTickProviderSpec, ['hashCode']);
  ordinal_axis_spec.RangeOrdinalTickProviderSpec = class RangeOrdinalTickProviderSpec extends core.Object {
    get tickSpecs() {
      return this[S$0.tickSpecs$1];
    }
    set tickSpecs(value) {
      super.tickSpecs = value;
    }
    createTickProvider(context) {
      return new (T$0.RangeTickProviderOfString()).new(this.tickSpecs);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || ordinal_axis_spec.RangeOrdinalTickProviderSpec.is(other) && this.tickSpecs[S$.$_equals](other.tickSpecs);
    }
    get hashCode() {
      return this.tickSpecs[S$.$hashCode];
    }
  };
  (ordinal_axis_spec.RangeOrdinalTickProviderSpec.new = function(tickSpecs) {
    this[S$0.tickSpecs$1] = tickSpecs;
    ;
  }).prototype = ordinal_axis_spec.RangeOrdinalTickProviderSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.RangeOrdinalTickProviderSpec);
  dart.addTypeCaches(ordinal_axis_spec.RangeOrdinalTickProviderSpec);
  ordinal_axis_spec.RangeOrdinalTickProviderSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalTickProviderSpec];
  dart.setMethodSignature(ordinal_axis_spec.RangeOrdinalTickProviderSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.RangeOrdinalTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(range_tick_provider.RangeTickProvider$(core.String), [chart_context.ChartContext])
  }));
  dart.setLibraryUri(ordinal_axis_spec.RangeOrdinalTickProviderSpec, I[84]);
  dart.setFieldSignature(ordinal_axis_spec.RangeOrdinalTickProviderSpec, () => ({
    __proto__: dart.getFields(ordinal_axis_spec.RangeOrdinalTickProviderSpec.__proto__),
    tickSpecs: dart.finalFieldType(core.List$(tick_spec.TickSpec$(core.String)))
  }));
  dart.defineExtensionMethods(ordinal_axis_spec.RangeOrdinalTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.RangeOrdinalTickProviderSpec, ['hashCode']);
  ordinal_axis_spec.BasicOrdinalTickFormatterSpec = class BasicOrdinalTickFormatterSpec extends core.Object {
    createTickFormatter(context) {
      return new tick_formatter.OrdinalTickFormatter.new();
    }
    _equals(other) {
      if (other == null) return false;
      return ordinal_axis_spec.BasicOrdinalTickFormatterSpec.is(other);
    }
    get hashCode() {
      return 37;
    }
  };
  (ordinal_axis_spec.BasicOrdinalTickFormatterSpec.new = function() {
    ;
  }).prototype = ordinal_axis_spec.BasicOrdinalTickFormatterSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.BasicOrdinalTickFormatterSpec);
  dart.addTypeCaches(ordinal_axis_spec.BasicOrdinalTickFormatterSpec);
  ordinal_axis_spec.BasicOrdinalTickFormatterSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalTickFormatterSpec];
  dart.setMethodSignature(ordinal_axis_spec.BasicOrdinalTickFormatterSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.BasicOrdinalTickFormatterSpec.__proto__),
    createTickFormatter: dart.fnType(tick_formatter.OrdinalTickFormatter, [chart_context.ChartContext])
  }));
  dart.setLibraryUri(ordinal_axis_spec.BasicOrdinalTickFormatterSpec, I[84]);
  dart.defineExtensionMethods(ordinal_axis_spec.BasicOrdinalTickFormatterSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.BasicOrdinalTickFormatterSpec, ['hashCode']);
  ordinal_axis_spec.SimpleOrdinalScaleSpec = class SimpleOrdinalScaleSpec extends core.Object {
    createScale() {
      return new simple_ordinal_scale.SimpleOrdinalScale.new();
    }
    _equals(other) {
      if (other == null) return false;
      return ordinal_axis_spec.SimpleOrdinalScaleSpec.is(other);
    }
    get hashCode() {
      return 37;
    }
  };
  (ordinal_axis_spec.SimpleOrdinalScaleSpec.new = function() {
    ;
  }).prototype = ordinal_axis_spec.SimpleOrdinalScaleSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.SimpleOrdinalScaleSpec);
  dart.addTypeCaches(ordinal_axis_spec.SimpleOrdinalScaleSpec);
  ordinal_axis_spec.SimpleOrdinalScaleSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalScaleSpec];
  dart.setMethodSignature(ordinal_axis_spec.SimpleOrdinalScaleSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.SimpleOrdinalScaleSpec.__proto__),
    createScale: dart.fnType(ordinal_scale.OrdinalScale, [])
  }));
  dart.setLibraryUri(ordinal_axis_spec.SimpleOrdinalScaleSpec, I[84]);
  dart.defineExtensionMethods(ordinal_axis_spec.SimpleOrdinalScaleSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.SimpleOrdinalScaleSpec, ['hashCode']);
  ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec = class FixedPixelSpaceOrdinalScaleSpec extends core.Object {
    get pixelSpaceBetweenBars() {
      return this[S$0.pixelSpaceBetweenBars];
    }
    set pixelSpaceBetweenBars(value) {
      super.pixelSpaceBetweenBars = value;
    }
    createScale() {
      let t78;
      t78 = new simple_ordinal_scale.SimpleOrdinalScale.new();
      return (() => {
        t78.rangeBandConfig = new scale$.RangeBandConfig.fixedPixelSpaceBetweenStep(this.pixelSpaceBetweenBars);
        return t78;
      })();
    }
    _equals(other) {
      if (other == null) return false;
      return ordinal_axis_spec.SimpleOrdinalScaleSpec.is(other);
    }
    get hashCode() {
      return 37;
    }
  };
  (ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec.new = function(pixelSpaceBetweenBars) {
    this[S$0.pixelSpaceBetweenBars] = pixelSpaceBetweenBars;
    ;
  }).prototype = ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec);
  dart.addTypeCaches(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec);
  ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalScaleSpec];
  dart.setMethodSignature(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec.__proto__),
    createScale: dart.fnType(ordinal_scale.OrdinalScale, [])
  }));
  dart.setLibraryUri(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec, I[84]);
  dart.setFieldSignature(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec, () => ({
    __proto__: dart.getFields(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec.__proto__),
    pixelSpaceBetweenBars: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec, ['hashCode']);
  ordinal_axis_spec.FixedPixelOrdinalScaleSpec = class FixedPixelOrdinalScaleSpec extends core.Object {
    get pixels() {
      return this[S$0.pixels];
    }
    set pixels(value) {
      super.pixels = value;
    }
    createScale() {
      let t78;
      t78 = new simple_ordinal_scale.SimpleOrdinalScale.new();
      return (() => {
        t78.rangeBandConfig = new scale$.RangeBandConfig.fixedPixel(this.pixels);
        return t78;
      })();
    }
    _equals(other) {
      if (other == null) return false;
      return ordinal_axis_spec.SimpleOrdinalScaleSpec.is(other);
    }
    get hashCode() {
      return 37;
    }
  };
  (ordinal_axis_spec.FixedPixelOrdinalScaleSpec.new = function(pixels) {
    this[S$0.pixels] = pixels;
    ;
  }).prototype = ordinal_axis_spec.FixedPixelOrdinalScaleSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.FixedPixelOrdinalScaleSpec);
  dart.addTypeCaches(ordinal_axis_spec.FixedPixelOrdinalScaleSpec);
  ordinal_axis_spec.FixedPixelOrdinalScaleSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalScaleSpec];
  dart.setMethodSignature(ordinal_axis_spec.FixedPixelOrdinalScaleSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.FixedPixelOrdinalScaleSpec.__proto__),
    createScale: dart.fnType(ordinal_scale.OrdinalScale, [])
  }));
  dart.setLibraryUri(ordinal_axis_spec.FixedPixelOrdinalScaleSpec, I[84]);
  dart.setFieldSignature(ordinal_axis_spec.FixedPixelOrdinalScaleSpec, () => ({
    __proto__: dart.getFields(ordinal_axis_spec.FixedPixelOrdinalScaleSpec.__proto__),
    pixels: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ordinal_axis_spec.FixedPixelOrdinalScaleSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.FixedPixelOrdinalScaleSpec, ['hashCode']);
  date_time_axis_spec.DateTimeAxisSpec = class DateTimeAxisSpec extends axis_spec.AxisSpec$(core.DateTime) {
    get viewport() {
      return this[S$0.viewport$2];
    }
    set viewport(value) {
      super.viewport = value;
    }
    configure(axis, context, graphicsFactory) {
      T$0.AxisOfDateTime().as(axis);
      super.configure(axis, context, graphicsFactory);
      if (date_time_axis.DateTimeAxis.is(axis) && this.viewport != null) {
        axis.setScaleViewport(dart.nullCheck(this.viewport));
      }
    }
    createAxis() {
      if (!false) dart.assertFailed("Call createDateTimeAxis() to create a DateTimeAxis.", I[85], 86, 12, "false");
      return null;
    }
    createDateTimeAxis(dateTimeFactory) {
      return new date_time_axis.DateTimeAxis.new(dateTimeFactory);
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_axis_spec.DateTimeAxisSpec.is(other) && dart.equals(this.viewport, other.viewport) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = hashcode * 37 + dart.hashCode(this.viewport);
      return hashcode;
    }
  };
  (date_time_axis_spec.DateTimeAxisSpec.new = function(opts) {
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    this[S$0.viewport$2] = viewport;
    date_time_axis_spec.DateTimeAxisSpec.__proto__.new.call(this, {renderSpec: renderSpec, tickProviderSpec: tickProviderSpec, tickFormatterSpec: tickFormatterSpec, showAxisLine: showAxisLine});
    ;
  }).prototype = date_time_axis_spec.DateTimeAxisSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.DateTimeAxisSpec);
  dart.addTypeCaches(date_time_axis_spec.DateTimeAxisSpec);
  dart.setMethodSignature(date_time_axis_spec.DateTimeAxisSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.DateTimeAxisSpec.__proto__),
    createDateTimeAxis: dart.fnType(date_time_axis.DateTimeAxis, [date_time_factory.DateTimeFactory])
  }));
  dart.setLibraryUri(date_time_axis_spec.DateTimeAxisSpec, I[86]);
  dart.setFieldSignature(date_time_axis_spec.DateTimeAxisSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.DateTimeAxisSpec.__proto__),
    viewport: dart.finalFieldType(dart.nullable(date_time_extents.DateTimeExtents))
  }));
  dart.defineExtensionMethods(date_time_axis_spec.DateTimeAxisSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.DateTimeAxisSpec, ['hashCode']);
  end_points_time_axis_spec.EndPointsTimeAxisSpec = class EndPointsTimeAxisSpec extends date_time_axis_spec.DateTimeAxisSpec {
    _equals(other) {
      if (other == null) return false;
      return this === other || end_points_time_axis_spec.EndPointsTimeAxisSpec.is(other) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = hashcode * 37 + this[S$.$runtimeType].hashCode;
      return hashcode;
    }
  };
  (end_points_time_axis_spec.EndPointsTimeAxisSpec.new = function(opts) {
    let t78, t78$;
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    end_points_time_axis_spec.EndPointsTimeAxisSpec.__proto__.new.call(this, {renderSpec: (t78 = renderSpec, t78 == null ? C[112] || CT.C112 : t78), tickProviderSpec: (t78$ = tickProviderSpec, t78$ == null ? C[114] || CT.C114 : t78$), tickFormatterSpec: tickFormatterSpec, showAxisLine: showAxisLine, viewport: viewport});
    ;
  }).prototype = end_points_time_axis_spec.EndPointsTimeAxisSpec.prototype;
  dart.addTypeTests(end_points_time_axis_spec.EndPointsTimeAxisSpec);
  dart.addTypeCaches(end_points_time_axis_spec.EndPointsTimeAxisSpec);
  dart.setLibraryUri(end_points_time_axis_spec.EndPointsTimeAxisSpec, I[87]);
  dart.defineExtensionMethods(end_points_time_axis_spec.EndPointsTimeAxisSpec, ['_equals']);
  dart.defineExtensionAccessors(end_points_time_axis_spec.EndPointsTimeAxisSpec, ['hashCode']);
  date_time_tick_formatter.DateTimeTickFormatter = class DateTimeTickFormatter extends core.Object {
    static new(dateTimeFactory, opts) {
      let overrides = opts && 'overrides' in opts ? opts.overrides : null;
      let map = new (T$0.IdentityMapOfint$TimeTickFormatter()).from([60000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "mm", transitionFormat: "h mm", transitionField: time_tick_formatter_impl.CalendarField.hourOfDay}), 3600000, new hour_tick_formatter.HourTickFormatter.new({dateTimeFactory: dateTimeFactory, simpleFormat: "h", transitionFormat: "MMM d ha", noonFormat: "ha"}), 23 * 3600000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "d", transitionFormat: "MMM d", transitionField: time_tick_formatter_impl.CalendarField.month}), 28 * 86400000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "MMM", transitionFormat: "MMM yyyy", transitionField: time_tick_formatter_impl.CalendarField.year}), 364 * 86400000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "yyyy", transitionFormat: "yyyy", transitionField: time_tick_formatter_impl.CalendarField.year})]);
      if (overrides != null) {
        map[S$.$addAll](overrides);
      }
      return new date_time_tick_formatter.DateTimeTickFormatter._internal(map);
    }
    static withoutTime(dateTimeFactory) {
      return new date_time_tick_formatter.DateTimeTickFormatter._internal(new (T$0.IdentityMapOfint$TimeTickFormatter()).from([23 * 3600000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "d", transitionFormat: "MMM d", transitionField: time_tick_formatter_impl.CalendarField.month}), 28 * 86400000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "MMM", transitionFormat: "MMM yyyy", transitionField: time_tick_formatter_impl.CalendarField.year}), 365 * 86400000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "yyyy", transitionFormat: "yyyy", transitionField: time_tick_formatter_impl.CalendarField.year})]));
    }
    static uniform(formatter) {
      return new date_time_tick_formatter.DateTimeTickFormatter._internal(new (T$0.IdentityMapOfint$TimeTickFormatter()).from([-1, formatter]));
    }
    static withFormatters(formatters) {
      if (formatters === null || formatters[S$.$isEmpty]) {
        dart.throw(new core.ArgumentError.new("At least one TimeTickFormatter is required."));
      }
      return new date_time_tick_formatter.DateTimeTickFormatter._internal(formatters);
    }
    format(tickValues, cache, opts) {
      let t78, t78$, t78$0;
      T$0.ListOfDateTime().as(tickValues);
      T$0.MapOfDateTime$String().as(cache);
      let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
      let tickLabels = T$.JSArrayOfString().of([]);
      if (tickValues[S$.$isEmpty]) {
        return tickLabels;
      }
      let formatter = dart.nullCheck(this[S$0._timeFormatters][S$.$_get](this[S$0._timeFormatters][S$.$keys][S$.$first]));
      let formatterFound = false;
      if (this[S$0._timeFormatters][S$.$keys][S$.$first] === -1) {
        formatterFound = true;
      } else {
        let minTimeBetweenTicks = (t78$ = (t78 = stepSize, t78 == null ? null : t78[S$.$toInt]()), t78$ == null ? 0 : t78$);
        let keys = this[S$0._timeFormatters][S$.$keys][S$0.$iterator];
        while (keys.moveNext() && !formatterFound) {
          if (keys.current > minTimeBetweenTicks) {
            formatterFound = true;
          } else {
            formatter = dart.nullCheck(this[S$0._timeFormatters][S$.$_get](keys.current));
          }
        }
      }
      let tickValuesIt = tickValues[S$0.$iterator];
      let tickValue = (t78$0 = tickValuesIt, (() => {
        t78$0.moveNext();
        return t78$0;
      })()).current;
      let prevTickValue = tickValue;
      tickLabels[S$.$add](formatter.formatFirstTick(tickValue));
      while (tickValuesIt.moveNext()) {
        tickValue = tickValuesIt.current;
        if (formatter.isTransition(tickValue, prevTickValue)) {
          tickLabels[S$.$add](formatter.formatTransitionTick(tickValue));
        } else {
          tickLabels[S$.$add](formatter.formatSimpleTick(tickValue));
        }
        prevTickValue = tickValue;
      }
      return tickLabels;
    }
    static _checkPositiveAndSorted(values) {
      let t78;
      let valuesIterator = values[S$0.$iterator];
      let prev = (t78 = valuesIterator, (() => {
        t78.moveNext();
        return t78;
      })()).current;
      let isSorted = true;
      if (prev <= 0) {
        dart.throw(new core.ArgumentError.new("Formatter keys must be positive"));
      }
      while (valuesIterator.moveNext() && isSorted) {
        isSorted = prev < valuesIterator.current;
        prev = valuesIterator.current;
      }
      if (!isSorted) {
        dart.throw(new core.ArgumentError.new("Formatters must be sorted with keys in increasing order"));
      }
    }
  };
  (date_time_tick_formatter.DateTimeTickFormatter._internal = function(_timeFormatters) {
    this[S$0._timeFormatters] = _timeFormatters;
    if (this[S$0._timeFormatters][S$.$length] === 1) {
      return;
    }
    date_time_tick_formatter.DateTimeTickFormatter._checkPositiveAndSorted(this[S$0._timeFormatters][S$.$keys]);
  }).prototype = date_time_tick_formatter.DateTimeTickFormatter.prototype;
  dart.addTypeTests(date_time_tick_formatter.DateTimeTickFormatter);
  dart.addTypeCaches(date_time_tick_formatter.DateTimeTickFormatter);
  date_time_tick_formatter.DateTimeTickFormatter[dart.implements] = () => [tick_formatter.TickFormatter$(core.DateTime)];
  dart.setMethodSignature(date_time_tick_formatter.DateTimeTickFormatter, () => ({
    __proto__: dart.getMethods(date_time_tick_formatter.DateTimeTickFormatter.__proto__),
    format: dart.fnType(core.List$(core.String), [dart.nullable(core.Object), dart.nullable(core.Object)], {stepSize: dart.nullable(core.num)}, {})
  }));
  dart.setLibraryUri(date_time_tick_formatter.DateTimeTickFormatter, I[88]);
  dart.setFieldSignature(date_time_tick_formatter.DateTimeTickFormatter, () => ({
    __proto__: dart.getFields(date_time_tick_formatter.DateTimeTickFormatter.__proto__),
    [S$0._timeFormatters]: dart.finalFieldType(core.Map$(core.int, time_tick_formatter.TimeTickFormatter))
  }));
  dart.defineLazy(date_time_tick_formatter.DateTimeTickFormatter, {
    /*date_time_tick_formatter.DateTimeTickFormatter.SECOND*/get SECOND() {
      return 1000;
    },
    /*date_time_tick_formatter.DateTimeTickFormatter.MINUTE*/get MINUTE() {
      return 60000;
    },
    /*date_time_tick_formatter.DateTimeTickFormatter.HOUR*/get HOUR() {
      return 3600000;
    },
    /*date_time_tick_formatter.DateTimeTickFormatter.DAY*/get DAY() {
      return 86400000;
    },
    /*date_time_tick_formatter.DateTimeTickFormatter.ANY*/get ANY() {
      return -1;
    }
  }, false);
  const _is_ImmutableAxis_default = Symbol('_is_ImmutableAxis_default');
  axis$.ImmutableAxis$ = dart.generic(D => {
    class ImmutableAxis extends core.Object {}
    (ImmutableAxis.new = function() {
      ;
    }).prototype = ImmutableAxis.prototype;
    dart.addTypeTests(ImmutableAxis);
    ImmutableAxis.prototype[_is_ImmutableAxis_default] = true;
    dart.addTypeCaches(ImmutableAxis);
    dart.setLibraryUri(ImmutableAxis, I[90]);
    return ImmutableAxis;
  });
  axis$.ImmutableAxis = axis$.ImmutableAxis$();
  dart.addTypeTests(axis$.ImmutableAxis, _is_ImmutableAxis_default);
  const _is_Axis_default = Symbol('_is_Axis_default');
  axis$.Axis$ = dart.generic(D => {
    var LinkedMapOfD$String = () => (LinkedMapOfD$String = dart.constFn(_js_helper.LinkedMap$(D, core.String)))();
    var AxisTicksOfD = () => (AxisTicksOfD = dart.constFn(axis_tick.AxisTicks$(D)))();
    var JSArrayOfAxisTicksOfD = () => (JSArrayOfAxisTicksOfD = dart.constFn(_interceptors.JSArray$(AxisTicksOfD())))();
    var MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    var MutableScaleNOfD = () => (MutableScaleNOfD = dart.constFn(dart.nullable(MutableScaleOfD())))();
    var TickProviderOfD = () => (TickProviderOfD = dart.constFn(tick_provider.TickProvider$(D)))();
    var TickProviderNOfD = () => (TickProviderNOfD = dart.constFn(dart.nullable(TickProviderOfD())))();
    var TickDrawStrategyOfD = () => (TickDrawStrategyOfD = dart.constFn(tick_draw_strategy.TickDrawStrategy$(D)))();
    var TickDrawStrategyNOfD = () => (TickDrawStrategyNOfD = dart.constFn(dart.nullable(TickDrawStrategyOfD())))();
    var TickFormatterOfD = () => (TickFormatterOfD = dart.constFn(tick_formatter.TickFormatter$(D)))();
    var TickFormatterNOfD = () => (TickFormatterNOfD = dart.constFn(dart.nullable(TickFormatterOfD())))();
    var DN = () => (DN = dart.constFn(dart.nullable(D)))();
    var TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    var ListOfTickOfD = () => (ListOfTickOfD = dart.constFn(core.List$(TickOfD())))();
    var JSArrayOfTickOfD = () => (JSArrayOfTickOfD = dart.constFn(_interceptors.JSArray$(TickOfD())))();
    var TickOfDTobool = () => (TickOfDTobool = dart.constFn(dart.fnType(core.bool, [TickOfD()])))();
    var RangeTickOfD = () => (RangeTickOfD = dart.constFn(range_tick.RangeTick$(D)))();
    var RangeAxisTicksOfD = () => (RangeAxisTicksOfD = dart.constFn(range_axis_tick.RangeAxisTicks$(D)))();
    var TickOfDTovoid = () => (TickOfDTovoid = dart.constFn(dart.fnType(dart.void, [TickOfD()])))();
    var AxisTicksOfDTobool = () => (AxisTicksOfDTobool = dart.constFn(dart.fnType(core.bool, [AxisTicksOfD()])))();
    class Axis extends axis$.ImmutableAxis$(D) {
      get scale() {
        return this[S$0.scale];
      }
      set scale(value) {
        this[S$0.scale] = MutableScaleNOfD().as(value);
      }
      get tickProvider() {
        return this[S$0.tickProvider$1];
      }
      set tickProvider(value) {
        this[S$0.tickProvider$1] = TickProviderNOfD().as(value);
      }
      get tickDrawStrategy() {
        return this[S$0.tickDrawStrategy];
      }
      set tickDrawStrategy(value) {
        this[S$0.tickDrawStrategy] = TickDrawStrategyNOfD().as(value);
      }
      get axisOrientation() {
        return this[S$0.axisOrientation];
      }
      set axisOrientation(value) {
        this[S$0.axisOrientation] = value;
      }
      get context() {
        return this[S$0.context];
      }
      set context(value) {
        this[S$0.context] = value;
      }
      get reverseOutputRange() {
        return this[S$0.reverseOutputRange];
      }
      set reverseOutputRange(value) {
        this[S$0.reverseOutputRange] = value;
      }
      get autoViewport() {
        return this[S$0.autoViewport];
      }
      set autoViewport(value) {
        this[S$0.autoViewport] = value;
      }
      get forceDrawAxisLine() {
        return this[S$0.forceDrawAxisLine];
      }
      set forceDrawAxisLine(value) {
        this[S$0.forceDrawAxisLine] = value;
      }
      get lockAxis() {
        return this[S$0.lockAxis];
      }
      set lockAxis(value) {
        this[S$0.lockAxis] = value;
      }
      get layoutPaintOrder() {
        return this[S$0.layoutPaintOrder$6];
      }
      set layoutPaintOrder(value) {
        this[S$0.layoutPaintOrder$6] = value;
      }
      get hasTickCollision() {
        return this[S$0.hasTickCollision];
      }
      set hasTickCollision(value) {
        this[S$0.hasTickCollision] = value;
      }
      get graphicsFactory() {
        return this[S$0.graphicsFactory$8];
      }
      set graphicsFactory(value) {
        this[S$0.graphicsFactory$8] = value;
      }
      set tickFormatter(formatter) {
        TickFormatterNOfD().as(formatter);
        if (!dart.equals(this[S$0._tickFormatter], formatter)) {
          this[S$0._tickFormatter] = formatter;
          this[S$0._formatterValueCache][S$.$clear]();
        }
      }
      get tickFormatter() {
        return this[S$0._tickFormatter];
      }
      get mutableScale() {
        return this.scale;
      }
      get rangeBand() {
        return dart.nullCheck(this.scale).rangeBand;
      }
      get stepSize() {
        return dart.nullCheck(this.scale).stepSize;
      }
      get range() {
        return dart.nullCheck(this.scale).range;
      }
      setRangeBandConfig(rangeBandConfig) {
        dart.nullCheck(this.mutableScale).rangeBandConfig = rangeBandConfig;
      }
      get hasValidBarChartRangeBandConfig() {
        let t78, t78$;
        return (t78$ = (t78 = this.mutableScale, t78 == null ? null : t78.rangeBandConfig.type), t78$ == null ? scale$.RangeBandType.none : t78$) !== scale$.RangeBandType.none;
      }
      addDomainValue(domain) {
        D.as(domain);
        if (this.lockAxis) {
          return;
        }
        dart.nullCheck(this.scale).addDomain(domain);
      }
      resetDefaultConfiguration() {
        this.forceDrawAxisLine = null;
        this.autoViewport = true;
        this.scale = this[S$0._defaultScale];
        this[S$0._tickFormatter] = this[S$0._defaultTickFormatter];
        this.tickProvider = this[S$0._defaultTickProvider];
      }
      resetDomains() {
        if (this.lockAxis) {
          return;
        }
        this[S$0._formatterValueCache][S$.$clear]();
        let scale = dart.nullCheck(this.scale);
        scale.resetDomain();
        this.reverseOutputRange = false;
        if (this.autoViewport) {
          scale.resetViewportSettings();
        }
      }
      getLocation(domain) {
        DN().as(domain);
        if (domain != null) {
          let scale = dart.nullCheck(this.scale);
          let range = dart.nullCheck(scale.range);
          let domainLocation = dart.nullCheck(scale._get(domain))[S$.$toDouble]();
          if (domainLocation > range.max && domainLocation - 2e-10 < range.max) {
            return domainLocation - 2e-10;
          } else if (domainLocation < range.min && domainLocation + 2e-10 > range.min) {
            return domainLocation + 2e-10;
          }
          return domainLocation;
        }
        return null;
      }
      getDomain(location) {
        return dart.nullCheck(this.scale).reverse(location);
      }
      compareDomainValueToViewport(domain) {
        D.as(domain);
        return dart.nullCheck(this.scale).compareDomainValueToViewport(domain);
      }
      setOutputRange(start, end) {
        dart.nullCheck(this.scale).range = new scale$.ScaleOutputExtent.new(start, end);
      }
      updateTicks() {
        this[S$0._updateProvidedTicks]();
        if (this[S$0._componentBounds$3] != null) {
          this[S$0._updateProvidedTickWidth](dart.nullCheck(this[S$0._componentBounds$3])[S$.$width], dart.nullCheck(this[S$0._componentBounds$3])[S$.$height]);
        }
        this[S$0._updateAxisTicks]();
      }
      [S$0._updateProvidedTicks]() {
        if (this.lockAxis) {
          return;
        }
        if (!(this.graphicsFactory != null)) dart.assertFailed("Axis<D>.graphicsFactory must be set first", I[89], 297, 9, "graphicsFactory != null");
        if (!(this.tickDrawStrategy != null)) dart.assertFailed("Axis<D>.tickDrawStrategy must be set first", I[89], 299, 9, "tickDrawStrategy != null");
        this[S$0._providedTicks] = dart.nullCheck(this.tickProvider).getTicks({context: this.context, graphicsFactory: dart.nullCheck(this.graphicsFactory), scale: dart.nullCheck(this.scale), formatter: dart.nullCheck(this.tickFormatter), formatterValueCache: this[S$0._formatterValueCache], tickDrawStrategy: dart.nullCheck(this.tickDrawStrategy), orientation: this.axisOrientation, viewportExtensionEnabled: this.autoViewport});
        this.hasTickCollision = dart.nullCheck(this.tickDrawStrategy).collides(this[S$0._providedTicks], this.axisOrientation).ticksCollide;
      }
      [S$0._updateProvidedTickWidth](maxWidth, maxHeight) {
        if (this.axisOrientation != null) {
          dart.nullCheck(this.tickDrawStrategy).updateTickWidth(dart.nullCheck(this[S$0._providedTicks]), maxWidth, maxHeight, dart.nullCheck(this.axisOrientation), {collision: this.hasTickCollision});
        }
      }
      [S$0._updateAxisTicks]() {
        let t78, t78$;
        if (this.lockAxis) {
          return;
        }
        let providedTicks = ListOfTickOfD().of((t78 = this[S$0._providedTicks], t78 == null ? JSArrayOfTickOfD().of([]) : t78));
        let scale = dart.nullCheck(this.scale);
        for (let animatedTick of this[S$0._axisTicks]) {
          let tick = iterable_extensions['IterableExtension|firstWhereOrNull'](TickOfD(), providedTicks, dart.fn(t => dart.equals(t.value, animatedTick.value), TickOfDTobool()));
          if (tick != null) {
            if (!text_element.TextElement.elementSettingsSame(dart.nullCheck(animatedTick.textElement), dart.nullCheck(tick.textElement))) {
              animatedTick.textElement = tick.textElement;
            }
            let newTarget = (t78$ = scale._get(tick.value), t78$ == null ? null : t78$[S$.$toDouble]());
            if (scale.isRangeValueWithinViewport(dart.nullCheck(newTarget))) {
              animatedTick.setNewTarget(newTarget);
            } else {
              animatedTick.animateOut(animatedTick.locationPx);
            }
            providedTicks[S$.$remove](tick);
          } else {
            animatedTick.animateOut(dart.nullCheck(scale._get(animatedTick.value))[S$.$toDouble]());
          }
        }
        providedTicks[S$.$forEach](dart.fn(tick => {
          let animatedTick = null;
          if (RangeTickOfD().is(tick)) {
            animatedTick = new (RangeAxisTicksOfD()).new(tick);
          } else {
            animatedTick = new (AxisTicksOfD()).new(tick);
          }
          if (scale.isRangeValueWithinViewport(dart.nullCheck(animatedTick.locationPx))) {
            if (this[S$0._previousScale] != null) {
              animatedTick.animateInFrom(dart.nullCheck(dart.nullCheck(this[S$0._previousScale])._get(tick.value))[S$.$toDouble]());
            }
            this[S$0._axisTicks][S$.$add](animatedTick);
          }
        }, TickOfDTovoid()));
        this[S$0._axisTicks][S$.$sort]();
        this[S$0._previousScale] = scale.copy();
      }
      setViewportSettings(viewportScale, viewportTranslatePx, opts) {
        let drawAreaWidth = opts && 'drawAreaWidth' in opts ? opts.drawAreaWidth : null;
        let drawAreaHeight = opts && 'drawAreaHeight' in opts ? opts.drawAreaHeight : null;
        viewportTranslatePx = this[S$0._clampTranslatePx](viewportScale, viewportTranslatePx, {drawAreaWidth: drawAreaWidth, drawAreaHeight: drawAreaHeight});
        dart.nullCheck(this.scale).setViewportSettings(viewportScale, viewportTranslatePx);
      }
      get viewportScalingFactor() {
        return dart.nullCheck(this.scale).viewportScalingFactor;
      }
      get viewportTranslatePx() {
        return dart.nullCheck(this.scale).viewportTranslatePx;
      }
      [S$0._clampTranslatePx](viewportScalingFactor, viewportTranslatePx, opts) {
        let drawAreaWidth = opts && 'drawAreaWidth' in opts ? opts.drawAreaWidth : null;
        let drawAreaHeight = opts && 'drawAreaHeight' in opts ? opts.drawAreaHeight : null;
        if (this.isVertical) {
          if (drawAreaHeight == null) {
            return viewportTranslatePx;
          }
          let maxPositiveTranslate = dart.notNull(drawAreaHeight) * viewportScalingFactor - dart.notNull(drawAreaHeight);
          viewportTranslatePx = math.max(core.double, math.min(core.double, viewportTranslatePx, maxPositiveTranslate), 0.0);
        } else {
          if (drawAreaWidth == null) {
            return viewportTranslatePx;
          }
          let maxNegativeTranslate = -1.0 * (dart.notNull(drawAreaWidth) * viewportScalingFactor - dart.notNull(drawAreaWidth));
          viewportTranslatePx = math.min(core.double, math.max(core.double, viewportTranslatePx, maxNegativeTranslate), 0.0);
        }
        return viewportTranslatePx;
      }
      get layoutConfig() {
        return new layout_view.LayoutViewConfig.new({paintOrder: this.layoutPaintOrder, position: this[S$0._layoutPosition$2], positionOrder: 20});
      }
      get [S$0._layoutPosition$2]() {
        let position = null;
        switch (this.axisOrientation) {
          case C[115] || CT.C115:
          {
            position = layout_view.LayoutPosition.Top;
            break;
          }
          case C[116] || CT.C116:
          {
            position = layout_view.LayoutPosition.Right;
            break;
          }
          case C[117] || CT.C117:
          {
            position = layout_view.LayoutPosition.Bottom;
            break;
          }
          case C[118] || CT.C118:
          {
            position = layout_view.LayoutPosition.Left;
            break;
          }
          case null:
          {
            break;
          }
        }
        return position;
      }
      get isVertical() {
        return this.axisOrientation === axis$.AxisOrientation.left || this.axisOrientation === axis$.AxisOrientation.right;
      }
      measure(maxWidth, maxHeight) {
        return this.isVertical ? this[S$0._measureVerticalAxis](maxWidth, maxHeight) : this[S$0._measureHorizontalAxis](maxWidth, maxHeight);
      }
      [S$0._measureVerticalAxis](maxWidth, maxHeight) {
        this.setOutputRange(maxHeight, 0);
        this[S$0._updateProvidedTicks]();
        return dart.nullCheck(this.tickDrawStrategy).measureVerticallyDrawnTicks(dart.nullCheck(this[S$0._providedTicks]), maxWidth, maxHeight, {collision: this.hasTickCollision});
      }
      [S$0._measureHorizontalAxis](maxWidth, maxHeight) {
        this.setOutputRange(0, maxWidth);
        this[S$0._updateProvidedTicks]();
        return dart.nullCheck(this.tickDrawStrategy).measureHorizontallyDrawnTicks(dart.nullCheck(this[S$0._providedTicks]), maxWidth, maxHeight, {collision: this.hasTickCollision});
      }
      layout(componentBounds, drawAreaBounds) {
        this[S$0._componentBounds$3] = componentBounds;
        this[S$0._drawAreaBounds$6] = drawAreaBounds;
        let outputStart = this.isVertical ? componentBounds[S$.$bottom] : componentBounds[S$.$left];
        let outputEnd = this.isVertical ? componentBounds[S$.$top] : componentBounds[S$.$right];
        let outputRange = this.reverseOutputRange ? new scale$.ScaleOutputExtent.new(outputEnd, outputStart) : new scale$.ScaleOutputExtent.new(outputStart, outputEnd);
        let scale = dart.nullCheck(this.scale);
        if (!dart.equals(scale.range, outputRange)) {
          scale.range = outputRange;
        }
        this[S$0._updateProvidedTicks]();
        this[S$0._updateProvidedTickWidth](dart.nullCheck(this[S$0._componentBounds$3])[S$.$width], dart.nullCheck(this[S$0._componentBounds$3])[S$.$height]);
        this[S$0._updateAxisTicks]();
      }
      get isSeriesRenderer() {
        return false;
      }
      get componentBounds() {
        return this[S$0._componentBounds$3];
      }
      get drawAxisLine() {
        if (this.forceDrawAxisLine != null) {
          return dart.nullCheck(this.forceDrawAxisLine);
        }
        return small_tick_draw_strategy.SmallTickDrawStrategy.is(this.tickDrawStrategy);
      }
      paint(canvas, animationPercent) {
        let t78;
        if (animationPercent === 1.0) {
          this[S$0._axisTicks][S$.$removeWhere](dart.fn(t => t.markedForRemoval, AxisTicksOfDTobool()));
        }
        for (let i = 0; i < this[S$0._axisTicks][S$.$length]; i = i + 1) {
          let animatedTick = this[S$0._axisTicks][S$.$_get](i);
          dart.nullCheck(this.tickDrawStrategy).draw(canvas, (t78 = animatedTick, (() => {
            t78.setCurrentTick(animationPercent);
            return t78;
          })()), {orientation: dart.nullCheck(this.axisOrientation), axisBounds: dart.nullCheck(this[S$0._componentBounds$3]), collision: this.hasTickCollision, drawAreaBounds: dart.nullCheck(this[S$0._drawAreaBounds$6]), isFirst: i === 0, isLast: i === this[S$0._axisTicks][S$.$length] - 1});
        }
        if (this.drawAxisLine) {
          dart.nullCheck(this.tickDrawStrategy).drawAxisLine(canvas, dart.nullCheck(this.axisOrientation), dart.nullCheck(this[S$0._componentBounds$3]));
        }
      }
    }
    (Axis.new = function(opts) {
      let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
      let tickFormatter = opts && 'tickFormatter' in opts ? opts.tickFormatter : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      this[S$0._previousScale] = null;
      this[S$0._formatterValueCache] = new (LinkedMapOfD$String()).new();
      this[S$0.tickDrawStrategy] = null;
      this[S$0.axisOrientation] = null;
      this[S$0.context] = null;
      this[S$0.reverseOutputRange] = false;
      this[S$0.autoViewport] = true;
      this[S$0.forceDrawAxisLine] = null;
      this[S$0.lockAxis] = false;
      this[S$0._providedTicks] = null;
      this[S$0._axisTicks] = JSArrayOfAxisTicksOfD().of([]);
      this[S$0._componentBounds$3] = null;
      this[S$0._drawAreaBounds$6] = null;
      this[S$0.layoutPaintOrder$6] = 0;
      this[S$0.hasTickCollision] = false;
      this[S$0.graphicsFactory$8] = null;
      this[S$0.tickProvider$1] = tickProvider;
      this[S$0.scale] = scale;
      this[S$0._defaultScale] = scale;
      this[S$0._defaultTickProvider] = tickProvider;
      this[S$0._defaultTickFormatter] = tickFormatter;
      this[S$0._tickFormatter] = tickFormatter;
      ;
    }).prototype = Axis.prototype;
    dart.addTypeTests(Axis);
    Axis.prototype[_is_Axis_default] = true;
    dart.addTypeCaches(Axis);
    Axis[dart.implements] = () => [layout_view.LayoutView];
    dart.setMethodSignature(Axis, () => ({
      __proto__: dart.getMethods(Axis.__proto__),
      setRangeBandConfig: dart.fnType(dart.void, [scale$.RangeBandConfig]),
      addDomainValue: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      resetDefaultConfiguration: dart.fnType(dart.void, []),
      resetDomains: dart.fnType(dart.void, []),
      getLocation: dart.fnType(dart.nullable(core.double), [dart.nullable(core.Object)]),
      getDomain: dart.fnType(D, [core.double]),
      compareDomainValueToViewport: dart.fnType(core.int, [dart.nullable(core.Object)]),
      setOutputRange: dart.fnType(dart.void, [core.int, core.int]),
      updateTicks: dart.fnType(dart.void, []),
      [S$0._updateProvidedTicks]: dart.fnType(dart.void, []),
      [S$0._updateProvidedTickWidth]: dart.fnType(dart.void, [core.int, core.int]),
      [S$0._updateAxisTicks]: dart.fnType(dart.void, []),
      setViewportSettings: dart.fnType(dart.void, [core.double, core.double], {drawAreaHeight: dart.nullable(core.int), drawAreaWidth: dart.nullable(core.int)}, {}),
      [S$0._clampTranslatePx]: dart.fnType(core.double, [core.double, core.double], {drawAreaHeight: dart.nullable(core.int), drawAreaWidth: dart.nullable(core.int)}, {}),
      measure: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      [S$0._measureVerticalAxis]: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      [S$0._measureHorizontalAxis]: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double])
    }));
    dart.setGetterSignature(Axis, () => ({
      __proto__: dart.getGetters(Axis.__proto__),
      tickFormatter: dart.nullable(tick_formatter.TickFormatter$(D)),
      mutableScale: dart.nullable(scale$.MutableScale$(D)),
      rangeBand: core.double,
      stepSize: core.double,
      range: dart.nullable(scale$.ScaleOutputExtent),
      hasValidBarChartRangeBandConfig: core.bool,
      viewportScalingFactor: core.double,
      viewportTranslatePx: core.double,
      layoutConfig: layout_view.LayoutViewConfig,
      [S$0._layoutPosition$2]: dart.nullable(layout_view.LayoutPosition),
      isVertical: core.bool,
      isSeriesRenderer: core.bool,
      componentBounds: dart.nullable(math.Rectangle$(core.int)),
      drawAxisLine: core.bool
    }));
    dart.setSetterSignature(Axis, () => ({
      __proto__: dart.getSetters(Axis.__proto__),
      tickFormatter: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(Axis, I[90]);
    dart.setFieldSignature(Axis, () => ({
      __proto__: dart.getFields(Axis.__proto__),
      [S$0._defaultScale]: dart.finalFieldType(dart.nullable(scale$.MutableScale$(D))),
      scale: dart.fieldType(dart.nullable(scale$.MutableScale$(D))),
      [S$0._previousScale]: dart.fieldType(dart.nullable(scale$.MutableScale$(D))),
      [S$0._defaultTickProvider]: dart.finalFieldType(dart.nullable(tick_provider.TickProvider$(D))),
      tickProvider: dart.fieldType(dart.nullable(tick_provider.TickProvider$(D))),
      [S$0._defaultTickFormatter]: dart.finalFieldType(dart.nullable(tick_formatter.TickFormatter$(D))),
      [S$0._tickFormatter]: dart.fieldType(dart.nullable(tick_formatter.TickFormatter$(D))),
      [S$0._formatterValueCache]: dart.finalFieldType(core.Map$(D, core.String)),
      tickDrawStrategy: dart.fieldType(dart.nullable(tick_draw_strategy.TickDrawStrategy$(D))),
      axisOrientation: dart.fieldType(dart.nullable(axis$.AxisOrientation)),
      context: dart.fieldType(dart.nullable(chart_context.ChartContext)),
      reverseOutputRange: dart.fieldType(core.bool),
      autoViewport: dart.fieldType(core.bool),
      forceDrawAxisLine: dart.fieldType(dart.nullable(core.bool)),
      lockAxis: dart.fieldType(core.bool),
      [S$0._providedTicks]: dart.fieldType(dart.nullable(core.List$(tick.Tick$(D)))),
      [S$0._axisTicks]: dart.finalFieldType(core.List$(axis_tick.AxisTicks$(D))),
      [S$0._componentBounds$3]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      [S$0._drawAreaBounds$6]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      layoutPaintOrder: dart.fieldType(core.int),
      hasTickCollision: dart.fieldType(core.bool),
      graphicsFactory: dart.fieldType(dart.nullable(graphics_factory.GraphicsFactory))
    }));
    return Axis;
  });
  axis$.Axis = axis$.Axis$();
  dart.defineLazy(axis$.Axis, {
    /*axis$.Axis.primaryMeasureAxisId*/get primaryMeasureAxisId() {
      return "primaryMeasureAxisId";
    },
    /*axis$.Axis.secondaryMeasureAxisId*/get secondaryMeasureAxisId() {
      return "secondaryMeasureAxisId";
    },
    /*axis$.Axis._autoViewportDefault*/get _autoViewportDefault() {
      return true;
    }
  }, false);
  dart.addTypeTests(axis$.Axis, _is_Axis_default);
  date_time_axis.DateTimeAxis = class DateTimeAxis extends axis$.Axis$(core.DateTime) {
    setScaleViewport(viewport) {
      this.autoViewport = false;
      date_time_scale.DateTimeScale.as(this.mutableScale).viewportDomain = viewport;
    }
  };
  (date_time_axis.DateTimeAxis.new = function(dateTimeFactory, opts) {
    let t78, t78$;
    let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
    let tickFormatter = opts && 'tickFormatter' in opts ? opts.tickFormatter : null;
    date_time_axis.DateTimeAxis.__proto__.new.call(this, {tickProvider: (t78 = tickProvider, t78 == null ? auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createDefault(dateTimeFactory) : t78), tickFormatter: (t78$ = tickFormatter, t78$ == null ? date_time_tick_formatter.DateTimeTickFormatter.new(dateTimeFactory) : t78$), scale: new date_time_scale.DateTimeScale.new(dateTimeFactory)});
    ;
  }).prototype = date_time_axis.DateTimeAxis.prototype;
  dart.addTypeTests(date_time_axis.DateTimeAxis);
  dart.addTypeCaches(date_time_axis.DateTimeAxis);
  dart.setMethodSignature(date_time_axis.DateTimeAxis, () => ({
    __proto__: dart.getMethods(date_time_axis.DateTimeAxis.__proto__),
    setScaleViewport: dart.fnType(dart.void, [date_time_extents.DateTimeExtents])
  }));
  dart.setLibraryUri(date_time_axis.DateTimeAxis, I[91]);
  base_time_stepper.BaseTimeStepper = class BaseTimeStepper extends core.Object {
    get dateTimeFactory() {
      return this[S$0.dateTimeFactory$1];
    }
    set dateTimeFactory(value) {
      super.dateTimeFactory = value;
    }
    getStepCountBetween(timeExtent, tickIncrement) {
      base_time_stepper.checkTickIncrement(tickIncrement);
      let min = timeExtent.start;
      let max = timeExtent.end;
      let time = this.getStepTimeAfterInclusive(min, tickIncrement);
      let cnt = 0;
      while (time.compareTo(max) <= 0) {
        cnt = cnt + 1;
        time = this.getNextStepTime(time, tickIncrement);
      }
      return cnt;
    }
    getSteps(timeExtent) {
      if (this[S$0._stepsIterable] == null || !dart.nullCheck(this[S$0._stepsIterable]).timeExtent._equals(timeExtent)) {
        this[S$0._stepsIterable] = base_time_stepper._TimeStepIteratorFactoryImpl.new(timeExtent, this);
      }
      return dart.nullCheck(this[S$0._stepsIterable]);
    }
    updateBoundingSteps(timeExtent) {
      let stepBefore = this.getStepTimeBeforeInclusive(timeExtent.start, 1);
      let stepAfter = this.getStepTimeAfterInclusive(timeExtent.end, 1);
      return new date_time_extents.DateTimeExtents.new({start: stepBefore, end: stepAfter});
    }
    getStepTimeAfterInclusive(time, tickIncrement) {
      let boundedStart = this.getStepTimeBeforeInclusive(time, tickIncrement);
      if (boundedStart.isAtSameMomentAs(time)) {
        return boundedStart;
      }
      return this.getNextStepTime(boundedStart, tickIncrement);
    }
  };
  (base_time_stepper.BaseTimeStepper.new = function(dateTimeFactory) {
    this[S$0._stepsIterable] = null;
    this[S$0.dateTimeFactory$1] = dateTimeFactory;
    if (!this.allowedTickIncrements[S$.$isNotEmpty]) dart.assertFailed(null, I[93], 34, 12, "allowedTickIncrements.isNotEmpty");
  }).prototype = base_time_stepper.BaseTimeStepper.prototype;
  dart.addTypeTests(base_time_stepper.BaseTimeStepper);
  dart.addTypeCaches(base_time_stepper.BaseTimeStepper);
  base_time_stepper.BaseTimeStepper[dart.implements] = () => [time_stepper.TimeStepper];
  dart.setMethodSignature(base_time_stepper.BaseTimeStepper, () => ({
    __proto__: dart.getMethods(base_time_stepper.BaseTimeStepper.__proto__),
    getStepCountBetween: dart.fnType(core.int, [date_time_extents.DateTimeExtents, core.int]),
    getSteps: dart.fnType(time_stepper.TimeStepIteratorFactory, [date_time_extents.DateTimeExtents]),
    updateBoundingSteps: dart.fnType(date_time_extents.DateTimeExtents, [date_time_extents.DateTimeExtents]),
    getStepTimeAfterInclusive: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setLibraryUri(base_time_stepper.BaseTimeStepper, I[94]);
  dart.setFieldSignature(base_time_stepper.BaseTimeStepper, () => ({
    __proto__: dart.getFields(base_time_stepper.BaseTimeStepper.__proto__),
    dateTimeFactory: dart.finalFieldType(date_time_factory.DateTimeFactory),
    [S$0._stepsIterable]: dart.fieldType(dart.nullable(base_time_stepper._TimeStepIteratorFactoryImpl))
  }));
  year_time_stepper.YearTimeStepper = class YearTimeStepper extends base_time_stepper.BaseTimeStepper {
    static new(dateTimeFactory, opts) {
      let allowedTickIncrements = opts && 'allowedTickIncrements' in opts ? opts.allowedTickIncrements : null;
      allowedTickIncrements == null ? allowedTickIncrements = year_time_stepper.YearTimeStepper._defaultIncrements : null;
      if (!allowedTickIncrements[S$0.$every](dart.fn(increment => increment > 0, T$0.intTobool()))) dart.assertFailed(null, I[92], 35, 12, "allowedTickIncrements.every((increment) => increment > 0)");
      return new year_time_stepper.YearTimeStepper._internal(dateTimeFactory, allowedTickIncrements);
    }
    get typicalStepSizeMs() {
      return 365 * 24 * 3600 * 1000;
    }
    get allowedTickIncrements() {
      return this[S$0._allowedTickIncrements];
    }
    getStepTimeBeforeInclusive(time, tickIncrement) {
      let yearRemainder = time.year[S$.$modulo](tickIncrement);
      return this.dateTimeFactory.createDateTime(time.year - yearRemainder);
    }
    getNextStepTime(time, tickIncrement) {
      return this.dateTimeFactory.createDateTime(time.year + tickIncrement);
    }
  };
  (year_time_stepper.YearTimeStepper._internal = function(dateTimeFactory, increments) {
    this[S$0._allowedTickIncrements] = increments;
    year_time_stepper.YearTimeStepper.__proto__.new.call(this, dateTimeFactory);
    ;
  }).prototype = year_time_stepper.YearTimeStepper.prototype;
  dart.addTypeTests(year_time_stepper.YearTimeStepper);
  dart.addTypeCaches(year_time_stepper.YearTimeStepper);
  dart.setMethodSignature(year_time_stepper.YearTimeStepper, () => ({
    __proto__: dart.getMethods(year_time_stepper.YearTimeStepper.__proto__),
    getStepTimeBeforeInclusive: dart.fnType(core.DateTime, [core.DateTime, core.int]),
    getNextStepTime: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setGetterSignature(year_time_stepper.YearTimeStepper, () => ({
    __proto__: dart.getGetters(year_time_stepper.YearTimeStepper.__proto__),
    typicalStepSizeMs: core.int,
    allowedTickIncrements: core.List$(core.int)
  }));
  dart.setLibraryUri(year_time_stepper.YearTimeStepper, I[95]);
  dart.setFieldSignature(year_time_stepper.YearTimeStepper, () => ({
    __proto__: dart.getFields(year_time_stepper.YearTimeStepper.__proto__),
    [S$0._allowedTickIncrements]: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineLazy(year_time_stepper.YearTimeStepper, {
    /*year_time_stepper.YearTimeStepper._defaultIncrements*/get _defaultIncrements() {
      return C[119] || CT.C119;
    }
  }, false);
  const _is_BaseTickProvider_default = Symbol('_is_BaseTickProvider_default');
  tick_provider.BaseTickProvider$ = dart.generic(D => {
    var ListOfD = () => (ListOfD = dart.constFn(core.List$(D)))();
    var MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    var TickFormatterOfD = () => (TickFormatterOfD = dart.constFn(tick_formatter.TickFormatter$(D)))();
    var MapOfD$String = () => (MapOfD$String = dart.constFn(core.Map$(D, core.String)))();
    var TickDrawStrategyOfD = () => (TickDrawStrategyOfD = dart.constFn(tick_draw_strategy.TickDrawStrategy$(D)))();
    var TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    var JSArrayOfTickOfD = () => (JSArrayOfTickOfD = dart.constFn(_interceptors.JSArray$(TickOfD())))();
    class BaseTickProvider extends core.Object {
      createTicks(domainValues, opts) {
        let t86;
        ListOfD().as(domainValues);
        let context = opts && 'context' in opts ? opts.context : null;
        let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
        let scale = opts && 'scale' in opts ? opts.scale : null;
        MutableScaleOfD().as(scale);
        let formatter = opts && 'formatter' in opts ? opts.formatter : null;
        TickFormatterOfD().as(formatter);
        let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
        MapOfD$String().as(formatterValueCache);
        let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
        TickDrawStrategyOfD().as(tickDrawStrategy);
        let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
        let ticks = JSArrayOfTickOfD().of([]);
        let labels = formatter.format(domainValues, formatterValueCache, {stepSize: stepSize});
        for (let i = 0; i < domainValues[S$.$length]; i = i + 1) {
          let value = domainValues[S$.$_get](i);
          let tick = new (TickOfD()).new({value: value, textElement: graphicsFactory.createTextElement(labels[S$.$_get](i)), locationPx: (t86 = scale._get(value), t86 == null ? null : t86[S$.$toDouble]())});
          ticks[S$.$add](tick);
        }
        tickDrawStrategy.decorateTicks(ticks);
        return ticks;
      }
    }
    (BaseTickProvider.new = function() {
      ;
    }).prototype = BaseTickProvider.prototype;
    dart.addTypeTests(BaseTickProvider);
    BaseTickProvider.prototype[_is_BaseTickProvider_default] = true;
    dart.addTypeCaches(BaseTickProvider);
    BaseTickProvider[dart.implements] = () => [tick_provider.TickProvider$(D)];
    dart.setMethodSignature(BaseTickProvider, () => ({
      __proto__: dart.getMethods(BaseTickProvider.__proto__),
      createTicks: dart.fnType(core.List$(tick.Tick$(D)), [dart.nullable(core.Object)], {context: dart.nullable(chart_context.ChartContext), formatter: dart.nullable(core.Object), formatterValueCache: dart.nullable(core.Object), graphicsFactory: graphics_factory.GraphicsFactory, scale: dart.nullable(core.Object), stepSize: dart.nullable(core.num), tickDrawStrategy: dart.nullable(core.Object)}, {})
    }));
    dart.setLibraryUri(BaseTickProvider, I[82]);
    return BaseTickProvider;
  });
  tick_provider.BaseTickProvider = tick_provider.BaseTickProvider$();
  dart.addTypeTests(tick_provider.BaseTickProvider, _is_BaseTickProvider_default);
  time_range_tick_provider.TimeRangeTickProvider = class TimeRangeTickProvider extends tick_provider.BaseTickProvider$(core.DateTime) {};
  (time_range_tick_provider.TimeRangeTickProvider.new = function() {
    time_range_tick_provider.TimeRangeTickProvider.__proto__.new.call(this);
    ;
  }).prototype = time_range_tick_provider.TimeRangeTickProvider.prototype;
  dart.addTypeTests(time_range_tick_provider.TimeRangeTickProvider);
  dart.addTypeCaches(time_range_tick_provider.TimeRangeTickProvider);
  dart.setLibraryUri(time_range_tick_provider.TimeRangeTickProvider, I[97]);
  time_range_tick_provider_impl.TimeRangeTickProviderImpl = class TimeRangeTickProviderImpl extends time_range_tick_provider.TimeRangeTickProvider {
    get requiredMinimumTicks() {
      return this[S$0.requiredMinimumTicks];
    }
    set requiredMinimumTicks(value) {
      super.requiredMinimumTicks = value;
    }
    get timeStepper() {
      return this[S$0.timeStepper];
    }
    set timeStepper(value) {
      super.timeStepper = value;
    }
    providesSufficientTicksForRange(domainExtents) {
      let cnt = this.timeStepper.getStepCountBetween(domainExtents, 1);
      return cnt >= this.requiredMinimumTicks;
    }
    getClosestStepSize(stepSize) {
      return this.timeStepper.typicalStepSizeMs * this[S$0._getClosestIncrementFromStepSize](stepSize);
    }
    [S$0._getClosestIncrementFromStepSize](stepSize) {
      let minDifference = null;
      let closestIncrement = null;
      function closestIncrement$35get() {
        let t79;
        t79 = closestIncrement;
        return t79 == null ? dart.throw(new _internal.LateError.localNI("closestIncrement")) : t79;
      }
      dart.fn(closestIncrement$35get, T$0.VoidToint());
      function closestIncrement$35set(t80) {
        return closestIncrement = t80;
      }
      dart.fn(closestIncrement$35set, T$0.intTodynamic());
      if (!this.timeStepper.allowedTickIncrements[S$.$isNotEmpty]) dart.assertFailed(null, I[96], 53, 12, "timeStepper.allowedTickIncrements.isNotEmpty");
      for (let increment of this.timeStepper.allowedTickIncrements) {
        let difference = (stepSize - this.timeStepper.typicalStepSizeMs * increment)[S$.$abs]();
        if (minDifference == null || dart.notNull(minDifference) > difference) {
          minDifference = difference;
          closestIncrement$35set(increment);
        }
      }
      return closestIncrement$35get();
    }
    getTicks(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      date_time_scale.DateTimeScale.as(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      T$0.TickFormatterOfDateTime().as(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      T$0.MapOfDateTime$String().as(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      T$0.TickDrawStrategyOfDateTime().as(tickDrawStrategy);
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      T$0.TickHintNOfDateTime().as(tickHint);
      let currentTicks = null;
      function currentTicks$35get() {
        let t83;
        t83 = currentTicks;
        return t83 == null ? dart.throw(new _internal.LateError.localNI("currentTicks")) : t83;
      }
      dart.fn(currentTicks$35get, T$0.VoidToListOfTickOfDateTime());
      function currentTicks$35set(t84) {
        return currentTicks = t84;
      }
      dart.fn(currentTicks$35set, T$0.ListOfTickOfDateTimeTodynamic());
      let tickValues = T$0.JSArrayOfDateTime().of([]);
      let timeStepIt = this.timeStepper.getSteps(scale.viewportDomain).iterator;
      let allowedTickIncrements = null;
      if (tickHint != null) {
        let stepSize = tickHint.end.difference(tickHint.start).inMilliseconds;
        allowedTickIncrements = T$0.JSArrayOfint().of([this[S$0._getClosestIncrementFromStepSize](stepSize)]);
      } else {
        allowedTickIncrements = this.timeStepper.allowedTickIncrements;
      }
      if (!allowedTickIncrements[S$.$isNotEmpty]) dart.assertFailed(null, I[96], 95, 12, "allowedTickIncrements.isNotEmpty");
      for (let tickIncrement of allowedTickIncrements) {
        tickValues[S$.$clear]();
        timeStepIt.reset(tickIncrement);
        while (timeStepIt.moveNext()) {
          tickValues[S$.$add](timeStepIt.current);
        }
        currentTicks$35set(this.createTicks(tickValues, {context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, stepSize: this.timeStepper.typicalStepSizeMs * tickIncrement}));
        let collisionReport = tickDrawStrategy.collides(currentTicks$35get(), orientation);
        if (!collisionReport.ticksCollide) {
          return currentTicks$35get();
        }
      }
      return currentTicks$35get();
    }
  };
  (time_range_tick_provider_impl.TimeRangeTickProviderImpl.new = function(timeStepper, opts) {
    let requiredMinimumTicks = opts && 'requiredMinimumTicks' in opts ? opts.requiredMinimumTicks : 3;
    this[S$0.timeStepper] = timeStepper;
    this[S$0.requiredMinimumTicks] = requiredMinimumTicks;
    time_range_tick_provider_impl.TimeRangeTickProviderImpl.__proto__.new.call(this);
    ;
  }).prototype = time_range_tick_provider_impl.TimeRangeTickProviderImpl.prototype;
  dart.addTypeTests(time_range_tick_provider_impl.TimeRangeTickProviderImpl);
  dart.addTypeCaches(time_range_tick_provider_impl.TimeRangeTickProviderImpl);
  dart.setMethodSignature(time_range_tick_provider_impl.TimeRangeTickProviderImpl, () => ({
    __proto__: dart.getMethods(time_range_tick_provider_impl.TimeRangeTickProviderImpl.__proto__),
    providesSufficientTicksForRange: dart.fnType(core.bool, [date_time_extents.DateTimeExtents]),
    getClosestStepSize: dart.fnType(core.int, [core.int]),
    [S$0._getClosestIncrementFromStepSize]: dart.fnType(core.int, [core.int]),
    getTicks: dart.fnType(core.List$(tick.Tick$(core.DateTime)), [], {context: dart.nullable(chart_context.ChartContext), formatter: dart.nullable(core.Object), formatterValueCache: dart.nullable(core.Object), graphicsFactory: graphics_factory.GraphicsFactory, orientation: dart.nullable(axis$.AxisOrientation), scale: dart.nullable(core.Object), tickDrawStrategy: dart.nullable(core.Object), tickHint: dart.nullable(core.Object), viewportExtensionEnabled: core.bool}, {})
  }));
  dart.setLibraryUri(time_range_tick_provider_impl.TimeRangeTickProviderImpl, I[98]);
  dart.setFieldSignature(time_range_tick_provider_impl.TimeRangeTickProviderImpl, () => ({
    __proto__: dart.getFields(time_range_tick_provider_impl.TimeRangeTickProviderImpl.__proto__),
    requiredMinimumTicks: dart.finalFieldType(core.int),
    timeStepper: dart.finalFieldType(time_stepper.TimeStepper)
  }));
  month_time_stepper.MonthTimeStepper = class MonthTimeStepper extends base_time_stepper.BaseTimeStepper {
    static new(dateTimeFactory, opts) {
      let allowedTickIncrements = opts && 'allowedTickIncrements' in opts ? opts.allowedTickIncrements : null;
      allowedTickIncrements == null ? allowedTickIncrements = month_time_stepper.MonthTimeStepper._defaultIncrements : null;
      if (!allowedTickIncrements[S$0.$every](dart.fn(increment => increment > 0, T$0.intTobool()))) dart.assertFailed(null, I[99], 35, 12, "allowedTickIncrements.every((increment) => increment > 0)");
      return new month_time_stepper.MonthTimeStepper._internal(dateTimeFactory, allowedTickIncrements);
    }
    get typicalStepSizeMs() {
      return 30 * 24 * 3600 * 1000;
    }
    get allowedTickIncrements() {
      return this[S$0._allowedTickIncrements$1];
    }
    getStepTimeBeforeInclusive(time, tickIncrement) {
      let monthRemainder = time.month[S$.$modulo](tickIncrement);
      let newMonth = (time.month - monthRemainder)[S$.$modulo](12);
      if (time.month === 12 && newMonth === 0) {
        newMonth = 12;
      }
      let newYear = time.year - (monthRemainder / 12)[S$.$floor]();
      return this.dateTimeFactory.createDateTime(newYear, newMonth);
    }
    getNextStepTime(time, tickIncrement) {
      let incrementedMonth = time.month + tickIncrement;
      let newMonth = incrementedMonth[S$.$modulo](12);
      let newYear = time.year + (incrementedMonth / 12)[S$.$floor]();
      return this.dateTimeFactory.createDateTime(newYear, newMonth);
    }
  };
  (month_time_stepper.MonthTimeStepper._internal = function(dateTimeFactory, increments) {
    this[S$0._allowedTickIncrements$1] = increments;
    month_time_stepper.MonthTimeStepper.__proto__.new.call(this, dateTimeFactory);
    ;
  }).prototype = month_time_stepper.MonthTimeStepper.prototype;
  dart.addTypeTests(month_time_stepper.MonthTimeStepper);
  dart.addTypeCaches(month_time_stepper.MonthTimeStepper);
  dart.setMethodSignature(month_time_stepper.MonthTimeStepper, () => ({
    __proto__: dart.getMethods(month_time_stepper.MonthTimeStepper.__proto__),
    getStepTimeBeforeInclusive: dart.fnType(core.DateTime, [core.DateTime, core.int]),
    getNextStepTime: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setGetterSignature(month_time_stepper.MonthTimeStepper, () => ({
    __proto__: dart.getGetters(month_time_stepper.MonthTimeStepper.__proto__),
    typicalStepSizeMs: core.int,
    allowedTickIncrements: core.List$(core.int)
  }));
  dart.setLibraryUri(month_time_stepper.MonthTimeStepper, I[100]);
  dart.setFieldSignature(month_time_stepper.MonthTimeStepper, () => ({
    __proto__: dart.getFields(month_time_stepper.MonthTimeStepper.__proto__),
    [S$0._allowedTickIncrements$1]: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineLazy(month_time_stepper.MonthTimeStepper, {
    /*month_time_stepper.MonthTimeStepper._defaultIncrements*/get _defaultIncrements() {
      return C[120] || CT.C120;
    }
  }, false);
  minute_time_stepper.MinuteTimeStepper = class MinuteTimeStepper extends base_time_stepper.BaseTimeStepper {
    static new(dateTimeFactory, opts) {
      let allowedTickIncrements = opts && 'allowedTickIncrements' in opts ? opts.allowedTickIncrements : null;
      allowedTickIncrements == null ? allowedTickIncrements = minute_time_stepper.MinuteTimeStepper._defaultIncrements : null;
      if (!allowedTickIncrements[S$0.$every](dart.fn(increment => increment >= 1 && increment <= 60, T$0.intTobool()))) dart.assertFailed(null, I[101], 36, 12, "allowedTickIncrements\n        .every((increment) => increment >= 1 && increment <= 60)");
      return new minute_time_stepper.MinuteTimeStepper._internal(dateTimeFactory, allowedTickIncrements);
    }
    get typicalStepSizeMs() {
      return 60000;
    }
    get allowedTickIncrements() {
      return this[S$0._allowedTickIncrements$2];
    }
    getStepTimeBeforeInclusive(time, tickIncrement) {
      let nextHourStart = time.millisecondsSinceEpoch + (60 - time.minute) * 60000;
      let minutesToNextHour = ((nextHourStart - time.millisecondsSinceEpoch) / 60000)[S$.$ceil]();
      let minRemainder = minutesToNextHour[S$.$modulo](tickIncrement);
      let rewindMinutes = minRemainder === 0 ? 0 : tickIncrement - minRemainder;
      let stepBefore = this.dateTimeFactory.createDateTimeFromMilliSecondsSinceEpoch(time.millisecondsSinceEpoch - rewindMinutes * 60000);
      return stepBefore;
    }
    getNextStepTime(time, tickIncrement) {
      return time.add(new core.Duration.new({minutes: tickIncrement}));
    }
  };
  (minute_time_stepper.MinuteTimeStepper._internal = function(dateTimeFactory, increments) {
    this[S$0._allowedTickIncrements$2] = increments;
    minute_time_stepper.MinuteTimeStepper.__proto__.new.call(this, dateTimeFactory);
    ;
  }).prototype = minute_time_stepper.MinuteTimeStepper.prototype;
  dart.addTypeTests(minute_time_stepper.MinuteTimeStepper);
  dart.addTypeCaches(minute_time_stepper.MinuteTimeStepper);
  dart.setMethodSignature(minute_time_stepper.MinuteTimeStepper, () => ({
    __proto__: dart.getMethods(minute_time_stepper.MinuteTimeStepper.__proto__),
    getStepTimeBeforeInclusive: dart.fnType(core.DateTime, [core.DateTime, core.int]),
    getNextStepTime: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setGetterSignature(minute_time_stepper.MinuteTimeStepper, () => ({
    __proto__: dart.getGetters(minute_time_stepper.MinuteTimeStepper.__proto__),
    typicalStepSizeMs: core.int,
    allowedTickIncrements: core.List$(core.int)
  }));
  dart.setLibraryUri(minute_time_stepper.MinuteTimeStepper, I[102]);
  dart.setFieldSignature(minute_time_stepper.MinuteTimeStepper, () => ({
    __proto__: dart.getFields(minute_time_stepper.MinuteTimeStepper.__proto__),
    [S$0._allowedTickIncrements$2]: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineLazy(minute_time_stepper.MinuteTimeStepper, {
    /*minute_time_stepper.MinuteTimeStepper._defaultIncrements*/get _defaultIncrements() {
      return C[121] || CT.C121;
    },
    /*minute_time_stepper.MinuteTimeStepper._millisecondsInMinute*/get _millisecondsInMinute() {
      return 60000;
    }
  }, false);
  hour_time_stepper.HourTimeStepper = class HourTimeStepper extends base_time_stepper.BaseTimeStepper {
    static new(dateTimeFactory, opts) {
      let allowedTickIncrements = opts && 'allowedTickIncrements' in opts ? opts.allowedTickIncrements : null;
      allowedTickIncrements == null ? allowedTickIncrements = hour_time_stepper.HourTimeStepper._defaultIncrements : null;
      if (!allowedTickIncrements[S$0.$every](dart.fn(increment => increment >= 1 && increment <= 24, T$0.intTobool()))) dart.assertFailed(null, I[103], 37, 12, "allowedTickIncrements\n        .every((increment) => increment >= 1 && increment <= 24)");
      return new hour_time_stepper.HourTimeStepper._internal(dateTimeFactory, allowedTickIncrements);
    }
    get typicalStepSizeMs() {
      return 3600000;
    }
    get allowedTickIncrements() {
      return this[S$0._allowedTickIncrements$3];
    }
    getStepTimeBeforeInclusive(time, tickIncrement) {
      let nextDay = this.dateTimeFactory.createDateTime(time.year, time.month, time.day).add(new core.Duration.new({hours: 24 + 1}));
      let nextDayStart = this.dateTimeFactory.createDateTime(nextDay.year, nextDay.month, nextDay.day);
      let hoursToNextDay = ((nextDayStart.millisecondsSinceEpoch - time.millisecondsSinceEpoch) / 3600000)[S$.$ceil]();
      let hoursRemainder = hoursToNextDay[S$.$modulo](tickIncrement);
      let rewindHours = hoursRemainder === 0 ? 0 : tickIncrement - hoursRemainder;
      let stepBefore = this.dateTimeFactory.createDateTime(time.year, time.month, time.day, time.hour - rewindHours);
      return stepBefore;
    }
    getNextStepTime(time, tickIncrement) {
      return time.add(new core.Duration.new({hours: tickIncrement}));
    }
  };
  (hour_time_stepper.HourTimeStepper._internal = function(dateTimeFactory, increments) {
    this[S$0._allowedTickIncrements$3] = increments;
    hour_time_stepper.HourTimeStepper.__proto__.new.call(this, dateTimeFactory);
    ;
  }).prototype = hour_time_stepper.HourTimeStepper.prototype;
  dart.addTypeTests(hour_time_stepper.HourTimeStepper);
  dart.addTypeCaches(hour_time_stepper.HourTimeStepper);
  dart.setMethodSignature(hour_time_stepper.HourTimeStepper, () => ({
    __proto__: dart.getMethods(hour_time_stepper.HourTimeStepper.__proto__),
    getStepTimeBeforeInclusive: dart.fnType(core.DateTime, [core.DateTime, core.int]),
    getNextStepTime: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setGetterSignature(hour_time_stepper.HourTimeStepper, () => ({
    __proto__: dart.getGetters(hour_time_stepper.HourTimeStepper.__proto__),
    typicalStepSizeMs: core.int,
    allowedTickIncrements: core.List$(core.int)
  }));
  dart.setLibraryUri(hour_time_stepper.HourTimeStepper, I[104]);
  dart.setFieldSignature(hour_time_stepper.HourTimeStepper, () => ({
    __proto__: dart.getFields(hour_time_stepper.HourTimeStepper.__proto__),
    [S$0._allowedTickIncrements$3]: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineLazy(hour_time_stepper.HourTimeStepper, {
    /*hour_time_stepper.HourTimeStepper._defaultIncrements*/get _defaultIncrements() {
      return C[122] || CT.C122;
    },
    /*hour_time_stepper.HourTimeStepper._hoursInDay*/get _hoursInDay() {
      return 24;
    },
    /*hour_time_stepper.HourTimeStepper._millisecondsInHour*/get _millisecondsInHour() {
      return 3600000;
    }
  }, false);
  time_stepper.TimeStepper = class TimeStepper extends core.Object {};
  (time_stepper.TimeStepper.new = function() {
    ;
  }).prototype = time_stepper.TimeStepper.prototype;
  dart.addTypeTests(time_stepper.TimeStepper);
  dart.addTypeCaches(time_stepper.TimeStepper);
  dart.setLibraryUri(time_stepper.TimeStepper, I[105]);
  time_stepper.TimeStepIterator = class TimeStepIterator extends core.Iterator$(core.DateTime) {};
  (time_stepper.TimeStepIterator.new = function() {
    ;
  }).prototype = time_stepper.TimeStepIterator.prototype;
  dart.addTypeTests(time_stepper.TimeStepIterator);
  dart.addTypeCaches(time_stepper.TimeStepIterator);
  dart.setLibraryUri(time_stepper.TimeStepIterator, I[105]);
  time_stepper.TimeStepIteratorFactory = class TimeStepIteratorFactory extends core.Iterable$(core.DateTime) {};
  (time_stepper.TimeStepIteratorFactory.new = function() {
    time_stepper.TimeStepIteratorFactory.__proto__.new.call(this);
    ;
  }).prototype = time_stepper.TimeStepIteratorFactory.prototype;
  dart.addTypeTests(time_stepper.TimeStepIteratorFactory);
  dart.addTypeCaches(time_stepper.TimeStepIteratorFactory);
  dart.setLibraryUri(time_stepper.TimeStepIteratorFactory, I[105]);
  base_time_stepper._TimeStepIteratorImpl = class _TimeStepIteratorImpl extends core.Object {
    moveNext() {
      if (this[S$0._current] == null) {
        this[S$0._current] = this.stepper.getStepTimeAfterInclusive(this.extentStartTime, this[S$0._tickIncrement]);
      } else {
        this[S$0._current] = this.stepper.getNextStepTime(dart.nullCheck(this[S$0._current]), this[S$0._tickIncrement]);
      }
      return dart.nullCheck(this[S$0._current]).compareTo(this.extentEndTime) <= 0;
    }
    get current() {
      return dart.nullCheck(this[S$0._current]);
    }
    reset(tickIncrement) {
      base_time_stepper.checkTickIncrement(tickIncrement);
      this[S$0._tickIncrement] = tickIncrement;
      this[S$0._current] = null;
      return this;
    }
  };
  (base_time_stepper._TimeStepIteratorImpl.new = function(extentStartTime, extentEndTime, stepper) {
    this[S$0._current] = null;
    this[S$0._tickIncrement] = 1;
    this.extentStartTime = extentStartTime;
    this.extentEndTime = extentEndTime;
    this.stepper = stepper;
    this.reset(this[S$0._tickIncrement]);
  }).prototype = base_time_stepper._TimeStepIteratorImpl.prototype;
  dart.addTypeTests(base_time_stepper._TimeStepIteratorImpl);
  dart.addTypeCaches(base_time_stepper._TimeStepIteratorImpl);
  base_time_stepper._TimeStepIteratorImpl[dart.implements] = () => [time_stepper.TimeStepIterator];
  dart.setMethodSignature(base_time_stepper._TimeStepIteratorImpl, () => ({
    __proto__: dart.getMethods(base_time_stepper._TimeStepIteratorImpl.__proto__),
    moveNext: dart.fnType(core.bool, []),
    reset: dart.fnType(time_stepper.TimeStepIterator, [core.int])
  }));
  dart.setGetterSignature(base_time_stepper._TimeStepIteratorImpl, () => ({
    __proto__: dart.getGetters(base_time_stepper._TimeStepIteratorImpl.__proto__),
    current: core.DateTime
  }));
  dart.setLibraryUri(base_time_stepper._TimeStepIteratorImpl, I[94]);
  dart.setFieldSignature(base_time_stepper._TimeStepIteratorImpl, () => ({
    __proto__: dart.getFields(base_time_stepper._TimeStepIteratorImpl.__proto__),
    extentStartTime: dart.finalFieldType(core.DateTime),
    extentEndTime: dart.finalFieldType(core.DateTime),
    stepper: dart.finalFieldType(base_time_stepper.BaseTimeStepper),
    [S$0._current]: dart.fieldType(dart.nullable(core.DateTime)),
    [S$0._tickIncrement]: dart.fieldType(core.int)
  }));
  base_time_stepper._TimeStepIteratorFactoryImpl = class _TimeStepIteratorFactoryImpl extends time_stepper.TimeStepIteratorFactory {
    static new(timeExtent, stepper) {
      let startTime = timeExtent.start;
      let endTime = timeExtent.end;
      return new base_time_stepper._TimeStepIteratorFactoryImpl._internal(new base_time_stepper._TimeStepIteratorImpl.new(startTime, endTime, stepper), timeExtent);
    }
    get iterator() {
      return this[S$0._timeStepIterator];
    }
  };
  (base_time_stepper._TimeStepIteratorFactoryImpl._internal = function(timeStepIterator, timeExtent) {
    this.timeExtent = timeExtent;
    this[S$0._timeStepIterator] = timeStepIterator;
    base_time_stepper._TimeStepIteratorFactoryImpl.__proto__.new.call(this);
    ;
  }).prototype = base_time_stepper._TimeStepIteratorFactoryImpl.prototype;
  dart.addTypeTests(base_time_stepper._TimeStepIteratorFactoryImpl);
  dart.addTypeCaches(base_time_stepper._TimeStepIteratorFactoryImpl);
  dart.setGetterSignature(base_time_stepper._TimeStepIteratorFactoryImpl, () => ({
    __proto__: dart.getGetters(base_time_stepper._TimeStepIteratorFactoryImpl.__proto__),
    iterator: time_stepper.TimeStepIterator,
    [S$0.$iterator]: time_stepper.TimeStepIterator
  }));
  dart.setLibraryUri(base_time_stepper._TimeStepIteratorFactoryImpl, I[94]);
  dart.setFieldSignature(base_time_stepper._TimeStepIteratorFactoryImpl, () => ({
    __proto__: dart.getFields(base_time_stepper._TimeStepIteratorFactoryImpl.__proto__),
    timeExtent: dart.finalFieldType(date_time_extents.DateTimeExtents),
    [S$0._timeStepIterator]: dart.finalFieldType(base_time_stepper._TimeStepIteratorImpl)
  }));
  dart.defineExtensionAccessors(base_time_stepper._TimeStepIteratorFactoryImpl, ['iterator']);
  base_time_stepper.checkTickIncrement = function checkTickIncrement(tickIncrement) {
    if (!(tickIncrement > 0)) dart.assertFailed(null, I[93], 143, 10, "tickIncrement > 0");
  };
  day_time_stepper.DayTimeStepper = class DayTimeStepper extends base_time_stepper.BaseTimeStepper {
    static new(dateTimeFactory, opts) {
      let allowedTickIncrements = opts && 'allowedTickIncrements' in opts ? opts.allowedTickIncrements : null;
      allowedTickIncrements == null ? allowedTickIncrements = day_time_stepper.DayTimeStepper._defaultIncrements : null;
      if (!allowedTickIncrements[S$0.$every](dart.fn(increment => increment > 0, T$0.intTobool()))) dart.assertFailed(null, I[106], 37, 12, "allowedTickIncrements.every((increment) => increment > 0)");
      return new day_time_stepper.DayTimeStepper._internal(dateTimeFactory, allowedTickIncrements);
    }
    get typicalStepSizeMs() {
      return 24 * 3600 * 1000;
    }
    get allowedTickIncrements() {
      return this[S$0._allowedTickIncrements$4];
    }
    getStepTimeBeforeInclusive(time, tickIncrement) {
      let dayRemainder = (time.day - 1)[S$.$modulo](tickIncrement);
      let dayBefore = dayRemainder > 0 ? time.subtract(new core.Duration.new({hours: 24 * dayRemainder - 1})) : time;
      let stepBefore = this.dateTimeFactory.createDateTime(dayBefore.year, dayBefore.month, dayBefore.day);
      return stepBefore;
    }
    getNextStepTime(time, tickIncrement) {
      let stepAfter = time.add(new core.Duration.new({hours: 24 * tickIncrement + 1}));
      return this.dateTimeFactory.createDateTime(stepAfter.year, stepAfter.month, stepAfter.day);
    }
  };
  (day_time_stepper.DayTimeStepper._internal = function(dateTimeFactory, increments) {
    this[S$0._allowedTickIncrements$4] = increments;
    day_time_stepper.DayTimeStepper.__proto__.new.call(this, dateTimeFactory);
    ;
  }).prototype = day_time_stepper.DayTimeStepper.prototype;
  dart.addTypeTests(day_time_stepper.DayTimeStepper);
  dart.addTypeCaches(day_time_stepper.DayTimeStepper);
  dart.setMethodSignature(day_time_stepper.DayTimeStepper, () => ({
    __proto__: dart.getMethods(day_time_stepper.DayTimeStepper.__proto__),
    getStepTimeBeforeInclusive: dart.fnType(core.DateTime, [core.DateTime, core.int]),
    getNextStepTime: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setGetterSignature(day_time_stepper.DayTimeStepper, () => ({
    __proto__: dart.getGetters(day_time_stepper.DayTimeStepper.__proto__),
    typicalStepSizeMs: core.int,
    allowedTickIncrements: core.List$(core.int)
  }));
  dart.setLibraryUri(day_time_stepper.DayTimeStepper, I[107]);
  dart.setFieldSignature(day_time_stepper.DayTimeStepper, () => ({
    __proto__: dart.getFields(day_time_stepper.DayTimeStepper.__proto__),
    [S$0._allowedTickIncrements$4]: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineLazy(day_time_stepper.DayTimeStepper, {
    /*day_time_stepper.DayTimeStepper._defaultIncrements*/get _defaultIncrements() {
      return C[123] || CT.C123;
    },
    /*day_time_stepper.DayTimeStepper._hoursInDay*/get _hoursInDay() {
      return 24;
    }
  }, false);
  auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider = class AutoAdjustingDateTimeTickProvider extends core.Object {
    static createDefault(dateTimeFactory) {
      return new auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider._internal(T$0.JSArrayOfTimeRangeTickProvider().of([auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createYearTickProvider(dateTimeFactory), auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createMonthTickProvider(dateTimeFactory), auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createDayTickProvider(dateTimeFactory), auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createHourTickProvider(dateTimeFactory), auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createMinuteTickProvider(dateTimeFactory)]));
    }
    static createWithoutTime(dateTimeFactory) {
      return new auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider._internal(T$0.JSArrayOfTimeRangeTickProvider().of([auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createYearTickProvider(dateTimeFactory), auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createMonthTickProvider(dateTimeFactory), auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createDayTickProvider(dateTimeFactory)]));
    }
    static createWith(potentialTickProviders) {
      if (potentialTickProviders === null || potentialTickProviders[S$.$isEmpty]) {
        dart.throw(new core.ArgumentError.new("At least one TimeRangeTickProvider is required"));
      }
      return new auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider._internal(potentialTickProviders);
    }
    getTicks(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      date_time_scale.DateTimeScale.as(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      T$0.TickFormatterOfDateTime().as(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      T$0.MapOfDateTime$String().as(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      T$0.TickDrawStrategyOfDateTime().as(tickDrawStrategy);
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      T$0.TickHintNOfDateTime().as(tickHint);
      let tickProviders = null;
      if (tickHint != null) {
        tickProviders = T$0.JSArrayOfTimeRangeTickProvider().of([this[S$0._getClosestTickProvider](tickHint)]);
      } else {
        tickProviders = this[S$0._potentialTickProviders];
      }
      let lastTickProvider = tickProviders[S$.$last];
      let viewport = scale.viewportDomain;
      for (let tickProvider of tickProviders) {
        let isLastProvider = tickProvider[S$.$_equals](lastTickProvider);
        if (isLastProvider || tickProvider.providesSufficientTicksForRange(viewport)) {
          return tickProvider.getTicks({context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, orientation: orientation});
        }
      }
      return T$0.JSArrayOfTickOfDateTime().of([]);
    }
    [S$0._getClosestTickProvider](tickHint) {
      let stepSize = (tickHint.end.difference(tickHint.start).inMilliseconds / (tickHint.tickCount - 1))[S$.$round]();
      let minDifference = null;
      let closestTickProvider = null;
      function closestTickProvider$35get() {
        let t87;
        t87 = closestTickProvider;
        return t87 == null ? dart.throw(new _internal.LateError.localNI("closestTickProvider")) : t87;
      }
      dart.fn(closestTickProvider$35get, T$0.VoidToTimeRangeTickProvider());
      function closestTickProvider$35set(t88) {
        return closestTickProvider = t88;
      }
      dart.fn(closestTickProvider$35set, T$0.TimeRangeTickProviderTodynamic());
      if (!this[S$0._potentialTickProviders][S$.$isNotEmpty]) dart.assertFailed(null, I[108], 144, 12, "_potentialTickProviders.isNotEmpty");
      for (let tickProvider of this[S$0._potentialTickProviders]) {
        let difference = (stepSize - tickProvider.getClosestStepSize(stepSize))[S$.$abs]();
        if (minDifference == null || dart.notNull(minDifference) > difference) {
          minDifference = difference;
          closestTickProvider$35set(tickProvider);
        }
      }
      if (!(minDifference != null)) dart.assertFailed(null, I[108], 153, 12, "minDifference != null");
      return closestTickProvider$35get();
    }
    static createYearTickProvider(dateTimeFactory) {
      return new time_range_tick_provider_impl.TimeRangeTickProviderImpl.new(year_time_stepper.YearTimeStepper.new(dateTimeFactory));
    }
    static createMonthTickProvider(dateTimeFactory) {
      return new time_range_tick_provider_impl.TimeRangeTickProviderImpl.new(month_time_stepper.MonthTimeStepper.new(dateTimeFactory));
    }
    static createDayTickProvider(dateTimeFactory) {
      return new time_range_tick_provider_impl.TimeRangeTickProviderImpl.new(day_time_stepper.DayTimeStepper.new(dateTimeFactory));
    }
    static createHourTickProvider(dateTimeFactory) {
      return new time_range_tick_provider_impl.TimeRangeTickProviderImpl.new(hour_time_stepper.HourTimeStepper.new(dateTimeFactory));
    }
    static createMinuteTickProvider(dateTimeFactory) {
      return new time_range_tick_provider_impl.TimeRangeTickProviderImpl.new(minute_time_stepper.MinuteTimeStepper.new(dateTimeFactory));
    }
  };
  (auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider._internal = function(tickProviders) {
    if (!tickProviders[S$.$isNotEmpty]) dart.assertFailed(null, I[108], 50, 16, "tickProviders.isNotEmpty");
    this[S$0._potentialTickProviders] = tickProviders;
    ;
  }).prototype = auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.prototype;
  dart.addTypeTests(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider);
  dart.addTypeCaches(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider);
  auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider[dart.implements] = () => [tick_provider.TickProvider$(core.DateTime)];
  dart.setMethodSignature(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider, () => ({
    __proto__: dart.getMethods(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.__proto__),
    getTicks: dart.fnType(core.List$(tick.Tick$(core.DateTime)), [], {context: dart.nullable(chart_context.ChartContext), formatter: dart.nullable(core.Object), formatterValueCache: dart.nullable(core.Object), graphicsFactory: graphics_factory.GraphicsFactory, orientation: dart.nullable(axis$.AxisOrientation), scale: dart.nullable(core.Object), tickDrawStrategy: dart.nullable(core.Object), tickHint: dart.nullable(core.Object), viewportExtensionEnabled: core.bool}, {}),
    [S$0._getClosestTickProvider]: dart.fnType(time_range_tick_provider.TimeRangeTickProvider, [tick_provider.TickHint$(core.DateTime)])
  }));
  dart.setLibraryUri(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider, I[109]);
  dart.setFieldSignature(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider, () => ({
    __proto__: dart.getFields(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.__proto__),
    [S$0._potentialTickProviders]: dart.finalFieldType(core.List$(time_range_tick_provider.TimeRangeTickProvider))
  }));
  date_time_axis_spec.DateTimeTickProviderSpec = class DateTimeTickProviderSpec extends axis_spec.TickProviderSpec$(core.DateTime) {};
  (date_time_axis_spec.DateTimeTickProviderSpec.new = function() {
    ;
  }).prototype = date_time_axis_spec.DateTimeTickProviderSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.DateTimeTickProviderSpec);
  dart.addTypeCaches(date_time_axis_spec.DateTimeTickProviderSpec);
  dart.setLibraryUri(date_time_axis_spec.DateTimeTickProviderSpec, I[86]);
  date_time_axis_spec.DateTimeTickFormatterSpec = class DateTimeTickFormatterSpec extends axis_spec.TickFormatterSpec$(core.DateTime) {};
  (date_time_axis_spec.DateTimeTickFormatterSpec.new = function() {
    ;
  }).prototype = date_time_axis_spec.DateTimeTickFormatterSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.DateTimeTickFormatterSpec);
  dart.addTypeCaches(date_time_axis_spec.DateTimeTickFormatterSpec);
  dart.setLibraryUri(date_time_axis_spec.DateTimeTickFormatterSpec, I[86]);
  date_time_axis_spec.AutoDateTimeTickProviderSpec = class AutoDateTimeTickProviderSpec extends core.Object {
    get includeTime() {
      return this[S$0.includeTime];
    }
    set includeTime(value) {
      super.includeTime = value;
    }
    createTickProvider(context) {
      if (this.includeTime) {
        return auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createDefault(context.dateTimeFactory);
      } else {
        return auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createWithoutTime(context.dateTimeFactory);
      }
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_axis_spec.AutoDateTimeTickProviderSpec.is(other) && this.includeTime === other.includeTime;
    }
    get hashCode() {
      return this.includeTime[S$.$hashCode];
    }
  };
  (date_time_axis_spec.AutoDateTimeTickProviderSpec.new = function(opts) {
    let includeTime = opts && 'includeTime' in opts ? opts.includeTime : true;
    this[S$0.includeTime] = includeTime;
    ;
  }).prototype = date_time_axis_spec.AutoDateTimeTickProviderSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.AutoDateTimeTickProviderSpec);
  dart.addTypeCaches(date_time_axis_spec.AutoDateTimeTickProviderSpec);
  date_time_axis_spec.AutoDateTimeTickProviderSpec[dart.implements] = () => [date_time_axis_spec.DateTimeTickProviderSpec];
  dart.setMethodSignature(date_time_axis_spec.AutoDateTimeTickProviderSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.AutoDateTimeTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider, [chart_context.ChartContext])
  }));
  dart.setLibraryUri(date_time_axis_spec.AutoDateTimeTickProviderSpec, I[86]);
  dart.setFieldSignature(date_time_axis_spec.AutoDateTimeTickProviderSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.AutoDateTimeTickProviderSpec.__proto__),
    includeTime: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(date_time_axis_spec.AutoDateTimeTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.AutoDateTimeTickProviderSpec, ['hashCode']);
  date_time_axis_spec.DayTickProviderSpec = class DayTickProviderSpec extends core.Object {
    get increments() {
      return this[S$0.increments];
    }
    set increments(value) {
      super.increments = value;
    }
    createTickProvider(context) {
      return auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createWith(T$0.JSArrayOfTimeRangeTickProvider().of([new time_range_tick_provider_impl.TimeRangeTickProviderImpl.new(day_time_stepper.DayTimeStepper.new(context.dateTimeFactory, {allowedTickIncrements: this.increments}))]));
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_axis_spec.DayTickProviderSpec.is(other) && dart.equals(this.increments, other.increments);
    }
    get hashCode() {
      return dart.hashCode(this.increments);
    }
  };
  (date_time_axis_spec.DayTickProviderSpec.new = function(opts) {
    let increments = opts && 'increments' in opts ? opts.increments : null;
    this[S$0.increments] = increments;
    ;
  }).prototype = date_time_axis_spec.DayTickProviderSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.DayTickProviderSpec);
  dart.addTypeCaches(date_time_axis_spec.DayTickProviderSpec);
  date_time_axis_spec.DayTickProviderSpec[dart.implements] = () => [date_time_axis_spec.DateTimeTickProviderSpec];
  dart.setMethodSignature(date_time_axis_spec.DayTickProviderSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.DayTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider, [chart_context.ChartContext])
  }));
  dart.setLibraryUri(date_time_axis_spec.DayTickProviderSpec, I[86]);
  dart.setFieldSignature(date_time_axis_spec.DayTickProviderSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.DayTickProviderSpec.__proto__),
    increments: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  dart.defineExtensionMethods(date_time_axis_spec.DayTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.DayTickProviderSpec, ['hashCode']);
  date_time_axis_spec.DateTimeEndPointsTickProviderSpec = class DateTimeEndPointsTickProviderSpec extends core.Object {
    createTickProvider(context) {
      return new (T$0.EndPointsTickProviderOfDateTime()).new();
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_axis_spec.DateTimeEndPointsTickProviderSpec.is(other);
    }
  };
  (date_time_axis_spec.DateTimeEndPointsTickProviderSpec.new = function() {
    ;
  }).prototype = date_time_axis_spec.DateTimeEndPointsTickProviderSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.DateTimeEndPointsTickProviderSpec);
  dart.addTypeCaches(date_time_axis_spec.DateTimeEndPointsTickProviderSpec);
  date_time_axis_spec.DateTimeEndPointsTickProviderSpec[dart.implements] = () => [date_time_axis_spec.DateTimeTickProviderSpec];
  dart.setMethodSignature(date_time_axis_spec.DateTimeEndPointsTickProviderSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.DateTimeEndPointsTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(end_points_tick_provider.EndPointsTickProvider$(core.DateTime), [chart_context.ChartContext])
  }));
  dart.setLibraryUri(date_time_axis_spec.DateTimeEndPointsTickProviderSpec, I[86]);
  dart.defineExtensionMethods(date_time_axis_spec.DateTimeEndPointsTickProviderSpec, ['_equals']);
  date_time_axis_spec.StaticDateTimeTickProviderSpec = class StaticDateTimeTickProviderSpec extends core.Object {
    get tickSpecs() {
      return this[S$0.tickSpecs$2];
    }
    set tickSpecs(value) {
      super.tickSpecs = value;
    }
    createTickProvider(context) {
      return new (T$0.StaticTickProviderOfDateTime()).new(this.tickSpecs);
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_axis_spec.StaticDateTimeTickProviderSpec.is(other) && this.tickSpecs[S$.$_equals](other.tickSpecs);
    }
    get hashCode() {
      return this.tickSpecs[S$.$hashCode];
    }
  };
  (date_time_axis_spec.StaticDateTimeTickProviderSpec.new = function(tickSpecs) {
    this[S$0.tickSpecs$2] = tickSpecs;
    ;
  }).prototype = date_time_axis_spec.StaticDateTimeTickProviderSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.StaticDateTimeTickProviderSpec);
  dart.addTypeCaches(date_time_axis_spec.StaticDateTimeTickProviderSpec);
  date_time_axis_spec.StaticDateTimeTickProviderSpec[dart.implements] = () => [date_time_axis_spec.DateTimeTickProviderSpec];
  dart.setMethodSignature(date_time_axis_spec.StaticDateTimeTickProviderSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.StaticDateTimeTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(static_tick_provider.StaticTickProvider$(core.DateTime), [chart_context.ChartContext])
  }));
  dart.setLibraryUri(date_time_axis_spec.StaticDateTimeTickProviderSpec, I[86]);
  dart.setFieldSignature(date_time_axis_spec.StaticDateTimeTickProviderSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.StaticDateTimeTickProviderSpec.__proto__),
    tickSpecs: dart.finalFieldType(core.List$(tick_spec.TickSpec$(core.DateTime)))
  }));
  dart.defineExtensionMethods(date_time_axis_spec.StaticDateTimeTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.StaticDateTimeTickProviderSpec, ['hashCode']);
  date_time_axis_spec.TimeFormatterSpec = class TimeFormatterSpec extends core.Object {
    get format() {
      return this[S$0.format];
    }
    set format(value) {
      super.format = value;
    }
    get transitionFormat() {
      return this[S$0.transitionFormat];
    }
    set transitionFormat(value) {
      super.transitionFormat = value;
    }
    get noonFormat() {
      return this[S$0.noonFormat];
    }
    set noonFormat(value) {
      super.noonFormat = value;
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_axis_spec.TimeFormatterSpec.is(other) && this.format == other.format && this.transitionFormat == other.transitionFormat && this.noonFormat == other.noonFormat;
    }
    get hashCode() {
      let hashcode = dart.hashCode(this.format);
      hashcode = hashcode * 37 + dart.hashCode(this.transitionFormat);
      hashcode = hashcode * 37 + dart.hashCode(this.noonFormat);
      return hashcode;
    }
  };
  (date_time_axis_spec.TimeFormatterSpec.new = function(opts) {
    let format = opts && 'format' in opts ? opts.format : null;
    let transitionFormat = opts && 'transitionFormat' in opts ? opts.transitionFormat : null;
    let noonFormat = opts && 'noonFormat' in opts ? opts.noonFormat : null;
    this[S$0.format] = format;
    this[S$0.transitionFormat] = transitionFormat;
    this[S$0.noonFormat] = noonFormat;
    ;
  }).prototype = date_time_axis_spec.TimeFormatterSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.TimeFormatterSpec);
  dart.addTypeCaches(date_time_axis_spec.TimeFormatterSpec);
  dart.setLibraryUri(date_time_axis_spec.TimeFormatterSpec, I[86]);
  dart.setFieldSignature(date_time_axis_spec.TimeFormatterSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.TimeFormatterSpec.__proto__),
    format: dart.finalFieldType(dart.nullable(core.String)),
    transitionFormat: dart.finalFieldType(dart.nullable(core.String)),
    noonFormat: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(date_time_axis_spec.TimeFormatterSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.TimeFormatterSpec, ['hashCode']);
  date_time_axis_spec.BasicDateTimeTickFormatterSpec = class BasicDateTimeTickFormatterSpec extends core.Object {
    get formatter() {
      return this[S$0.formatter];
    }
    set formatter(value) {
      super.formatter = value;
    }
    get dateFormat() {
      return this[S$0.dateFormat];
    }
    set dateFormat(value) {
      super.dateFormat = value;
    }
    createTickFormatter(context) {
      if (!(this.dateFormat != null || this.formatter != null)) dart.assertFailed(null, I[85], 265, 12, "dateFormat != null || formatter != null");
      return date_time_tick_formatter.DateTimeTickFormatter.uniform(new simple_time_tick_formatter.SimpleTimeTickFormatter.new({formatter: this.dateFormat != null ? dart.bind(dart.nullCheck(this.dateFormat), 'format') : dart.nullCheck(this.formatter)}));
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || date_time_axis_spec.BasicDateTimeTickFormatterSpec.is(other) && dart.equals(this.formatter, other.formatter) && dart.equals(this.dateFormat, other.dateFormat);
    }
    get hashCode() {
      let hash = dart.hashCode(this.formatter);
      hash = hash * 37 * dart.hashCode(this.dateFormat);
      return hash;
    }
  };
  (date_time_axis_spec.BasicDateTimeTickFormatterSpec.new = function(formatter) {
    this[S$0.formatter] = formatter;
    this[S$0.dateFormat] = null;
    ;
  }).prototype = date_time_axis_spec.BasicDateTimeTickFormatterSpec.prototype;
  (date_time_axis_spec.BasicDateTimeTickFormatterSpec.fromDateFormat = function(dateFormat) {
    this[S$0.formatter] = null;
    this[S$0.dateFormat] = dateFormat;
    ;
  }).prototype = date_time_axis_spec.BasicDateTimeTickFormatterSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.BasicDateTimeTickFormatterSpec);
  dart.addTypeCaches(date_time_axis_spec.BasicDateTimeTickFormatterSpec);
  date_time_axis_spec.BasicDateTimeTickFormatterSpec[dart.implements] = () => [date_time_axis_spec.DateTimeTickFormatterSpec];
  dart.setMethodSignature(date_time_axis_spec.BasicDateTimeTickFormatterSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.BasicDateTimeTickFormatterSpec.__proto__),
    createTickFormatter: dart.fnType(date_time_tick_formatter.DateTimeTickFormatter, [chart_context.ChartContext])
  }));
  dart.setLibraryUri(date_time_axis_spec.BasicDateTimeTickFormatterSpec, I[86]);
  dart.setFieldSignature(date_time_axis_spec.BasicDateTimeTickFormatterSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.BasicDateTimeTickFormatterSpec.__proto__),
    formatter: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [core.DateTime]))),
    dateFormat: dart.finalFieldType(dart.nullable(date_format.DateFormat))
  }));
  dart.defineExtensionMethods(date_time_axis_spec.BasicDateTimeTickFormatterSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.BasicDateTimeTickFormatterSpec, ['hashCode']);
  date_time_axis_spec.AutoDateTimeTickFormatterSpec = class AutoDateTimeTickFormatterSpec extends core.Object {
    get minute() {
      return this[S$0.minute];
    }
    set minute(value) {
      super.minute = value;
    }
    get hour() {
      return this[S$0.hour];
    }
    set hour(value) {
      super.hour = value;
    }
    get day() {
      return this[S$0.day];
    }
    set day(value) {
      super.day = value;
    }
    get month() {
      return this[S$0.month];
    }
    set month(value) {
      super.month = value;
    }
    get year() {
      return this[S$0.year];
    }
    set year(value) {
      super.year = value;
    }
    createTickFormatter(context) {
      let map = new (T$0.IdentityMapOfint$TimeTickFormatter()).new();
      if (this.minute != null) {
        map[S$.$_set](60000, this[S$0._makeFormatter](dart.nullCheck(this.minute), time_tick_formatter_impl.CalendarField.hourOfDay, context));
      }
      if (this.hour != null) {
        map[S$.$_set](3600000, this[S$0._makeFormatter](dart.nullCheck(this.hour), time_tick_formatter_impl.CalendarField.date, context));
      }
      if (this.day != null) {
        map[S$.$_set](23 * 3600000, this[S$0._makeFormatter](dart.nullCheck(this.day), time_tick_formatter_impl.CalendarField.month, context));
      }
      if (this.month != null) {
        map[S$.$_set](28 * 86400000, this[S$0._makeFormatter](dart.nullCheck(this.month), time_tick_formatter_impl.CalendarField.year, context));
      }
      if (this.year != null) {
        map[S$.$_set](364 * 86400000, this[S$0._makeFormatter](dart.nullCheck(this.year), time_tick_formatter_impl.CalendarField.year, context));
      }
      return date_time_tick_formatter.DateTimeTickFormatter.new(context.dateTimeFactory, {overrides: map});
    }
    [S$0._makeFormatter](spec, transitionField, context) {
      if (spec.noonFormat != null) {
        return new hour_tick_formatter.HourTickFormatter.new({dateTimeFactory: context.dateTimeFactory, simpleFormat: spec.format, transitionFormat: spec.transitionFormat, noonFormat: spec.noonFormat});
      } else {
        return new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: context.dateTimeFactory, simpleFormat: spec.format, transitionFormat: spec.transitionFormat, transitionField: transitionField});
      }
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || date_time_axis_spec.AutoDateTimeTickFormatterSpec.is(other) && dart.equals(this.minute, other.minute) && dart.equals(this.hour, other.hour) && dart.equals(this.day, other.day) && dart.equals(this.month, other.month) && dart.equals(this.year, other.year);
    }
    get hashCode() {
      let hashcode = dart.hashCode(this.minute);
      hashcode = hashcode * 37 + dart.hashCode(this.hour);
      hashcode = hashcode * 37 + dart.hashCode(this.day);
      hashcode = hashcode * 37 + dart.hashCode(this.month);
      hashcode = hashcode * 37 + dart.hashCode(this.year);
      return hashcode;
    }
  };
  (date_time_axis_spec.AutoDateTimeTickFormatterSpec.new = function(opts) {
    let minute = opts && 'minute' in opts ? opts.minute : null;
    let hour = opts && 'hour' in opts ? opts.hour : null;
    let day = opts && 'day' in opts ? opts.day : null;
    let month = opts && 'month' in opts ? opts.month : null;
    let year = opts && 'year' in opts ? opts.year : null;
    this[S$0.minute] = minute;
    this[S$0.hour] = hour;
    this[S$0.day] = day;
    this[S$0.month] = month;
    this[S$0.year] = year;
    ;
  }).prototype = date_time_axis_spec.AutoDateTimeTickFormatterSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.AutoDateTimeTickFormatterSpec);
  dart.addTypeCaches(date_time_axis_spec.AutoDateTimeTickFormatterSpec);
  date_time_axis_spec.AutoDateTimeTickFormatterSpec[dart.implements] = () => [date_time_axis_spec.DateTimeTickFormatterSpec];
  dart.setMethodSignature(date_time_axis_spec.AutoDateTimeTickFormatterSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.AutoDateTimeTickFormatterSpec.__proto__),
    createTickFormatter: dart.fnType(date_time_tick_formatter.DateTimeTickFormatter, [chart_context.ChartContext]),
    [S$0._makeFormatter]: dart.fnType(time_tick_formatter_impl.TimeTickFormatterImpl, [date_time_axis_spec.TimeFormatterSpec, time_tick_formatter_impl.CalendarField, chart_context.ChartContext])
  }));
  dart.setLibraryUri(date_time_axis_spec.AutoDateTimeTickFormatterSpec, I[86]);
  dart.setFieldSignature(date_time_axis_spec.AutoDateTimeTickFormatterSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.AutoDateTimeTickFormatterSpec.__proto__),
    minute: dart.finalFieldType(dart.nullable(date_time_axis_spec.TimeFormatterSpec)),
    hour: dart.finalFieldType(dart.nullable(date_time_axis_spec.TimeFormatterSpec)),
    day: dart.finalFieldType(dart.nullable(date_time_axis_spec.TimeFormatterSpec)),
    month: dart.finalFieldType(dart.nullable(date_time_axis_spec.TimeFormatterSpec)),
    year: dart.finalFieldType(dart.nullable(date_time_axis_spec.TimeFormatterSpec))
  }));
  dart.defineExtensionMethods(date_time_axis_spec.AutoDateTimeTickFormatterSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.AutoDateTimeTickFormatterSpec, ['hashCode']);
  numeric_tick_provider.NumericTickProvider = class NumericTickProvider extends tick_provider.BaseTickProvider$(core.num) {
    get zeroBound() {
      return this[S$0.zeroBound];
    }
    set zeroBound(value) {
      this[S$0.zeroBound] = value;
    }
    get dataIsInWholeNumbers() {
      return this[S$0.dataIsInWholeNumbers];
    }
    set dataIsInWholeNumbers(value) {
      this[S$0.dataIsInWholeNumbers] = value;
    }
    get dataToAxisUnitConverter() {
      return this[S$0.dataToAxisUnitConverter];
    }
    set dataToAxisUnitConverter(value) {
      this[S$0.dataToAxisUnitConverter] = value;
    }
    get [S$0._low]() {
      let t90;
      t90 = this[S$0.__NumericTickProvider__low];
      return t90 == null ? dart.throw(new _internal.LateError.fieldNI("_low")) : t90;
    }
    set [S$0._low](t90) {
      this[S$0.__NumericTickProvider__low] = t90;
    }
    get [S$0._high]() {
      let t91;
      t91 = this[S$0.__NumericTickProvider__high];
      return t91 == null ? dart.throw(new _internal.LateError.fieldNI("_high")) : t91;
    }
    set [S$0._high](t91) {
      this[S$0.__NumericTickProvider__high] = t91;
    }
    setFixedTickCount(tickCount) {
      this[S$0._desiredMinTickCount] = tickCount != null && dart.notNull(tickCount) > 1 ? tickCount : null;
      this[S$0._desiredMaxTickCount] = this[S$0._desiredMinTickCount];
    }
    setTickCount(maxTickCount, minTickCount) {
      if (maxTickCount !== null && maxTickCount > 1) {
        this[S$0._desiredMaxTickCount] = maxTickCount;
        if (minTickCount !== null && minTickCount > 1 && minTickCount <= dart.nullCheck(this[S$0._desiredMaxTickCount])) {
          this[S$0._desiredMinTickCount] = minTickCount;
        } else {
          this[S$0._desiredMinTickCount] = 2;
        }
      } else {
        this[S$0._desiredMaxTickCount] = null;
        this[S$0._desiredMinTickCount] = null;
      }
      if (!(this[S$0._desiredMinTickCount] == null === (this[S$0._desiredMaxTickCount] == null))) dart.assertFailed(null, I[110], 168, 12, "(_desiredMinTickCount == null) == (_desiredMaxTickCount == null)");
    }
    set allowedSteps(steps) {
      if (!(steps !== null && steps[S$.$isNotEmpty])) dart.assertFailed(null, I[110], 183, 12, "steps != null && steps.isNotEmpty");
      steps[S$.$sort]();
      let stepSet = T$0.LinkedHashSetOfdouble().of(steps);
      this[S$0._allowedSteps] = T$0.ListOfdouble().filled(stepSet[S$.$length] * 3, 0.0);
      let stepIndex = 0;
      for (let step of stepSet) {
        if (!(1.0 <= step && step < 10.0)) dart.assertFailed(null, I[110], 190, 14, "1.0 <= step && step < 10.0");
        this[S$0._allowedSteps][S$.$_set](stepIndex, numeric_tick_provider.NumericTickProvider._removeRoundingErrors(step / 100));
        this[S$0._allowedSteps][S$.$_set](stepSet[S$.$length] + stepIndex, numeric_tick_provider.NumericTickProvider._removeRoundingErrors(step / 10));
        this[S$0._allowedSteps][S$.$_set](2 * stepSet[S$.$length] + stepIndex, numeric_tick_provider.NumericTickProvider._removeRoundingErrors(step));
        stepIndex = stepIndex + 1;
      }
    }
    [S$0._getTicksFromHint](opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      let stepSize = (tickHint.end - tickHint.start) / (tickHint.tickCount - 1);
      let tickZeroShift = tickHint.start[S$.$toDouble]() - stepSize * (tickHint.start >= 0 ? (tickHint.start / stepSize)[S$.$floor]() : (tickHint.start / stepSize)[S$.$ceil]());
      let tickStart = (scale.viewportDomain.min / stepSize)[S$.$ceil]() * stepSize + tickZeroShift;
      let stepInfo = new numeric_tick_provider._TickStepInfo.new(stepSize[S$.$abs](), tickStart);
      let tickValues = this[S$0._getTickValues](stepInfo, tickHint.tickCount);
      return this.createTicks(tickValues, {context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, stepSize: stepInfo.stepSize});
    }
    getTicks(opts) {
      let t92, t92$, t92$0;
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      numeric_scale.NumericScale.as(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      T$0.TickFormatterOfnum().as(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      T$0.MapOfnum$String().as(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      T$0.TickDrawStrategyOfnum().as(tickDrawStrategy);
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      T$0.TickHintNOfnum().as(tickHint);
      this[S$0._updateDomainExtents](scale.viewportDomain);
      if (tickHint != null) {
        return this[S$0._getTicksFromHint]({context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, tickHint: tickHint});
      }
      let selectedTicksRange = 1.7976931348623157e+308;
      let foundPreferredTicks = false;
      let viewportDomain = scale.viewportDomain;
      let axisUnitsHigh = this.dataToAxisUnitConverter.convert(this[S$0._high]);
      let axisUnitsLow = this.dataToAxisUnitConverter.convert(this[S$0._low]);
      this[S$0._updateTickCounts]({high: axisUnitsHigh, low: axisUnitsLow, rangeWidth: scale.rangeWidth});
      let mutableScale = viewportExtensionEnabled ? numeric_scale.NumericScale.as(scale.copy()) : null;
      let ticks = T$0.JSArrayOfTickOfnum().of([]);
      for (let tickCount = dart.nullCheck(this[S$0._maxTickCount]); tickCount >= dart.nullCheck(this[S$0._minTickCount]); tickCount = tickCount - 1) {
        let stepInfo = this[S$0._getStepsForTickCount](tickCount, axisUnitsHigh, axisUnitsLow);
        let firstTick = this.dataToAxisUnitConverter.invert(stepInfo.tickStart)[S$.$toDouble]();
        let lastTick = this.dataToAxisUnitConverter.invert(stepInfo.tickStart + stepInfo.stepSize * (tickCount - 1))[S$.$toDouble]();
        let range = lastTick - firstTick;
        if (range < selectedTicksRange || !foundPreferredTicks) {
          let tickValues = this[S$0._getTickValues](stepInfo, tickCount);
          if (mutableScale != null) {
            mutableScale.viewportDomain = new numeric_extents.NumericExtents.new(firstTick, lastTick);
          }
          let preferredTicks = this.createTicks(tickValues, {context: context, graphicsFactory: graphicsFactory, scale: (t92 = mutableScale, t92 == null ? scale : t92), formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, stepSize: stepInfo.stepSize});
          let collisionReport = tickDrawStrategy.collides(preferredTicks, orientation);
          if (collisionReport.ticksCollide && tickCount > dart.nullCheck(this[S$0._minTickCount])) {
            continue;
          }
          if (foundPreferredTicks && collisionReport.alternateTicksUsed) {
            continue;
          }
          ticks = collisionReport.alternateTicksUsed ? collisionReport.ticks : preferredTicks;
          foundPreferredTicks = !collisionReport.alternateTicksUsed;
          selectedTicksRange = range;
          viewportDomain = (t92$0 = (t92$ = mutableScale, t92$ == null ? null : t92$.viewportDomain), t92$0 == null ? scale.viewportDomain : t92$0);
        }
      }
      if (viewportExtensionEnabled && !scale.viewportDomain._equals(viewportDomain)) {
        scale.viewportDomain = viewportDomain;
      }
      return ticks;
    }
    [S$0._updateDomainExtents](axisExtents) {
      this[S$0._low] = axisExtents.min;
      this[S$0._high] = axisExtents.max;
      if (this.zeroBound) {
        this[S$0._low] = this[S$0._low] > 0.0 ? 0.0 : this[S$0._low];
        this[S$0._high] = this[S$0._high] < 0.0 ? 0.0 : this[S$0._high];
      }
      if (this[S$0._high] === this[S$0._low]) {
        if (this[S$0._high] === 0.0) {
          this[S$0._high] = 1.0;
        } else {
          if (this[S$0._high] > 0.0) {
            this[S$0._high] = this[S$0._high] * 1.05;
            this[S$0._low] = this[S$0._low] * 0.95;
          } else {
            this[S$0._high] = this[S$0._high] * 0.95;
            this[S$0._low] = this[S$0._low] * 1.05;
          }
        }
      }
    }
    [S$0._getStepsForTickCount](tickCount, high, low) {
      let regionCount = tickCount - 1;
      if (high >= 0 && low <= 0) {
        let posRegionRatio = high > 0 ? math.min(core.double, 1.0, high / (high - low)) : 0.0;
        let positiveRegionCount = (regionCount * posRegionRatio)[S$.$ceil]();
        let negativeRegionCount = regionCount - positiveRegionCount;
        if (negativeRegionCount === 0 && low < 0 && regionCount > 1) {
          positiveRegionCount = positiveRegionCount - 1;
          negativeRegionCount = negativeRegionCount + 1;
        }
        if (!!(low < 0 && high > 0 && (negativeRegionCount === 0 || positiveRegionCount === 0))) dart.assertFailed("Numeric tick provider cannot generate " + dart.str(tickCount) + " " + "ticks when the axis range contains both positive and negative " + "values. A minimum of three ticks are required to include zero.", I[110], 403, 11, "!(low < 0 &&\n              high > 0 &&\n              (negativeRegionCount == 0 || positiveRegionCount == 0))");
        let favorPositive = (high > 0 ? high / positiveRegionCount : 0)[S$.$abs]() > (low < 0 ? low / negativeRegionCount : 0)[S$.$abs]();
        let favoredNum = (favorPositive ? high : low)[S$.$abs]();
        let favoredRegionCount = favorPositive ? positiveRegionCount : negativeRegionCount;
        let favoredTensBase = numeric_tick_provider.NumericTickProvider._getEnclosingPowerOfTen(favoredNum)[S$.$abs]();
        for (let step of this[S$0._allowedSteps]) {
          let tmpStepSize = numeric_tick_provider.NumericTickProvider._removeRoundingErrors(step * favoredTensBase);
          if (this.dataIsInWholeNumbers && tmpStepSize[S$.$round]() !== tmpStepSize) {
            continue;
          }
          if (tmpStepSize * favoredRegionCount >= favoredNum) {
            let stepStart = negativeRegionCount > 0 ? -1 * tmpStepSize * negativeRegionCount : 0.0;
            return new numeric_tick_provider._TickStepInfo.new(tmpStepSize, stepStart);
          }
        }
      } else {
        let diffTensBase = numeric_tick_provider.NumericTickProvider._getEnclosingPowerOfTen(high - low);
        for (let step of this[S$0._allowedSteps]) {
          let tmpStepSize = numeric_tick_provider.NumericTickProvider._removeRoundingErrors(step * diffTensBase);
          if (this.dataIsInWholeNumbers && tmpStepSize[S$.$round]() !== tmpStepSize) {
            continue;
          }
          let tmpStepStart = numeric_tick_provider.NumericTickProvider._getStepLessThan(low[S$.$toDouble](), tmpStepSize);
          if (tmpStepStart + tmpStepSize * regionCount >= high) {
            return new numeric_tick_provider._TickStepInfo.new(tmpStepSize, tmpStepStart);
          }
        }
      }
      return new numeric_tick_provider._TickStepInfo.new(1.0, low[S$0.$floorToDouble]());
    }
    [S$0._getTickValues](steps, tickCount) {
      return (() => {
        let t92 = T$.JSArrayOfdouble().of([]);
        for (let i = 0; i < tickCount; i = i + 1)
          t92[S$.$add](this.dataToAxisUnitConverter.invert(numeric_tick_provider.NumericTickProvider._removeRoundingErrors(steps.tickStart + i * steps.stepSize))[S$.$toDouble]());
        return t92;
      })();
    }
    [S$0._updateTickCounts](opts) {
      let high = opts && 'high' in opts ? opts.high : null;
      let low = opts && 'low' in opts ? opts.low : null;
      let rangeWidth = opts && 'rangeWidth' in opts ? opts.rangeWidth : null;
      let tmpMaxNumMajorTicks = null;
      let tmpMinNumMajorTicks = null;
      let absoluteMinTicks = low < 0 && 0 < high ? 3 : 2;
      if (this[S$0._desiredMaxTickCount] != null) {
        tmpMinNumMajorTicks = math.max(core.int, dart.nullCheck(this[S$0._desiredMinTickCount]), absoluteMinTicks);
        tmpMaxNumMajorTicks = math.max(core.int, dart.nullCheck(this[S$0._desiredMaxTickCount]), tmpMinNumMajorTicks);
      } else {
        let minPixelsPerTick = (25)[S$.$toDouble]();
        tmpMinNumMajorTicks = absoluteMinTicks;
        tmpMaxNumMajorTicks = math.max(core.int, absoluteMinTicks, (rangeWidth / minPixelsPerTick)[S$.$floor]());
      }
      if (tmpMaxNumMajorTicks !== this[S$0._maxTickCount] || tmpMinNumMajorTicks !== this[S$0._minTickCount]) {
        this[S$0._maxTickCount] = tmpMaxNumMajorTicks;
        this[S$0._minTickCount] = tmpMinNumMajorTicks;
      }
    }
    static _getEnclosingPowerOfTen(number) {
      if (number === 0) {
        return 1.0;
      }
      return math.pow(10, (0.4342944819032518 * math.log(number[S$.$abs]()))[S$.$ceil]())[S$.$toDouble]() * (number < 0.0 ? -1.0 : 1.0);
    }
    static _getStepLessThan(number, stepSize) {
      if (number === 0.0 || stepSize === 0.0) {
        return 0.0;
      }
      return (stepSize > 0.0 ? (number / stepSize)[S$.$floor]() : (number / stepSize)[S$.$ceil]()) * stepSize;
    }
    static _removeRoundingErrors(number) {
      return number > 100.0 ? number[S$.$roundToDouble]() : (number * 1000000000)[S$.$roundToDouble]() / 1000000000;
    }
  };
  (numeric_tick_provider.NumericTickProvider.new = function() {
    this[S$0.zeroBound] = true;
    this[S$0.dataIsInWholeNumbers] = true;
    this[S$0._desiredMaxTickCount] = null;
    this[S$0._desiredMinTickCount] = null;
    this[S$0._allowedSteps] = numeric_tick_provider.NumericTickProvider.DEFAULT_STEPS;
    this[S$0.dataToAxisUnitConverter] = C[124] || CT.C124;
    this[S$0.__NumericTickProvider__low] = null;
    this[S$0.__NumericTickProvider__high] = null;
    this[S$0._minTickCount] = null;
    this[S$0._maxTickCount] = null;
    numeric_tick_provider.NumericTickProvider.__proto__.new.call(this);
    ;
  }).prototype = numeric_tick_provider.NumericTickProvider.prototype;
  dart.addTypeTests(numeric_tick_provider.NumericTickProvider);
  dart.addTypeCaches(numeric_tick_provider.NumericTickProvider);
  dart.setMethodSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getMethods(numeric_tick_provider.NumericTickProvider.__proto__),
    setFixedTickCount: dart.fnType(dart.void, [dart.nullable(core.int)]),
    setTickCount: dart.fnType(dart.void, [core.int, core.int]),
    [S$0._getTicksFromHint]: dart.fnType(core.List$(tick.Tick$(core.num)), [], {}, {context: dart.nullable(chart_context.ChartContext), formatter: tick_formatter.TickFormatter$(core.num), formatterValueCache: core.Map$(core.num, core.String), graphicsFactory: graphics_factory.GraphicsFactory, scale: numeric_scale.NumericScale, tickDrawStrategy: tick_draw_strategy.TickDrawStrategy$(core.num), tickHint: tick_provider.TickHint$(core.num)}),
    getTicks: dart.fnType(core.List$(tick.Tick$(core.num)), [], {context: dart.nullable(chart_context.ChartContext), formatter: dart.nullable(core.Object), formatterValueCache: dart.nullable(core.Object), graphicsFactory: graphics_factory.GraphicsFactory, orientation: dart.nullable(axis$.AxisOrientation), scale: dart.nullable(core.Object), tickDrawStrategy: dart.nullable(core.Object), tickHint: dart.nullable(core.Object), viewportExtensionEnabled: core.bool}, {}),
    [S$0._updateDomainExtents]: dart.fnType(dart.void, [numeric_extents.NumericExtents]),
    [S$0._getStepsForTickCount]: dart.fnType(numeric_tick_provider._TickStepInfo, [core.int, core.num, core.num]),
    [S$0._getTickValues]: dart.fnType(core.List$(core.double), [numeric_tick_provider._TickStepInfo, core.int]),
    [S$0._updateTickCounts]: dart.fnType(dart.void, [], {}, {high: core.num, low: core.num, rangeWidth: core.int})
  }));
  dart.setGetterSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getGetters(numeric_tick_provider.NumericTickProvider.__proto__),
    [S$0._low]: core.num,
    [S$0._high]: core.num
  }));
  dart.setSetterSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getSetters(numeric_tick_provider.NumericTickProvider.__proto__),
    [S$0._low]: core.num,
    [S$0._high]: core.num,
    allowedSteps: core.List$(core.double)
  }));
  dart.setLibraryUri(numeric_tick_provider.NumericTickProvider, I[111]);
  dart.setFieldSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getFields(numeric_tick_provider.NumericTickProvider.__proto__),
    zeroBound: dart.fieldType(core.bool),
    dataIsInWholeNumbers: dart.fieldType(core.bool),
    [S$0._desiredMaxTickCount]: dart.fieldType(dart.nullable(core.int)),
    [S$0._desiredMinTickCount]: dart.fieldType(dart.nullable(core.int)),
    [S$0._allowedSteps]: dart.fieldType(core.List$(core.double)),
    dataToAxisUnitConverter: dart.fieldType(unit_converter.UnitConverter$(core.num, core.num)),
    [S$0.__NumericTickProvider__low]: dart.fieldType(dart.nullable(core.num)),
    [S$0.__NumericTickProvider__high]: dart.fieldType(dart.nullable(core.num)),
    [S$0._minTickCount]: dart.fieldType(dart.nullable(core.int)),
    [S$0._maxTickCount]: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineLazy(numeric_tick_provider.NumericTickProvider, {
    /*numeric_tick_provider.NumericTickProvider.MIN_DIPS_BETWEEN_TICKS*/get MIN_DIPS_BETWEEN_TICKS() {
      return 25;
    },
    /*numeric_tick_provider.NumericTickProvider.DEFAULT_STEPS*/get DEFAULT_STEPS() {
      return C[125] || CT.C125;
    }
  }, false);
  bucketing_numeric_tick_provider.BucketingNumericTickProvider = class BucketingNumericTickProvider extends numeric_tick_provider.NumericTickProvider {
    set threshold(threshold) {
      this[S$0._threshold] = threshold;
    }
    set showBucket(showBucket) {
      this[S$0._showBucket] = showBucket;
    }
    getTicks(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      numeric_scale.NumericScale.as(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      T$0.TickFormatterOfnum().as(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      T$0.MapOfnum$String().as(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      T$0.TickDrawStrategyOfnum().as(tickDrawStrategy);
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      T$0.TickHintNOfnum().as(tickHint);
      let _threshold = this[S$0._threshold];
      let _showBucket = this[S$0._showBucket];
      if (_threshold == null) {
        dart.throw(new core.ArgumentError.new("Bucketing threshold must be set before getting ticks."));
      }
      if (_showBucket == null) {
        dart.throw(new core.ArgumentError.new("The showBucket flag must be set before getting ticks."));
      }
      let localFormatter = new bucketing_numeric_tick_provider._BucketingFormatter.new({threshold: _threshold, originalFormatter: T$0.SimpleTickFormatterBaseOfnum().as(formatter)});
      let ticks = super.getTicks({context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: localFormatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, orientation: orientation, viewportExtensionEnabled: viewportExtensionEnabled});
      let thresholdTick = new (T$0.TickOfnum()).new({value: _threshold, textElement: graphicsFactory.createTextElement(localFormatter.formatValue(_threshold)), locationPx: dart.nullCheck(dart.test(_showBucket) ? scale._get(_threshold) : scale._get(0))[S$.$toDouble](), labelOffsetPx: dart.test(_showBucket) ? -0.5 * (dart.nullCheck(scale._get(_threshold)) - dart.nullCheck(scale._get(0))) : 0.0});
      tickDrawStrategy.decorateTicks(T$0.JSArrayOfTickOfnum().of([thresholdTick]));
      ticks[S$.$removeWhere](dart.fn(tick => tick.value <= thresholdTick.value && tick.value !== 0.0, T$0.TickOfnumTobool()));
      ticks[S$.$add](thresholdTick);
      ticks[S$.$sort](dart.fn((a, b) => a.value[S$.$compareTo](b.value), T$0.TickOfnumAndTickOfnumToint()));
      return ticks;
    }
  };
  (bucketing_numeric_tick_provider.BucketingNumericTickProvider.new = function() {
    this[S$0._threshold] = null;
    this[S$0._showBucket] = null;
    bucketing_numeric_tick_provider.BucketingNumericTickProvider.__proto__.new.call(this);
    ;
  }).prototype = bucketing_numeric_tick_provider.BucketingNumericTickProvider.prototype;
  dart.addTypeTests(bucketing_numeric_tick_provider.BucketingNumericTickProvider);
  dart.addTypeCaches(bucketing_numeric_tick_provider.BucketingNumericTickProvider);
  dart.setSetterSignature(bucketing_numeric_tick_provider.BucketingNumericTickProvider, () => ({
    __proto__: dart.getSetters(bucketing_numeric_tick_provider.BucketingNumericTickProvider.__proto__),
    threshold: core.num,
    showBucket: core.bool
  }));
  dart.setLibraryUri(bucketing_numeric_tick_provider.BucketingNumericTickProvider, I[112]);
  dart.setFieldSignature(bucketing_numeric_tick_provider.BucketingNumericTickProvider, () => ({
    __proto__: dart.getFields(bucketing_numeric_tick_provider.BucketingNumericTickProvider.__proto__),
    [S$0._threshold]: dart.fieldType(dart.nullable(core.num)),
    [S$0._showBucket]: dart.fieldType(dart.nullable(core.bool))
  }));
  const _is_SimpleTickFormatterBase_default = Symbol('_is_SimpleTickFormatterBase_default');
  tick_formatter.SimpleTickFormatterBase$ = dart.generic(D => {
    var ListOfD = () => (ListOfD = dart.constFn(core.List$(D)))();
    var MapOfD$String = () => (MapOfD$String = dart.constFn(core.Map$(D, core.String)))();
    var DToString = () => (DToString = dart.constFn(dart.fnType(core.String, [D])))();
    class SimpleTickFormatterBase extends core.Object {
      format(tickValues, cache, opts) {
        ListOfD().as(tickValues);
        MapOfD$String().as(cache);
        let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
        return tickValues[S$.$map](core.String, dart.fn(value => {
          let formattedString = cache[S$.$_get](value);
          if (formattedString == null) {
            formattedString = this.formatValue(value);
            cache[S$.$_set](value, formattedString);
          }
          return formattedString;
        }, DToString()))[S$.$toList]();
      }
    }
    (SimpleTickFormatterBase.new = function() {
      ;
    }).prototype = SimpleTickFormatterBase.prototype;
    dart.addTypeTests(SimpleTickFormatterBase);
    SimpleTickFormatterBase.prototype[_is_SimpleTickFormatterBase_default] = true;
    dart.addTypeCaches(SimpleTickFormatterBase);
    SimpleTickFormatterBase[dart.implements] = () => [tick_formatter.TickFormatter$(D)];
    dart.setMethodSignature(SimpleTickFormatterBase, () => ({
      __proto__: dart.getMethods(SimpleTickFormatterBase.__proto__),
      format: dart.fnType(core.List$(core.String), [dart.nullable(core.Object), dart.nullable(core.Object)], {stepSize: dart.nullable(core.num)}, {})
    }));
    dart.setLibraryUri(SimpleTickFormatterBase, I[113]);
    return SimpleTickFormatterBase;
  });
  tick_formatter.SimpleTickFormatterBase = tick_formatter.SimpleTickFormatterBase$();
  dart.addTypeTests(tick_formatter.SimpleTickFormatterBase, _is_SimpleTickFormatterBase_default);
  bucketing_numeric_tick_provider._BucketingFormatter = class _BucketingFormatter extends tick_formatter.SimpleTickFormatterBase$(core.num) {
    formatValue(value) {
      core.num.as(value);
      if (value < this.threshold) {
        return "";
      } else if (value === this.threshold) {
        return "< " + this.originalFormatter.formatValue(value);
      } else {
        return this.originalFormatter.formatValue(value);
      }
    }
  };
  (bucketing_numeric_tick_provider._BucketingFormatter.new = function(opts) {
    let threshold = opts && 'threshold' in opts ? opts.threshold : null;
    let originalFormatter = opts && 'originalFormatter' in opts ? opts.originalFormatter : null;
    this.threshold = threshold;
    this.originalFormatter = originalFormatter;
    bucketing_numeric_tick_provider._BucketingFormatter.__proto__.new.call(this);
    ;
  }).prototype = bucketing_numeric_tick_provider._BucketingFormatter.prototype;
  dart.addTypeTests(bucketing_numeric_tick_provider._BucketingFormatter);
  dart.addTypeCaches(bucketing_numeric_tick_provider._BucketingFormatter);
  dart.setMethodSignature(bucketing_numeric_tick_provider._BucketingFormatter, () => ({
    __proto__: dart.getMethods(bucketing_numeric_tick_provider._BucketingFormatter.__proto__),
    formatValue: dart.fnType(core.String, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(bucketing_numeric_tick_provider._BucketingFormatter, I[112]);
  dart.setFieldSignature(bucketing_numeric_tick_provider._BucketingFormatter, () => ({
    __proto__: dart.getFields(bucketing_numeric_tick_provider._BucketingFormatter.__proto__),
    threshold: dart.finalFieldType(core.num),
    originalFormatter: dart.finalFieldType(tick_formatter.SimpleTickFormatterBase$(core.num))
  }));
  axis$.NumericAxis = class NumericAxis extends axis$.Axis$(core.num) {
    setScaleViewport(viewport) {
      this.autoViewport = false;
      numeric_scale.NumericScale.as(this.scale).viewportDomain = viewport;
    }
  };
  (axis$.NumericAxis.new = function(opts) {
    let t93;
    let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
    axis$.NumericAxis.__proto__.new.call(this, {tickProvider: (t93 = tickProvider, t93 == null ? new numeric_tick_provider.NumericTickProvider.new() : t93), tickFormatter: tick_formatter.NumericTickFormatter.new(), scale: new linear_scale.LinearScale.new()});
    ;
  }).prototype = axis$.NumericAxis.prototype;
  dart.addTypeTests(axis$.NumericAxis);
  dart.addTypeCaches(axis$.NumericAxis);
  dart.setMethodSignature(axis$.NumericAxis, () => ({
    __proto__: dart.getMethods(axis$.NumericAxis.__proto__),
    setScaleViewport: dart.fnType(dart.void, [numeric_extents.NumericExtents])
  }));
  dart.setLibraryUri(axis$.NumericAxis, I[90]);
  bucketing_numeric_axis.BucketingNumericAxis = class BucketingNumericAxis extends axis$.NumericAxis {
    set threshold(threshold) {
      this[S$0._threshold$1] = threshold;
      bucketing_numeric_tick_provider.BucketingNumericTickProvider.as(this.tickProvider).threshold = threshold;
    }
    set showBucket(showBucket) {
      this[S$0._showBucket$1] = showBucket;
      bucketing_numeric_tick_provider.BucketingNumericTickProvider.as(this.tickProvider).showBucket = showBucket;
    }
    getLocation(domain) {
      T$.numN().as(domain);
      if (domain == null) {
        return null;
      }
      let scale = dart.nullCheck(this.scale);
      if (this[S$0._threshold$1] != null && dart.notNull(domain) < dart.nullCheck(this[S$0._threshold$1])) {
        return dart.nullCheck(dart.nullCheck(this[S$0._showBucket$1]) ? scale._get(dart.nullCheck(this[S$0._threshold$1]) / 2) : scale._get(0.0))[S$.$toDouble]();
      } else {
        return dart.nullCheck(scale._get(domain))[S$.$toDouble]();
      }
    }
  };
  (bucketing_numeric_axis.BucketingNumericAxis.new = function() {
    this[S$0._threshold$1] = null;
    this[S$0._showBucket$1] = null;
    bucketing_numeric_axis.BucketingNumericAxis.__proto__.new.call(this, {tickProvider: new bucketing_numeric_tick_provider.BucketingNumericTickProvider.new()});
    ;
  }).prototype = bucketing_numeric_axis.BucketingNumericAxis.prototype;
  dart.addTypeTests(bucketing_numeric_axis.BucketingNumericAxis);
  dart.addTypeCaches(bucketing_numeric_axis.BucketingNumericAxis);
  dart.setSetterSignature(bucketing_numeric_axis.BucketingNumericAxis, () => ({
    __proto__: dart.getSetters(bucketing_numeric_axis.BucketingNumericAxis.__proto__),
    threshold: core.num,
    showBucket: core.bool
  }));
  dart.setLibraryUri(bucketing_numeric_axis.BucketingNumericAxis, I[114]);
  dart.setFieldSignature(bucketing_numeric_axis.BucketingNumericAxis, () => ({
    __proto__: dart.getFields(bucketing_numeric_axis.BucketingNumericAxis.__proto__),
    [S$0._threshold$1]: dart.fieldType(dart.nullable(core.num)),
    [S$0._showBucket$1]: dart.fieldType(dart.nullable(core.bool))
  }));
  bucketing_axis_spec.BucketingAxisSpec = class BucketingAxisSpec extends numeric_axis_spec.NumericAxisSpec {
    get threshold() {
      return this[S$0.threshold];
    }
    set threshold(value) {
      super.threshold = value;
    }
    get showBucket() {
      return this[S$0.showBucket];
    }
    set showBucket(value) {
      super.showBucket = value;
    }
    configure(axis, context, graphicsFactory) {
      T$.AxisOfnum().as(axis);
      super.configure(axis, context, graphicsFactory);
      if (axis$.NumericAxis.is(axis) && this.viewport != null) {
        axis.setScaleViewport(dart.nullCheck(this.viewport));
      }
      if (bucketing_numeric_axis.BucketingNumericAxis.is(axis) && this.threshold != null) {
        axis.threshold = dart.nullCheck(this.threshold);
      }
      if (bucketing_numeric_axis.BucketingNumericAxis.is(axis)) {
        axis.showBucket = this.showBucket;
      }
    }
    createAxis() {
      return new bucketing_numeric_axis.BucketingNumericAxis.new();
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || bucketing_axis_spec.BucketingAxisSpec.is(other) && this.showBucket === other.showBucket && this.threshold == other.threshold && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = hashcode * 37 + this.showBucket[S$.$hashCode];
      hashcode = hashcode * 37 + dart.hashCode(this.threshold);
      return hashcode;
    }
  };
  (bucketing_axis_spec.BucketingAxisSpec.new = function(opts) {
    let t93, t93$, t93$0, t93$1;
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let showBucket = opts && 'showBucket' in opts ? opts.showBucket : null;
    let threshold = opts && 'threshold' in opts ? opts.threshold : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    this[S$0.threshold] = threshold;
    this[S$0.showBucket] = (t93 = showBucket, t93 == null ? true : t93);
    bucketing_axis_spec.BucketingAxisSpec.__proto__.new.call(this, {renderSpec: renderSpec, tickProviderSpec: (t93$ = tickProviderSpec, t93$ == null ? C[126] || CT.C126 : t93$), tickFormatterSpec: (t93$0 = tickFormatterSpec, t93$0 == null ? new numeric_axis_spec.BasicNumericTickFormatterSpec.fromNumberFormat(number_format.NumberFormat.percentPattern()) : t93$0), showAxisLine: showAxisLine, viewport: (t93$1 = viewport, t93$1 == null ? C[111] || CT.C111 : t93$1)});
    ;
  }).prototype = bucketing_axis_spec.BucketingAxisSpec.prototype;
  dart.addTypeTests(bucketing_axis_spec.BucketingAxisSpec);
  dart.addTypeCaches(bucketing_axis_spec.BucketingAxisSpec);
  dart.setMethodSignature(bucketing_axis_spec.BucketingAxisSpec, () => ({
    __proto__: dart.getMethods(bucketing_axis_spec.BucketingAxisSpec.__proto__),
    createAxis: dart.fnType(bucketing_numeric_axis.BucketingNumericAxis, [])
  }));
  dart.setLibraryUri(bucketing_axis_spec.BucketingAxisSpec, I[115]);
  dart.setFieldSignature(bucketing_axis_spec.BucketingAxisSpec, () => ({
    __proto__: dart.getFields(bucketing_axis_spec.BucketingAxisSpec.__proto__),
    threshold: dart.finalFieldType(dart.nullable(core.num)),
    showBucket: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(bucketing_axis_spec.BucketingAxisSpec, ['_equals']);
  dart.defineExtensionAccessors(bucketing_axis_spec.BucketingAxisSpec, ['hashCode']);
  numeric_axis_spec.BasicNumericTickProviderSpec = class BasicNumericTickProviderSpec extends core.Object {
    get zeroBound() {
      return this[S$0.zeroBound$1];
    }
    set zeroBound(value) {
      super.zeroBound = value;
    }
    get dataIsInWholeNumbers() {
      return this[S$0.dataIsInWholeNumbers$1];
    }
    set dataIsInWholeNumbers(value) {
      super.dataIsInWholeNumbers = value;
    }
    get desiredTickCount() {
      return this[S$0.desiredTickCount];
    }
    set desiredTickCount(value) {
      super.desiredTickCount = value;
    }
    get desiredMinTickCount() {
      return this[S$0.desiredMinTickCount];
    }
    set desiredMinTickCount(value) {
      super.desiredMinTickCount = value;
    }
    get desiredMaxTickCount() {
      return this[S$0.desiredMaxTickCount];
    }
    set desiredMaxTickCount(value) {
      super.desiredMaxTickCount = value;
    }
    createTickProvider(context) {
      let t93, t93$, t93$0, t93$1;
      let provider = new numeric_tick_provider.NumericTickProvider.new();
      if (this.zeroBound != null) {
        provider.zeroBound = dart.nullCheck(this.zeroBound);
      }
      if (this.dataIsInWholeNumbers != null) {
        provider.dataIsInWholeNumbers = dart.nullCheck(this.dataIsInWholeNumbers);
      }
      if (this.desiredMinTickCount != null || this.desiredMaxTickCount != null || this.desiredTickCount != null) {
        provider.setTickCount((t93$ = (t93 = this.desiredMaxTickCount, t93 == null ? this.desiredTickCount : t93), t93$ == null ? 10 : t93$), (t93$1 = (t93$0 = this.desiredMinTickCount, t93$0 == null ? this.desiredTickCount : t93$0), t93$1 == null ? 2 : t93$1));
      }
      return provider;
    }
    _equals(other) {
      if (other == null) return false;
      return numeric_axis_spec.BasicNumericTickProviderSpec.is(other) && this.zeroBound == other.zeroBound && this.dataIsInWholeNumbers == other.dataIsInWholeNumbers && this.desiredTickCount == other.desiredTickCount && this.desiredMinTickCount == other.desiredMinTickCount && this.desiredMaxTickCount == other.desiredMaxTickCount;
    }
    get hashCode() {
      let hashcode = dart.hashCode(this.zeroBound);
      hashcode = hashcode * 37 + dart.hashCode(this.dataIsInWholeNumbers);
      hashcode = hashcode * 37 + dart.hashCode(this.desiredTickCount);
      hashcode = hashcode * 37 + dart.hashCode(this.desiredMinTickCount);
      hashcode = hashcode * 37 + dart.hashCode(this.desiredMaxTickCount);
      return hashcode;
    }
  };
  (numeric_axis_spec.BasicNumericTickProviderSpec.new = function(opts) {
    let zeroBound = opts && 'zeroBound' in opts ? opts.zeroBound : null;
    let dataIsInWholeNumbers = opts && 'dataIsInWholeNumbers' in opts ? opts.dataIsInWholeNumbers : null;
    let desiredTickCount = opts && 'desiredTickCount' in opts ? opts.desiredTickCount : null;
    let desiredMinTickCount = opts && 'desiredMinTickCount' in opts ? opts.desiredMinTickCount : null;
    let desiredMaxTickCount = opts && 'desiredMaxTickCount' in opts ? opts.desiredMaxTickCount : null;
    this[S$0.zeroBound$1] = zeroBound;
    this[S$0.dataIsInWholeNumbers$1] = dataIsInWholeNumbers;
    this[S$0.desiredTickCount] = desiredTickCount;
    this[S$0.desiredMinTickCount] = desiredMinTickCount;
    this[S$0.desiredMaxTickCount] = desiredMaxTickCount;
    ;
  }).prototype = numeric_axis_spec.BasicNumericTickProviderSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.BasicNumericTickProviderSpec);
  dart.addTypeCaches(numeric_axis_spec.BasicNumericTickProviderSpec);
  numeric_axis_spec.BasicNumericTickProviderSpec[dart.implements] = () => [numeric_axis_spec.NumericTickProviderSpec];
  dart.setMethodSignature(numeric_axis_spec.BasicNumericTickProviderSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.BasicNumericTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(numeric_tick_provider.NumericTickProvider, [chart_context.ChartContext])
  }));
  dart.setLibraryUri(numeric_axis_spec.BasicNumericTickProviderSpec, I[78]);
  dart.setFieldSignature(numeric_axis_spec.BasicNumericTickProviderSpec, () => ({
    __proto__: dart.getFields(numeric_axis_spec.BasicNumericTickProviderSpec.__proto__),
    zeroBound: dart.finalFieldType(dart.nullable(core.bool)),
    dataIsInWholeNumbers: dart.finalFieldType(dart.nullable(core.bool)),
    desiredTickCount: dart.finalFieldType(dart.nullable(core.int)),
    desiredMinTickCount: dart.finalFieldType(dart.nullable(core.int)),
    desiredMaxTickCount: dart.finalFieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(numeric_axis_spec.BasicNumericTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(numeric_axis_spec.BasicNumericTickProviderSpec, ['hashCode']);
  bucketing_axis_spec.BucketingNumericTickProviderSpec = class BucketingNumericTickProviderSpec extends numeric_axis_spec.BasicNumericTickProviderSpec {
    createTickProvider(context) {
      let t93, t93$, t93$0, t93$1, t93$2;
      let provider = (t93 = new bucketing_numeric_tick_provider.BucketingNumericTickProvider.new(), (() => {
        t93.zeroBound = dart.nullCheck(this.zeroBound);
        t93.dataIsInWholeNumbers = dart.nullCheck(this.dataIsInWholeNumbers);
        return t93;
      })());
      if (this.desiredMinTickCount != null || this.desiredMaxTickCount != null || this.desiredTickCount != null) {
        provider.setTickCount((t93$0 = (t93$ = this.desiredMaxTickCount, t93$ == null ? this.desiredTickCount : t93$), t93$0 == null ? 10 : t93$0), (t93$2 = (t93$1 = this.desiredMinTickCount, t93$1 == null ? this.desiredTickCount : t93$1), t93$2 == null ? 2 : t93$2));
      }
      return provider;
    }
  };
  (bucketing_axis_spec.BucketingNumericTickProviderSpec.new = function(opts) {
    let t93, t93$;
    let zeroBound = opts && 'zeroBound' in opts ? opts.zeroBound : null;
    let dataIsInWholeNumbers = opts && 'dataIsInWholeNumbers' in opts ? opts.dataIsInWholeNumbers : null;
    let desiredTickCount = opts && 'desiredTickCount' in opts ? opts.desiredTickCount : null;
    let desiredMinTickCount = opts && 'desiredMinTickCount' in opts ? opts.desiredMinTickCount : null;
    let desiredMaxTickCount = opts && 'desiredMaxTickCount' in opts ? opts.desiredMaxTickCount : null;
    bucketing_axis_spec.BucketingNumericTickProviderSpec.__proto__.new.call(this, {zeroBound: (t93 = zeroBound, t93 == null ? true : t93), dataIsInWholeNumbers: (t93$ = dataIsInWholeNumbers, t93$ == null ? false : t93$), desiredTickCount: desiredTickCount, desiredMinTickCount: desiredMinTickCount, desiredMaxTickCount: desiredMaxTickCount});
    ;
  }).prototype = bucketing_axis_spec.BucketingNumericTickProviderSpec.prototype;
  dart.addTypeTests(bucketing_axis_spec.BucketingNumericTickProviderSpec);
  dart.addTypeCaches(bucketing_axis_spec.BucketingNumericTickProviderSpec);
  dart.setMethodSignature(bucketing_axis_spec.BucketingNumericTickProviderSpec, () => ({
    __proto__: dart.getMethods(bucketing_axis_spec.BucketingNumericTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(bucketing_numeric_tick_provider.BucketingNumericTickProvider, [chart_context.ChartContext])
  }));
  dart.setLibraryUri(bucketing_axis_spec.BucketingNumericTickProviderSpec, I[115]);
  const _is_BaseRenderSpec_default = Symbol('_is_BaseRenderSpec_default');
  base_tick_draw_strategy.BaseRenderSpec$ = dart.generic(D => {
    class BaseRenderSpec extends core.Object {
      get labelStyle() {
        return this[S$0.labelStyle];
      }
      set labelStyle(value) {
        super.labelStyle = value;
      }
      get labelAnchor() {
        return this[S$0.labelAnchor$1];
      }
      set labelAnchor(value) {
        super.labelAnchor = value;
      }
      get labelJustification() {
        return this[S$0.labelJustification];
      }
      set labelJustification(value) {
        super.labelJustification = value;
      }
      get labelOffsetFromAxisPx() {
        return this[S$0.labelOffsetFromAxisPx];
      }
      set labelOffsetFromAxisPx(value) {
        super.labelOffsetFromAxisPx = value;
      }
      get labelCollisionOffsetFromAxisPx() {
        return this[S$0.labelCollisionOffsetFromAxisPx];
      }
      set labelCollisionOffsetFromAxisPx(value) {
        super.labelCollisionOffsetFromAxisPx = value;
      }
      get labelOffsetFromTickPx() {
        return this[S$0.labelOffsetFromTickPx];
      }
      set labelOffsetFromTickPx(value) {
        super.labelOffsetFromTickPx = value;
      }
      get labelCollisionOffsetFromTickPx() {
        return this[S$0.labelCollisionOffsetFromTickPx];
      }
      set labelCollisionOffsetFromTickPx(value) {
        super.labelCollisionOffsetFromTickPx = value;
      }
      get minimumPaddingBetweenLabelsPx() {
        return this[S$0.minimumPaddingBetweenLabelsPx];
      }
      set minimumPaddingBetweenLabelsPx(value) {
        super.minimumPaddingBetweenLabelsPx = value;
      }
      get labelRotation() {
        return this[S$0.labelRotation];
      }
      set labelRotation(value) {
        super.labelRotation = value;
      }
      get labelCollisionRotation() {
        return this[S$0.labelCollisionRotation];
      }
      set labelCollisionRotation(value) {
        super.labelCollisionRotation = value;
      }
      get axisLineStyle() {
        return this[S$0.axisLineStyle];
      }
      set axisLineStyle(value) {
        super.axisLineStyle = value;
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || base_tick_draw_strategy.BaseRenderSpec.is(other) && dart.equals(this.labelStyle, other.labelStyle) && this.labelAnchor == other.labelAnchor && this.labelJustification == other.labelJustification && this.labelOffsetFromTickPx == other.labelOffsetFromTickPx && this.labelCollisionOffsetFromTickPx == other.labelCollisionOffsetFromTickPx && this.labelOffsetFromAxisPx == other.labelOffsetFromAxisPx && this.labelCollisionOffsetFromAxisPx == other.labelCollisionOffsetFromAxisPx && this.minimumPaddingBetweenLabelsPx == other.minimumPaddingBetweenLabelsPx && this.labelRotation == other.labelRotation && this.labelCollisionRotation == other.labelCollisionRotation && dart.equals(this.axisLineStyle, other.axisLineStyle);
      }
      get hashCode() {
        let hashcode = dart.hashCode(this.labelStyle);
        hashcode = hashcode * 37 + dart.hashCode(this.labelAnchor);
        hashcode = hashcode * 37 + dart.hashCode(this.labelJustification);
        hashcode = hashcode * 37 + dart.hashCode(this.labelOffsetFromTickPx);
        hashcode = hashcode * 37 + dart.hashCode(this.labelCollisionOffsetFromTickPx);
        hashcode = hashcode * 37 + dart.hashCode(this.labelOffsetFromAxisPx);
        hashcode = hashcode * 37 + dart.hashCode(this.labelCollisionOffsetFromAxisPx);
        hashcode = hashcode * 37 + dart.hashCode(this.minimumPaddingBetweenLabelsPx);
        hashcode = hashcode * 37 + dart.hashCode(this.labelRotation);
        hashcode = hashcode * 37 + dart.hashCode(this.labelCollisionRotation);
        hashcode = hashcode * 37 + dart.hashCode(this.axisLineStyle);
        return hashcode;
      }
    }
    (BaseRenderSpec.new = function(opts) {
      let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelCollisionOffsetFromAxisPx = opts && 'labelCollisionOffsetFromAxisPx' in opts ? opts.labelCollisionOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let labelCollisionOffsetFromTickPx = opts && 'labelCollisionOffsetFromTickPx' in opts ? opts.labelCollisionOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      let labelCollisionRotation = opts && 'labelCollisionRotation' in opts ? opts.labelCollisionRotation : null;
      let axisLineStyle = opts && 'axisLineStyle' in opts ? opts.axisLineStyle : null;
      this[S$0.labelStyle] = labelStyle;
      this[S$0.labelAnchor$1] = labelAnchor;
      this[S$0.labelJustification] = labelJustification;
      this[S$0.labelOffsetFromAxisPx] = labelOffsetFromAxisPx;
      this[S$0.labelCollisionOffsetFromAxisPx] = labelCollisionOffsetFromAxisPx;
      this[S$0.labelOffsetFromTickPx] = labelOffsetFromTickPx;
      this[S$0.labelCollisionOffsetFromTickPx] = labelCollisionOffsetFromTickPx;
      this[S$0.minimumPaddingBetweenLabelsPx] = minimumPaddingBetweenLabelsPx;
      this[S$0.labelRotation] = labelRotation;
      this[S$0.labelCollisionRotation] = labelCollisionRotation;
      this[S$0.axisLineStyle] = axisLineStyle;
      ;
    }).prototype = BaseRenderSpec.prototype;
    dart.addTypeTests(BaseRenderSpec);
    BaseRenderSpec.prototype[_is_BaseRenderSpec_default] = true;
    dart.addTypeCaches(BaseRenderSpec);
    BaseRenderSpec[dart.implements] = () => [axis_spec.RenderSpec$(D)];
    dart.setLibraryUri(BaseRenderSpec, I[116]);
    dart.setFieldSignature(BaseRenderSpec, () => ({
      __proto__: dart.getFields(BaseRenderSpec.__proto__),
      labelStyle: dart.finalFieldType(dart.nullable(axis_spec.TextStyleSpec)),
      labelAnchor: dart.finalFieldType(dart.nullable(axis_spec.TickLabelAnchor)),
      labelJustification: dart.finalFieldType(dart.nullable(axis_spec.TickLabelJustification)),
      labelOffsetFromAxisPx: dart.finalFieldType(dart.nullable(core.int)),
      labelCollisionOffsetFromAxisPx: dart.finalFieldType(dart.nullable(core.int)),
      labelOffsetFromTickPx: dart.finalFieldType(dart.nullable(core.int)),
      labelCollisionOffsetFromTickPx: dart.finalFieldType(dart.nullable(core.int)),
      minimumPaddingBetweenLabelsPx: dart.finalFieldType(dart.nullable(core.int)),
      labelRotation: dart.finalFieldType(dart.nullable(core.int)),
      labelCollisionRotation: dart.finalFieldType(dart.nullable(core.int)),
      axisLineStyle: dart.finalFieldType(dart.nullable(axis_spec.LineStyleSpec))
    }));
    dart.defineExtensionMethods(BaseRenderSpec, ['_equals']);
    dart.defineExtensionAccessors(BaseRenderSpec, ['hashCode']);
    return BaseRenderSpec;
  });
  base_tick_draw_strategy.BaseRenderSpec = base_tick_draw_strategy.BaseRenderSpec$();
  dart.addTypeTests(base_tick_draw_strategy.BaseRenderSpec, _is_BaseRenderSpec_default);
  const _is_SmallTickRendererSpec_default = Symbol('_is_SmallTickRendererSpec_default');
  small_tick_draw_strategy.SmallTickRendererSpec$ = dart.generic(D => {
    var SmallTickDrawStrategyOfD = () => (SmallTickDrawStrategyOfD = dart.constFn(small_tick_draw_strategy.SmallTickDrawStrategy$(D)))();
    class SmallTickRendererSpec extends base_tick_draw_strategy.BaseRenderSpec$(D) {
      get lineStyle() {
        return this[S$0.lineStyle];
      }
      set lineStyle(value) {
        super.lineStyle = value;
      }
      get tickLengthPx() {
        return this[S$0.tickLengthPx];
      }
      set tickLengthPx(value) {
        super.tickLengthPx = value;
      }
      createDrawStrategy(context, graphicsFactory) {
        return new (SmallTickDrawStrategyOfD()).new(context, graphicsFactory, {tickLengthPx: this.tickLengthPx, lineStyleSpec: this.lineStyle, labelStyleSpec: this.labelStyle, axisLineStyleSpec: this.axisLineStyle, labelAnchor: this.labelAnchor, labelJustification: this.labelJustification, labelOffsetFromAxisPx: this.labelOffsetFromAxisPx, labelCollisionOffsetFromAxisPx: this.labelCollisionOffsetFromAxisPx, labelOffsetFromTickPx: this.labelOffsetFromTickPx, labelCollisionOffsetFromTickPx: this.labelCollisionOffsetFromTickPx, minimumPaddingBetweenLabelsPx: this.minimumPaddingBetweenLabelsPx, labelRotation: this.labelRotation, labelCollisionRotation: this.labelCollisionRotation});
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || small_tick_draw_strategy.SmallTickRendererSpec.is(other) && dart.equals(this.lineStyle, other.lineStyle) && this.tickLengthPx == other.tickLengthPx && super._equals(other);
      }
      get hashCode() {
        let hashcode = dart.hashCode(this.lineStyle);
        hashcode = hashcode * 37 + dart.hashCode(this.tickLengthPx);
        hashcode = hashcode * 37 + super.hashCode;
        return hashcode;
      }
    }
    (SmallTickRendererSpec.new = function(opts) {
      let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
      let lineStyle = opts && 'lineStyle' in opts ? opts.lineStyle : null;
      let axisLineStyle = opts && 'axisLineStyle' in opts ? opts.axisLineStyle : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelCollisionOffsetFromAxisPx = opts && 'labelCollisionOffsetFromAxisPx' in opts ? opts.labelCollisionOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let labelCollisionOffsetFromTickPx = opts && 'labelCollisionOffsetFromTickPx' in opts ? opts.labelCollisionOffsetFromTickPx : null;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      let labelCollisionRotation = opts && 'labelCollisionRotation' in opts ? opts.labelCollisionRotation : null;
      this[S$0.lineStyle] = lineStyle;
      this[S$0.tickLengthPx] = tickLengthPx;
      SmallTickRendererSpec.__proto__.new.call(this, {labelStyle: labelStyle, labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelCollisionOffsetFromAxisPx: labelCollisionOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, labelCollisionOffsetFromTickPx: labelCollisionOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation, labelCollisionRotation: labelCollisionRotation, axisLineStyle: axisLineStyle});
      ;
    }).prototype = SmallTickRendererSpec.prototype;
    dart.addTypeTests(SmallTickRendererSpec);
    SmallTickRendererSpec.prototype[_is_SmallTickRendererSpec_default] = true;
    dart.addTypeCaches(SmallTickRendererSpec);
    dart.setMethodSignature(SmallTickRendererSpec, () => ({
      __proto__: dart.getMethods(SmallTickRendererSpec.__proto__),
      createDrawStrategy: dart.fnType(tick_draw_strategy.TickDrawStrategy$(D), [chart_context.ChartContext, graphics_factory.GraphicsFactory])
    }));
    dart.setLibraryUri(SmallTickRendererSpec, I[117]);
    dart.setFieldSignature(SmallTickRendererSpec, () => ({
      __proto__: dart.getFields(SmallTickRendererSpec.__proto__),
      lineStyle: dart.finalFieldType(dart.nullable(axis_spec.LineStyleSpec)),
      tickLengthPx: dart.finalFieldType(dart.nullable(core.int))
    }));
    dart.defineExtensionMethods(SmallTickRendererSpec, ['_equals']);
    dart.defineExtensionAccessors(SmallTickRendererSpec, ['hashCode']);
    return SmallTickRendererSpec;
  });
  small_tick_draw_strategy.SmallTickRendererSpec = small_tick_draw_strategy.SmallTickRendererSpec$();
  dart.addTypeTests(small_tick_draw_strategy.SmallTickRendererSpec, _is_SmallTickRendererSpec_default);
  const _is_RangeTickRendererSpec_default = Symbol('_is_RangeTickRendererSpec_default');
  range_tick_draw_strategy.RangeTickRendererSpec$ = dart.generic(D => {
    var RangeTickDrawStrategyOfD = () => (RangeTickDrawStrategyOfD = dart.constFn(range_tick_draw_strategy.RangeTickDrawStrategy$(D)))();
    class RangeTickRendererSpec extends small_tick_draw_strategy.SmallTickRendererSpec$(D) {
      get rangeShadeStyle() {
        return this[S$0.rangeShadeStyle];
      }
      set rangeShadeStyle(value) {
        super.rangeShadeStyle = value;
      }
      get rangeLabelStyle() {
        return this[S$0.rangeLabelStyle];
      }
      set rangeLabelStyle(value) {
        super.rangeLabelStyle = value;
      }
      get rangeTickLengthPx() {
        return this[S$0.rangeTickLengthPx];
      }
      set rangeTickLengthPx(value) {
        super.rangeTickLengthPx = value;
      }
      get rangeShadeHeightPx() {
        return this[S$0.rangeShadeHeightPx];
      }
      set rangeShadeHeightPx(value) {
        super.rangeShadeHeightPx = value;
      }
      get rangeShadeOffsetFromAxisPx() {
        return this[S$0.rangeShadeOffsetFromAxisPx];
      }
      set rangeShadeOffsetFromAxisPx(value) {
        super.rangeShadeOffsetFromAxisPx = value;
      }
      get rangeTickOffsetPx() {
        return this[S$0.rangeTickOffsetPx];
      }
      set rangeTickOffsetPx(value) {
        super.rangeTickOffsetPx = value;
      }
      get defaultLabelStyleSpec() {
        return this[S$0.defaultLabelStyleSpec$1];
      }
      set defaultLabelStyleSpec(value) {
        super.defaultLabelStyleSpec = value;
      }
      createDrawStrategy(context, graphicsFactory) {
        let t93;
        return new (RangeTickDrawStrategyOfD()).new(context, graphicsFactory, {tickLength: this.tickLengthPx, rangeLabelTextStyleSpec: this.rangeLabelStyle, rangeTickLength: this.rangeTickLengthPx, rangeShadeHeight: this.rangeShadeHeightPx, rangeShadeOffsetFromAxis: this.rangeShadeOffsetFromAxisPx, rangeTickOffset: this.rangeTickOffsetPx, lineStyleSpec: this.lineStyle, labelStyleSpec: (t93 = this.labelStyle, t93 == null ? this.defaultLabelStyleSpec : t93), axisLineStyleSpec: this.axisLineStyle, rangeShadeStyleSpec: this.rangeShadeStyle, labelAnchor: this.labelAnchor, labelJustification: this.labelJustification, labelOffsetFromAxisPx: this.labelOffsetFromAxisPx, labelCollisionOffsetFromAxisPx: this.labelCollisionOffsetFromAxisPx, labelOffsetFromTickPx: this.labelOffsetFromTickPx, labelCollisionOffsetFromTickPx: this.labelCollisionOffsetFromTickPx, minimumPaddingBetweenLabelsPx: this.minimumPaddingBetweenLabelsPx, labelRotation: this.labelRotation, labelCollisionRotation: this.labelCollisionRotation});
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || range_tick_draw_strategy.RangeTickRendererSpec.is(other) && super._equals(other);
      }
    }
    (RangeTickRendererSpec.new = function(opts) {
      let t93, t93$;
      let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
      let lineStyle = opts && 'lineStyle' in opts ? opts.lineStyle : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelCollisionOffsetFromAxisPx = opts && 'labelCollisionOffsetFromAxisPx' in opts ? opts.labelCollisionOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let labelCollisionOffsetFromTickPx = opts && 'labelCollisionOffsetFromTickPx' in opts ? opts.labelCollisionOffsetFromTickPx : null;
      let rangeShadeHeightPx = opts && 'rangeShadeHeightPx' in opts ? opts.rangeShadeHeightPx : null;
      let rangeShadeOffsetFromAxisPx = opts && 'rangeShadeOffsetFromAxisPx' in opts ? opts.rangeShadeOffsetFromAxisPx : null;
      let rangeShadeStyle = opts && 'rangeShadeStyle' in opts ? opts.rangeShadeStyle : null;
      let rangeTickLengthPx = opts && 'rangeTickLengthPx' in opts ? opts.rangeTickLengthPx : null;
      let rangeTickOffsetPx = opts && 'rangeTickOffsetPx' in opts ? opts.rangeTickOffsetPx : null;
      let rangeLabelStyle = opts && 'rangeLabelStyle' in opts ? opts.rangeLabelStyle : null;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      let labelCollisionRotation = opts && 'labelCollisionRotation' in opts ? opts.labelCollisionRotation : null;
      this[S$0.rangeShadeHeightPx] = rangeShadeHeightPx;
      this[S$0.rangeShadeOffsetFromAxisPx] = rangeShadeOffsetFromAxisPx;
      this[S$0.rangeShadeStyle] = rangeShadeStyle;
      this[S$0.rangeTickLengthPx] = rangeTickLengthPx;
      this[S$0.rangeTickOffsetPx] = rangeTickOffsetPx;
      this[S$0.rangeLabelStyle] = rangeLabelStyle;
      this[S$0.defaultLabelStyleSpec$1] = new axis_spec.TextStyleSpec.new({fontSize: 9, color: style_factory.StyleFactory.style.tickColor});
      RangeTickRendererSpec.__proto__.new.call(this, {axisLineStyle: lineStyle, labelStyle: labelStyle, labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: (t93 = labelOffsetFromAxisPx, t93 == null ? 2 : t93), labelCollisionOffsetFromAxisPx: labelCollisionOffsetFromAxisPx, labelOffsetFromTickPx: (t93$ = labelOffsetFromTickPx, t93$ == null ? -4 : t93$), labelCollisionOffsetFromTickPx: labelCollisionOffsetFromTickPx, tickLengthPx: tickLengthPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation, labelCollisionRotation: labelCollisionRotation});
      ;
    }).prototype = RangeTickRendererSpec.prototype;
    dart.addTypeTests(RangeTickRendererSpec);
    RangeTickRendererSpec.prototype[_is_RangeTickRendererSpec_default] = true;
    dart.addTypeCaches(RangeTickRendererSpec);
    dart.setLibraryUri(RangeTickRendererSpec, I[118]);
    dart.setFieldSignature(RangeTickRendererSpec, () => ({
      __proto__: dart.getFields(RangeTickRendererSpec.__proto__),
      rangeShadeStyle: dart.finalFieldType(dart.nullable(axis_spec.LineStyleSpec)),
      rangeLabelStyle: dart.finalFieldType(dart.nullable(axis_spec.TextStyleSpec)),
      rangeTickLengthPx: dart.finalFieldType(dart.nullable(core.int)),
      rangeShadeHeightPx: dart.finalFieldType(dart.nullable(core.int)),
      rangeShadeOffsetFromAxisPx: dart.finalFieldType(dart.nullable(core.int)),
      rangeTickOffsetPx: dart.finalFieldType(dart.nullable(core.int)),
      defaultLabelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec)
    }));
    dart.defineExtensionMethods(RangeTickRendererSpec, ['_equals']);
    return RangeTickRendererSpec;
  });
  range_tick_draw_strategy.RangeTickRendererSpec = range_tick_draw_strategy.RangeTickRendererSpec$();
  dart.defineLazy(range_tick_draw_strategy.RangeTickRendererSpec, {
    /*range_tick_draw_strategy.RangeTickRendererSpec.defaultLabelOffsetFromAxis*/get defaultLabelOffsetFromAxis() {
      return 2;
    },
    /*range_tick_draw_strategy.RangeTickRendererSpec.defaultLabelOffsetFromTick*/get defaultLabelOffsetFromTick() {
      return -4;
    }
  }, false);
  dart.addTypeTests(range_tick_draw_strategy.RangeTickRendererSpec, _is_RangeTickRendererSpec_default);
  const _is_BaseTickDrawStrategy_default = Symbol('_is_BaseTickDrawStrategy_default');
  base_tick_draw_strategy.BaseTickDrawStrategy$ = dart.generic(D => {
    var TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    var ListOfTickOfD = () => (ListOfTickOfD = dart.constFn(core.List$(TickOfD())))();
    var ListNOfTickOfD = () => (ListNOfTickOfD = dart.constFn(dart.nullable(ListOfTickOfD())))();
    var CollisionReportOfD = () => (CollisionReportOfD = dart.constFn(collision_report.CollisionReport$(D)))();
    var JSArrayOfTickOfD = () => (JSArrayOfTickOfD = dart.constFn(_interceptors.JSArray$(TickOfD())))();
    var TickOfDAndTickOfDToint = () => (TickOfDAndTickOfDToint = dart.constFn(dart.fnType(core.int, [TickOfD(), TickOfD()])))();
    var doubleAndTickOfDTodouble = () => (doubleAndTickOfDTodouble = dart.constFn(dart.fnType(core.double, [core.double, TickOfD()])))();
    class BaseTickDrawStrategy extends core.Object {
      get chartContext() {
        return this[S$0.chartContext];
      }
      set chartContext(value) {
        super.chartContext = value;
      }
      get graphicsFactory() {
        return this[S$0.graphicsFactory$9];
      }
      set graphicsFactory(value) {
        super.graphicsFactory = value;
      }
      get axisLineStyle() {
        return this[S$0.axisLineStyle$1];
      }
      set axisLineStyle(value) {
        this[S$0.axisLineStyle$1] = value;
      }
      get labelStyle() {
        return this[S$0.labelStyle$1];
      }
      set labelStyle(value) {
        this[S$0.labelStyle$1] = value;
      }
      get tickLabelJustification() {
        return this[S$0.tickLabelJustification];
      }
      set tickLabelJustification(value) {
        this[S$0.tickLabelJustification] = value;
      }
      get minimumPaddingBetweenLabelsPx() {
        return this[S$0.minimumPaddingBetweenLabelsPx$1];
      }
      set minimumPaddingBetweenLabelsPx(value) {
        this[S$0.minimumPaddingBetweenLabelsPx$1] = value;
      }
      static _degToRad(deg) {
        return deg * (3.141592653589793 / 180.0);
      }
      labelRotation(opts) {
        let collision = opts && 'collision' in opts ? opts.collision : null;
        return collision && this[S$0._rotateOnCollision] ? this[S$0._labelCollisionRotation] : this[S$0._labelDefaultRotation];
      }
      labelOffsetFromAxisPx(opts) {
        let collision = opts && 'collision' in opts ? opts.collision : null;
        return collision && this[S$0._rotateOnCollision] ? this[S$0._labelCollisionOffsetFromAxisPx] : this[S$0._labelDefaultOffsetFromAxisPx];
      }
      labelOffsetFromTickPx(opts) {
        let collision = opts && 'collision' in opts ? opts.collision : null;
        return collision && this[S$0._rotateOnCollision] ? this[S$0._labelCollisionOffsetFromTickPx] : this[S$0._labelDefaultOffsetFromTickPx];
      }
      tickLabelAnchor(opts) {
        let collision = opts && 'collision' in opts ? opts.collision : null;
        return collision && this[S$0._rotateOnCollision] ? axis_spec.TickLabelAnchor.after : this[S$0._defaultTickLabelAnchor];
      }
      decorateTicks(ticks) {
        let t95, t95$, t95$0, t95$1;
        ListOfTickOfD().as(ticks);
        for (let tick of ticks) {
          let textElement = tick.textElement;
          if (textElement == null) {
            continue;
          }
          if (textElement.textStyle == null) {
            textElement.textStyle = this.labelStyle;
          } else {
            let textStyle = dart.nullCheck(textElement.textStyle);
            t95 = textStyle;
            t95.color == null ? t95.color = this.labelStyle.color : null;
            t95$ = textStyle;
            t95$.fontFamily == null ? t95$.fontFamily = this.labelStyle.fontFamily : null;
            t95$0 = textStyle;
            t95$0.fontSize == null ? t95$0.fontSize = this.labelStyle.fontSize : null;
            t95$1 = textStyle;
            t95$1.lineHeight == null ? t95$1.lineHeight = this.labelStyle.lineHeight : null;
          }
        }
      }
      updateTickWidth(ticks, maxWidth, maxHeight, orientation, opts) {
        ListOfTickOfD().as(ticks);
        let collision = opts && 'collision' in opts ? opts.collision : false;
        let isVertical = orientation !== null && orientation === axis$.AxisOrientation.right || orientation === axis$.AxisOrientation.left;
        let rotationRelativeToAxis = this.labelRotation({collision: collision})[S$.$toDouble]();
        let rotationRads = base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(rotationRelativeToAxis - (isVertical ? 90 : 0))[S$.$abs]();
        let availableSpace = (isVertical ? maxWidth : maxHeight) - this.labelOffsetFromAxisPx({collision: collision});
        let maxTextWidth = math.sin(rotationRads) === 0 ? null : (availableSpace / math.sin(rotationRads))[S$.$floor]();
        for (let tick of ticks) {
          if (maxTextWidth != null) {
            dart.nullCheck(tick.textElement).maxWidth = maxTextWidth;
            dart.nullCheck(tick.textElement).maxWidthStrategy = text_element.MaxWidthStrategy.ellipsize;
          } else {
            dart.nullCheck(tick.textElement).maxWidth = null;
            dart.nullCheck(tick.textElement).maxWidthStrategy = null;
          }
        }
      }
      collides(ticks, orientation) {
        let t96, t96$, t96$0, t96$1, t96$2;
        ListNOfTickOfD().as(ticks);
        if (ticks == null) {
          return new (CollisionReportOfD()).new({ticksCollide: false, ticks: ticks, alternateTicksUsed: false});
        }
        let vertical = orientation === axis$.AxisOrientation.left || orientation === axis$.AxisOrientation.right;
        ticks = (() => {
          let t95 = JSArrayOfTickOfD().of([]);
          for (let tick of ticks)
            if (tick.locationPx != null) t95[S$.$add](tick);
          return t95;
        })();
        ticks[S$.$sort](dart.fn((a, b) => dart.nullCheck(a.locationPx)[S$.$compareTo](dart.nullCheck(b.locationPx)), TickOfDAndTickOfDToint()));
        let previousEnd = -1 / 0;
        let collides = false;
        for (let tick of ticks) {
          let tickSize = (t96 = tick.textElement, t96 == null ? null : t96.measurement);
          let tickLocationPx = dart.nullCheck(tick.locationPx);
          if (vertical) {
            let adjustedHeight = dart.notNull((t96$0 = (t96$ = tickSize, t96$ == null ? null : t96$.verticalSliceWidth), t96$0 == null ? 0.0 : t96$0)) + this.minimumPaddingBetweenLabelsPx;
            if (this[S$0._defaultTickLabelAnchor] === axis_spec.TickLabelAnchor.inside) {
              if (tick === ticks[S$.$first]) {
                collides = false;
                previousEnd = tickLocationPx + adjustedHeight;
              } else if (tick === ticks[S$.$last]) {
                collides = previousEnd > tickLocationPx - adjustedHeight;
                previousEnd = tickLocationPx;
              } else {
                let halfHeight = adjustedHeight / 2;
                collides = previousEnd > tickLocationPx - halfHeight;
                previousEnd = tickLocationPx + halfHeight;
              }
            } else {
              collides = previousEnd > tickLocationPx;
              previousEnd = tickLocationPx + adjustedHeight;
            }
          } else {
            let textDirection = this[S$0._normalizeHorizontalAnchor](this[S$0._defaultTickLabelAnchor], this.chartContext.isRtl, tick === ticks[S$.$first], tick === ticks[S$.$last]);
            let adjustedWidth = dart.notNull((t96$2 = (t96$1 = tickSize, t96$1 == null ? null : t96$1.horizontalSliceWidth), t96$2 == null ? 0.0 : t96$2)) + this.minimumPaddingBetweenLabelsPx;
            switch (textDirection) {
              case C[127] || CT.C127:
              {
                collides = previousEnd > tickLocationPx;
                previousEnd = tickLocationPx + adjustedWidth;
                break;
              }
              case C[128] || CT.C128:
              {
                collides = previousEnd > tickLocationPx - adjustedWidth;
                previousEnd = tickLocationPx;
                break;
              }
              case C[129] || CT.C129:
              {
                let halfWidth = adjustedWidth / 2;
                collides = previousEnd > tickLocationPx - halfWidth;
                previousEnd = tickLocationPx + halfWidth;
                break;
              }
            }
          }
          if (collides) {
            return new (CollisionReportOfD()).new({ticksCollide: true, ticks: ticks, alternateTicksUsed: false});
          }
        }
        return new (CollisionReportOfD()).new({ticksCollide: false, ticks: ticks, alternateTicksUsed: false});
      }
      measureVerticallyDrawnTicks(ticks, maxWidth, maxHeight, opts) {
        ListOfTickOfD().as(ticks);
        let collision = opts && 'collision' in opts ? opts.collision : false;
        let maxHorizontalSliceWidth = ticks[S$0.$fold](core.double, 0.0, dart.fn((prevMax, tick) => {
          let labelElements = this.splitLabel(dart.nullCheck(tick.textElement));
          return math.max(core.double, prevMax, this.calculateWidthForRotatedLabel(this.labelRotation({collision: collision}), this.getLabelHeight(labelElements), this.getLabelWidth(labelElements)) + this.labelOffsetFromAxisPx({collision: collision}));
        }, doubleAndTickOfDTodouble()))[S$.$round]();
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: maxHorizontalSliceWidth, preferredHeight: maxHeight});
      }
      measureHorizontallyDrawnTicks(ticks, maxWidth, maxHeight, opts) {
        ListOfTickOfD().as(ticks);
        let collision = opts && 'collision' in opts ? opts.collision : false;
        let maxVerticalSliceWidth = ticks[S$0.$fold](core.double, 0.0, dart.fn((prevMax, tick) => {
          let labelElements = this.splitLabel(dart.nullCheck(tick.textElement));
          return math.max(core.double, prevMax, this.calculateHeightForRotatedLabel(this.labelRotation({collision: collision}), this.getLabelHeight(labelElements), this.getLabelWidth(labelElements)));
        }, doubleAndTickOfDTodouble()))[S$.$round]();
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: maxWidth, preferredHeight: math.min(core.int, maxHeight, maxVerticalSliceWidth + this.labelOffsetFromAxisPx({collision: collision}))});
      }
      drawAxisLine(canvas, orientation, axisBounds) {
        let start = null;
        let end = null;
        switch (orientation) {
          case C[115] || CT.C115:
          {
            start = axisBounds[S$0.$bottomLeft];
            end = axisBounds[S$.$bottomRight];
            break;
          }
          case C[117] || CT.C117:
          {
            start = axisBounds[S$.$topLeft];
            end = axisBounds[S$0.$topRight];
            break;
          }
          case C[116] || CT.C116:
          {
            start = axisBounds[S$.$topLeft];
            end = axisBounds[S$0.$bottomLeft];
            break;
          }
          case C[118] || CT.C118:
          {
            start = axisBounds[S$0.$topRight];
            end = axisBounds[S$.$bottomRight];
            break;
          }
        }
        canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([start, end]), fill: this.axisLineStyle.color, stroke: this.axisLineStyle.color, strokeWidthPx: this.axisLineStyle.strokeWidth[S$.$toDouble](), dashPattern: this.axisLineStyle.dashPattern});
      }
      drawLabel(canvas, tick, opts) {
        let t96, t96$;
        TickOfD().as(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
        let collision = opts && 'collision' in opts ? opts.collision : false;
        let locationPx = (t96 = tick.locationPx, t96 == null ? 0.0 : t96);
        let labelOffsetPx = (t96$ = tick.labelOffsetPx, t96$ == null ? 0.0 : t96$);
        let isRtl = this.chartContext.isRtl;
        let labelElements = this.splitLabel(dart.nullCheck(tick.textElement));
        let labelHeight = this.getLabelHeight(labelElements);
        let multiLineLabelOffset = 0;
        for (let line of labelElements) {
          let x = 0;
          let y = 0;
          if (orientation === axis$.AxisOrientation.bottom || orientation === axis$.AxisOrientation.top) {
            y = orientation === axis$.AxisOrientation.bottom ? axisBounds[S$.$top] + this.labelOffsetFromAxisPx({collision: collision}) : axisBounds[S$.$bottom] - (labelHeight[S$.$toInt]() - multiLineLabelOffset) - this.labelOffsetFromAxisPx({collision: collision});
            let direction = this[S$0._normalizeHorizontalAnchor](this.tickLabelAnchor({collision: collision}), isRtl, isFirst, isLast);
            line.textDirection = direction;
            switch (direction) {
              case C[128] || CT.C128:
              {
                x = (locationPx + this.labelOffsetFromTickPx({collision: collision}) + labelOffsetPx)[S$.$toInt]();
                break;
              }
              case C[127] || CT.C127:
              {
                x = (locationPx - this.labelOffsetFromTickPx({collision: collision}) - labelOffsetPx)[S$.$toInt]();
                break;
              }
              case C[129] || CT.C129:
              default:
              {
                x = (locationPx - labelOffsetPx)[S$.$toInt]();
                break;
              }
            }
          } else {
            if (orientation === axis$.AxisOrientation.left) {
              if (this.tickLabelJustification === axis_spec.TickLabelJustification.inside) {
                x = axisBounds[S$.$right] - this.labelOffsetFromAxisPx({collision: collision});
                line.textDirection = text_element.TextDirection.rtl;
              } else {
                x = axisBounds[S$.$left];
                line.textDirection = text_element.TextDirection.ltr;
              }
            } else {
              if (this.tickLabelJustification === axis_spec.TickLabelJustification.inside) {
                x = axisBounds[S$.$left] + this.labelOffsetFromAxisPx({collision: collision});
                line.textDirection = text_element.TextDirection.ltr;
              } else {
                x = axisBounds[S$.$right];
                line.textDirection = text_element.TextDirection.rtl;
              }
            }
            switch (this.normalizeVerticalAnchor(this.tickLabelAnchor({collision: collision}), isFirst, isLast)) {
              case C[130] || CT.C130:
              {
                y = (locationPx - (labelHeight - multiLineLabelOffset) - this.labelOffsetFromTickPx({collision: collision}) - labelOffsetPx)[S$.$toInt]();
                break;
              }
              case C[131] || CT.C131:
              {
                y = (locationPx + this.labelOffsetFromTickPx({collision: collision}) + labelOffsetPx)[S$.$toInt]();
                break;
              }
              case C[132] || CT.C132:
              default:
              {
                y = (locationPx - labelHeight / 2 + labelOffsetPx)[S$.$toInt]();
                break;
              }
            }
          }
          canvas.drawText(line, x, y + multiLineLabelOffset, {rotation: base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(this.labelRotation({collision: collision})[S$.$toDouble]())});
          multiLineLabelOffset = multiLineLabelOffset + (base_tick_draw_strategy.BaseTickDrawStrategy.multiLineLabelPadding + line.measurement.verticalSliceWidth[S$.$round]());
        }
      }
      [S$0._normalizeHorizontalAnchor](anchor, isRtl, isFirst, isLast) {
        switch (anchor) {
          case C[133] || CT.C133:
          {
            return isRtl ? text_element.TextDirection.ltr : text_element.TextDirection.rtl;
          }
          case C[134] || CT.C134:
          {
            return isRtl ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
          }
          case C[113] || CT.C113:
          {
            if (isFirst) {
              return text_element.TextDirection.ltr;
            }
            if (isLast) {
              return text_element.TextDirection.rtl;
            }
            return text_element.TextDirection.center;
          }
          case C[135] || CT.C135:
          default:
          {
            return text_element.TextDirection.center;
          }
        }
      }
      normalizeVerticalAnchor(anchor, isFirst, isLast) {
        switch (anchor) {
          case C[133] || CT.C133:
          {
            return base_tick_draw_strategy._PixelVerticalDirection.under;
          }
          case C[134] || CT.C134:
          {
            return base_tick_draw_strategy._PixelVerticalDirection.over;
          }
          case C[113] || CT.C113:
          {
            if (isFirst) {
              return base_tick_draw_strategy._PixelVerticalDirection.over;
            }
            if (isLast) {
              return base_tick_draw_strategy._PixelVerticalDirection.under;
            }
            return base_tick_draw_strategy._PixelVerticalDirection.center;
          }
          case C[135] || CT.C135:
          default:
          {
            return base_tick_draw_strategy._PixelVerticalDirection.center;
          }
        }
      }
      calculateWidthForRotatedLabel(rotation, labelHeight, labelLength) {
        if (rotation === 0) return labelLength;
        let rotationRadian = base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(rotation[S$.$toDouble]());
        labelLength = labelLength + labelHeight / 2.0 * math.tan(rotationRadian);
        return labelLength * math.cos(rotationRadian);
      }
      calculateHeightForRotatedLabel(rotation, labelHeight, labelLength) {
        if (rotation === 0) return labelHeight;
        let rotationRadian = base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(rotation[S$.$toDouble]());
        labelLength = labelLength + labelHeight / 2.0 * math.tan(rotationRadian);
        let angle = 3.141592653589793 / 2.0 - rotationRadian[S$.$abs]();
        return math.max(core.double, labelHeight, labelLength * math.cos(angle));
      }
      splitLabel(wholeLabel) {
        return wholeLabel.text[S$0.$split](base_tick_draw_strategy.BaseTickDrawStrategy._labelSplitPattern)[S$.$map](text_element.TextElement, dart.fn(line => {
          let t96;
          t96 = this.graphicsFactory.createTextElement(line[S$0.$trim]());
          return (() => {
            t96.textStyle = wholeLabel.textStyle;
            return t96;
          })();
        }, T$0.StringToTextElement()))[S$.$toList]();
      }
      getLabelWidth(labelElements) {
        return labelElements[S$.$map](core.double, dart.fn(line => line.measurement.horizontalSliceWidth, T$0.TextElementTodouble()))[S$.$reduce](dart.gbind(C[136] || CT.C136, core.double));
      }
      getLabelHeight(labelElements) {
        if (labelElements[S$.$isEmpty]) return 0.0;
        let textHeight = labelElements[S$.$first].measurement.verticalSliceWidth;
        let numLines = labelElements[S$.$length];
        return textHeight * numLines + base_tick_draw_strategy.BaseTickDrawStrategy.multiLineLabelPadding * (numLines - 1);
      }
    }
    (BaseTickDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t95, t95$, t95$0, t95$1, t95$2, t95$3, t95$4, t95$5, t95$6, t96, t96$, t96$0, t96$1, t96$2, t96$3, t95$7, t96$4, t96$5, t96$6, t96$7, t96$8, t95$8;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelCollisionOffsetFromAxisPx = opts && 'labelCollisionOffsetFromAxisPx' in opts ? opts.labelCollisionOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let labelCollisionOffsetFromTickPx = opts && 'labelCollisionOffsetFromTickPx' in opts ? opts.labelCollisionOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      let labelCollisionRotation = opts && 'labelCollisionRotation' in opts ? opts.labelCollisionRotation : null;
      this[S$0.chartContext] = chartContext;
      this[S$0.graphicsFactory$9] = graphicsFactory;
      this[S$0.labelStyle$1] = graphicsFactory.createTextPaint();
      this[S$0.axisLineStyle$1] = graphicsFactory.createLinePaint();
      this[S$0._defaultTickLabelAnchor] = (t95 = labelAnchor, t95 == null ? axis_spec.TickLabelAnchor.centered : t95);
      this[S$0.tickLabelJustification] = (t95$ = labelJustification, t95$ == null ? axis_spec.TickLabelJustification.inside : t95$);
      this[S$0._rotateOnCollision] = labelCollisionRotation != null;
      this[S$0.minimumPaddingBetweenLabelsPx$1] = (t95$0 = minimumPaddingBetweenLabelsPx, t95$0 == null ? 50 : t95$0);
      this[S$0._labelDefaultOffsetFromAxisPx] = (t95$1 = labelOffsetFromAxisPx, t95$1 == null ? 5 : t95$1);
      this[S$0._labelDefaultOffsetFromTickPx] = (t95$2 = labelOffsetFromTickPx, t95$2 == null ? 5 : t95$2);
      this[S$0._labelDefaultRotation] = (t95$3 = labelRotation, t95$3 == null ? 0 : t95$3);
      this[S$0._labelCollisionOffsetFromAxisPx] = (t95$4 = labelCollisionOffsetFromAxisPx, t95$4 == null ? 5 : t95$4);
      this[S$0._labelCollisionOffsetFromTickPx] = (t95$5 = labelCollisionOffsetFromTickPx, t95$5 == null ? 5 : t95$5);
      this[S$0._labelCollisionRotation] = (t95$6 = labelCollisionRotation, t95$6 == null ? 0 : t95$6);
      t95$7 = this.labelStyle;
      (() => {
        t95$7.color = (t96$ = (t96 = labelStyleSpec, t96 == null ? null : t96.color), t96$ == null ? style_factory.StyleFactory.style.tickColor : t96$);
        t95$7.fontFamily = (t96$0 = labelStyleSpec, t96$0 == null ? null : t96$0.fontFamily);
        t95$7.fontSize = (t96$2 = (t96$1 = labelStyleSpec, t96$1 == null ? null : t96$1.fontSize), t96$2 == null ? 12 : t96$2);
        t95$7.lineHeight = (t96$3 = labelStyleSpec, t96$3 == null ? null : t96$3.lineHeight);
        return t95$7;
      })();
      t95$8 = this.axisLineStyle;
      (() => {
        t95$8.color = (t96$5 = (t96$4 = axisLineStyleSpec, t96$4 == null ? null : t96$4.color), t96$5 == null ? this.labelStyle.color : t96$5);
        t95$8.dashPattern = (t96$6 = axisLineStyleSpec, t96$6 == null ? null : t96$6.dashPattern);
        t95$8.strokeWidth = (t96$8 = (t96$7 = axisLineStyleSpec, t96$7 == null ? null : t96$7.thickness), t96$8 == null ? 1 : t96$8);
        return t95$8;
      })();
    }).prototype = BaseTickDrawStrategy.prototype;
    dart.addTypeTests(BaseTickDrawStrategy);
    BaseTickDrawStrategy.prototype[_is_BaseTickDrawStrategy_default] = true;
    dart.addTypeCaches(BaseTickDrawStrategy);
    BaseTickDrawStrategy[dart.implements] = () => [tick_draw_strategy.TickDrawStrategy$(D)];
    dart.setMethodSignature(BaseTickDrawStrategy, () => ({
      __proto__: dart.getMethods(BaseTickDrawStrategy.__proto__),
      labelRotation: dart.fnType(core.int, [], {}, {collision: core.bool}),
      labelOffsetFromAxisPx: dart.fnType(core.int, [], {}, {collision: core.bool}),
      labelOffsetFromTickPx: dart.fnType(core.int, [], {}, {collision: core.bool}),
      tickLabelAnchor: dart.fnType(axis_spec.TickLabelAnchor, [], {}, {collision: core.bool}),
      decorateTicks: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      updateTickWidth: dart.fnType(dart.void, [dart.nullable(core.Object), core.int, core.int, axis$.AxisOrientation], {collision: core.bool}, {}),
      collides: dart.fnType(collision_report.CollisionReport$(D), [dart.nullable(core.Object), dart.nullable(axis$.AxisOrientation)]),
      measureVerticallyDrawnTicks: dart.fnType(layout_view.ViewMeasuredSizes, [dart.nullable(core.Object), core.int, core.int], {collision: core.bool}, {}),
      measureHorizontallyDrawnTicks: dart.fnType(layout_view.ViewMeasuredSizes, [dart.nullable(core.Object), core.int, core.int], {collision: core.bool}, {}),
      drawAxisLine: dart.fnType(dart.void, [chart_canvas.ChartCanvas, axis$.AxisOrientation, math.Rectangle$(core.int)]),
      drawLabel: dart.fnType(dart.void, [chart_canvas.ChartCanvas, dart.nullable(core.Object)], {axisBounds: math.Rectangle$(core.int), collision: core.bool, drawAreaBounds: dart.nullable(math.Rectangle$(core.int)), isFirst: core.bool, isLast: core.bool, orientation: axis$.AxisOrientation}, {}),
      [S$0._normalizeHorizontalAnchor]: dart.fnType(text_element.TextDirection, [axis_spec.TickLabelAnchor, core.bool, core.bool, core.bool]),
      normalizeVerticalAnchor: dart.fnType(base_tick_draw_strategy._PixelVerticalDirection, [axis_spec.TickLabelAnchor, core.bool, core.bool]),
      calculateWidthForRotatedLabel: dart.fnType(core.double, [core.int, core.double, core.double]),
      calculateHeightForRotatedLabel: dart.fnType(core.double, [core.int, core.double, core.double]),
      splitLabel: dart.fnType(core.List$(text_element.TextElement), [text_element.TextElement]),
      getLabelWidth: dart.fnType(core.double, [core.Iterable$(text_element.TextElement)]),
      getLabelHeight: dart.fnType(core.double, [core.Iterable$(text_element.TextElement)])
    }));
    dart.setLibraryUri(BaseTickDrawStrategy, I[116]);
    dart.setFieldSignature(BaseTickDrawStrategy, () => ({
      __proto__: dart.getFields(BaseTickDrawStrategy.__proto__),
      chartContext: dart.finalFieldType(chart_context.ChartContext),
      graphicsFactory: dart.finalFieldType(graphics_factory.GraphicsFactory),
      axisLineStyle: dart.fieldType(line_style.LineStyle),
      labelStyle: dart.fieldType(text_style.TextStyle),
      tickLabelJustification: dart.fieldType(axis_spec.TickLabelJustification),
      [S$0._defaultTickLabelAnchor]: dart.finalFieldType(axis_spec.TickLabelAnchor),
      [S$0._labelDefaultOffsetFromAxisPx]: dart.finalFieldType(core.int),
      [S$0._labelCollisionOffsetFromAxisPx]: dart.finalFieldType(core.int),
      [S$0._labelDefaultOffsetFromTickPx]: dart.finalFieldType(core.int),
      [S$0._labelCollisionOffsetFromTickPx]: dart.finalFieldType(core.int),
      [S$0._labelDefaultRotation]: dart.finalFieldType(core.int),
      [S$0._labelCollisionRotation]: dart.finalFieldType(core.int),
      [S$0._rotateOnCollision]: dart.finalFieldType(core.bool),
      minimumPaddingBetweenLabelsPx: dart.fieldType(core.int)
    }));
    return BaseTickDrawStrategy;
  });
  base_tick_draw_strategy.BaseTickDrawStrategy = base_tick_draw_strategy.BaseTickDrawStrategy$();
  dart.defineLazy(base_tick_draw_strategy.BaseTickDrawStrategy, {
    /*base_tick_draw_strategy.BaseTickDrawStrategy._labelSplitPattern*/get _labelSplitPattern() {
      return "\n";
    },
    /*base_tick_draw_strategy.BaseTickDrawStrategy.multiLineLabelPadding*/get multiLineLabelPadding() {
      return 2;
    }
  }, false);
  dart.addTypeTests(base_tick_draw_strategy.BaseTickDrawStrategy, _is_BaseTickDrawStrategy_default);
  const _is_SmallTickDrawStrategy_default = Symbol('_is_SmallTickDrawStrategy_default');
  small_tick_draw_strategy.SmallTickDrawStrategy$ = dart.generic(D => {
    var TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    class SmallTickDrawStrategy extends base_tick_draw_strategy.BaseTickDrawStrategy$(D) {
      get tickLength() {
        return this[S$0.tickLength];
      }
      set tickLength(value) {
        this[S$0.tickLength] = value;
      }
      get lineStyle() {
        return this[S$0.lineStyle$1];
      }
      set lineStyle(value) {
        this[S$0.lineStyle$1] = value;
      }
      draw(canvas, tick, opts) {
        TickOfD().as(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
        let collision = opts && 'collision' in opts ? opts.collision : false;
        let tickPositions = this.calculateTickPositions(tick, orientation, axisBounds, drawAreaBounds, this.tickLength);
        let tickStart = tickPositions[S$.$first];
        let tickEnd = tickPositions[S$.$last];
        canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([tickStart, tickEnd]), dashPattern: this.lineStyle.dashPattern, fill: this.lineStyle.color, stroke: this.lineStyle.color, strokeWidthPx: this.lineStyle.strokeWidth[S$.$toDouble]()});
        this.drawLabel(canvas, tick, {orientation: orientation, axisBounds: axisBounds, drawAreaBounds: drawAreaBounds, isFirst: isFirst, isLast: isLast, collision: collision});
      }
      calculateTickPositions(tick, orientation, axisBounds, drawAreaBounds, tickLength) {
        TickOfD().as(tick);
        let tickStart = null;
        let tickEnd = null;
        let tickLocationPx = dart.nullCheck(tick.locationPx);
        switch (orientation) {
          case C[115] || CT.C115:
          {
            let x = tickLocationPx;
            tickStart = new (T$.PointOfnum()).new(x, axisBounds[S$.$bottom] - tickLength);
            tickEnd = new (T$.PointOfnum()).new(x, axisBounds[S$.$bottom]);
            break;
          }
          case C[117] || CT.C117:
          {
            let x = tickLocationPx;
            tickStart = new (T$.PointOfnum()).new(x, axisBounds[S$.$top]);
            tickEnd = new (T$.PointOfnum()).new(x, axisBounds[S$.$top] + tickLength);
            break;
          }
          case C[116] || CT.C116:
          {
            let y = tickLocationPx;
            tickStart = new (T$.PointOfnum()).new(axisBounds[S$.$left], y);
            tickEnd = new (T$.PointOfnum()).new(axisBounds[S$.$left] + tickLength, y);
            break;
          }
          case C[118] || CT.C118:
          {
            let y = tickLocationPx;
            tickStart = new (T$.PointOfnum()).new(axisBounds[S$.$right] - tickLength, y);
            tickEnd = new (T$.PointOfnum()).new(axisBounds[S$.$right], y);
            break;
          }
        }
        return T$.JSArrayOfPointOfnum().of([tickStart, tickEnd]);
      }
    }
    (SmallTickDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t95, t95$;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let lineStyleSpec = opts && 'lineStyleSpec' in opts ? opts.lineStyleSpec : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelCollisionOffsetFromAxisPx = opts && 'labelCollisionOffsetFromAxisPx' in opts ? opts.labelCollisionOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let labelCollisionOffsetFromTickPx = opts && 'labelCollisionOffsetFromTickPx' in opts ? opts.labelCollisionOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      let labelCollisionRotation = opts && 'labelCollisionRotation' in opts ? opts.labelCollisionRotation : null;
      this[S$0.tickLength] = (t95 = tickLengthPx, t95 == null ? style_factory.StyleFactory.style.tickLength : t95);
      this[S$0.lineStyle$1] = style_factory.StyleFactory.style.createTickLineStyle(graphicsFactory, lineStyleSpec);
      SmallTickDrawStrategy.__proto__.new.call(this, chartContext, graphicsFactory, {labelStyleSpec: labelStyleSpec, axisLineStyleSpec: (t95$ = axisLineStyleSpec, t95$ == null ? lineStyleSpec : t95$), labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelCollisionOffsetFromAxisPx: labelCollisionOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, labelCollisionOffsetFromTickPx: labelCollisionOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation, labelCollisionRotation: labelCollisionRotation});
      ;
    }).prototype = SmallTickDrawStrategy.prototype;
    dart.addTypeTests(SmallTickDrawStrategy);
    SmallTickDrawStrategy.prototype[_is_SmallTickDrawStrategy_default] = true;
    dart.addTypeCaches(SmallTickDrawStrategy);
    dart.setMethodSignature(SmallTickDrawStrategy, () => ({
      __proto__: dart.getMethods(SmallTickDrawStrategy.__proto__),
      draw: dart.fnType(dart.void, [chart_canvas.ChartCanvas, dart.nullable(core.Object)], {axisBounds: math.Rectangle$(core.int), collision: core.bool, drawAreaBounds: math.Rectangle$(core.int), isFirst: core.bool, isLast: core.bool, orientation: axis$.AxisOrientation}, {}),
      calculateTickPositions: dart.fnType(core.List$(math.Point$(core.num)), [dart.nullable(core.Object), axis$.AxisOrientation, math.Rectangle$(core.int), math.Rectangle$(core.int), core.int])
    }));
    dart.setLibraryUri(SmallTickDrawStrategy, I[117]);
    dart.setFieldSignature(SmallTickDrawStrategy, () => ({
      __proto__: dart.getFields(SmallTickDrawStrategy.__proto__),
      tickLength: dart.fieldType(core.int),
      lineStyle: dart.fieldType(line_style.LineStyle)
    }));
    return SmallTickDrawStrategy;
  });
  small_tick_draw_strategy.SmallTickDrawStrategy = small_tick_draw_strategy.SmallTickDrawStrategy$();
  dart.addTypeTests(small_tick_draw_strategy.SmallTickDrawStrategy, _is_SmallTickDrawStrategy_default);
  const _is_RangeTickDrawStrategy_default = Symbol('_is_RangeTickDrawStrategy_default');
  range_tick_draw_strategy.RangeTickDrawStrategy$ = dart.generic(D => {
    var TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    var RangeAxisTicksOfD = () => (RangeAxisTicksOfD = dart.constFn(range_axis_tick.RangeAxisTicks$(D)))();
    var ListOfTickOfD = () => (ListOfTickOfD = dart.constFn(core.List$(TickOfD())))();
    var numAndTickOfDTonum = () => (numAndTickOfDTonum = dart.constFn(dart.fnType(core.num, [core.num, TickOfD()])))();
    class RangeTickDrawStrategy extends small_tick_draw_strategy.SmallTickDrawStrategy$(D) {
      get rangeTickLengthPx() {
        return this[S$0.rangeTickLengthPx$1];
      }
      set rangeTickLengthPx(value) {
        this[S$0.rangeTickLengthPx$1] = value;
      }
      get rangeShadeHeightPx() {
        return this[S$0.rangeShadeHeightPx$1];
      }
      set rangeShadeHeightPx(value) {
        this[S$0.rangeShadeHeightPx$1] = value;
      }
      get rangeShadeOffsetFromAxisPx() {
        return this[S$0.rangeShadeOffsetFromAxisPx$1];
      }
      set rangeShadeOffsetFromAxisPx(value) {
        this[S$0.rangeShadeOffsetFromAxisPx$1] = value;
      }
      get rangeTickOffsetPx() {
        return this[S$0.rangeTickOffsetPx$1];
      }
      set rangeTickOffsetPx(value) {
        this[S$0.rangeTickOffsetPx$1] = value;
      }
      get rangeShadeStyle() {
        let t93;
        t93 = this[S$0.__RangeTickDrawStrategy_rangeShadeStyle];
        return t93 == null ? dart.throw(new _internal.LateError.fieldNI("rangeShadeStyle")) : t93;
      }
      set rangeShadeStyle(t93) {
        this[S$0.__RangeTickDrawStrategy_rangeShadeStyle] = t93;
      }
      get rangeLabelStyle() {
        let t94;
        t94 = this[S$0.__RangeTickDrawStrategy_rangeLabelStyle];
        return t94 == null ? dart.throw(new _internal.LateError.fieldNI("rangeLabelStyle")) : t94;
      }
      set rangeLabelStyle(t94) {
        this[S$0.__RangeTickDrawStrategy_rangeLabelStyle] = t94;
      }
      draw(canvas, tick, opts) {
        TickOfD().as(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
        let collision = opts && 'collision' in opts ? opts.collision : false;
        if (RangeAxisTicksOfD().is(tick)) {
          this.drawRangeShadeAndRangeLabel(tick, canvas, orientation, axisBounds, drawAreaBounds, isFirst, isLast);
        } else {
          super.draw(canvas, tick, {orientation: orientation, axisBounds: axisBounds, drawAreaBounds: drawAreaBounds, isFirst: isFirst, isLast: isLast, collision: collision});
        }
      }
      measureVerticallyDrawnTicks(ticks, maxWidth, maxHeight, opts) {
        ListOfTickOfD().as(ticks);
        let collision = opts && 'collision' in opts ? opts.collision : false;
        let maxHorizontalSliceWidth = ticks[S$0.$fold](core.num, 0.0, dart.fn((prevMax, tick) => {
          if (!(tick.textElement != null)) dart.assertFailed(null, I[119], 234, 14, "tick.textElement != null");
          let labelElements = this.splitLabel(dart.nullCheck(tick.textElement));
          if (range_axis_tick.RangeAxisTicks.is(tick)) {
            return math.max(core.num, math.max(core.num, prevMax, this.calculateWidthForRotatedLabel(this.labelRotation({collision: collision}), this.getLabelHeight(labelElements), this.getLabelWidth(labelElements)) + this.labelOffsetFromAxisPx({collision: collision})), this.labelOffsetFromAxisPx({collision: collision}) + this.rangeShadeHeightPx);
          } else {
            return math.max(core.num, prevMax, this.calculateWidthForRotatedLabel(this.labelRotation({collision: collision}), this.getLabelHeight(labelElements), this.getLabelWidth(labelElements)) + this.labelOffsetFromAxisPx({collision: collision}));
          }
        }, numAndTickOfDTonum()))[S$.$round]();
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: maxHorizontalSliceWidth, preferredHeight: maxHeight});
      }
      measureHorizontallyDrawnTicks(ticks, maxWidth, maxHeight, opts) {
        ListOfTickOfD().as(ticks);
        let collision = opts && 'collision' in opts ? opts.collision : false;
        let maxVerticalSliceWidth = ticks[S$0.$fold](core.num, 0.0, dart.fn((prevMax, tick) => {
          let labelElements = this.splitLabel(dart.nullCheck(tick.textElement));
          if (range_axis_tick.RangeAxisTicks.is(tick)) {
            return math.max(core.num, math.max(core.num, prevMax, this.calculateHeightForRotatedLabel(this.labelRotation({collision: collision}), this.getLabelHeight(labelElements), this.getLabelWidth(labelElements)) + this.rangeShadeOffsetFromAxisPx), this.rangeShadeOffsetFromAxisPx + this.rangeShadeHeightPx);
          } else {
            return math.max(core.num, prevMax, this.calculateHeightForRotatedLabel(this.labelRotation({collision: collision}), this.getLabelHeight(labelElements), this.getLabelWidth(labelElements))) + this.labelOffsetFromAxisPx({collision: collision});
          }
        }, numAndTickOfDTonum()))[S$.$round]();
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: maxWidth, preferredHeight: maxVerticalSliceWidth});
      }
      drawRangeShadeAndRangeLabel(tick, canvas, orientation, axisBounds, drawAreaBounds, isFirst, isLast) {
        let t95;
        RangeAxisTicksOfD().as(tick);
        let rangeStartTick = new (TickOfD()).new({value: tick.rangeStartValue, locationPx: tick.rangeStartLocationPx - this.rangeTickOffsetPx, textElement: null});
        let rangeEndTick = new (TickOfD()).new({value: tick.rangeEndValue, locationPx: isLast ? tick.rangeEndLocationPx + this.rangeTickOffsetPx : tick.rangeEndLocationPx - this.rangeTickOffsetPx, textElement: null});
        let rangeStartPositions = this.calculateTickPositions(rangeStartTick, orientation, axisBounds, drawAreaBounds, this.rangeTickLengthPx);
        let rangeStartTickStart = rangeStartPositions[S$.$first];
        let rangeStartTickEnd = rangeStartPositions[S$.$last];
        let rangeEndPositions = this.calculateTickPositions(rangeEndTick, orientation, axisBounds, drawAreaBounds, this.rangeTickLengthPx);
        let rangeEndTickStart = rangeEndPositions[S$.$first];
        let rangeEndTickEnd = rangeEndPositions[S$.$last];
        let rangeShade = null;
        switch (orientation) {
          case C[115] || CT.C115:
          case C[117] || CT.C117:
          {
            rangeShade = new (T$.RectangleOfnum()).new(rangeStartTickStart.x, rangeStartTickStart.y + this.rangeShadeOffsetFromAxisPx, rangeEndTickStart.x - rangeStartTickStart.x, this.rangeShadeHeightPx);
            break;
          }
          case C[116] || CT.C116:
          {
            rangeShade = new (T$.RectangleOfnum()).new(rangeEndTickStart.x + this.rangeShadeOffsetFromAxisPx, rangeEndTickStart.y, this.rangeShadeHeightPx, rangeEndTickStart.y - rangeEndTickStart.y);
            break;
          }
          case C[118] || CT.C118:
          {
            rangeShade = new (T$.RectangleOfnum()).new(rangeEndTickStart.x - this.rangeShadeOffsetFromAxisPx - this.rangeShadeHeightPx, rangeEndTickStart.y, this.rangeShadeHeightPx, rangeEndTickStart.y - rangeEndTickStart.y);
            break;
          }
        }
        canvas.drawRect(rangeShade, {fill: this.rangeShadeStyle.color, stroke: this.rangeShadeStyle.color, strokeWidthPx: this.rangeShadeStyle.strokeWidth[S$.$toDouble]()});
        canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([rangeStartTickStart, rangeStartTickEnd]), dashPattern: this.lineStyle.dashPattern, fill: this.lineStyle.color, stroke: this.lineStyle.color, strokeWidthPx: this.lineStyle.strokeWidth[S$.$toDouble]()});
        canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([rangeEndTickStart, rangeEndTickEnd]), dashPattern: this.lineStyle.dashPattern, fill: this.lineStyle.color, stroke: this.lineStyle.color, strokeWidthPx: this.lineStyle.strokeWidth[S$.$toDouble]()});
        let rangeLabelTextElement = (t95 = dart.nullCheck(tick.textElement), (() => {
          t95.textStyle = this.rangeLabelStyle;
          return t95;
        })());
        let labelElements = this.splitLabel(rangeLabelTextElement);
        let labelWidth = this.getLabelWidth(labelElements);
        let multiLineLabelOffset = 0;
        for (let line of labelElements) {
          let x = 0;
          let y = 0;
          if (orientation === axis$.AxisOrientation.bottom || orientation === axis$.AxisOrientation.top) {
            y = rangeStartTickStart.y[S$.$toInt]() + this.rangeShadeOffsetFromAxisPx - 1;
            x = (rangeStartTickStart.x + (rangeEndTickStart.x - rangeStartTickStart.x - labelWidth) / 2)[S$.$round]();
          }
          canvas.drawText(line, x, y + multiLineLabelOffset);
          multiLineLabelOffset = multiLineLabelOffset + (base_tick_draw_strategy.BaseTickDrawStrategy.multiLineLabelPadding + line.measurement.verticalSliceWidth[S$.$round]());
        }
      }
    }
    (RangeTickDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t93, t93$, t93$0, t93$1, t93$2, t93$3, t94, t94$, t94$0, t93$4, t93$5;
      let tickLength = opts && 'tickLength' in opts ? opts.tickLength : null;
      let rangeTickLength = opts && 'rangeTickLength' in opts ? opts.rangeTickLength : null;
      let rangeShadeHeight = opts && 'rangeShadeHeight' in opts ? opts.rangeShadeHeight : null;
      let rangeShadeOffsetFromAxis = opts && 'rangeShadeOffsetFromAxis' in opts ? opts.rangeShadeOffsetFromAxis : null;
      let rangeTickOffset = opts && 'rangeTickOffset' in opts ? opts.rangeTickOffset : null;
      let rangeLabelTextStyleSpec = opts && 'rangeLabelTextStyleSpec' in opts ? opts.rangeLabelTextStyleSpec : null;
      let lineStyleSpec = opts && 'lineStyleSpec' in opts ? opts.lineStyleSpec : null;
      let rangeShadeStyleSpec = opts && 'rangeShadeStyleSpec' in opts ? opts.rangeShadeStyleSpec : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelCollisionOffsetFromAxisPx = opts && 'labelCollisionOffsetFromAxisPx' in opts ? opts.labelCollisionOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let labelCollisionOffsetFromTickPx = opts && 'labelCollisionOffsetFromTickPx' in opts ? opts.labelCollisionOffsetFromTickPx : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      let labelCollisionRotation = opts && 'labelCollisionRotation' in opts ? opts.labelCollisionRotation : null;
      this[S$0.rangeTickLengthPx$1] = 24;
      this[S$0.rangeShadeHeightPx$1] = 12;
      this[S$0.rangeShadeOffsetFromAxisPx$1] = 12;
      this[S$0.rangeTickOffsetPx$1] = 12;
      this[S$0.__RangeTickDrawStrategy_rangeShadeStyle] = null;
      this[S$0.__RangeTickDrawStrategy_rangeLabelStyle] = null;
      RangeTickDrawStrategy.__proto__.new.call(this, chartContext, graphicsFactory, {tickLengthPx: tickLength, axisLineStyleSpec: axisLineStyleSpec, labelStyleSpec: labelStyleSpec, lineStyleSpec: lineStyleSpec, labelAnchor: (t93 = labelAnchor, t93 == null ? axis_spec.TickLabelAnchor.after : t93), labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelCollisionOffsetFromAxisPx: labelCollisionOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, labelCollisionOffsetFromTickPx: labelCollisionOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation, labelCollisionRotation: labelCollisionRotation});
      this.rangeTickOffsetPx = (t93$ = rangeTickOffset, t93$ == null ? this.rangeTickOffsetPx : t93$);
      this.rangeTickLengthPx = (t93$0 = rangeTickLength, t93$0 == null ? this.rangeTickLengthPx : t93$0);
      this.rangeShadeHeightPx = (t93$1 = rangeShadeHeight, t93$1 == null ? this.rangeShadeHeightPx : t93$1);
      this.rangeShadeOffsetFromAxisPx = (t93$2 = rangeShadeOffsetFromAxis, t93$2 == null ? this.rangeShadeOffsetFromAxisPx : t93$2);
      this.lineStyle = style_factory.StyleFactory.style.createTickLineStyle(graphicsFactory, lineStyleSpec);
      rangeShadeStyleSpec = (t93$3 = rangeShadeStyleSpec, t93$3 == null ? new axis_spec.LineStyleSpec.new({color: material_palette.MaterialPalette.gray.shade300}) : t93$3);
      this.rangeShadeStyle = style_factory.StyleFactory.style.createTickLineStyle(graphicsFactory, rangeShadeStyleSpec);
      this.rangeLabelStyle = rangeLabelTextStyleSpec == null ? (t93$4 = graphicsFactory.createTextPaint(), (() => {
        t93$4.color = (t94$ = (t94 = labelStyleSpec, t94 == null ? null : t94.color), t94$ == null ? style_factory.StyleFactory.style.tickColor : t94$);
        t93$4.fontFamily = (t94$0 = labelStyleSpec, t94$0 == null ? null : t94$0.fontFamily);
        t93$4.fontSize = this.rangeShadeHeightPx - 1;
        return t93$4;
      })()) : (t93$5 = graphicsFactory.createTextPaint(), (() => {
        t93$5.color = rangeLabelTextStyleSpec.color;
        t93$5.fontFamily = rangeLabelTextStyleSpec.fontFamily;
        t93$5.fontSize = rangeLabelTextStyleSpec.fontSize;
        t93$5.lineHeight = rangeLabelTextStyleSpec.lineHeight;
        return t93$5;
      })());
    }).prototype = RangeTickDrawStrategy.prototype;
    dart.addTypeTests(RangeTickDrawStrategy);
    RangeTickDrawStrategy.prototype[_is_RangeTickDrawStrategy_default] = true;
    dart.addTypeCaches(RangeTickDrawStrategy);
    dart.setMethodSignature(RangeTickDrawStrategy, () => ({
      __proto__: dart.getMethods(RangeTickDrawStrategy.__proto__),
      drawRangeShadeAndRangeLabel: dart.fnType(dart.void, [dart.nullable(core.Object), chart_canvas.ChartCanvas, axis$.AxisOrientation, math.Rectangle$(core.int), math.Rectangle$(core.int), core.bool, core.bool])
    }));
    dart.setGetterSignature(RangeTickDrawStrategy, () => ({
      __proto__: dart.getGetters(RangeTickDrawStrategy.__proto__),
      rangeShadeStyle: line_style.LineStyle,
      rangeLabelStyle: text_style.TextStyle
    }));
    dart.setSetterSignature(RangeTickDrawStrategy, () => ({
      __proto__: dart.getSetters(RangeTickDrawStrategy.__proto__),
      rangeShadeStyle: line_style.LineStyle,
      rangeLabelStyle: text_style.TextStyle
    }));
    dart.setLibraryUri(RangeTickDrawStrategy, I[118]);
    dart.setFieldSignature(RangeTickDrawStrategy, () => ({
      __proto__: dart.getFields(RangeTickDrawStrategy.__proto__),
      rangeTickLengthPx: dart.fieldType(core.int),
      rangeShadeHeightPx: dart.fieldType(core.int),
      rangeShadeOffsetFromAxisPx: dart.fieldType(core.int),
      rangeTickOffsetPx: dart.fieldType(core.int),
      [S$0.__RangeTickDrawStrategy_rangeShadeStyle]: dart.fieldType(dart.nullable(line_style.LineStyle)),
      [S$0.__RangeTickDrawStrategy_rangeLabelStyle]: dart.fieldType(dart.nullable(text_style.TextStyle))
    }));
    return RangeTickDrawStrategy;
  });
  range_tick_draw_strategy.RangeTickDrawStrategy = range_tick_draw_strategy.RangeTickDrawStrategy$();
  dart.addTypeTests(range_tick_draw_strategy.RangeTickDrawStrategy, _is_RangeTickDrawStrategy_default);
  const _is_BaseBarRendererConfig_default = Symbol('_is_BaseBarRendererConfig_default');
  base_bar_renderer_config.BaseBarRendererConfig$ = dart.generic(D => {
    class BaseBarRendererConfig extends layout_view.LayoutViewConfig {
      get customRendererId() {
        return this[S$0.customRendererId$4];
      }
      set customRendererId(value) {
        super.customRendererId = value;
      }
      get symbolRenderer() {
        return this[S$0.symbolRenderer$7];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get dashPattern() {
        return this[S$0.dashPattern$3];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get groupingType() {
        return this[S$0.groupingType];
      }
      set groupingType(value) {
        super.groupingType = value;
      }
      get layoutPaintOrder() {
        return this[S$0.layoutPaintOrder$7];
      }
      set layoutPaintOrder(value) {
        super.layoutPaintOrder = value;
      }
      get minBarLengthPx() {
        return this[S$0.minBarLengthPx];
      }
      set minBarLengthPx(value) {
        super.minBarLengthPx = value;
      }
      get maxBarWidthPx() {
        return this[S$0.maxBarWidthPx];
      }
      set maxBarWidthPx(value) {
        super.maxBarWidthPx = value;
      }
      get fillPattern() {
        return this[S$0.fillPattern$1];
      }
      set fillPattern(value) {
        super.fillPattern = value;
      }
      get stackedBarPaddingPx() {
        return this[S$0.stackedBarPaddingPx];
      }
      set stackedBarPaddingPx(value) {
        super.stackedBarPaddingPx = value;
      }
      get strokeWidthPx() {
        return this[S$0.strokeWidthPx$10];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get weightPattern() {
        return this[S$0.weightPattern];
      }
      set weightPattern(value) {
        super.weightPattern = value;
      }
      get rendererAttributes() {
        return this[S$0.rendererAttributes$4];
      }
      set rendererAttributes(value) {
        super.rendererAttributes = value;
      }
      get grouped() {
        return this.groupingType === base_bar_renderer_config.BarGroupingType.grouped || this.groupingType === base_bar_renderer_config.BarGroupingType.groupedStacked;
      }
      get stacked() {
        return this.groupingType === base_bar_renderer_config.BarGroupingType.stacked || this.groupingType === base_bar_renderer_config.BarGroupingType.groupedStacked;
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        return base_bar_renderer_config.BaseBarRendererConfig.is(other) && other.customRendererId == this.customRendererId && dart.equals(other.dashPattern, this.dashPattern) && other.fillPattern == this.fillPattern && other.groupingType === this.groupingType && other.minBarLengthPx === this.minBarLengthPx && other.maxBarWidthPx == this.maxBarWidthPx && other.stackedBarPaddingPx === this.stackedBarPaddingPx && other.strokeWidthPx === this.strokeWidthPx && other.symbolRenderer._equals(this.symbolRenderer) && new (T$0.ListEqualityOfint()).new().equals(other.weightPattern, this.weightPattern);
      }
      get hashCode() {
        let hash = 1;
        hash = hash * 31 + dart.hashCode(this.customRendererId);
        hash = hash * 31 + dart.hashCode(this.dashPattern);
        hash = hash * 31 + dart.hashCode(this.fillPattern);
        hash = hash * 31 + this.groupingType[S$.$hashCode];
        hash = hash * 31 + this.minBarLengthPx[S$.$hashCode];
        hash = hash * 31 + dart.hashCode(this.maxBarWidthPx);
        hash = hash * 31 + this.stackedBarPaddingPx[S$.$hashCode];
        hash = hash * 31 + this.strokeWidthPx[S$.$hashCode];
        hash = hash * 31 + this.symbolRenderer.hashCode;
        hash = hash * 31 + dart.hashCode(this.weightPattern);
        return hash;
      }
    }
    (BaseBarRendererConfig.new = function(opts) {
      let t96;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let groupingType = opts && 'groupingType' in opts ? opts.groupingType : C[137] || CT.C137;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let minBarLengthPx = opts && 'minBarLengthPx' in opts ? opts.minBarLengthPx : 0;
      let maxBarWidthPx = opts && 'maxBarWidthPx' in opts ? opts.maxBarWidthPx : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let stackedBarPaddingPx = opts && 'stackedBarPaddingPx' in opts ? opts.stackedBarPaddingPx : 1;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 0;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let weightPattern = opts && 'weightPattern' in opts ? opts.weightPattern : null;
      this[S$0.rendererAttributes$4] = new series_renderer_config.RendererAttributes.new();
      this[S$0.customRendererId$4] = customRendererId;
      this[S$0.dashPattern$3] = dashPattern;
      this[S$0.groupingType] = groupingType;
      this[S$0.layoutPaintOrder$7] = layoutPaintOrder;
      this[S$0.minBarLengthPx] = minBarLengthPx;
      this[S$0.maxBarWidthPx] = maxBarWidthPx;
      this[S$0.fillPattern$1] = fillPattern;
      this[S$0.stackedBarPaddingPx] = stackedBarPaddingPx;
      this[S$0.strokeWidthPx$10] = strokeWidthPx;
      this[S$0.weightPattern] = weightPattern;
      this[S$0.symbolRenderer$7] = (t96 = symbolRenderer, t96 == null ? new symbol_renderer.RoundedRectSymbolRenderer.new() : t96);
      BaseBarRendererConfig.__proto__.new.call(this);
      ;
    }).prototype = BaseBarRendererConfig.prototype;
    dart.addTypeTests(BaseBarRendererConfig);
    BaseBarRendererConfig.prototype[_is_BaseBarRendererConfig_default] = true;
    dart.addTypeCaches(BaseBarRendererConfig);
    BaseBarRendererConfig[dart.implements] = () => [series_renderer_config.SeriesRendererConfig$(D)];
    dart.setGetterSignature(BaseBarRendererConfig, () => ({
      __proto__: dart.getGetters(BaseBarRendererConfig.__proto__),
      grouped: core.bool,
      stacked: core.bool
    }));
    dart.setLibraryUri(BaseBarRendererConfig, I[120]);
    dart.setFieldSignature(BaseBarRendererConfig, () => ({
      __proto__: dart.getFields(BaseBarRendererConfig.__proto__),
      customRendererId: dart.finalFieldType(dart.nullable(core.String)),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      dashPattern: dart.finalFieldType(dart.nullable(core.List$(core.int))),
      groupingType: dart.finalFieldType(base_bar_renderer_config.BarGroupingType),
      layoutPaintOrder: dart.finalFieldType(dart.nullable(core.int)),
      minBarLengthPx: dart.finalFieldType(core.int),
      maxBarWidthPx: dart.finalFieldType(dart.nullable(core.int)),
      fillPattern: dart.finalFieldType(dart.nullable(chart_canvas.FillPatternType)),
      stackedBarPaddingPx: dart.finalFieldType(core.int),
      strokeWidthPx: dart.finalFieldType(core.double),
      weightPattern: dart.finalFieldType(dart.nullable(core.List$(core.int))),
      rendererAttributes: dart.finalFieldType(series_renderer_config.RendererAttributes)
    }));
    dart.defineExtensionMethods(BaseBarRendererConfig, ['_equals']);
    dart.defineExtensionAccessors(BaseBarRendererConfig, ['hashCode']);
    return BaseBarRendererConfig;
  });
  base_bar_renderer_config.BaseBarRendererConfig = base_bar_renderer_config.BaseBarRendererConfig$();
  dart.addTypeTests(base_bar_renderer_config.BaseBarRendererConfig, _is_BaseBarRendererConfig_default);
  const _is_BarTargetLineRendererConfig_default = Symbol('_is_BarTargetLineRendererConfig_default');
  bar_target_line_renderer_config.BarTargetLineRendererConfig$ = dart.generic(D => {
    var BarTargetLineRendererOfD = () => (BarTargetLineRendererOfD = dart.constFn(bar_target_line_renderer.BarTargetLineRenderer$(D)))();
    class BarTargetLineRendererConfig extends base_bar_renderer_config.BaseBarRendererConfig$(D) {
      get overDrawOuterPx() {
        return this[S$0.overDrawOuterPx];
      }
      set overDrawOuterPx(value) {
        super.overDrawOuterPx = value;
      }
      get overDrawPx() {
        return this[S$0.overDrawPx];
      }
      set overDrawPx(value) {
        super.overDrawPx = value;
      }
      get roundEndCaps() {
        return this[S$0.roundEndCaps$1];
      }
      set roundEndCaps(value) {
        super.roundEndCaps = value;
      }
      build() {
        return BarTargetLineRendererOfD().new({config: this, rendererId: this.customRendererId});
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        return bar_target_line_renderer_config.BarTargetLineRendererConfig.is(other) && other.overDrawOuterPx == this.overDrawOuterPx && other.overDrawPx === this.overDrawPx && other.roundEndCaps === this.roundEndCaps && super._equals(other);
      }
      get hashCode() {
        let hash = 1;
        hash = hash * 31 + dart.hashCode(this.overDrawOuterPx);
        hash = hash * 31 + this.overDrawPx[S$.$hashCode];
        hash = hash * 31 + this.roundEndCaps[S$.$hashCode];
        return hash;
      }
    }
    (BarTargetLineRendererConfig.new = function(opts) {
      let t96;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let groupingType = opts && 'groupingType' in opts ? opts.groupingType : C[137] || CT.C137;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 15;
      let minBarLengthPx = opts && 'minBarLengthPx' in opts ? opts.minBarLengthPx : 0;
      let overDrawOuterPx = opts && 'overDrawOuterPx' in opts ? opts.overDrawOuterPx : null;
      let overDrawPx = opts && 'overDrawPx' in opts ? opts.overDrawPx : 0;
      let roundEndCaps = opts && 'roundEndCaps' in opts ? opts.roundEndCaps : true;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 3;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let weightPattern = opts && 'weightPattern' in opts ? opts.weightPattern : null;
      this[S$0.overDrawOuterPx] = overDrawOuterPx;
      this[S$0.overDrawPx] = overDrawPx;
      this[S$0.roundEndCaps$1] = roundEndCaps;
      BarTargetLineRendererConfig.__proto__.new.call(this, {customRendererId: customRendererId, dashPattern: dashPattern, groupingType: groupingType, layoutPaintOrder: layoutPaintOrder, minBarLengthPx: minBarLengthPx, strokeWidthPx: strokeWidthPx, symbolRenderer: (t96 = symbolRenderer, t96 == null ? new symbol_renderer.LineSymbolRenderer.new() : t96), weightPattern: weightPattern});
      ;
    }).prototype = BarTargetLineRendererConfig.prototype;
    dart.addTypeTests(BarTargetLineRendererConfig);
    BarTargetLineRendererConfig.prototype[_is_BarTargetLineRendererConfig_default] = true;
    dart.addTypeCaches(BarTargetLineRendererConfig);
    dart.setMethodSignature(BarTargetLineRendererConfig, () => ({
      __proto__: dart.getMethods(BarTargetLineRendererConfig.__proto__),
      build: dart.fnType(bar_target_line_renderer.BarTargetLineRenderer$(D), [])
    }));
    dart.setLibraryUri(BarTargetLineRendererConfig, I[121]);
    dart.setFieldSignature(BarTargetLineRendererConfig, () => ({
      __proto__: dart.getFields(BarTargetLineRendererConfig.__proto__),
      overDrawOuterPx: dart.finalFieldType(dart.nullable(core.int)),
      overDrawPx: dart.finalFieldType(core.int),
      roundEndCaps: dart.finalFieldType(core.bool)
    }));
    dart.defineExtensionMethods(BarTargetLineRendererConfig, ['_equals']);
    dart.defineExtensionAccessors(BarTargetLineRendererConfig, ['hashCode']);
    return BarTargetLineRendererConfig;
  });
  bar_target_line_renderer_config.BarTargetLineRendererConfig = bar_target_line_renderer_config.BarTargetLineRendererConfig$();
  dart.addTypeTests(bar_target_line_renderer_config.BarTargetLineRendererConfig, _is_BarTargetLineRendererConfig_default);
  const _is_BaseBarRenderer_default = Symbol('_is_BaseBarRenderer_default');
  base_bar_renderer.BaseBarRenderer$ = dart.generic((D, R, B) => {
    var LinkedMapOfD$SetOfString = () => (LinkedMapOfD$SetOfString = dart.constFn(_js_helper.LinkedMap$(D, T$0.SetOfString())))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var LinkedMapOfD$MapOfString$BaseBarRendererElement = () => (LinkedMapOfD$MapOfString$BaseBarRendererElement = dart.constFn(_js_helper.LinkedMap$(D, T$0.MapOfString$BaseBarRendererElement())))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    var ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    var ImmutableSeriesOfDTovoid = () => (ImmutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [ImmutableSeriesOfD()])))();
    var DAndSetOfStringTovoid = () => (DAndSetOfStringTovoid = dart.constFn(dart.fnType(dart.void, [D, T$0.SetOfString()])))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    var DatumDetailsOfDTobool = () => (DatumDetailsOfDTobool = dart.constFn(dart.fnType(core.bool, [DatumDetailsOfD()])))();
    var BaseAnimatedBarOfD$R = () => (BaseAnimatedBarOfD$R = dart.constFn(base_bar_renderer_element.BaseAnimatedBar$(D, R)))();
    var JSArrayOfBaseAnimatedBarOfD$R = () => (JSArrayOfBaseAnimatedBarOfD$R = dart.constFn(_interceptors.JSArray$(BaseAnimatedBarOfD$R())))();
    var ListOfDatumDetailsOfD = () => (ListOfDatumDetailsOfD = dart.constFn(core.List$(DatumDetailsOfD())))();
    var BaseAnimatedBarOfD$RTobool = () => (BaseAnimatedBarOfD$RTobool = dart.constFn(dart.fnType(core.bool, [BaseAnimatedBarOfD$R()])))();
    var BaseAnimatedBarOfD$RToDatumDetailsOfD = () => (BaseAnimatedBarOfD$RToDatumDetailsOfD = dart.constFn(dart.fnType(DatumDetailsOfD(), [BaseAnimatedBarOfD$R()])))();
    var BToR = () => (BToR = dart.constFn(dart.fnType(R, [B])))();
    var ListOfB = () => (ListOfB = dart.constFn(core.List$(B)))();
    var IdentityMapOfString$ListOfB = () => (IdentityMapOfString$ListOfB = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfB())))();
    var JSArrayOfB = () => (JSArrayOfB = dart.constFn(_interceptors.JSArray$(B)))();
    var VoidToListOfB = () => (VoidToListOfB = dart.constFn(dart.fnType(ListOfB(), [])))();
    var BTobool = () => (BTobool = dart.constFn(dart.fnType(core.bool, [B])))();
    var StringAndListOfBTovoid = () => (StringAndListOfBTovoid = dart.constFn(dart.fnType(dart.void, [core.String, ListOfB()])))();
    class BaseBarRenderer extends cartesian_renderer.BaseCartesianRenderer$(D) {
      get config() {
        return this[S$0.config$6];
      }
      set config(value) {
        super.config = value;
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        if (this[S$0._lastVertical] !== this.chart.vertical) {
          this[S$0._barStackMap][S$.$clear]();
          this[S$0._currentKeys$6][S$.$clear]();
          this[S$0._currentGroupsStackKeys][S$.$clear]();
        }
        this[S$0._lastVertical] = this.chart.vertical;
        let barGroupIndex = 0;
        let posDomainToStackKeyToDetailsMap = new (LinkedMapOfD$MapOfString$BaseBarRendererElement()).new();
        let negDomainToStackKeyToDetailsMap = new (LinkedMapOfD$MapOfString$BaseBarRendererElement()).new();
        let categoryToIndexMap = new (T$.IdentityMapOfString$int()).new();
        let maxBarStackSize = 0;
        let orderedSeriesList = this.getOrderedSeriesList(MutableSeriesOfD(), seriesList);
        orderedSeriesList[S$.$forEach](dart.fn(series => {
          let t97, t97$, t97$0, t97$1;
          let elements = T$0.JSArrayOfBaseBarRendererElement().of([]);
          let domainFn = series.domainFn;
          let measureFn = series.measureFn;
          let measureOffsetFn = series.measureOffsetFn;
          let fillPatternFn = series.fillPatternFn;
          let strokeWidthPxFn = series.strokeWidthPxFn;
          t97 = series;
          t97.dashPatternFn == null ? t97.dashPatternFn = dart.fn(_ => this.config.dashPattern, T$.intNToListNOfint()) : null;
          let stackKey = "__defaultKey__";
          if (this.config.grouped && this.config.stacked) {
            if (series.seriesCategory != null) {
              stackKey = dart.nullCheck(series.seriesCategory);
            }
            if (categoryToIndexMap[S$.$containsKey](stackKey)) {
              barGroupIndex = dart.nullCheck(categoryToIndexMap[S$.$_get](stackKey));
            } else {
              barGroupIndex = categoryToIndexMap[S$.$length];
              categoryToIndexMap[S$.$_set](stackKey, barGroupIndex);
            }
          }
          let needsMeasureOffset = false;
          for (let barIndex = 0; barIndex < series.data[S$.$length]; barIndex = barIndex + 1) {
            let datum = series.data[S$.$_get](barIndex);
            let details = this.getBaseDetails(datum, barIndex);
            details.barStackIndex = 0;
            details.measureOffset = dart.nullCheck(measureOffsetFn)(barIndex);
            if (fillPatternFn != null) {
              details.fillPattern = fillPatternFn(barIndex);
            } else {
              details.fillPattern = this.config.fillPattern;
            }
            if (strokeWidthPxFn != null) {
              details.strokeWidthPx = (t97$ = strokeWidthPxFn(barIndex), t97$ == null ? null : t97$[S$.$toDouble]());
            } else {
              details.strokeWidthPx = this.config.strokeWidthPx;
            }
            if (this.config.stacked) {
              needsMeasureOffset = true;
              let domain = domainFn(barIndex);
              let measure = measureFn(barIndex);
              let domainToCategoryToDetailsMap = measure == null || dart.notNull(measure) >= 0 ? posDomainToStackKeyToDetailsMap : negDomainToStackKeyToDetailsMap;
              let categoryToDetailsMap = domainToCategoryToDetailsMap[S$.$putIfAbsent](domain, dart.fn(() => new (T$0.IdentityMapOfString$BaseBarRendererElement()).new(), T$0.VoidToMapOfString$BaseBarRendererElement()));
              let prevDetail = categoryToDetailsMap[S$.$_get](stackKey);
              if (prevDetail != null) {
                details.barStackIndex = dart.nullCheck(prevDetail.barStackIndex) + 1;
              }
              details.cumulativeTotal = (t97$0 = measure, t97$0 == null ? 0 : t97$0);
              let measureOffset = dart.nullCheck(measureOffsetFn(barIndex));
              if (prevDetail != null) {
                measureOffset = measureOffset + dart.nullCheck(prevDetail.measureOffsetPlusMeasure);
                details.cumulativeTotal = dart.nullCheck(details.cumulativeTotal) + dart.nullCheck(prevDetail.cumulativeTotal);
              }
              details.measureOffset = measureOffset;
              let measureValue = (t97$1 = measure, t97$1 == null ? 0 : t97$1);
              details.measureOffsetPlusMeasure = measureOffset + measureValue;
              categoryToDetailsMap[S$.$_set](stackKey, details);
            }
            maxBarStackSize = math.max(core.int, maxBarStackSize, dart.nullCheck(details.barStackIndex) + 1);
            elements[S$.$add](details);
          }
          if (needsMeasureOffset) {
            series.measureOffsetFn = dart.fn(index => dart.nullCheck(elements[S$.$_get](dart.nullCheck(index)).measureOffset), T$0.intNTonum());
          }
          series.setAttr(core.int, base_bar_renderer.barGroupIndexKey, barGroupIndex);
          series.setAttr(core.String, base_bar_renderer.stackKeyKey, stackKey);
          series.setAttr(T$0.ListOfBaseBarRendererElement(), base_bar_renderer.barElementsKey, elements);
          if (this.config.grouped) {
            barGroupIndex = barGroupIndex + 1;
          }
        }, MutableSeriesOfDTovoid()));
        let numBarGroups = 0;
        if (this.config.grouped && this.config.stacked) {
          numBarGroups = categoryToIndexMap[S$.$length];
        } else if (this.config.stacked) {
          numBarGroups = 1;
        } else {
          numBarGroups = seriesList[S$.$length];
        }
        let barWeights = this[S$0._calculateBarWeights](numBarGroups);
        seriesList[S$.$forEach](dart.fn(series => {
          series.setAttr(core.int, base_bar_renderer.barGroupCountKey, numBarGroups);
          if (barWeights[S$.$isNotEmpty]) {
            let barGroupIndex = dart.nullCheck(series.getAttr(core.int, base_bar_renderer.barGroupIndexKey));
            let barWeight = barWeights[S$.$_get](barGroupIndex);
            let previousBarWeights = this.isRtl ? barWeights[S$0.$getRange](barGroupIndex + 1, numBarGroups) : barWeights[S$0.$getRange](0, barGroupIndex);
            let previousBarWeight = previousBarWeights[S$.$isNotEmpty] ? previousBarWeights[S$.$reduce](dart.fn((a, b) => a + b, T$0.doubleAnddoubleTodouble())) : 0.0;
            series.setAttr(core.double, base_bar_renderer.barGroupWeightKey, barWeight);
            series.setAttr(core.double, base_bar_renderer.previousBarGroupWeightKey, previousBarWeight);
            series.setAttr(T$0.ListOfdouble(), base_bar_renderer.allBarGroupWeightsKey, barWeights);
          }
        }, MutableSeriesOfDTovoid()));
      }
      [S$0._calculateBarWeights](numBarGroups) {
        let weights = T$.JSArrayOfdouble().of([]);
        if (this.config.weightPattern != null) {
          if (numBarGroups > dart.nullCheck(this.config.weightPattern)[S$.$length]) {
            dart.throw(new core.ArgumentError.new("Number of series exceeds length of weight " + "pattern " + dart.str(this.config.weightPattern)));
          }
          let totalBarWeight = 0;
          for (let i = 0; i < numBarGroups; i = i + 1) {
            totalBarWeight = totalBarWeight + dart.nullCheck(this.config.weightPattern)[S$.$_get](i);
          }
          for (let i = 0; i < numBarGroups; i = i + 1) {
            weights[S$.$add](dart.nullCheck(this.config.weightPattern)[S$.$_get](i) / totalBarWeight);
          }
        } else {
          for (let i = 0; i < numBarGroups; i = i + 1) {
            weights[S$.$add](1 / numBarGroups);
          }
        }
        return weights;
      }
      configureDomainAxes(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        super.configureDomainAxes(seriesList);
        if (seriesList[S$.$isNotEmpty]) {
          let domainAxis = dart.nullCheck(seriesList[S$.$first].getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
          if (!domainAxis.hasValidBarChartRangeBandConfig) {
            domainAxis.setRangeBandConfig(new scale$.RangeBandConfig.styleAssignedPercent());
          }
        }
      }
      update(seriesList, isAnimatingThisDraw) {
        ListOfImmutableSeriesOfD().as(seriesList);
        this[S$0._currentKeys$6][S$.$clear]();
        this[S$0._currentGroupsStackKeys][S$.$clear]();
        let orderedSeriesList = this.getOrderedSeriesList(ImmutableSeriesOfD(), seriesList);
        orderedSeriesList[S$.$forEach](dart.fn(series => {
          let t97;
          let domainAxis = ImmutableAxisOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
          let domainFn = series.domainFn;
          let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
          let measureFn = series.measureFn;
          let colorFn = series.colorFn;
          let dashPatternFn = series.dashPatternFn;
          let fillColorFn = series.fillColorFn;
          let seriesStackKey = series.getAttr(core.String, base_bar_renderer.stackKeyKey);
          let barGroupCount = series.getAttr(core.int, base_bar_renderer.barGroupCountKey);
          let barGroupIndex = series.getAttr(core.int, base_bar_renderer.barGroupIndexKey);
          let previousBarGroupWeight = series.getAttr(core.double, base_bar_renderer.previousBarGroupWeightKey);
          let barGroupWeight = series.getAttr(core.double, base_bar_renderer.barGroupWeightKey);
          let allBarGroupWeights = series.getAttr(T$0.ListOfdouble(), base_bar_renderer.allBarGroupWeightsKey);
          let measureAxisPosition = measureAxis.getLocation(0.0);
          let elementsList = series.getAttr(T$0.ListOfBaseBarRendererElement(), base_bar_renderer.barElementsKey);
          this[S$0._prevDomainAxis] = domainAxis;
          for (let barIndex = 0; barIndex < series.data[S$.$length]; barIndex = barIndex + 1) {
            let datum = series.data[S$.$_get](barIndex);
            let details = dart.nullCheck(elementsList)[S$.$_get](barIndex);
            let domainValue = domainFn(barIndex);
            let measureValue = measureFn(barIndex);
            let measureIsNull = measureValue == null;
            let measureIsNegative = !measureIsNull && dart.nullCheck(measureValue) < 0;
            let barStackMapKey = dart.str(domainValue) + "__" + dart.str(seriesStackKey) + "__" + (measureIsNegative ? "pos" : "neg") + "__" + dart.str(barGroupIndex);
            let barKey = barStackMapKey + dart.str(details.barStackIndex);
            let barStackList = this[S$0._barStackMap][S$.$putIfAbsent](barStackMapKey, dart.fn(() => JSArrayOfB().of([]), VoidToListOfB()));
            let animatingBar = iterable_extensions['IterableExtension|firstWhereOrNull'](B, barStackList, dart.fn(bar => bar.key === barKey, BTobool()));
            if (animatingBar == null) {
              if (!measureIsNull) {
                animatingBar = this.makeAnimatedBar({key: barKey, series: series, datum: datum, barGroupIndex: dart.nullCheck(barGroupIndex), previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, allBarGroupWeights: allBarGroupWeights, color: dart.nullCheck(colorFn)(barIndex), dashPattern: dart.nullCheck(dashPatternFn)(barIndex), details: R.as(details), domainValue: domainFn(barIndex), domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[S$.$round](), fillColor: dart.nullCheck(fillColorFn)(barIndex), fillPattern: details.fillPattern, measureValue: 0.0, measureOffsetValue: 0.0, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: dart.nullCheck(barGroupCount), strokeWidthPx: details.strokeWidthPx, measureIsNull: measureIsNull, measureIsNegative: measureIsNegative});
                barStackList[S$.$add](animatingBar);
              }
            } else {
              t97 = animatingBar;
              (() => {
                t97.datum = datum;
                t97.series = series;
                t97.domainValue = domainValue;
                return t97;
              })();
            }
            if (animatingBar == null) {
              continue;
            }
            this[S$0._currentKeys$6][S$.$add](barKey);
            this[S$0._currentGroupsStackKeys][S$.$putIfAbsent](domainValue, dart.fn(() => T$.LinkedHashSetOfString().new(), T$0.VoidToSetOfString())).add(barStackMapKey);
            let barElement = this.makeBarRendererElement({barGroupIndex: dart.nullCheck(barGroupIndex), previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, allBarGroupWeights: allBarGroupWeights, color: dart.nullCheck(colorFn)(barIndex), dashPattern: dart.nullCheck(dashPatternFn)(barIndex), details: R.as(details), domainValue: domainFn(barIndex), domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[S$.$round](), fillColor: dart.nullCheck(fillColorFn)(barIndex), fillPattern: details.fillPattern, measureValue: measureValue, measureOffsetValue: dart.nullCheck(details.measureOffset), measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: dart.nullCheck(barGroupCount), strokeWidthPx: details.strokeWidthPx, measureIsNull: measureIsNull, measureIsNegative: measureIsNegative});
            animatingBar.setNewTarget(R.as(barElement));
          }
        }, ImmutableSeriesOfDTovoid()));
        this[S$0._barStackMap][S$.$forEach](dart.fn((key, barStackList) => {
          for (let barIndex = 0; barIndex < barStackList[S$.$length]; barIndex = barIndex + 1) {
            let bar = barStackList[S$.$_get](barIndex);
            if (this[S$0._currentKeys$6][S$.$contains](bar.key) !== true) {
              bar.animateOut();
            }
          }
        }, StringAndListOfBTovoid()));
      }
      paint(canvas, animationPercent) {
        if (animationPercent === 1.0) {
          let keysToRemove = new (T$0._IdentityHashSetOfString()).new();
          this[S$0._barStackMap][S$.$forEach](dart.fn((key, barStackList) => {
            barStackList[S$.$retainWhere](dart.fn(bar => !bar.animatingOut && !dart.nullCheck(dart.nullCheck(bar.targetBar).measureIsNull), BTobool()));
            if (barStackList[S$.$isEmpty]) {
              keysToRemove.add(key);
            }
          }, StringAndListOfBTovoid()));
          for (let key of keysToRemove) {
            this[S$0._barStackMap][S$.$remove](key);
            this[S$0._currentKeys$6][S$.$remove](key);
          }
          this[S$0._currentGroupsStackKeys][S$.$forEach](dart.fn((domain, keys) => {
            keys.removeWhere(dart.bind(keysToRemove, 'contains'));
          }, DAndSetOfStringTovoid()));
        }
        this[S$0._barStackMap][S$.$forEach](dart.fn((stackKey, barStack) => {
          let barElements = barStack[S$.$map](R, dart.fn(animatingBar => animatingBar.getCurrentBar(animationPercent), BToR()))[S$.$toList]();
          if (barElements[S$.$isNotEmpty]) {
            this.paintBar(canvas, animationPercent, barElements);
          }
        }, StringAndListOfBTovoid()));
      }
      getNearestDatumDetailPerSeries(chartPoint, byDomain, boundsOverride, opts) {
        let selectOverlappingPoints = opts && 'selectOverlappingPoints' in opts ? opts.selectOverlappingPoints : false;
        let selectExactEventLocation = opts && 'selectExactEventLocation' in opts ? opts.selectExactEventLocation : false;
        let nearest = JSArrayOfDatumDetailsOfD().of([]);
        if (!this.isPointWithinBounds(chartPoint, boundsOverride)) {
          return nearest;
        }
        if (axis$.OrdinalAxis.is(this[S$0._prevDomainAxis])) {
          let domainValue = dart.nullCheck(this[S$0._prevDomainAxis]).getDomain(this.renderingVertically ? chartPoint.x : chartPoint.y);
          if (domainValue != null) {
            if (this.renderingVertically) {
              nearest = this[S$0._getVerticalDetailsForDomainValue](domainValue, chartPoint);
            } else {
              nearest = this[S$0._getHorizontalDetailsForDomainValue](domainValue, chartPoint);
            }
          }
        } else {
          if (this.renderingVertically) {
            nearest = this[S$0._getVerticalDetailsForDomainValue](null, chartPoint);
          } else {
            nearest = this[S$0._getHorizontalDetailsForDomainValue](null, chartPoint);
          }
          let minRelativeDistance = 1.7976931348623157e+308;
          let minDomainDistance = 1.7976931348623157e+308;
          let minMeasureDistance = 1.7976931348623157e+308;
          let nearestDomain = null;
          for (let detail of nearest) {
            if (byDomain) {
              if (dart.nullCheck(detail.domainDistance) < minDomainDistance || dart.nullCheck(detail.domainDistance) === minDomainDistance && dart.nullCheck(detail.measureDistance) < minMeasureDistance) {
                minDomainDistance = dart.nullCheck(detail.domainDistance);
                minMeasureDistance = dart.nullCheck(detail.measureDistance);
                nearestDomain = detail.domain;
              }
            } else {
              if (dart.nullCheck(detail.relativeDistance) < minRelativeDistance) {
                minRelativeDistance = dart.nullCheck(detail.relativeDistance);
                nearestDomain = detail.domain;
              }
            }
          }
          nearest[S$.$retainWhere](dart.fn(d => dart.equals(d.domain, nearestDomain), DatumDetailsOfDTobool()));
        }
        return nearest;
      }
      [S$0._getSegmentsForDomainValue](domainValue, opts) {
        let t97;
        let where = opts && 'where' in opts ? opts.where : null;
        let matchingSegments = JSArrayOfBaseAnimatedBarOfD$R().of([]);
        let stackKeys = domainValue != null ? this[S$0._currentGroupsStackKeys][S$.$_get](domainValue) : this[S$0._currentGroupsStackKeys][S$.$values][S$.$reduce](dart.fn((allKeys, keys) => {
          let t97;
          t97 = allKeys;
          return (() => {
            t97.addAll(keys);
            return t97;
          })();
        }, T$0.SetOfStringAndSetOfStringToSetOfString()));
        t97 = stackKeys;
        t97 == null ? null : t97[S$.$forEach](dart.fn(stackKey => {
          if (where != null) {
            matchingSegments[S$.$addAll](dart.nullCheck(this[S$0._barStackMap][S$.$_get](stackKey))[S$.$where](where));
          } else {
            matchingSegments[S$.$addAll](dart.nullCheck(this[S$0._barStackMap][S$.$_get](stackKey)));
          }
        }, T$.StringTovoid()));
        return matchingSegments;
      }
      [S$0._getVerticalDetailsForDomainValue](domainValue, chartPoint) {
        return ListOfDatumDetailsOfD().from(this[S$0._getSegmentsForDomainValue](domainValue, {where: dart.fn(bar => !bar.series.overlaySeries, BaseAnimatedBarOfD$RTobool())})[S$.$map](DatumDetailsOfD(), dart.fn(bar => {
          let barBounds = dart.nullCheck(this.getBoundsForBar(dart.nullCheck(bar.currentBar)));
          let segmentDomainDistance = this[S$0._getDistance](chartPoint.x[S$.$round](), barBounds[S$.$left], barBounds[S$.$right]);
          let segmentMeasureDistance = this[S$0._getDistance](chartPoint.y[S$.$round](), barBounds[S$.$top], barBounds[S$.$bottom]);
          let nearestPoint = new (T$.PointOfdouble()).new(math$.clamp(chartPoint.x, barBounds[S$.$left], barBounds[S$.$right])[S$.$toDouble](), math$.clamp(chartPoint.y, barBounds[S$.$top], barBounds[S$.$bottom])[S$.$toDouble]());
          let relativeDistance = chartPoint.distanceTo(nearestPoint);
          return new (DatumDetailsOfD()).new({series: bar.series, datum: bar.datum, domain: bar.domainValue, domainDistance: segmentDomainDistance, measureDistance: segmentMeasureDistance, relativeDistance: relativeDistance});
        }, BaseAnimatedBarOfD$RToDatumDetailsOfD())));
      }
      [S$0._getHorizontalDetailsForDomainValue](domainValue, chartPoint) {
        return ListOfDatumDetailsOfD().from(this[S$0._getSegmentsForDomainValue](domainValue, {where: dart.fn(bar => !bar.series.overlaySeries, BaseAnimatedBarOfD$RTobool())})[S$.$map](DatumDetailsOfD(), dart.fn(bar => {
          let barBounds = dart.nullCheck(this.getBoundsForBar(dart.nullCheck(bar.currentBar)));
          let segmentDomainDistance = this[S$0._getDistance](chartPoint.y[S$.$round](), barBounds[S$.$top], barBounds[S$.$bottom]);
          let segmentMeasureDistance = this[S$0._getDistance](chartPoint.x[S$.$round](), barBounds[S$.$left], barBounds[S$.$right]);
          return new (DatumDetailsOfD()).new({series: bar.series, datum: bar.datum, domain: bar.domainValue, domainDistance: segmentDomainDistance, measureDistance: segmentMeasureDistance});
        }, BaseAnimatedBarOfD$RToDatumDetailsOfD())));
      }
      [S$0._getDistance](point, min, max) {
        if (max >= point && min <= point) {
          return 0.0;
        }
        return (point > max ? point - max : min - point)[S$.$toDouble]();
      }
      getOrderedSeriesList(S, seriesList) {
        dart.checkTypeBound(S, ImmutableSeriesOfD(), 'S');
        return this.renderingVertically && this.config.stacked ? this.config.grouped ? new (base_bar_renderer._ReversedSeriesIterable$(S)).new(seriesList) : seriesList[S$.$reversed] : seriesList;
      }
      get isRtl() {
        return this.chart.context.isRtl;
      }
    }
    (BaseBarRenderer.new = function(opts) {
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      this[S$0._lastVertical] = true;
      this[S$0._barStackMap] = new (IdentityMapOfString$ListOfB()).new();
      this[S$0._currentKeys$6] = T$.JSArrayOfString().of([]);
      this[S$0._currentGroupsStackKeys] = new (LinkedMapOfD$SetOfString()).new();
      this[S$0._prevDomainAxis] = null;
      this[S$0.config$6] = config;
      BaseBarRenderer.__proto__.new.call(this, {rendererId: rendererId, layoutPaintOrder: layoutPaintOrder, symbolRenderer: config.symbolRenderer});
      ;
    }).prototype = BaseBarRenderer.prototype;
    dart.addTypeTests(BaseBarRenderer);
    BaseBarRenderer.prototype[_is_BaseBarRenderer_default] = true;
    dart.addTypeCaches(BaseBarRenderer);
    dart.setMethodSignature(BaseBarRenderer, () => ({
      __proto__: dart.getMethods(BaseBarRenderer.__proto__),
      [S$0._calculateBarWeights]: dart.fnType(core.List$(core.double), [core.int]),
      update: dart.fnType(dart.void, [dart.nullable(core.Object), core.bool]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      getNearestDatumDetailPerSeries: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [math.Point$(core.double), core.bool, dart.nullable(math.Rectangle$(core.int))], {selectExactEventLocation: core.bool, selectOverlappingPoints: core.bool}, {}),
      [S$0._getSegmentsForDomainValue]: dart.fnType(core.List$(base_bar_renderer_element.BaseAnimatedBar$(D, R)), [dart.nullable(D)], {where: dart.nullable(dart.fnType(core.bool, [base_bar_renderer_element.BaseAnimatedBar$(D, R)]))}, {}),
      [S$0._getVerticalDetailsForDomainValue]: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [dart.nullable(D), math.Point$(core.double)]),
      [S$0._getHorizontalDetailsForDomainValue]: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [dart.nullable(D), math.Point$(core.double)]),
      [S$0._getDistance]: dart.fnType(core.double, [core.int, core.int, core.int]),
      getOrderedSeriesList: dart.gFnType(S => [core.Iterable$(S), [core.List$(S)]], S => [processed_series.ImmutableSeries$(D)])
    }));
    dart.setGetterSignature(BaseBarRenderer, () => ({
      __proto__: dart.getGetters(BaseBarRenderer.__proto__),
      isRtl: core.bool
    }));
    dart.setLibraryUri(BaseBarRenderer, I[123]);
    dart.setFieldSignature(BaseBarRenderer, () => ({
      __proto__: dart.getFields(BaseBarRenderer.__proto__),
      config: dart.finalFieldType(base_bar_renderer_config.BaseBarRendererConfig$(dart.nullable(core.Object))),
      [S$0._lastVertical]: dart.fieldType(core.bool),
      [S$0._barStackMap]: dart.finalFieldType(collection.LinkedHashMap$(core.String, core.List$(B))),
      [S$0._currentKeys$6]: dart.finalFieldType(core.List$(core.String)),
      [S$0._currentGroupsStackKeys]: dart.finalFieldType(collection.LinkedHashMap$(D, core.Set$(core.String))),
      [S$0._prevDomainAxis]: dart.fieldType(dart.nullable(axis$.ImmutableAxis$(D)))
    }));
    return BaseBarRenderer;
  });
  base_bar_renderer.BaseBarRenderer = base_bar_renderer.BaseBarRenderer$();
  dart.addTypeTests(base_bar_renderer.BaseBarRenderer, _is_BaseBarRenderer_default);
  base_bar_renderer_element.BaseBarRendererElement = class BaseBarRendererElement extends core.Object {
    get barStackIndex() {
      return this[S$0.barStackIndex];
    }
    set barStackIndex(value) {
      this[S$0.barStackIndex] = value;
    }
    get color() {
      return this[S$0.color$5];
    }
    set color(value) {
      this[S$0.color$5] = value;
    }
    get cumulativeTotal() {
      return this[S$0.cumulativeTotal];
    }
    set cumulativeTotal(value) {
      this[S$0.cumulativeTotal] = value;
    }
    get dashPattern() {
      return this[S$0.dashPattern$4];
    }
    set dashPattern(value) {
      this[S$0.dashPattern$4] = value;
    }
    get fillColor() {
      return this[S$0.fillColor$3];
    }
    set fillColor(value) {
      this[S$0.fillColor$3] = value;
    }
    get fillPattern() {
      return this[S$0.fillPattern$2];
    }
    set fillPattern(value) {
      this[S$0.fillPattern$2] = value;
    }
    get measureAxisPosition() {
      return this[S$0.measureAxisPosition$1];
    }
    set measureAxisPosition(value) {
      this[S$0.measureAxisPosition$1] = value;
    }
    get measureOffset() {
      return this[S$0.measureOffset];
    }
    set measureOffset(value) {
      this[S$0.measureOffset] = value;
    }
    get measureOffsetPlusMeasure() {
      return this[S$0.measureOffsetPlusMeasure];
    }
    set measureOffsetPlusMeasure(value) {
      this[S$0.measureOffsetPlusMeasure] = value;
    }
    get strokeWidthPx() {
      return this[S$0.strokeWidthPx$11];
    }
    set strokeWidthPx(value) {
      this[S$0.strokeWidthPx$11] = value;
    }
    get measureIsNull() {
      return this[S$0.measureIsNull];
    }
    set measureIsNull(value) {
      this[S$0.measureIsNull] = value;
    }
    get measureIsNegative() {
      return this[S$0.measureIsNegative];
    }
    set measureIsNegative(value) {
      this[S$0.measureIsNegative] = value;
    }
    updateAnimationPercent(previous, target, animationPercent) {
      this.color = chart_canvas.getAnimatedColor(dart.nullCheck(previous.color), dart.nullCheck(target.color), animationPercent);
      this.fillColor = chart_canvas.getAnimatedColor(dart.nullCheck(previous.fillColor), dart.nullCheck(target.fillColor), animationPercent);
      this.measureIsNull = target.measureIsNull;
      this.measureIsNegative = target.measureIsNegative;
    }
  };
  (base_bar_renderer_element.BaseBarRendererElement.new = function() {
    this[S$0.barStackIndex] = null;
    this[S$0.color$5] = null;
    this[S$0.cumulativeTotal] = null;
    this[S$0.dashPattern$4] = null;
    this[S$0.fillColor$3] = null;
    this[S$0.fillPattern$2] = null;
    this[S$0.measureAxisPosition$1] = null;
    this[S$0.measureOffset] = null;
    this[S$0.measureOffsetPlusMeasure] = null;
    this[S$0.strokeWidthPx$11] = null;
    this[S$0.measureIsNull] = null;
    this[S$0.measureIsNegative] = null;
    ;
  }).prototype = base_bar_renderer_element.BaseBarRendererElement.prototype;
  (base_bar_renderer_element.BaseBarRendererElement.clone = function(other) {
    this[S$0.barStackIndex] = null;
    this[S$0.color$5] = null;
    this[S$0.cumulativeTotal] = null;
    this[S$0.dashPattern$4] = null;
    this[S$0.fillColor$3] = null;
    this[S$0.fillPattern$2] = null;
    this[S$0.measureAxisPosition$1] = null;
    this[S$0.measureOffset] = null;
    this[S$0.measureOffsetPlusMeasure] = null;
    this[S$0.strokeWidthPx$11] = null;
    this[S$0.measureIsNull] = null;
    this[S$0.measureIsNegative] = null;
    this.barStackIndex = other.barStackIndex;
    this.color = other.color != null ? new color$.Color.fromOther({color: dart.nullCheck(other.color)}) : null;
    this.cumulativeTotal = other.cumulativeTotal;
    this.dashPattern = other.dashPattern;
    this.fillColor = other.fillColor != null ? new color$.Color.fromOther({color: dart.nullCheck(other.fillColor)}) : null;
    this.fillPattern = other.fillPattern;
    this.measureAxisPosition = other.measureAxisPosition;
    this.measureOffset = other.measureOffset;
    this.measureOffsetPlusMeasure = other.measureOffsetPlusMeasure;
    this.strokeWidthPx = other.strokeWidthPx;
    this.measureIsNull = other.measureIsNull;
    this.measureIsNegative = other.measureIsNegative;
  }).prototype = base_bar_renderer_element.BaseBarRendererElement.prototype;
  dart.addTypeTests(base_bar_renderer_element.BaseBarRendererElement);
  dart.addTypeCaches(base_bar_renderer_element.BaseBarRendererElement);
  dart.setMethodSignature(base_bar_renderer_element.BaseBarRendererElement, () => ({
    __proto__: dart.getMethods(base_bar_renderer_element.BaseBarRendererElement.__proto__),
    updateAnimationPercent: dart.fnType(dart.void, [base_bar_renderer_element.BaseBarRendererElement, base_bar_renderer_element.BaseBarRendererElement, core.double])
  }));
  dart.setLibraryUri(base_bar_renderer_element.BaseBarRendererElement, I[124]);
  dart.setFieldSignature(base_bar_renderer_element.BaseBarRendererElement, () => ({
    __proto__: dart.getFields(base_bar_renderer_element.BaseBarRendererElement.__proto__),
    barStackIndex: dart.fieldType(dart.nullable(core.int)),
    color: dart.fieldType(dart.nullable(color$.Color)),
    cumulativeTotal: dart.fieldType(dart.nullable(core.num)),
    dashPattern: dart.fieldType(dart.nullable(core.List$(core.int))),
    fillColor: dart.fieldType(dart.nullable(color$.Color)),
    fillPattern: dart.fieldType(dart.nullable(chart_canvas.FillPatternType)),
    measureAxisPosition: dart.fieldType(dart.nullable(core.double)),
    measureOffset: dart.fieldType(dart.nullable(core.num)),
    measureOffsetPlusMeasure: dart.fieldType(dart.nullable(core.num)),
    strokeWidthPx: dart.fieldType(dart.nullable(core.double)),
    measureIsNull: dart.fieldType(dart.nullable(core.bool)),
    measureIsNegative: dart.fieldType(dart.nullable(core.bool))
  }));
  bar_target_line_renderer._BarTargetLineRendererElement = class _BarTargetLineRendererElement extends base_bar_renderer_element.BaseBarRendererElement {
    get points() {
      let t97;
      t97 = this[S$0.___BarTargetLineRendererElement_points];
      return t97 == null ? dart.throw(new _internal.LateError.fieldNI("points")) : t97;
    }
    set points(t97) {
      this[S$0.___BarTargetLineRendererElement_points] = t97;
    }
    updateAnimationPercent(previous, target, animationPercent) {
      let localPrevious = bar_target_line_renderer._BarTargetLineRendererElement.as(previous);
      let localTarget = bar_target_line_renderer._BarTargetLineRendererElement.as(target);
      let previousPoints = localPrevious.points;
      let targetPoints = localTarget.points;
      let lastPoint = null;
      function lastPoint$35get() {
        let t99;
        t99 = lastPoint;
        return t99 == null ? dart.throw(new _internal.LateError.localNI("lastPoint")) : t99;
      }
      dart.fn(lastPoint$35get, T$0.VoidToPointOfint());
      function lastPoint$35set(t100) {
        return lastPoint = t100;
      }
      dart.fn(lastPoint$35set, T$0.PointOfintTodynamic());
      let pointIndex = null;
      for (let t102 = pointIndex = 0; pointIndex < targetPoints[S$.$length]; pointIndex = pointIndex + 1) {
        let targetPoint = targetPoints[S$.$_get](pointIndex);
        let previousPoint = null;
        if (previousPoints[S$.$length] - 1 >= pointIndex) {
          previousPoint = previousPoints[S$.$_get](pointIndex);
          lastPoint$35set(previousPoint);
        } else {
          previousPoint = new (T$.PointOfint()).new(targetPoint.x, lastPoint$35get().y);
        }
        let x = (targetPoint.x - previousPoint.x) * animationPercent + previousPoint.x;
        let y = (targetPoint.y - previousPoint.y) * animationPercent + previousPoint.y;
        if (this.points[S$.$length] - 1 >= pointIndex) {
          this.points[S$.$_set](pointIndex, new (T$.PointOfint()).new(x[S$.$round](), y[S$.$round]()));
        } else {
          this.points[S$.$add](new (T$.PointOfint()).new(x[S$.$round](), y[S$.$round]()));
        }
      }
      if (pointIndex < this.points[S$.$length]) {
        this.points[S$.$removeRange](pointIndex, this.points[S$.$length]);
      }
      this.strokeWidthPx = (dart.nullCheck(localTarget.strokeWidthPx) - dart.nullCheck(localPrevious.strokeWidthPx)) * animationPercent + dart.nullCheck(localPrevious.strokeWidthPx);
      this.roundEndCaps = localTarget.roundEndCaps;
      super.updateAnimationPercent(previous, target, animationPercent);
    }
  };
  (bar_target_line_renderer._BarTargetLineRendererElement.new = function(opts) {
    let roundEndCaps = opts && 'roundEndCaps' in opts ? opts.roundEndCaps : null;
    this[S$0.___BarTargetLineRendererElement_points] = null;
    this.roundEndCaps = roundEndCaps;
    bar_target_line_renderer._BarTargetLineRendererElement.__proto__.new.call(this);
    ;
  }).prototype = bar_target_line_renderer._BarTargetLineRendererElement.prototype;
  (bar_target_line_renderer._BarTargetLineRendererElement.clone = function(other) {
    this[S$0.___BarTargetLineRendererElement_points] = null;
    this[S$0.___BarTargetLineRendererElement_points] = T$0.ListOfPointOfint().of(other.points);
    this.roundEndCaps = other.roundEndCaps;
    bar_target_line_renderer._BarTargetLineRendererElement.__proto__.clone.call(this, other);
    ;
  }).prototype = bar_target_line_renderer._BarTargetLineRendererElement.prototype;
  dart.addTypeTests(bar_target_line_renderer._BarTargetLineRendererElement);
  dart.addTypeCaches(bar_target_line_renderer._BarTargetLineRendererElement);
  dart.setGetterSignature(bar_target_line_renderer._BarTargetLineRendererElement, () => ({
    __proto__: dart.getGetters(bar_target_line_renderer._BarTargetLineRendererElement.__proto__),
    points: core.List$(math.Point$(core.int))
  }));
  dart.setSetterSignature(bar_target_line_renderer._BarTargetLineRendererElement, () => ({
    __proto__: dart.getSetters(bar_target_line_renderer._BarTargetLineRendererElement.__proto__),
    points: core.List$(math.Point$(core.int))
  }));
  dart.setLibraryUri(bar_target_line_renderer._BarTargetLineRendererElement, I[125]);
  dart.setFieldSignature(bar_target_line_renderer._BarTargetLineRendererElement, () => ({
    __proto__: dart.getFields(bar_target_line_renderer._BarTargetLineRendererElement.__proto__),
    [S$0.___BarTargetLineRendererElement_points]: dart.fieldType(dart.nullable(core.List$(math.Point$(core.int)))),
    roundEndCaps: dart.fieldType(core.bool)
  }));
  const _is_BaseAnimatedBar_default = Symbol('_is_BaseAnimatedBar_default');
  base_bar_renderer_element.BaseAnimatedBar$ = dart.generic((D, R) => {
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var DN = () => (DN = dart.constFn(dart.nullable(D)))();
    class BaseAnimatedBar extends core.Object {
      get key() {
        return this[S$0.key$3];
      }
      set key(value) {
        super.key = value;
      }
      get datum() {
        return this[S$0.datum$3];
      }
      set datum(value) {
        this[S$0.datum$3] = value;
      }
      get series() {
        return this[S$0.series$5];
      }
      set series(value) {
        this[S$0.series$5] = ImmutableSeriesOfD().as(value);
      }
      get domainValue() {
        return this[S$0.domainValue];
      }
      set domainValue(value) {
        this[S$0.domainValue] = DN().as(value);
      }
      get animatingOut() {
        return this[S$0.animatingOut$2];
      }
      set animatingOut(value) {
        this[S$0.animatingOut$2] = value;
      }
      animateOut() {
        let newTarget = this.clone(dart.nullCheck(this[S$0._currentBar]));
        this.animateElementToMeasureAxisPosition(newTarget);
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        R.as(newTarget);
        this.animatingOut = false;
        this[S$0._currentBar] == null ? this[S$0._currentBar] = this.clone(newTarget) : null;
        this[S$0._previousBar] = this.clone(dart.nullCheck(this[S$0._currentBar]));
        this[S$0._targetBar] = newTarget;
      }
      get currentBar() {
        return this[S$0._currentBar];
      }
      get previousBar() {
        return this[S$0._previousBar];
      }
      get targetBar() {
        return this[S$0._targetBar];
      }
      getCurrentBar(animationPercent) {
        if (!(this[S$0._targetBar] != null)) dart.assertFailed(null, I[126], 120, 12, "_targetBar != null");
        if (animationPercent === 1.0 || this[S$0._previousBar] == null) {
          this[S$0._currentBar] = this[S$0._targetBar];
          this[S$0._previousBar] = this[S$0._targetBar];
          return dart.nullCheck(this[S$0._currentBar]);
        }
        dart.nullCheck(this[S$0._currentBar]).updateAnimationPercent(dart.nullCheck(this[S$0._previousBar]), dart.nullCheck(this[S$0._targetBar]), animationPercent);
        return dart.nullCheck(this[S$0._currentBar]);
      }
    }
    (BaseAnimatedBar.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
      this[S$0._previousBar] = null;
      this[S$0._targetBar] = null;
      this[S$0._currentBar] = null;
      this[S$0.animatingOut$2] = false;
      this[S$0.key$3] = key;
      this[S$0.datum$3] = datum;
      this[S$0.series$5] = series;
      this[S$0.domainValue] = domainValue;
      ;
    }).prototype = BaseAnimatedBar.prototype;
    dart.addTypeTests(BaseAnimatedBar);
    BaseAnimatedBar.prototype[_is_BaseAnimatedBar_default] = true;
    dart.addTypeCaches(BaseAnimatedBar);
    dart.setMethodSignature(BaseAnimatedBar, () => ({
      __proto__: dart.getMethods(BaseAnimatedBar.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      getCurrentBar: dart.fnType(R, [core.double])
    }));
    dart.setGetterSignature(BaseAnimatedBar, () => ({
      __proto__: dart.getGetters(BaseAnimatedBar.__proto__),
      currentBar: dart.nullable(R),
      previousBar: dart.nullable(R),
      targetBar: dart.nullable(R)
    }));
    dart.setLibraryUri(BaseAnimatedBar, I[124]);
    dart.setFieldSignature(BaseAnimatedBar, () => ({
      __proto__: dart.getFields(BaseAnimatedBar.__proto__),
      key: dart.finalFieldType(core.String),
      datum: dart.fieldType(dart.dynamic),
      series: dart.fieldType(processed_series.ImmutableSeries$(D)),
      domainValue: dart.fieldType(dart.nullable(D)),
      [S$0._previousBar]: dart.fieldType(dart.nullable(R)),
      [S$0._targetBar]: dart.fieldType(dart.nullable(R)),
      [S$0._currentBar]: dart.fieldType(dart.nullable(R)),
      animatingOut: dart.fieldType(core.bool)
    }));
    return BaseAnimatedBar;
  });
  base_bar_renderer_element.BaseAnimatedBar = base_bar_renderer_element.BaseAnimatedBar$();
  dart.addTypeTests(base_bar_renderer_element.BaseAnimatedBar, _is_BaseAnimatedBar_default);
  const _is__AnimatedBarTargetLine_default = Symbol('_is__AnimatedBarTargetLine_default');
  bar_target_line_renderer._AnimatedBarTargetLine$ = dart.generic(D => {
    class _AnimatedBarTargetLine extends base_bar_renderer_element.BaseAnimatedBar$(D, bar_target_line_renderer._BarTargetLineRendererElement) {
      animateElementToMeasureAxisPosition(target) {
        base_bar_renderer_element.BaseBarRendererElement.as(target);
        let localTarget = bar_target_line_renderer._BarTargetLineRendererElement.as(target);
        let newPoints = T$0.JSArrayOfPointOfint().of([]);
        for (let index = 0; index < localTarget.points[S$.$length]; index = index + 1) {
          let targetPoint = localTarget.points[S$.$_get](index);
          newPoints[S$.$add](new (T$.PointOfint()).new(targetPoint.x, dart.nullCheck(localTarget.measureAxisPosition)[S$.$round]()));
        }
        localTarget.points = newPoints;
      }
      clone(bar) {
        bar_target_line_renderer._BarTargetLineRendererElement.as(bar);
        return new bar_target_line_renderer._BarTargetLineRendererElement.clone(bar);
      }
    }
    (_AnimatedBarTargetLine.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
      _AnimatedBarTargetLine.__proto__.new.call(this, {key: key, datum: datum, series: series, domainValue: domainValue});
      ;
    }).prototype = _AnimatedBarTargetLine.prototype;
    dart.addTypeTests(_AnimatedBarTargetLine);
    _AnimatedBarTargetLine.prototype[_is__AnimatedBarTargetLine_default] = true;
    dart.addTypeCaches(_AnimatedBarTargetLine);
    dart.setMethodSignature(_AnimatedBarTargetLine, () => ({
      __proto__: dart.getMethods(_AnimatedBarTargetLine.__proto__),
      animateElementToMeasureAxisPosition: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      clone: dart.fnType(bar_target_line_renderer._BarTargetLineRendererElement, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_AnimatedBarTargetLine, I[125]);
    return _AnimatedBarTargetLine;
  });
  bar_target_line_renderer._AnimatedBarTargetLine = bar_target_line_renderer._AnimatedBarTargetLine$();
  dart.addTypeTests(bar_target_line_renderer._AnimatedBarTargetLine, _is__AnimatedBarTargetLine_default);
  const _is_BarTargetLineRenderer_default = Symbol('_is_BarTargetLineRenderer_default');
  bar_target_line_renderer.BarTargetLineRenderer$ = dart.generic(D => {
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    var BarTargetLineRendererConfigOfD = () => (BarTargetLineRendererConfigOfD = dart.constFn(bar_target_line_renderer_config.BarTargetLineRendererConfig$(D)))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var DN = () => (DN = dart.constFn(dart.nullable(D)))();
    var _AnimatedBarTargetLineOfD = () => (_AnimatedBarTargetLineOfD = dart.constFn(bar_target_line_renderer._AnimatedBarTargetLine$(D)))();
    class BarTargetLineRenderer extends base_bar_renderer.BaseBarRenderer$(D, bar_target_line_renderer._BarTargetLineRendererElement, bar_target_line_renderer._AnimatedBarTargetLine$(D)) {
      static new(opts) {
        let config = opts && 'config' in opts ? opts.config : null;
        let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
        config == null ? config = new (bar_target_line_renderer_config.BarTargetLineRendererConfig$(D)).new() : null;
        rendererId == null ? rendererId = "barTargetLine" : null;
        return new (bar_target_line_renderer.BarTargetLineRenderer$(D))._internal({config: config, rendererId: rendererId});
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        seriesList[S$.$forEach](dart.fn(series => {
          let t96, t96$;
          t96 = series;
          t96.colorFn == null ? t96.colorFn = dart.fn(_ => this[S$0._color], T$.intNToColor()) : null;
          t96$ = series;
          t96$.fillColorFn == null ? t96$.fillColorFn = dart.fn(_ => this[S$0._color], T$.intNToColor()) : null;
          if (series.seriesColor == null) {
            try {
              series.seriesColor = dart.nullCheck(series.colorFn)(0);
            } catch (e) {
              let exception = dart.getThrown(e);
              if (core.Object.is(exception)) {
                series.seriesColor = this[S$0._color];
              } else
                throw e;
            }
          }
        }, MutableSeriesOfDTovoid()));
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsOfD().as(details);
        SeriesDatumOfD().as(seriesDatum);
        let series = dart.nullCheck(details.series);
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
        let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
        let barGroupIndex = dart.nullCheck(series.getAttr(core.int, base_bar_renderer.barGroupIndexKey));
        let previousBarGroupWeight = series.getAttr(core.double, base_bar_renderer.previousBarGroupWeightKey);
        let barGroupWeight = series.getAttr(core.double, base_bar_renderer.barGroupWeightKey);
        let allBarGroupWeights = series.getAttr(T$0.ListOfdouble(), base_bar_renderer.allBarGroupWeightsKey);
        let numBarGroups = dart.nullCheck(series.getAttr(core.int, base_bar_renderer.barGroupCountKey));
        let points = this[S$0._getTargetLinePoints](details.domain, domainAxis, domainAxis.rangeBand[S$.$round](), this.config.maxBarWidthPx, details.measure, dart.nullCheck(details.measureOffset), measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, allBarGroupWeights, numBarGroups);
        let chartPosition = null;
        if (this.renderingVertically) {
          chartPosition = new math$.NullablePoint.new((points[S$.$_get](0).x + (points[S$.$_get](1).x - points[S$.$_get](0).x) / 2)[S$.$toDouble](), points[S$.$_get](0).y[S$.$toDouble]());
        } else {
          chartPosition = new math$.NullablePoint.new(points[S$.$_get](0).x[S$.$toDouble](), (points[S$.$_get](0).y + (points[S$.$_get](1).y - points[S$.$_get](0).y) / 2)[S$.$toDouble]());
        }
        return DatumDetailsOfD().from(details, {chartPosition: chartPosition});
      }
      getBaseDetails(datum, index) {
        let localConfig = BarTargetLineRendererConfigOfD().as(this.config);
        return new bar_target_line_renderer._BarTargetLineRendererElement.new({roundEndCaps: localConfig.roundEndCaps});
      }
      makeAnimatedBar(opts) {
        let t97;
        let key = opts && 'key' in opts ? opts.key : null;
        let series = opts && 'series' in opts ? opts.series : null;
        ImmutableSeriesOfD().as(series);
        let datum = opts && 'datum' in opts ? opts.datum : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let details = opts && 'details' in opts ? opts.details : null;
        bar_target_line_renderer._BarTargetLineRendererElement.as(details);
        let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
        DN().as(domainValue);
        let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
        ImmutableAxisOfD().as(domainAxis);
        let domainWidth = opts && 'domainWidth' in opts ? opts.domainWidth : null;
        let measureValue = opts && 'measureValue' in opts ? opts.measureValue : null;
        let measureOffsetValue = opts && 'measureOffsetValue' in opts ? opts.measureOffsetValue : null;
        let measureAxis = opts && 'measureAxis' in opts ? opts.measureAxis : null;
        let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
        let barGroupIndex = opts && 'barGroupIndex' in opts ? opts.barGroupIndex : null;
        let previousBarGroupWeight = opts && 'previousBarGroupWeight' in opts ? opts.previousBarGroupWeight : null;
        let barGroupWeight = opts && 'barGroupWeight' in opts ? opts.barGroupWeight : null;
        let allBarGroupWeights = opts && 'allBarGroupWeights' in opts ? opts.allBarGroupWeights : null;
        let numBarGroups = opts && 'numBarGroups' in opts ? opts.numBarGroups : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        let measureIsNull = opts && 'measureIsNull' in opts ? opts.measureIsNull : null;
        let measureIsNegative = opts && 'measureIsNegative' in opts ? opts.measureIsNegative : null;
        t97 = new (_AnimatedBarTargetLineOfD()).new({key: key, datum: datum, series: series, domainValue: domainValue});
        return (() => {
          t97.setNewTarget(this.makeBarRendererElement({color: color, details: details, dashPattern: dashPattern, domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainWidth, measureValue: measureValue, measureOffsetValue: measureOffsetValue, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, fillColor: fillColor, fillPattern: fillPattern, strokeWidthPx: strokeWidthPx, barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, allBarGroupWeights: allBarGroupWeights, numBarGroups: numBarGroups, measureIsNull: measureIsNull, measureIsNegative: measureIsNegative}));
          return t97;
        })();
      }
      makeBarRendererElement(opts) {
        let t97;
        let color = opts && 'color' in opts ? opts.color : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let details = opts && 'details' in opts ? opts.details : null;
        bar_target_line_renderer._BarTargetLineRendererElement.as(details);
        let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
        DN().as(domainValue);
        let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
        ImmutableAxisOfD().as(domainAxis);
        let domainWidth = opts && 'domainWidth' in opts ? opts.domainWidth : null;
        let measureValue = opts && 'measureValue' in opts ? opts.measureValue : null;
        let measureOffsetValue = opts && 'measureOffsetValue' in opts ? opts.measureOffsetValue : null;
        let measureAxis = opts && 'measureAxis' in opts ? opts.measureAxis : null;
        let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        let barGroupIndex = opts && 'barGroupIndex' in opts ? opts.barGroupIndex : null;
        let previousBarGroupWeight = opts && 'previousBarGroupWeight' in opts ? opts.previousBarGroupWeight : null;
        let barGroupWeight = opts && 'barGroupWeight' in opts ? opts.barGroupWeight : null;
        let allBarGroupWeights = opts && 'allBarGroupWeights' in opts ? opts.allBarGroupWeights : null;
        let numBarGroups = opts && 'numBarGroups' in opts ? opts.numBarGroups : null;
        let measureIsNull = opts && 'measureIsNull' in opts ? opts.measureIsNull : null;
        let measureIsNegative = opts && 'measureIsNegative' in opts ? opts.measureIsNegative : null;
        t97 = new bar_target_line_renderer._BarTargetLineRendererElement.new({roundEndCaps: details.roundEndCaps});
        return (() => {
          t97.color = color;
          t97.dashPattern = dashPattern;
          t97.fillColor = fillColor;
          t97.fillPattern = fillPattern;
          t97.measureAxisPosition = measureAxisPosition;
          t97.strokeWidthPx = strokeWidthPx;
          t97.measureIsNull = measureIsNull;
          t97.measureIsNegative = measureIsNegative;
          t97.points = this[S$0._getTargetLinePoints](domainValue, domainAxis, domainWidth, this.config.maxBarWidthPx, measureValue, measureOffsetValue, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, allBarGroupWeights, numBarGroups);
          return t97;
        })();
      }
      paintBar(canvas, animationPercent, barElements) {
        T$0.IterableOf_BarTargetLineRendererElement().as(barElements);
        barElements[S$.$forEach](dart.fn(bar => {
          canvas.drawLine({clipBounds: this.drawBounds, points: bar.points, stroke: bar.color, roundEndCaps: bar.roundEndCaps, strokeWidthPx: bar.strokeWidthPx, dashPattern: bar.dashPattern});
        }, T$0._BarTargetLineRendererElementTovoid()));
      }
      [S$0._getTargetLinePoints](domainValue, domainAxis, domainWidth, maxBarWidthPx, measureValue, measureOffsetValue, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, allBarGroupWeights, numBarGroups) {
        let t97;
        if (barGroupWeight == null) {
          barGroupWeight = 1 / numBarGroups;
          previousBarGroupWeight = barGroupIndex * dart.notNull(barGroupWeight);
        }
        let localConfig = BarTargetLineRendererConfigOfD().as(this.config);
        let spacingLoss = this[S$0._barGroupInnerPadding] * (numBarGroups - 1);
        let desiredWidth = ((domainWidth - spacingLoss) / numBarGroups)[S$.$round]();
        if (maxBarWidthPx != null) {
          desiredWidth = math.min(core.int, desiredWidth, maxBarWidthPx);
          domainWidth = desiredWidth * numBarGroups + spacingLoss;
        }
        let barWidth = desiredWidth;
        if (allBarGroupWeights != null) {
          barWidth = (desiredWidth * numBarGroups * allBarGroupWeights[S$.$_get](barGroupIndex))[S$.$floor]();
        }
        let overDrawOuterPx = localConfig.overDrawOuterPx;
        let overDrawPx = localConfig.overDrawPx;
        let overDrawStartPx = barGroupIndex === 0 && overDrawOuterPx != null ? overDrawOuterPx : overDrawPx;
        let overDrawEndPx = barGroupIndex === numBarGroups - 1 && overDrawOuterPx != null ? overDrawOuterPx : overDrawPx;
        let adjustedBarGroupIndex = this.isRtl ? numBarGroups - barGroupIndex - 1 : barGroupIndex;
        let previousAverageWidth = adjustedBarGroupIndex > 0 ? ((domainWidth - spacingLoss) * (dart.nullCheck(previousBarGroupWeight) / adjustedBarGroupIndex))[S$.$round]() : 0;
        let domainStart = (dart.nullCheck(domainAxis.getLocation(domainValue)) - domainWidth / 2 + (previousAverageWidth + this[S$0._barGroupInnerPadding]) * adjustedBarGroupIndex - overDrawStartPx)[S$.$round]();
        let domainEnd = domainStart + barWidth + overDrawStartPx + overDrawEndPx;
        measureValue = (t97 = measureValue, t97 == null ? 0 : t97);
        let measureStart = dart.nullCheck(measureAxis.getLocation(dart.notNull(measureValue) + measureOffsetValue))[S$.$round]();
        let points = null;
        if (this.renderingVertically) {
          points = T$0.JSArrayOfPointOfint().of([new (T$.PointOfint()).new(domainStart, measureStart), new (T$.PointOfint()).new(domainEnd, measureStart)]);
        } else {
          points = T$0.JSArrayOfPointOfint().of([new (T$.PointOfint()).new(measureStart, domainStart), new (T$.PointOfint()).new(measureStart, domainEnd)]);
        }
        return points;
      }
      getBoundsForBar(bar) {
        bar_target_line_renderer._BarTargetLineRendererElement.as(bar);
        let points = bar.points;
        if (!points[S$.$isNotEmpty]) dart.assertFailed(null, I[122], 357, 12, "points.isNotEmpty");
        let top = points[S$.$first].y;
        let bottom = points[S$.$first].y;
        let left = points[S$.$first].x;
        let right = points[S$.$first].x;
        for (let point of points[S$0.$skip](1)) {
          top = math.min(core.int, top, point.y);
          left = math.min(core.int, left, point.x);
          bottom = math.max(core.int, bottom, point.y);
          right = math.max(core.int, right, point.x);
        }
        return new (T$.RectangleOfint()).new(left, top, right - left, bottom - top);
      }
    }
    (BarTargetLineRenderer._internal = function(opts) {
      let t96;
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      this[S$0._barGroupInnerPadding] = 2;
      this[S$0._color] = new color$.Color.new({r: 0, g: 0, b: 0, a: 153});
      BarTargetLineRenderer.__proto__.new.call(this, {config: config, rendererId: rendererId, layoutPaintOrder: (t96 = config.layoutPaintOrder, t96 == null ? 15 : t96)});
      ;
    }).prototype = BarTargetLineRenderer.prototype;
    dart.addTypeTests(BarTargetLineRenderer);
    BarTargetLineRenderer.prototype[_is_BarTargetLineRenderer_default] = true;
    dart.addTypeCaches(BarTargetLineRenderer);
    dart.setMethodSignature(BarTargetLineRenderer, () => ({
      __proto__: dart.getMethods(BarTargetLineRenderer.__proto__),
      addPositionToDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [dart.nullable(core.Object), dart.nullable(core.Object)]),
      getBaseDetails: dart.fnType(bar_target_line_renderer._BarTargetLineRendererElement, [dart.dynamic, core.int]),
      makeAnimatedBar: dart.fnType(bar_target_line_renderer._AnimatedBarTargetLine$(D), [], {allBarGroupWeights: dart.nullable(core.List$(core.double)), barGroupIndex: core.int, barGroupWeight: dart.nullable(core.double), color: dart.nullable(color$.Color), dashPattern: dart.nullable(core.List$(core.int)), datum: dart.dynamic, details: dart.nullable(core.Object), domainAxis: dart.nullable(core.Object), domainValue: dart.nullable(core.Object), domainWidth: core.int, fillColor: dart.nullable(color$.Color), fillPattern: dart.nullable(chart_canvas.FillPatternType), key: core.String, measureAxis: axis$.ImmutableAxis$(core.num), measureAxisPosition: dart.nullable(core.double), measureIsNegative: dart.nullable(core.bool), measureIsNull: dart.nullable(core.bool), measureOffsetValue: core.num, measureValue: dart.nullable(core.num), numBarGroups: core.int, previousBarGroupWeight: dart.nullable(core.double), series: dart.nullable(core.Object), strokeWidthPx: dart.nullable(core.double)}, {}),
      makeBarRendererElement: dart.fnType(bar_target_line_renderer._BarTargetLineRendererElement, [], {allBarGroupWeights: dart.nullable(core.List$(core.double)), barGroupIndex: core.int, barGroupWeight: dart.nullable(core.double), color: dart.nullable(color$.Color), dashPattern: dart.nullable(core.List$(core.int)), details: dart.nullable(core.Object), domainAxis: dart.nullable(core.Object), domainValue: dart.nullable(core.Object), domainWidth: core.int, fillColor: dart.nullable(color$.Color), fillPattern: dart.nullable(chart_canvas.FillPatternType), measureAxis: axis$.ImmutableAxis$(core.num), measureAxisPosition: dart.nullable(core.double), measureIsNegative: dart.nullable(core.bool), measureIsNull: dart.nullable(core.bool), measureOffsetValue: core.num, measureValue: dart.nullable(core.num), numBarGroups: core.int, previousBarGroupWeight: dart.nullable(core.double), strokeWidthPx: dart.nullable(core.double)}, {}),
      paintBar: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double, dart.nullable(core.Object)]),
      [S$0._getTargetLinePoints]: dart.fnType(core.List$(math.Point$(core.int)), [dart.nullable(D), axis$.ImmutableAxis$(D), core.int, dart.nullable(core.int), dart.nullable(core.num), core.num, axis$.ImmutableAxis$(core.num), core.int, dart.nullable(core.double), dart.nullable(core.double), dart.nullable(core.List$(core.double)), core.int]),
      getBoundsForBar: dart.fnType(math.Rectangle$(core.int), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(BarTargetLineRenderer, I[125]);
    dart.setFieldSignature(BarTargetLineRenderer, () => ({
      __proto__: dart.getFields(BarTargetLineRenderer.__proto__),
      [S$0._barGroupInnerPadding]: dart.finalFieldType(core.int),
      [S$0._color]: dart.finalFieldType(color$.Color)
    }));
    return BarTargetLineRenderer;
  });
  bar_target_line_renderer.BarTargetLineRenderer = bar_target_line_renderer.BarTargetLineRenderer$();
  dart.addTypeTests(bar_target_line_renderer.BarTargetLineRenderer, _is_BarTargetLineRenderer_default);
  const _is_BarRendererElement_default = Symbol('_is_BarRendererElement_default');
  bar_renderer.BarRendererElement$ = dart.generic(D => {
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ImmutableSeriesNOfD = () => (ImmutableSeriesNOfD = dart.constFn(dart.nullable(ImmutableSeriesOfD())))();
    var BarRendererElementOfD = () => (BarRendererElementOfD = dart.constFn(bar_renderer.BarRendererElement$(D)))();
    class BarRendererElement extends base_bar_renderer_element.BaseBarRendererElement {
      get series() {
        return this[S$1.series$6];
      }
      set series(value) {
        this[S$1.series$6] = ImmutableSeriesNOfD().as(value);
      }
      get bounds() {
        return this[S$1.bounds$1];
      }
      set bounds(value) {
        this[S$1.bounds$1] = value;
      }
      get roundPx() {
        return this[S$1.roundPx];
      }
      set roundPx(value) {
        this[S$1.roundPx] = value;
      }
      get index() {
        return this[S$1.index$3];
      }
      set index(value) {
        this[S$1.index$3] = value;
      }
      get datum() {
        return this[S$1._datum];
      }
      set datum(datum) {
        let t103;
        this[S$1._datum] = datum;
        this.index = (t103 = this.series, t103 == null ? null : t103.data[S$.$indexOf](datum));
      }
      updateAnimationPercent(previous, target, animationPercent) {
        let localPrevious = BarRendererElementOfD().as(previous);
        let localTarget = BarRendererElementOfD().as(target);
        let previousBounds = dart.nullCheck(localPrevious.bounds);
        let targetBounds = dart.nullCheck(localTarget.bounds);
        let top = (targetBounds[S$.$top] - previousBounds[S$.$top]) * animationPercent + previousBounds[S$.$top];
        let right = (targetBounds[S$.$right] - previousBounds[S$.$right]) * animationPercent + previousBounds[S$.$right];
        let bottom = (targetBounds[S$.$bottom] - previousBounds[S$.$bottom]) * animationPercent + previousBounds[S$.$bottom];
        let left = (targetBounds[S$.$left] - previousBounds[S$.$left]) * animationPercent + previousBounds[S$.$left];
        this.bounds = new (T$.RectangleOfint()).new(left[S$.$round](), top[S$.$round](), (right - left)[S$.$round](), (bottom - top)[S$.$round]());
        this.roundPx = localTarget.roundPx;
        super.updateAnimationPercent(previous, target, animationPercent);
      }
    }
    (BarRendererElement.new = function() {
      this[S$1.series$6] = null;
      this[S$1.bounds$1] = null;
      this[S$1.roundPx] = null;
      this[S$1.index$3] = null;
      this[S$1._datum] = null;
      BarRendererElement.__proto__.new.call(this);
      ;
    }).prototype = BarRendererElement.prototype;
    (BarRendererElement.clone = function(other) {
      this[S$1.series$6] = null;
      this[S$1.bounds$1] = null;
      this[S$1.roundPx] = null;
      this[S$1.index$3] = null;
      this[S$1._datum] = null;
      BarRendererElement.__proto__.clone.call(this, other);
      this.series = other.series;
      this.bounds = other.bounds;
      this.roundPx = other.roundPx;
      this.index = other.index;
      this[S$1._datum] = other[S$1._datum];
    }).prototype = BarRendererElement.prototype;
    dart.addTypeTests(BarRendererElement);
    BarRendererElement.prototype[_is_BarRendererElement_default] = true;
    dart.addTypeCaches(BarRendererElement);
    BarRendererElement[dart.implements] = () => [bar_renderer.ImmutableBarRendererElement$(D)];
    dart.setGetterSignature(BarRendererElement, () => ({
      __proto__: dart.getGetters(BarRendererElement.__proto__),
      datum: dart.dynamic
    }));
    dart.setSetterSignature(BarRendererElement, () => ({
      __proto__: dart.getSetters(BarRendererElement.__proto__),
      datum: dart.dynamic
    }));
    dart.setLibraryUri(BarRendererElement, I[127]);
    dart.setFieldSignature(BarRendererElement, () => ({
      __proto__: dart.getFields(BarRendererElement.__proto__),
      series: dart.fieldType(dart.nullable(processed_series.ImmutableSeries$(D))),
      bounds: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
      roundPx: dart.fieldType(dart.nullable(core.int)),
      index: dart.fieldType(dart.nullable(core.int)),
      [S$1._datum]: dart.fieldType(dart.dynamic)
    }));
    return BarRendererElement;
  });
  bar_renderer.BarRendererElement = bar_renderer.BarRendererElement$();
  dart.addTypeTests(bar_renderer.BarRendererElement, _is_BarRendererElement_default);
  const _is_AnimatedBar_default = Symbol('_is_AnimatedBar_default');
  bar_renderer.AnimatedBar$ = dart.generic(D => {
    var BarRendererElementOfD = () => (BarRendererElementOfD = dart.constFn(bar_renderer.BarRendererElement$(D)))();
    class AnimatedBar extends base_bar_renderer_element.BaseAnimatedBar$(D, bar_renderer.BarRendererElement$(D)) {
      animateElementToMeasureAxisPosition(target) {
        base_bar_renderer_element.BaseBarRendererElement.as(target);
        let localTarget = BarRendererElementOfD().as(target);
        localTarget.bounds = new (T$.RectangleOfint()).new(dart.nullCheck(localTarget.bounds)[S$.$left] + (dart.nullCheck(localTarget.bounds)[S$.$width] / 2)[S$.$round](), dart.nullCheck(localTarget.measureAxisPosition)[S$.$round](), 0, 0);
      }
      getCurrentBar(animationPercent) {
        let bar = super.getCurrentBar(animationPercent);
        bar.series = this.series;
        bar.datum = this.datum;
        return bar;
      }
      clone(bar) {
        BarRendererElementOfD().as(bar);
        return new (BarRendererElementOfD()).clone(bar);
      }
    }
    (AnimatedBar.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
      AnimatedBar.__proto__.new.call(this, {key: key, datum: datum, series: series, domainValue: domainValue});
      ;
    }).prototype = AnimatedBar.prototype;
    dart.addTypeTests(AnimatedBar);
    AnimatedBar.prototype[_is_AnimatedBar_default] = true;
    dart.addTypeCaches(AnimatedBar);
    dart.setMethodSignature(AnimatedBar, () => ({
      __proto__: dart.getMethods(AnimatedBar.__proto__),
      animateElementToMeasureAxisPosition: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      clone: dart.fnType(bar_renderer.BarRendererElement$(D), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(AnimatedBar, I[127]);
    return AnimatedBar;
  });
  bar_renderer.AnimatedBar = bar_renderer.AnimatedBar$();
  dart.addTypeTests(bar_renderer.AnimatedBar, _is_AnimatedBar_default);
  const _is_BarRenderer_default = Symbol('_is_BarRenderer_default');
  bar_renderer.BarRenderer$ = dart.generic(D => {
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    var BarRendererElementOfD = () => (BarRendererElementOfD = dart.constFn(bar_renderer.BarRendererElement$(D)))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var DN = () => (DN = dart.constFn(dart.nullable(D)))();
    var AnimatedBarOfD = () => (AnimatedBarOfD = dart.constFn(bar_renderer.AnimatedBar$(D)))();
    var IterableOfBarRendererElementOfD = () => (IterableOfBarRendererElementOfD = dart.constFn(core.Iterable$(BarRendererElementOfD())))();
    class BarRenderer extends base_bar_renderer.BaseBarRenderer$(D, bar_renderer.BarRendererElement$(D), bar_renderer.AnimatedBar$(D)) {
      get barRendererDecorator() {
        return this[S$1.barRendererDecorator];
      }
      set barRendererDecorator(value) {
        super.barRendererDecorator = value;
      }
      static new(opts) {
        let config = opts && 'config' in opts ? opts.config : null;
        let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
        rendererId == null ? rendererId = "bar" : null;
        config == null ? config = new (bar_renderer_config.BarRendererConfig$(D)).new() : null;
        return new (bar_renderer.BarRenderer$(D)).internal({config: config, rendererId: rendererId});
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        this.assignMissingColors(this.getOrderedSeriesList(MutableSeriesOfD(), seriesList), {emptyCategoryUsesSinglePalette: true});
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsOfD().as(details);
        SeriesDatumOfD().as(seriesDatum);
        let series = dart.nullCheck(details.series);
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
        let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
        let barGroupIndex = dart.nullCheck(series.getAttr(core.int, base_bar_renderer.barGroupIndexKey));
        let previousBarGroupWeight = series.getAttr(core.double, base_bar_renderer.previousBarGroupWeightKey);
        let barGroupWeight = series.getAttr(core.double, base_bar_renderer.barGroupWeightKey);
        let allBarGroupWeights = series.getAttr(T$0.ListOfdouble(), base_bar_renderer.allBarGroupWeightsKey);
        let numBarGroups = dart.nullCheck(series.getAttr(core.int, base_bar_renderer.barGroupCountKey));
        let bounds = this[S$1._getBarBounds](details.domain, domainAxis, domainAxis.rangeBand[S$.$round](), this.config.maxBarWidthPx, details.measure, dart.nullCheck(details.measureOffset), measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, allBarGroupWeights, numBarGroups);
        let chartPosition = null;
        if (this.renderingVertically) {
          chartPosition = new math$.NullablePoint.new((bounds[S$.$left] + bounds[S$.$width] / 2)[S$.$toDouble](), bounds[S$.$top][S$.$toDouble]());
        } else {
          chartPosition = new math$.NullablePoint.new(this.isRtl ? bounds[S$.$left][S$.$toDouble]() : bounds[S$.$right][S$.$toDouble](), (bounds[S$.$top] + bounds[S$.$height] / 2)[S$.$toDouble]());
        }
        return DatumDetailsOfD().from(details, {chartPosition: chartPosition, bounds: bounds});
      }
      getBaseDetails(datum, index) {
        return new (BarRendererElementOfD()).new();
      }
      get cornerStrategy() {
        return bar_renderer_config.BarRendererConfig.as(this.config).cornerStrategy;
      }
      makeAnimatedBar(opts) {
        let t103;
        let key = opts && 'key' in opts ? opts.key : null;
        let series = opts && 'series' in opts ? opts.series : null;
        ImmutableSeriesOfD().as(series);
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let datum = opts && 'datum' in opts ? opts.datum : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let details = opts && 'details' in opts ? opts.details : null;
        BarRendererElementOfD().as(details);
        let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
        DN().as(domainValue);
        let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
        ImmutableAxisOfD().as(domainAxis);
        let domainWidth = opts && 'domainWidth' in opts ? opts.domainWidth : null;
        let measureValue = opts && 'measureValue' in opts ? opts.measureValue : null;
        let measureOffsetValue = opts && 'measureOffsetValue' in opts ? opts.measureOffsetValue : null;
        let measureAxis = opts && 'measureAxis' in opts ? opts.measureAxis : null;
        let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        let barGroupIndex = opts && 'barGroupIndex' in opts ? opts.barGroupIndex : null;
        let previousBarGroupWeight = opts && 'previousBarGroupWeight' in opts ? opts.previousBarGroupWeight : null;
        let barGroupWeight = opts && 'barGroupWeight' in opts ? opts.barGroupWeight : null;
        let allBarGroupWeights = opts && 'allBarGroupWeights' in opts ? opts.allBarGroupWeights : null;
        let numBarGroups = opts && 'numBarGroups' in opts ? opts.numBarGroups : null;
        let measureIsNull = opts && 'measureIsNull' in opts ? opts.measureIsNull : null;
        let measureIsNegative = opts && 'measureIsNegative' in opts ? opts.measureIsNegative : null;
        t103 = new (AnimatedBarOfD()).new({key: key, datum: datum, series: series, domainValue: domainValue});
        return (() => {
          t103.setNewTarget(this.makeBarRendererElement({color: color, dashPattern: dashPattern, details: details, domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainWidth, measureValue: measureValue, measureOffsetValue: measureOffsetValue, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, fillColor: fillColor, fillPattern: fillPattern, strokeWidthPx: strokeWidthPx, barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, allBarGroupWeights: allBarGroupWeights, numBarGroups: numBarGroups, measureIsNull: measureIsNull, measureIsNegative: measureIsNegative}));
          return t103;
        })();
      }
      makeBarRendererElement(opts) {
        let t103;
        let color = opts && 'color' in opts ? opts.color : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let details = opts && 'details' in opts ? opts.details : null;
        BarRendererElementOfD().as(details);
        let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
        DN().as(domainValue);
        let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
        ImmutableAxisOfD().as(domainAxis);
        let domainWidth = opts && 'domainWidth' in opts ? opts.domainWidth : null;
        let measureValue = opts && 'measureValue' in opts ? opts.measureValue : null;
        let measureOffsetValue = opts && 'measureOffsetValue' in opts ? opts.measureOffsetValue : null;
        let measureAxis = opts && 'measureAxis' in opts ? opts.measureAxis : null;
        let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        let barGroupIndex = opts && 'barGroupIndex' in opts ? opts.barGroupIndex : null;
        let previousBarGroupWeight = opts && 'previousBarGroupWeight' in opts ? opts.previousBarGroupWeight : null;
        let barGroupWeight = opts && 'barGroupWeight' in opts ? opts.barGroupWeight : null;
        let allBarGroupWeights = opts && 'allBarGroupWeights' in opts ? opts.allBarGroupWeights : null;
        let numBarGroups = opts && 'numBarGroups' in opts ? opts.numBarGroups : null;
        let measureIsNull = opts && 'measureIsNull' in opts ? opts.measureIsNull : null;
        let measureIsNegative = opts && 'measureIsNegative' in opts ? opts.measureIsNegative : null;
        t103 = new (BarRendererElementOfD()).new();
        return (() => {
          t103.color = color;
          t103.dashPattern = dashPattern;
          t103.fillColor = fillColor;
          t103.fillPattern = fillPattern;
          t103.measureAxisPosition = measureAxisPosition;
          t103.roundPx = details.roundPx;
          t103.strokeWidthPx = strokeWidthPx;
          t103.measureIsNull = measureIsNull;
          t103.measureIsNegative = measureIsNegative;
          t103.bounds = this[S$1._getBarBounds](domainValue, domainAxis, domainWidth, this.config.maxBarWidthPx, measureValue, measureOffsetValue, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, allBarGroupWeights, numBarGroups);
          return t103;
        })();
      }
      paintBar(canvas, animationPercent, barElements) {
        let t103;
        IterableOfBarRendererElementOfD().as(barElements);
        let bars = T$0.JSArrayOfCanvasRect().of([]);
        let unmodifiedBar = this.renderingVertically ? barElements[S$.$first] : barElements[S$.$last];
        let maxBarWidth = 0;
        let measureIsNegative = false;
        for (let bar of barElements) {
          let bounds = bar.bounds;
          measureIsNegative = measureIsNegative || dart.nullCheck(bar.measureIsNegative);
          if (!bar[S$.$_equals](unmodifiedBar)) {
            bounds = this.renderingVertically ? new (T$.RectangleOfint()).new(dart.nullCheck(bar.bounds)[S$.$left], math.max(core.int, 0, dart.nullCheck(bar.bounds)[S$.$top] + (measureIsNegative ? this[S$1._stackedBarPaddingPx] : 0)), dart.nullCheck(bar.bounds)[S$.$width], math.max(core.int, 0, dart.nullCheck(bar.bounds)[S$.$height] - this[S$1._stackedBarPaddingPx])) : new (T$.RectangleOfint()).new(math.max(core.int, 0, dart.nullCheck(bar.bounds)[S$.$left] + (measureIsNegative ? this[S$1._stackedBarPaddingPx] : 0)), dart.nullCheck(bar.bounds)[S$.$top], math.max(core.int, 0, dart.nullCheck(bar.bounds)[S$.$width] - this[S$1._stackedBarPaddingPx]), dart.nullCheck(bar.bounds)[S$.$height]);
          }
          bars[S$.$add](new canvas_shapes.CanvasRect.new(dart.nullCheck(bounds), {dashPattern: bar.dashPattern, fill: bar.fillColor, pattern: bar.fillPattern, stroke: bar.color, strokeWidthPx: bar.strokeWidthPx}));
          maxBarWidth = math.max(core.int, maxBarWidth, this.renderingVertically ? bounds[S$.$width] : bounds[S$.$height]);
        }
        let roundTopLeft = null;
        let roundTopRight = null;
        let roundBottomLeft = null;
        let roundBottomRight = null;
        if (measureIsNegative) {
          roundTopLeft = !this.renderingVertically && !this.isRtl;
          roundTopRight = !this.renderingVertically && this.isRtl;
          roundBottomLeft = this.renderingVertically || !this.isRtl;
          roundBottomRight = this.renderingVertically || this.isRtl;
        } else {
          roundTopLeft = this.renderingVertically || this.isRtl;
          roundTopRight = !this.isRtl;
          roundBottomLeft = this.isRtl;
          roundBottomRight = !(this.renderingVertically || this.isRtl);
        }
        let barStack = canvas_shapes.CanvasBarStack.new(bars, {radius: this.cornerStrategy.getRadius(maxBarWidth), stackedBarPadding: this[S$1._stackedBarPaddingPx], roundTopLeft: roundTopLeft, roundTopRight: roundTopRight, roundBottomLeft: roundBottomLeft, roundBottomRight: roundBottomRight});
        let componentBounds = dart.nullCheck(this.componentBounds);
        let barOutsideBounds = this.renderingVertically ? barStack.fullStackRect[S$.$left] < componentBounds[S$.$left] || barStack.fullStackRect[S$.$right] > componentBounds[S$.$right] : barStack.fullStackRect[S$.$top] < componentBounds[S$.$top] || barStack.fullStackRect[S$.$bottom] > componentBounds[S$.$bottom];
        if (barOutsideBounds) {
          let clipBounds = this[S$1._getBarStackBounds](barStack.fullStackRect);
          if (clipBounds[S$.$width] <= 0 || clipBounds[S$.$height] <= 0) {
            return;
          }
          canvas.setClipBounds(clipBounds);
        }
        canvas.drawBarStack(barStack, {drawAreaBounds: componentBounds});
        if (barOutsideBounds) {
          canvas.resetClipBounds();
        }
        t103 = this.barRendererDecorator;
        t103 == null ? null : t103.decorate(barElements, canvas, dart.nullCheck(this.graphicsFactory), {drawBounds: dart.nullCheck(this.drawBounds), animationPercent: animationPercent, renderingVertically: this.renderingVertically, rtl: this.isRtl});
      }
      [S$1._getBarStackBounds](barStackRect) {
        let left = null;
        let right = null;
        let top = null;
        let bottom = null;
        let componentBounds = dart.nullCheck(this.componentBounds);
        if (this.renderingVertically) {
          left = math.max(core.int, componentBounds[S$.$left], barStackRect[S$.$left]);
          right = math.min(core.int, componentBounds[S$.$right], barStackRect[S$.$right]);
          top = barStackRect[S$.$top];
          bottom = barStackRect[S$.$bottom];
        } else {
          left = barStackRect[S$.$left];
          right = barStackRect[S$.$right];
          top = math.max(core.int, componentBounds[S$.$top], barStackRect[S$.$top]);
          bottom = math.min(core.int, componentBounds[S$.$bottom], barStackRect[S$.$bottom]);
        }
        let width = right - left;
        let height = bottom - top;
        return new (T$.RectangleOfint()).new(left, top, width, height);
      }
      [S$1._getBarBounds](domainValue, domainAxis, domainWidth, maxBarWidthPx, measureValue, measureOffsetValue, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, allBarGroupWeights, numBarGroups) {
        domainWidth = domainWidth[S$.$abs]();
        if (barGroupWeight == null) {
          barGroupWeight = 1 / numBarGroups;
          previousBarGroupWeight = barGroupIndex * dart.notNull(barGroupWeight);
        }
        let spacingLoss = this[S$1._barGroupInnerPadding$1] * (numBarGroups - 1);
        let desiredWidth = ((domainWidth - spacingLoss) / numBarGroups)[S$.$round]();
        if (maxBarWidthPx != null) {
          desiredWidth = math.min(core.int, desiredWidth, maxBarWidthPx);
          domainWidth = desiredWidth * numBarGroups + spacingLoss;
        }
        let barWidth = desiredWidth;
        if (allBarGroupWeights != null) {
          barWidth = (desiredWidth * numBarGroups * allBarGroupWeights[S$.$_get](barGroupIndex))[S$.$round]();
        }
        barWidth = math.max(core.int, 1, barWidth);
        let adjustedBarGroupIndex = this.isRtl ? numBarGroups - barGroupIndex - 1 : barGroupIndex;
        let previousAverageWidth = adjustedBarGroupIndex > 0 ? ((domainWidth - spacingLoss) * (dart.nullCheck(previousBarGroupWeight) / adjustedBarGroupIndex))[S$.$round]() : 0;
        let domainStart = (dart.nullCheck(domainAxis.getLocation(domainValue)) - domainWidth / 2 + (previousAverageWidth + this[S$1._barGroupInnerPadding$1]) * adjustedBarGroupIndex)[S$.$round]();
        let domainEnd = domainStart + barWidth;
        measureValue == null ? measureValue = 0 : null;
        let measureStart = null;
        let measureEnd = null;
        if (dart.notNull(measureValue) < 0) {
          measureEnd = dart.nullCheck(measureAxis.getLocation(measureOffsetValue))[S$.$round]();
          measureStart = dart.nullCheck(measureAxis.getLocation(dart.notNull(measureValue) + measureOffsetValue))[S$.$round]();
        } else {
          measureStart = dart.nullCheck(measureAxis.getLocation(measureOffsetValue))[S$.$round]();
          measureEnd = dart.nullCheck(measureAxis.getLocation(dart.notNull(measureValue) + measureOffsetValue))[S$.$round]();
        }
        let bounds = null;
        if (this.renderingVertically) {
          bounds = new (T$.RectangleOfint()).new(domainStart, measureEnd, domainEnd - domainStart, measureStart - measureEnd);
        } else {
          bounds = new (T$.RectangleOfint()).new(math.min(core.int, measureStart, measureEnd), domainStart, (measureEnd - measureStart)[S$.$abs](), domainEnd - domainStart);
        }
        return bounds;
      }
      getBoundsForBar(bar) {
        BarRendererElementOfD().as(bar);
        return bar.bounds;
      }
    }
    (BarRenderer.internal = function(opts) {
      let t103;
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      this[S$1._barGroupInnerPadding$1] = 2;
      this[S$1.barRendererDecorator] = config.barRendererDecorator;
      this[S$1._stackedBarPaddingPx] = config.stackedBarPaddingPx;
      BarRenderer.__proto__.new.call(this, {config: config, rendererId: rendererId, layoutPaintOrder: (t103 = config.layoutPaintOrder, t103 == null ? 0 : t103)});
      ;
    }).prototype = BarRenderer.prototype;
    dart.addTypeTests(BarRenderer);
    BarRenderer.prototype[_is_BarRenderer_default] = true;
    dart.addTypeCaches(BarRenderer);
    dart.setMethodSignature(BarRenderer, () => ({
      __proto__: dart.getMethods(BarRenderer.__proto__),
      addPositionToDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [dart.nullable(core.Object), dart.nullable(core.Object)]),
      getBaseDetails: dart.fnType(bar_renderer.BarRendererElement$(D), [dart.dynamic, core.int]),
      makeAnimatedBar: dart.fnType(bar_renderer.AnimatedBar$(D), [], {allBarGroupWeights: dart.nullable(core.List$(core.double)), barGroupIndex: core.int, barGroupWeight: dart.nullable(core.double), color: dart.nullable(color$.Color), dashPattern: dart.nullable(core.List$(core.int)), datum: dart.dynamic, details: dart.nullable(core.Object), domainAxis: dart.nullable(core.Object), domainValue: dart.nullable(core.Object), domainWidth: core.int, fillColor: dart.nullable(color$.Color), fillPattern: dart.nullable(chart_canvas.FillPatternType), key: core.String, measureAxis: axis$.ImmutableAxis$(core.num), measureAxisPosition: dart.nullable(core.double), measureIsNegative: dart.nullable(core.bool), measureIsNull: dart.nullable(core.bool), measureOffsetValue: core.num, measureValue: dart.nullable(core.num), numBarGroups: core.int, previousBarGroupWeight: dart.nullable(core.double), series: dart.nullable(core.Object), strokeWidthPx: dart.nullable(core.double)}, {}),
      makeBarRendererElement: dart.fnType(bar_renderer.BarRendererElement$(D), [], {allBarGroupWeights: dart.nullable(core.List$(core.double)), barGroupIndex: core.int, barGroupWeight: dart.nullable(core.double), color: dart.nullable(color$.Color), dashPattern: dart.nullable(core.List$(core.int)), details: dart.nullable(core.Object), domainAxis: dart.nullable(core.Object), domainValue: dart.nullable(core.Object), domainWidth: core.int, fillColor: dart.nullable(color$.Color), fillPattern: dart.nullable(chart_canvas.FillPatternType), measureAxis: axis$.ImmutableAxis$(core.num), measureAxisPosition: dart.nullable(core.double), measureIsNegative: dart.nullable(core.bool), measureIsNull: dart.nullable(core.bool), measureOffsetValue: core.num, measureValue: dart.nullable(core.num), numBarGroups: core.int, previousBarGroupWeight: dart.nullable(core.double), strokeWidthPx: dart.nullable(core.double)}, {}),
      paintBar: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double, dart.nullable(core.Object)]),
      [S$1._getBarStackBounds]: dart.fnType(math.Rectangle$(core.int), [math.Rectangle$(core.int)]),
      [S$1._getBarBounds]: dart.fnType(math.Rectangle$(core.int), [dart.nullable(D), axis$.ImmutableAxis$(D), core.int, dart.nullable(core.int), dart.nullable(core.num), core.num, axis$.ImmutableAxis$(core.num), core.int, dart.nullable(core.double), dart.nullable(core.double), dart.nullable(core.List$(core.double)), core.int]),
      getBoundsForBar: dart.fnType(dart.nullable(math.Rectangle$(core.int)), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(BarRenderer, () => ({
      __proto__: dart.getGetters(BarRenderer.__proto__),
      cornerStrategy: bar_renderer_config.CornerStrategy
    }));
    dart.setLibraryUri(BarRenderer, I[127]);
    dart.setFieldSignature(BarRenderer, () => ({
      __proto__: dart.getFields(BarRenderer.__proto__),
      [S$1._barGroupInnerPadding$1]: dart.finalFieldType(core.int),
      [S$1._stackedBarPaddingPx]: dart.finalFieldType(core.int),
      barRendererDecorator: dart.finalFieldType(dart.nullable(bar_renderer_decorator.BarRendererDecorator$(dart.nullable(core.Object))))
    }));
    return BarRenderer;
  });
  bar_renderer.BarRenderer = bar_renderer.BarRenderer$();
  dart.addTypeTests(bar_renderer.BarRenderer, _is_BarRenderer_default);
  const _is_BarLaneRenderer_default = Symbol('_is_BarLaneRenderer_default');
  bar_lane_renderer.BarLaneRenderer$ = dart.generic(D => {
    var AnimatedBarOfD = () => (AnimatedBarOfD = dart.constFn(bar_renderer.AnimatedBar$(D)))();
    var ListOfAnimatedBarOfD = () => (ListOfAnimatedBarOfD = dart.constFn(core.List$(AnimatedBarOfD())))();
    var IdentityMapOfString$ListOfAnimatedBarOfD = () => (IdentityMapOfString$ListOfAnimatedBarOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfAnimatedBarOfD())))();
    var LinkedMapOfD$bool = () => (LinkedMapOfD$bool = dart.constFn(_js_helper.LinkedMap$(D, core.bool)))();
    var MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    var ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    var LinkedHashSetOfD = () => (LinkedHashSetOfD = dart.constFn(collection.LinkedHashSet$(D)))();
    var MutableSeriesOfDTovoid = () => (MutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [MutableSeriesOfD()])))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    var SetOfD = () => (SetOfD = dart.constFn(core.Set$(D)))();
    var ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    var JSArrayOfAnimatedBarOfD = () => (JSArrayOfAnimatedBarOfD = dart.constFn(_interceptors.JSArray$(AnimatedBarOfD())))();
    var VoidToListOfAnimatedBarOfD = () => (VoidToListOfAnimatedBarOfD = dart.constFn(dart.fnType(ListOfAnimatedBarOfD(), [])))();
    var AnimatedBarOfDTobool = () => (AnimatedBarOfDTobool = dart.constFn(dart.fnType(core.bool, [AnimatedBarOfD()])))();
    var BarRendererElementOfD = () => (BarRendererElementOfD = dart.constFn(bar_renderer.BarRendererElement$(D)))();
    var DTovoid = () => (DTovoid = dart.constFn(dart.fnType(dart.void, [D])))();
    var ImmutableSeriesOfDTovoid = () => (ImmutableSeriesOfDTovoid = dart.constFn(dart.fnType(dart.void, [ImmutableSeriesOfD()])))();
    var DAndboolTovoid = () => (DAndboolTovoid = dart.constFn(dart.fnType(dart.void, [D, core.bool])))();
    var AnimatedBarOfDToBarRendererElementOfD = () => (AnimatedBarOfDToBarRendererElementOfD = dart.constFn(dart.fnType(BarRendererElementOfD(), [AnimatedBarOfD()])))();
    var StringAndListOfAnimatedBarOfDTovoid = () => (StringAndListOfAnimatedBarOfDTovoid = dart.constFn(dart.fnType(dart.void, [core.String, ListOfAnimatedBarOfD()])))();
    class BarLaneRenderer extends bar_renderer.BarRenderer$(D) {
      static new(opts) {
        let config = opts && 'config' in opts ? opts.config : null;
        let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
        rendererId == null ? rendererId = "bar" : null;
        config == null ? config = new bar_lane_renderer_config.BarLaneRendererConfig.new() : null;
        return new (bar_lane_renderer.BarLaneRenderer$(D))._internal({config: config, rendererId: rendererId});
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD().as(seriesList);
        super.preprocessSeries(seriesList);
        this[S$0._allMeasuresForDomainNullMap][S$.$clear]();
        seriesList[S$.$forEach](dart.fn(series => {
          let domainFn = series.domainFn;
          let measureFn = series.rawMeasureFn;
          let domainValues = LinkedHashSetOfD().new();
          for (let barIndex = 0; barIndex < series.data[S$.$length]; barIndex = barIndex + 1) {
            let domain = domainFn(barIndex);
            let measure = measureFn(barIndex);
            domainValues.add(domain);
            if (bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).mergeEmptyLanes) {
              let allNull = this[S$0._allMeasuresForDomainNullMap][S$.$_get](domain);
              let isNull = measure == null;
              this[S$0._allMeasuresForDomainNullMap][S$.$_set](domain, allNull != null ? dart.test(allNull) && isNull : isNull);
            }
          }
          series.setAttr(T$0.SetOfObjectN(), bar_lane_renderer.domainValuesKey, domainValues);
        }, MutableSeriesOfDTovoid()));
      }
      update(seriesList, isAnimatingThisDraw) {
        ListOfImmutableSeriesOfD().as(seriesList);
        super.update(seriesList, isAnimatingThisDraw);
        seriesList[S$.$forEach](dart.fn(series => {
          let domainValues = SetOfD().as(series.getAttr(T$0.SetOfObject(), bar_lane_renderer.domainValuesKey));
          let domainAxis = ImmutableAxisOfD().as(series.getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
          let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
          let seriesStackKey = series.getAttr(core.String, base_bar_renderer.stackKeyKey);
          let barGroupCount = dart.nullCheck(series.getAttr(core.int, base_bar_renderer.barGroupCountKey));
          let barGroupIndex = dart.nullCheck(series.getAttr(core.int, base_bar_renderer.barGroupIndexKey));
          let previousBarGroupWeight = series.getAttr(core.double, base_bar_renderer.previousBarGroupWeightKey);
          let barGroupWeight = series.getAttr(core.double, base_bar_renderer.barGroupWeightKey);
          let allBarGroupWeights = series.getAttr(T$0.ListOfdouble(), base_bar_renderer.allBarGroupWeightsKey);
          let measureAxisPosition = measureAxis.getLocation(0.0);
          let maxMeasureValue = this[S$1._getMaxMeasureValue](measureAxis);
          let laneSeries = new (MutableSeriesOfD()).clone(MutableSeriesOfD().as(seriesList[S$.$_get](0)));
          laneSeries.data = T$.JSArrayOfObject().of([]);
          laneSeries.labelAccessorFn = dart.fn(index => "", T$.intNToString());
          let laneSeriesIndex = 0;
          domainValues[S$.$forEach](dart.fn(domainValue => {
            let t103;
            if (this[S$0._allMeasuresForDomainNullMap][S$.$_get](domainValue) === true) {
              return;
            }
            let datum = new (T$.IdentityMapOfString$int()).from(["index", laneSeriesIndex]);
            laneSeries.data[S$.$add](datum);
            let barStackMapKey = dart.str(domainValue) + "__" + dart.str(seriesStackKey) + "__" + dart.str(barGroupIndex);
            let barKey = barStackMapKey + "0";
            let barStackList = this[S$0._barLaneStackMap][S$.$putIfAbsent](barStackMapKey, dart.fn(() => JSArrayOfAnimatedBarOfD().of([]), VoidToListOfAnimatedBarOfD()));
            let animatingBar = iterable_extensions['IterableExtension|firstWhereOrNull'](AnimatedBarOfD(), barStackList, dart.fn(bar => bar.key === barKey, AnimatedBarOfDTobool()));
            if (animatingBar == null) {
              animatingBar = this.makeAnimatedBar({key: barKey, series: laneSeries, datum: datum, barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, allBarGroupWeights: allBarGroupWeights, color: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, details: new (BarRendererElementOfD()).new(), domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[S$.$round](), fillColor: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, measureValue: maxMeasureValue, measureOffsetValue: 0.0, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: barGroupCount, strokeWidthPx: this.config.strokeWidthPx, measureIsNull: false, measureIsNegative: false});
              barStackList[S$.$add](animatingBar);
            } else {
              t103 = animatingBar;
              (() => {
                t103.datum = datum;
                t103.series = laneSeries;
                t103.domainValue = domainValue;
                return t103;
              })();
            }
            let barElement = this.makeBarRendererElement({barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, allBarGroupWeights: allBarGroupWeights, color: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, details: new (BarRendererElementOfD()).new(), domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[S$.$round](), fillColor: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, measureValue: maxMeasureValue, measureOffsetValue: 0.0, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: barGroupCount, strokeWidthPx: this.config.strokeWidthPx, measureIsNull: false, measureIsNegative: false});
            animatingBar.setNewTarget(barElement);
            laneSeriesIndex = laneSeriesIndex + 1;
          }, DTovoid()));
        }, ImmutableSeriesOfDTovoid()));
        if (bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).mergeEmptyLanes) {
          let domainAxis = ImmutableAxisOfD().as(seriesList[S$.$_get](0).getAttr(T$.AxisOfObject(), axis$.domainAxisKey));
          let measureAxis = T$.ImmutableAxisOfnum().as(seriesList[S$.$_get](0).getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
          let measureAxisPosition = measureAxis.getLocation(0.0);
          let maxMeasureValue = this[S$1._getMaxMeasureValue](measureAxis);
          let barGroupIndex = 0;
          let previousBarGroupWeight = 0.0;
          let barGroupWeight = 1.0;
          let barGroupCount = 1;
          let mergedSeries = new (MutableSeriesOfD()).clone(MutableSeriesOfD().as(seriesList[S$.$_get](0)));
          mergedSeries.data = T$.JSArrayOfObject().of([]);
          mergedSeries.labelAccessorFn = dart.fn(index => bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).emptyLaneLabel, T$.intNToString());
          let mergedSeriesIndex = 0;
          this[S$0._allMeasuresForDomainNullMap][S$.$forEach](dart.fn((domainValue, allNull) => {
            let t103;
            if (allNull) {
              let datum = new (T$.IdentityMapOfString$int()).from(["index", mergedSeriesIndex]);
              mergedSeries.data[S$.$add](datum);
              let barStackMapKey = dart.str(domainValue) + "__allNull__";
              let barKey = barStackMapKey + "0";
              let barStackList = this[S$0._barLaneStackMap][S$.$putIfAbsent](barStackMapKey, dart.fn(() => JSArrayOfAnimatedBarOfD().of([]), VoidToListOfAnimatedBarOfD()));
              let animatingBar = iterable_extensions['IterableExtension|firstWhereOrNull'](AnimatedBarOfD(), barStackList, dart.fn(bar => bar.key === barKey, AnimatedBarOfDTobool()));
              if (animatingBar == null) {
                animatingBar = this.makeAnimatedBar({key: barKey, series: mergedSeries, datum: datum, barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, color: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, details: new (BarRendererElementOfD()).new(), domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[S$.$round](), fillColor: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, measureValue: maxMeasureValue, measureOffsetValue: 0.0, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: barGroupCount, strokeWidthPx: this.config.strokeWidthPx, measureIsNull: false, measureIsNegative: false});
                barStackList[S$.$add](animatingBar);
              } else {
                t103 = animatingBar;
                (() => {
                  t103.datum = datum;
                  t103.series = mergedSeries;
                  t103.domainValue = domainValue;
                  return t103;
                })();
              }
              let barElement = this.makeBarRendererElement({barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, color: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, details: new (BarRendererElementOfD()).new(), domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[S$.$round](), fillColor: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, measureValue: maxMeasureValue, measureOffsetValue: 0.0, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: barGroupCount, strokeWidthPx: this.config.strokeWidthPx, measureIsNull: false, measureIsNegative: false});
              animatingBar.setNewTarget(barElement);
              mergedSeriesIndex = mergedSeriesIndex + 1;
            }
          }, DAndboolTovoid()));
        }
      }
      [S$1._getMaxMeasureValue](measureAxis) {
        let pos = this.chart.vertical ? this.chart.drawAreaBounds[S$.$top] : this.isRtl ? this.chart.drawAreaBounds[S$.$left] : this.chart.drawAreaBounds[S$.$right];
        return measureAxis.getDomain(pos[S$.$toDouble]());
      }
      paint(canvas, animationPercent) {
        this[S$0._barLaneStackMap][S$.$forEach](dart.fn((stackKey, barStack) => {
          let barElements = barStack[S$.$map](BarRendererElementOfD(), dart.fn(animatingBar => animatingBar.getCurrentBar(animationPercent), AnimatedBarOfDToBarRendererElementOfD()))[S$.$toList]();
          this.paintBar(canvas, animationPercent, barElements);
        }, StringAndListOfAnimatedBarOfDTovoid()));
        super.paint(canvas, animationPercent);
      }
    }
    (BarLaneRenderer._internal = function(opts) {
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      this[S$0._barLaneStackMap] = new (IdentityMapOfString$ListOfAnimatedBarOfD()).new();
      this[S$0._allMeasuresForDomainNullMap] = new (LinkedMapOfD$bool()).new();
      BarLaneRenderer.__proto__.internal.call(this, {config: config, rendererId: rendererId});
      ;
    }).prototype = BarLaneRenderer.prototype;
    dart.addTypeTests(BarLaneRenderer);
    BarLaneRenderer.prototype[_is_BarLaneRenderer_default] = true;
    dart.addTypeCaches(BarLaneRenderer);
    dart.setMethodSignature(BarLaneRenderer, () => ({
      __proto__: dart.getMethods(BarLaneRenderer.__proto__),
      [S$1._getMaxMeasureValue]: dart.fnType(core.num, [axis$.ImmutableAxis$(core.num)])
    }));
    dart.setLibraryUri(BarLaneRenderer, I[128]);
    dart.setFieldSignature(BarLaneRenderer, () => ({
      __proto__: dart.getFields(BarLaneRenderer.__proto__),
      [S$0._barLaneStackMap]: dart.finalFieldType(collection.LinkedHashMap$(core.String, core.List$(bar_renderer.AnimatedBar$(D)))),
      [S$0._allMeasuresForDomainNullMap]: dart.finalFieldType(collection.LinkedHashMap$(D, core.bool))
    }));
    return BarLaneRenderer;
  });
  bar_lane_renderer.BarLaneRenderer = bar_lane_renderer.BarLaneRenderer$();
  dart.addTypeTests(bar_lane_renderer.BarLaneRenderer, _is_BarLaneRenderer_default);
  dart.defineLazy(bar_lane_renderer, {
    /*bar_lane_renderer.domainValuesKey*/get domainValuesKey() {
      return C[138] || CT.C138;
    }
  }, false);
  const _is_BarRendererConfig_default = Symbol('_is_BarRendererConfig_default');
  bar_renderer_config.BarRendererConfig$ = dart.generic(D => {
    var BarRendererOfD = () => (BarRendererOfD = dart.constFn(bar_renderer.BarRenderer$(D)))();
    class BarRendererConfig extends base_bar_renderer_config.BaseBarRendererConfig$(D) {
      get cornerStrategy() {
        return this[S$1.cornerStrategy];
      }
      set cornerStrategy(value) {
        super.cornerStrategy = value;
      }
      get barRendererDecorator() {
        return this[S$1.barRendererDecorator$1];
      }
      set barRendererDecorator(value) {
        super.barRendererDecorator = value;
      }
      build() {
        return BarRendererOfD().new({config: this, rendererId: this.customRendererId});
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        return bar_renderer_config.BarRendererConfig.is(other) && other.cornerStrategy[S$.$_equals](this.cornerStrategy) && super._equals(other);
      }
      get hashCode() {
        let hash = super.hashCode;
        hash = hash * 31 + this.cornerStrategy[S$.$hashCode];
        return hash;
      }
    }
    (BarRendererConfig.new = function(opts) {
      let t103, t103$;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let cornerStrategy = opts && 'cornerStrategy' in opts ? opts.cornerStrategy : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let groupingType = opts && 'groupingType' in opts ? opts.groupingType : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 10;
      let minBarLengthPx = opts && 'minBarLengthPx' in opts ? opts.minBarLengthPx : 0;
      let maxBarWidthPx = opts && 'maxBarWidthPx' in opts ? opts.maxBarWidthPx : null;
      let stackedBarPaddingPx = opts && 'stackedBarPaddingPx' in opts ? opts.stackedBarPaddingPx : 1;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 0;
      let barRendererDecorator = opts && 'barRendererDecorator' in opts ? opts.barRendererDecorator : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let weightPattern = opts && 'weightPattern' in opts ? opts.weightPattern : null;
      this[S$1.barRendererDecorator$1] = barRendererDecorator;
      this[S$1.cornerStrategy] = (t103 = cornerStrategy, t103 == null ? C[139] || CT.C139 : t103);
      BarRendererConfig.__proto__.new.call(this, {customRendererId: customRendererId, groupingType: (t103$ = groupingType, t103$ == null ? base_bar_renderer_config.BarGroupingType.grouped : t103$), layoutPaintOrder: layoutPaintOrder, minBarLengthPx: minBarLengthPx, maxBarWidthPx: maxBarWidthPx, fillPattern: fillPattern, stackedBarPaddingPx: stackedBarPaddingPx, strokeWidthPx: strokeWidthPx, symbolRenderer: symbolRenderer, weightPattern: weightPattern});
      ;
    }).prototype = BarRendererConfig.prototype;
    dart.addTypeTests(BarRendererConfig);
    BarRendererConfig.prototype[_is_BarRendererConfig_default] = true;
    dart.addTypeCaches(BarRendererConfig);
    dart.setMethodSignature(BarRendererConfig, () => ({
      __proto__: dart.getMethods(BarRendererConfig.__proto__),
      build: dart.fnType(bar_renderer.BarRenderer$(D), [])
    }));
    dart.setLibraryUri(BarRendererConfig, I[129]);
    dart.setFieldSignature(BarRendererConfig, () => ({
      __proto__: dart.getFields(BarRendererConfig.__proto__),
      cornerStrategy: dart.finalFieldType(bar_renderer_config.CornerStrategy),
      barRendererDecorator: dart.finalFieldType(dart.nullable(bar_renderer_decorator.BarRendererDecorator$(D)))
    }));
    dart.defineExtensionMethods(BarRendererConfig, ['_equals']);
    dart.defineExtensionAccessors(BarRendererConfig, ['hashCode']);
    return BarRendererConfig;
  });
  bar_renderer_config.BarRendererConfig = bar_renderer_config.BarRendererConfig$();
  dart.addTypeTests(bar_renderer_config.BarRendererConfig, _is_BarRendererConfig_default);
  bar_lane_renderer_config.BarLaneRendererConfig = class BarLaneRendererConfig extends bar_renderer_config.BarRendererConfig$(core.String) {
    get backgroundBarColor() {
      return this[S$1.backgroundBarColor];
    }
    set backgroundBarColor(value) {
      super.backgroundBarColor = value;
    }
    get emptyLaneLabel() {
      return this[S$1.emptyLaneLabel];
    }
    set emptyLaneLabel(value) {
      super.emptyLaneLabel = value;
    }
    get mergeEmptyLanes() {
      return this[S$1.mergeEmptyLanes];
    }
    set mergeEmptyLanes(value) {
      super.mergeEmptyLanes = value;
    }
    build() {
      return T$0.BarLaneRendererOfString().new({config: this, rendererId: this.customRendererId});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return bar_lane_renderer_config.BarLaneRendererConfig.is(other) && other.backgroundBarColor._equals(this.backgroundBarColor) && other.emptyLaneLabel === this.emptyLaneLabel && other.mergeEmptyLanes === this.mergeEmptyLanes && super._equals(other);
    }
    get hashCode() {
      let hash = super.hashCode;
      hash = hash * 31 + this.backgroundBarColor.hashCode;
      hash = hash * 31 + this.emptyLaneLabel[S$.$hashCode];
      hash = hash * 31 + this.mergeEmptyLanes[S$.$hashCode];
      return hash;
    }
  };
  (bar_lane_renderer_config.BarLaneRendererConfig.new = function(opts) {
    let t103, t103$;
    let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
    let cornerStrategy = opts && 'cornerStrategy' in opts ? opts.cornerStrategy : null;
    let emptyLaneLabel = opts && 'emptyLaneLabel' in opts ? opts.emptyLaneLabel : "No data";
    let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
    let groupingType = opts && 'groupingType' in opts ? opts.groupingType : null;
    let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 10;
    let mergeEmptyLanes = opts && 'mergeEmptyLanes' in opts ? opts.mergeEmptyLanes : false;
    let minBarLengthPx = opts && 'minBarLengthPx' in opts ? opts.minBarLengthPx : 0;
    let stackedBarPaddingPx = opts && 'stackedBarPaddingPx' in opts ? opts.stackedBarPaddingPx : 1;
    let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 0;
    let barRendererDecorator = opts && 'barRendererDecorator' in opts ? opts.barRendererDecorator : null;
    let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
    let backgroundBarColor = opts && 'backgroundBarColor' in opts ? opts.backgroundBarColor : null;
    let weightPattern = opts && 'weightPattern' in opts ? opts.weightPattern : null;
    this[S$1.emptyLaneLabel] = emptyLaneLabel;
    this[S$1.mergeEmptyLanes] = mergeEmptyLanes;
    this[S$1.backgroundBarColor] = (t103 = backgroundBarColor, t103 == null ? style_factory.StyleFactory.style.noDataColor : t103);
    bar_lane_renderer_config.BarLaneRendererConfig.__proto__.new.call(this, {barRendererDecorator: barRendererDecorator, cornerStrategy: cornerStrategy, customRendererId: customRendererId, groupingType: (t103$ = groupingType, t103$ == null ? base_bar_renderer_config.BarGroupingType.grouped : t103$), layoutPaintOrder: layoutPaintOrder, minBarLengthPx: minBarLengthPx, fillPattern: fillPattern, stackedBarPaddingPx: stackedBarPaddingPx, strokeWidthPx: strokeWidthPx, symbolRenderer: symbolRenderer, weightPattern: weightPattern});
    ;
  }).prototype = bar_lane_renderer_config.BarLaneRendererConfig.prototype;
  dart.addTypeTests(bar_lane_renderer_config.BarLaneRendererConfig);
  dart.addTypeCaches(bar_lane_renderer_config.BarLaneRendererConfig);
  dart.setMethodSignature(bar_lane_renderer_config.BarLaneRendererConfig, () => ({
    __proto__: dart.getMethods(bar_lane_renderer_config.BarLaneRendererConfig.__proto__),
    build: dart.fnType(bar_lane_renderer.BarLaneRenderer$(core.String), [])
  }));
  dart.setLibraryUri(bar_lane_renderer_config.BarLaneRendererConfig, I[130]);
  dart.setFieldSignature(bar_lane_renderer_config.BarLaneRendererConfig, () => ({
    __proto__: dart.getFields(bar_lane_renderer_config.BarLaneRendererConfig.__proto__),
    backgroundBarColor: dart.finalFieldType(color$.Color),
    emptyLaneLabel: dart.finalFieldType(core.String),
    mergeEmptyLanes: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(bar_lane_renderer_config.BarLaneRendererConfig, ['_equals']);
  dart.defineExtensionAccessors(bar_lane_renderer_config.BarLaneRendererConfig, ['hashCode']);
  const _is_BarRendererDecorator_default = Symbol('_is_BarRendererDecorator_default');
  bar_renderer_decorator.BarRendererDecorator$ = dart.generic(D => {
    class BarRendererDecorator extends core.Object {}
    (BarRendererDecorator.new = function() {
      ;
    }).prototype = BarRendererDecorator.prototype;
    dart.addTypeTests(BarRendererDecorator);
    BarRendererDecorator.prototype[_is_BarRendererDecorator_default] = true;
    dart.addTypeCaches(BarRendererDecorator);
    dart.setLibraryUri(BarRendererDecorator, I[131]);
    return BarRendererDecorator;
  });
  bar_renderer_decorator.BarRendererDecorator = bar_renderer_decorator.BarRendererDecorator$();
  dart.addTypeTests(bar_renderer_decorator.BarRendererDecorator, _is_BarRendererDecorator_default);
  const _is_BarLabelDecorator_default = Symbol('_is_BarLabelDecorator_default');
  bar_label_decorator.BarLabelDecorator$ = dart.generic(D => {
    var ImmutableBarRendererElementOfD = () => (ImmutableBarRendererElementOfD = dart.constFn(bar_renderer.ImmutableBarRendererElement$(D)))();
    var IterableOfImmutableBarRendererElementOfD = () => (IterableOfImmutableBarRendererElementOfD = dart.constFn(core.Iterable$(ImmutableBarRendererElementOfD())))();
    class BarLabelDecorator extends bar_renderer_decorator.BarRendererDecorator$(D) {
      get insideLabelStyleSpec() {
        return this[S$1.insideLabelStyleSpec$1];
      }
      set insideLabelStyleSpec(value) {
        super.insideLabelStyleSpec = value;
      }
      get outsideLabelStyleSpec() {
        return this[S$1.outsideLabelStyleSpec$1];
      }
      set outsideLabelStyleSpec(value) {
        super.outsideLabelStyleSpec = value;
      }
      get labelPosition() {
        return this[S$1.labelPosition$2];
      }
      set labelPosition(value) {
        super.labelPosition = value;
      }
      get labelPlacement() {
        return this[S$1.labelPlacement];
      }
      set labelPlacement(value) {
        super.labelPlacement = value;
      }
      get labelAnchor() {
        return this[S$1.labelAnchor$2];
      }
      set labelAnchor(value) {
        super.labelAnchor = value;
      }
      get labelPadding() {
        return this[S$1.labelPadding$3];
      }
      set labelPadding(value) {
        super.labelPadding = value;
      }
      decorate(barElements, canvas, graphicsFactory, opts) {
        IterableOfImmutableBarRendererElementOfD().as(barElements);
        let drawBounds = opts && 'drawBounds' in opts ? opts.drawBounds : null;
        let animationPercent = opts && 'animationPercent' in opts ? opts.animationPercent : null;
        let renderingVertically = opts && 'renderingVertically' in opts ? opts.renderingVertically : null;
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        if (animationPercent !== 1.0) {
          return;
        }
        if (renderingVertically) {
          this[S$1._decorateVerticalBars](barElements, canvas, graphicsFactory, drawBounds, rtl);
        } else {
          this[S$1._decorateHorizontalBars](barElements, canvas, graphicsFactory, drawBounds, rtl);
        }
      }
      [S$1._decorateVerticalBars](barElements, canvas, graphicsFactory, drawBounds, rtl) {
        let t103, t103$, t103$0;
        let insideLabelStyle = this[S$1._getTextStyle$3](graphicsFactory, this.insideLabelStyleSpec);
        let outsideLabelStyle = this[S$1._getTextStyle$3](graphicsFactory, this.outsideLabelStyleSpec);
        for (let element of barElements) {
          let labelFn = dart.nullCheck(element.series).labelAccessorFn;
          let measureFn = dart.nullCheck(element.series).measureFn;
          let datumIndex = element.index;
          let label = (t103 = labelFn, t103 == null ? null : t103(datumIndex));
          let measure = (t103$ = measureFn(datumIndex), t103$ == null ? 0.0 : t103$);
          let datumInsideLabelStyle = this[S$1._getDatumStyle$1](dart.nullCheck(element.series).insideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: insideLabelStyle});
          let datumOutsideLabelStyle = this[S$1._getDatumStyle$1](dart.nullCheck(element.series).outsideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: outsideLabelStyle});
          if (label == null || label[S$.$isEmpty]) {
            continue;
          }
          let labelElements = label[S$0.$split](bar_label_decorator.BarLabelDecorator._labelSplitPattern)[S$.$map](text_element.TextElement, dart.fn(labelPart => graphicsFactory.createTextElement(labelPart), T$0.StringToTextElement()));
          let bounds = dart.nullCheck(element.bounds);
          let totalPadding = this.labelPadding * 2;
          let insideBarHeight = bounds[S$.$height] - totalPadding;
          let calculatedLabelPosition = this.labelPosition;
          if (calculatedLabelPosition === bar_label_decorator.BarLabelPosition.auto) {
            labelElements = labelElements[S$.$map](text_element.TextElement, dart.fn(labelElement => {
              let t103;
              t103 = labelElement;
              return (() => {
                t103.textStyle = datumInsideLabelStyle;
                return t103;
              })();
            }, T$0.TextElementToTextElement()));
            let labelMaxWidth = labelElements[S$.$map](core.double, dart.fn(labelElement => labelElement.measurement.horizontalSliceWidth, T$0.TextElementTodouble()))[S$0.$fold](core.double, 0.0, dart.fn((max, current) => max > current ? max : current, T$0.doubleAnddoubleTodouble()));
            let totalLabelHeight = this[S$1._getTotalLabelHeight](labelElements);
            calculatedLabelPosition = totalLabelHeight < insideBarHeight && labelMaxWidth < bounds[S$.$width] ? bar_label_decorator.BarLabelPosition.inside : bar_label_decorator.BarLabelPosition.outside;
          }
          labelElements = labelElements[S$.$map](text_element.TextElement, dart.fn(labelElement => {
            let t103;
            t103 = labelElement;
            return (() => {
              t103.textStyle = calculatedLabelPosition === bar_label_decorator.BarLabelPosition.inside ? datumInsideLabelStyle : datumOutsideLabelStyle;
              t103.maxWidth = bounds[S$.$width];
              t103.textDirection = rtl ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
              return t103;
            })();
          }, T$0.TextElementToTextElement()));
          let totalLabelHeight = this[S$1._getTotalLabelHeight](labelElements);
          let labelsDrawn = 0;
          for (let labelElement of labelElements) {
            let labelY = null;
            let labelHeight = labelElement.measurement.verticalSliceWidth[S$.$round]();
            let offsetHeight = (labelHeight + bar_label_decorator.BarLabelDecorator._defaultMultiLineLabelPadding) * labelsDrawn;
            if (calculatedLabelPosition === bar_label_decorator.BarLabelPosition.inside) {
              let anchor = this[S$1._resolveLabelAnchor](measure, (t103$0 = this.labelAnchor, t103$0 == null ? bar_label_decorator.BarLabelDecorator._defaultVerticalLabelAnchor : t103$0));
              switch (anchor) {
                case C[142] || CT.C142:
                {
                  labelY = bounds[S$.$top] + this.labelPadding + offsetHeight;
                  break;
                }
                case C[143] || CT.C143:
                {
                  labelY = (bounds[S$.$bottom] - bounds[S$.$height] / 2 - totalLabelHeight / 2 + offsetHeight)[S$.$round]();
                  break;
                }
                case C[144] || CT.C144:
                {
                  labelY = bounds[S$.$bottom] - this.labelPadding - totalLabelHeight + offsetHeight;
                  break;
                }
              }
            } else {
              if (measure < 0 && this.labelPlacement === bar_label_decorator.BarLabelPlacement.opposeAxisBaseline) {
                labelY = bounds[S$.$bottom] + this.labelPadding + offsetHeight;
              } else {
                labelY = bounds[S$.$top] - this.labelPadding - totalLabelHeight + offsetHeight;
              }
            }
            let labelX = (bounds[S$.$left] + bounds[S$.$width] / 2 - labelElement.measurement.horizontalSliceWidth / 2)[S$.$round]();
            canvas.drawText(labelElement, labelX, labelY);
            labelsDrawn = labelsDrawn + 1;
          }
        }
      }
      [S$1._decorateHorizontalBars](barElements, canvas, graphicsFactory, drawBounds, rtl) {
        let t103, t103$, t103$0;
        let insideLabelStyle = this[S$1._getTextStyle$3](graphicsFactory, this.insideLabelStyleSpec);
        let outsideLabelStyle = this[S$1._getTextStyle$3](graphicsFactory, this.outsideLabelStyleSpec);
        for (let element of barElements) {
          let labelFn = dart.nullCheck(element.series).labelAccessorFn;
          let measureFn = dart.nullCheck(element.series).measureFn;
          let datumIndex = element.index;
          let label = (t103 = labelFn, t103 == null ? null : t103(datumIndex));
          let measure = (t103$ = measureFn(datumIndex), t103$ == null ? 0.0 : t103$);
          let datumInsideLabelStyle = this[S$1._getDatumStyle$1](dart.nullCheck(element.series).insideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: insideLabelStyle});
          let datumOutsideLabelStyle = this[S$1._getDatumStyle$1](dart.nullCheck(element.series).outsideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: outsideLabelStyle});
          if (label == null || label[S$.$isEmpty]) {
            continue;
          }
          let bounds = dart.nullCheck(element.bounds);
          let totalPadding = this.labelPadding * 2;
          let insideBarWidth = bounds[S$.$width] - totalPadding;
          let outsideBarWidth = drawBounds[S$.$width] - bounds[S$.$width] - totalPadding;
          let labelElement = graphicsFactory.createTextElement(label);
          let calculatedLabelPosition = this.labelPosition;
          if (calculatedLabelPosition === bar_label_decorator.BarLabelPosition.auto) {
            labelElement.textStyle = datumInsideLabelStyle;
            calculatedLabelPosition = insideBarWidth >= outsideBarWidth || labelElement.measurement.horizontalSliceWidth < insideBarWidth ? bar_label_decorator.BarLabelPosition.inside : bar_label_decorator.BarLabelPosition.outside;
          }
          if (calculatedLabelPosition === bar_label_decorator.BarLabelPosition.inside) {
            labelElement.textStyle = datumInsideLabelStyle;
            labelElement.maxWidth = insideBarWidth;
          } else {
            labelElement.textStyle = datumOutsideLabelStyle;
            labelElement.maxWidth = outsideBarWidth;
          }
          if (dart.nullCheck(labelElement.maxWidth) < 0 || labelElement.maxWidthStrategy == null && labelElement.measurement.horizontalSliceWidth > dart.nullCheck(labelElement.maxWidth)) {
            return;
          }
          let labelX = null;
          if (calculatedLabelPosition === bar_label_decorator.BarLabelPosition.inside) {
            let anchor = this[S$1._resolveLabelAnchor](measure, (t103$0 = this.labelAnchor, t103$0 == null ? bar_label_decorator.BarLabelDecorator._defaultHorizontalLabelAnchor : t103$0));
            switch (anchor) {
              case C[143] || CT.C143:
              {
                labelX = (bounds[S$.$left] + bounds[S$.$width] / 2 - labelElement.measurement.horizontalSliceWidth / 2)[S$.$round]();
                labelElement.textDirection = rtl ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
                break;
              }
              case C[142] || CT.C142:
              case C[144] || CT.C144:
              {
                let alignLeft = rtl ? anchor === bar_label_decorator.BarLabelAnchor.end : anchor === bar_label_decorator.BarLabelAnchor.start;
                if (alignLeft) {
                  labelX = bounds[S$.$left] + this.labelPadding;
                  labelElement.textDirection = text_element.TextDirection.ltr;
                } else {
                  labelX = bounds[S$.$right] - this.labelPadding;
                  labelElement.textDirection = text_element.TextDirection.rtl;
                }
                break;
              }
            }
          } else {
            if (measure < 0 && this.labelPlacement === bar_label_decorator.BarLabelPlacement.opposeAxisBaseline) {
              labelX = bounds[S$.$left] - this.labelPadding;
              labelElement.textDirection = text_element.TextDirection.rtl;
            } else {
              labelX = bounds[S$.$right] + this.labelPadding;
              labelElement.textDirection = text_element.TextDirection.ltr;
            }
          }
          let labelY = (bounds[S$.$top] + (bounds[S$.$bottom] - bounds[S$.$top]) / 2 - labelElement.measurement.verticalSliceWidth / 2)[S$.$round]();
          canvas.drawText(labelElement, labelX, labelY);
        }
      }
      [S$1._getTotalLabelHeight](labelElements) {
        return (labelElements[S$.$first].measurement.verticalSliceWidth * labelElements[S$.$length])[S$.$round]() + bar_label_decorator.BarLabelDecorator._defaultMultiLineLabelPadding * (labelElements[S$.$length] - 1);
      }
      [S$1._getTextStyle$3](graphicsFactory, labelSpec) {
        let t104, t104$, t104$0, t104$1, t104$2, t104$3, t103;
        t103 = graphicsFactory.createTextPaint();
        return (() => {
          t103.color = (t104$ = (t104 = labelSpec, t104 == null ? null : t104.color), t104$ == null ? color$.Color.black : t104$);
          t103.fontFamily = (t104$0 = labelSpec, t104$0 == null ? null : t104$0.fontFamily);
          t103.fontSize = (t104$2 = (t104$1 = labelSpec, t104$1 == null ? null : t104$1.fontSize), t104$2 == null ? 12 : t104$2);
          t103.lineHeight = (t104$3 = labelSpec, t104$3 == null ? null : t104$3.lineHeight);
          return t103;
        })();
      }
      [S$1._getDatumStyle$1](labelFn, datumIndex, graphicsFactory, opts) {
        let t103;
        let defaultStyle = opts && 'defaultStyle' in opts ? opts.defaultStyle : null;
        let styleSpec = (t103 = labelFn, t103 == null ? null : t103(datumIndex));
        return styleSpec != null ? this[S$1._getTextStyle$3](graphicsFactory, styleSpec) : defaultStyle;
      }
      [S$1._resolveLabelAnchor](measure, anchor) {
        if (this.labelPlacement === bar_label_decorator.BarLabelPlacement.opposeAxisBaseline) {
          if (measure >= 0) return anchor;
          if (anchor === bar_label_decorator.BarLabelAnchor.start) return bar_label_decorator.BarLabelAnchor.end;
          if (anchor === bar_label_decorator.BarLabelAnchor.end) return bar_label_decorator.BarLabelAnchor.start;
          return anchor;
        }
        return anchor;
      }
    }
    (BarLabelDecorator.new = function(opts) {
      let t103, t103$;
      let insideLabelStyleSpec = opts && 'insideLabelStyleSpec' in opts ? opts.insideLabelStyleSpec : null;
      let outsideLabelStyleSpec = opts && 'outsideLabelStyleSpec' in opts ? opts.outsideLabelStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : C[140] || CT.C140;
      let labelPlacement = opts && 'labelPlacement' in opts ? opts.labelPlacement : C[141] || CT.C141;
      let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : 5;
      this[S$1.labelAnchor$2] = labelAnchor;
      this[S$1.labelPosition$2] = labelPosition;
      this[S$1.labelPlacement] = labelPlacement;
      this[S$1.labelPadding$3] = labelPadding;
      this[S$1.insideLabelStyleSpec$1] = (t103 = insideLabelStyleSpec, t103 == null ? bar_label_decorator.BarLabelDecorator._defaultInsideLabelStyle : t103);
      this[S$1.outsideLabelStyleSpec$1] = (t103$ = outsideLabelStyleSpec, t103$ == null ? bar_label_decorator.BarLabelDecorator._defaultOutsideLabelStyle : t103$);
      BarLabelDecorator.__proto__.new.call(this);
      ;
    }).prototype = BarLabelDecorator.prototype;
    dart.addTypeTests(BarLabelDecorator);
    BarLabelDecorator.prototype[_is_BarLabelDecorator_default] = true;
    dart.addTypeCaches(BarLabelDecorator);
    dart.setMethodSignature(BarLabelDecorator, () => ({
      __proto__: dart.getMethods(BarLabelDecorator.__proto__),
      decorate: dart.fnType(dart.void, [dart.nullable(core.Object), chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory], {animationPercent: core.double, drawBounds: math.Rectangle$(core.int), renderingVertically: core.bool, rtl: core.bool}, {}),
      [S$1._decorateVerticalBars]: dart.fnType(dart.void, [core.Iterable$(bar_renderer.ImmutableBarRendererElement$(D)), chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory, math.Rectangle$(core.int), core.bool]),
      [S$1._decorateHorizontalBars]: dart.fnType(dart.void, [core.Iterable$(bar_renderer.ImmutableBarRendererElement$(D)), chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory, math.Rectangle$(core.int), core.bool]),
      [S$1._getTotalLabelHeight]: dart.fnType(core.int, [core.Iterable$(text_element.TextElement)]),
      [S$1._getTextStyle$3]: dart.fnType(text_style.TextStyle, [graphics_factory.GraphicsFactory, dart.nullable(axis_spec.TextStyleSpec)]),
      [S$1._getDatumStyle$1]: dart.fnType(text_style.TextStyle, [dart.nullable(dart.fnType(axis_spec.TextStyleSpec, [dart.nullable(core.int)])), dart.nullable(core.int), graphics_factory.GraphicsFactory], {}, {defaultStyle: text_style.TextStyle}),
      [S$1._resolveLabelAnchor]: dart.fnType(bar_label_decorator.BarLabelAnchor, [core.num, bar_label_decorator.BarLabelAnchor])
    }));
    dart.setLibraryUri(BarLabelDecorator, I[132]);
    dart.setFieldSignature(BarLabelDecorator, () => ({
      __proto__: dart.getFields(BarLabelDecorator.__proto__),
      insideLabelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      outsideLabelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      labelPosition: dart.finalFieldType(bar_label_decorator.BarLabelPosition),
      labelPlacement: dart.finalFieldType(bar_label_decorator.BarLabelPlacement),
      labelAnchor: dart.finalFieldType(dart.nullable(bar_label_decorator.BarLabelAnchor)),
      labelPadding: dart.finalFieldType(core.int)
    }));
    return BarLabelDecorator;
  });
  bar_label_decorator.BarLabelDecorator = bar_label_decorator.BarLabelDecorator$();
  dart.defineLazy(bar_label_decorator.BarLabelDecorator, {
    /*bar_label_decorator.BarLabelDecorator._defaultLabelPosition*/get _defaultLabelPosition() {
      return C[140] || CT.C140;
    },
    /*bar_label_decorator.BarLabelDecorator._defaultLabelPadding*/get _defaultLabelPadding() {
      return 5;
    },
    /*bar_label_decorator.BarLabelDecorator._defaultLabelPlacement*/get _defaultLabelPlacement() {
      return C[141] || CT.C141;
    },
    /*bar_label_decorator.BarLabelDecorator._defaultHorizontalLabelAnchor*/get _defaultHorizontalLabelAnchor() {
      return C[144] || CT.C144;
    },
    /*bar_label_decorator.BarLabelDecorator._defaultVerticalLabelAnchor*/get _defaultVerticalLabelAnchor() {
      return C[142] || CT.C142;
    },
    /*bar_label_decorator.BarLabelDecorator._defaultInsideLabelStyle*/get _defaultInsideLabelStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 12, color: color$.Color.white});
    },
    /*bar_label_decorator.BarLabelDecorator._defaultOutsideLabelStyle*/get _defaultOutsideLabelStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 12, color: color$.Color.black});
    },
    /*bar_label_decorator.BarLabelDecorator._labelSplitPattern*/get _labelSplitPattern() {
      return "\n";
    },
    /*bar_label_decorator.BarLabelDecorator._defaultMultiLineLabelPadding*/get _defaultMultiLineLabelPadding() {
      return 2;
    }
  }, false);
  dart.addTypeTests(bar_label_decorator.BarLabelDecorator, _is_BarLabelDecorator_default);
  bar_label_decorator.BarLabelPosition = class BarLabelPosition extends core.Object {
    toString() {
      return this[S$1._name$21];
    }
  };
  (bar_label_decorator.BarLabelPosition.new = function(index, _name) {
    this.index = index;
    this[S$1._name$21] = _name;
    ;
  }).prototype = bar_label_decorator.BarLabelPosition.prototype;
  dart.addTypeTests(bar_label_decorator.BarLabelPosition);
  dart.addTypeCaches(bar_label_decorator.BarLabelPosition);
  dart.setLibraryUri(bar_label_decorator.BarLabelPosition, I[132]);
  dart.setFieldSignature(bar_label_decorator.BarLabelPosition, () => ({
    __proto__: dart.getFields(bar_label_decorator.BarLabelPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [S$1._name$21]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(bar_label_decorator.BarLabelPosition, ['toString']);
  bar_label_decorator.BarLabelPosition.auto = C[140] || CT.C140;
  bar_label_decorator.BarLabelPosition.outside = C[145] || CT.C145;
  bar_label_decorator.BarLabelPosition.inside = C[146] || CT.C146;
  bar_label_decorator.BarLabelPosition.values = C[147] || CT.C147;
  bar_label_decorator.BarLabelPlacement = class BarLabelPlacement extends core.Object {
    toString() {
      return this[S$1._name$21];
    }
  };
  (bar_label_decorator.BarLabelPlacement.new = function(index, _name) {
    this.index = index;
    this[S$1._name$21] = _name;
    ;
  }).prototype = bar_label_decorator.BarLabelPlacement.prototype;
  dart.addTypeTests(bar_label_decorator.BarLabelPlacement);
  dart.addTypeCaches(bar_label_decorator.BarLabelPlacement);
  dart.setLibraryUri(bar_label_decorator.BarLabelPlacement, I[132]);
  dart.setFieldSignature(bar_label_decorator.BarLabelPlacement, () => ({
    __proto__: dart.getFields(bar_label_decorator.BarLabelPlacement.__proto__),
    index: dart.finalFieldType(core.int),
    [S$1._name$21]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(bar_label_decorator.BarLabelPlacement, ['toString']);
  bar_label_decorator.BarLabelPlacement.followMeasureAxis = C[141] || CT.C141;
  bar_label_decorator.BarLabelPlacement.opposeAxisBaseline = C[148] || CT.C148;
  bar_label_decorator.BarLabelPlacement.values = C[149] || CT.C149;
  bar_label_decorator.BarLabelAnchor = class BarLabelAnchor extends core.Object {
    toString() {
      return this[S$1._name$21];
    }
  };
  (bar_label_decorator.BarLabelAnchor.new = function(index, _name) {
    this.index = index;
    this[S$1._name$21] = _name;
    ;
  }).prototype = bar_label_decorator.BarLabelAnchor.prototype;
  dart.addTypeTests(bar_label_decorator.BarLabelAnchor);
  dart.addTypeCaches(bar_label_decorator.BarLabelAnchor);
  dart.setLibraryUri(bar_label_decorator.BarLabelAnchor, I[132]);
  dart.setFieldSignature(bar_label_decorator.BarLabelAnchor, () => ({
    __proto__: dart.getFields(bar_label_decorator.BarLabelAnchor.__proto__),
    index: dart.finalFieldType(core.int),
    [S$1._name$21]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(bar_label_decorator.BarLabelAnchor, ['toString']);
  bar_label_decorator.BarLabelAnchor.start = C[144] || CT.C144;
  bar_label_decorator.BarLabelAnchor.middle = C[143] || CT.C143;
  bar_label_decorator.BarLabelAnchor.end = C[142] || CT.C142;
  bar_label_decorator.BarLabelAnchor.values = C[150] || CT.C150;
  const _is_BarErrorDecorator_default = Symbol('_is_BarErrorDecorator_default');
  bar_error_decorator.BarErrorDecorator$ = dart.generic(D => {
    var ImmutableBarRendererElementOfD = () => (ImmutableBarRendererElementOfD = dart.constFn(bar_renderer.ImmutableBarRendererElement$(D)))();
    var IterableOfImmutableBarRendererElementOfD = () => (IterableOfImmutableBarRendererElementOfD = dart.constFn(core.Iterable$(ImmutableBarRendererElementOfD())))();
    class BarErrorDecorator extends bar_renderer_decorator.BarRendererDecorator$(D) {
      get strokeWidthPx() {
        return this[S$1.strokeWidthPx$12];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get endpointLengthPx() {
        return this[S$1.endpointLengthPx];
      }
      set endpointLengthPx(value) {
        super.endpointLengthPx = value;
      }
      get outlineWidthPx() {
        return this[S$1.outlineWidthPx];
      }
      set outlineWidthPx(value) {
        super.outlineWidthPx = value;
      }
      get strokeColor() {
        return this[S$1.strokeColor$3];
      }
      set strokeColor(value) {
        super.strokeColor = value;
      }
      get outlineColor() {
        return this[S$1.outlineColor];
      }
      set outlineColor(value) {
        super.outlineColor = value;
      }
      decorate(barElements, canvas, graphicsFactory, opts) {
        let t103, t103$, t103$0, t103$1;
        IterableOfImmutableBarRendererElementOfD().as(barElements);
        let drawBounds = opts && 'drawBounds' in opts ? opts.drawBounds : null;
        let animationPercent = opts && 'animationPercent' in opts ? opts.animationPercent : null;
        let renderingVertically = opts && 'renderingVertically' in opts ? opts.renderingVertically : null;
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        if (animationPercent !== 1.0) {
          return;
        }
        for (let element of barElements) {
          let bounds = dart.nullCheck(element.bounds);
          let datumIndex = element.index;
          let series = dart.nullCheck(element.series);
          let measureLowerBoundFn = series.measureLowerBoundFn;
          let measureUpperBoundFn = series.measureUpperBoundFn;
          if (measureLowerBoundFn != null && measureUpperBoundFn != null) {
            let measureOffsetFn = dart.nullCheck(series.measureOffsetFn);
            let measureAxis = T$.ImmutableAxisOfnum().as(series.getAttr(T$.AxisOfObject(), axis$.measureAxisKey));
            if (renderingVertically) {
              let startY = dart.nullCheck(measureAxis.getLocation(dart.notNull((t103 = measureLowerBoundFn(datumIndex), t103 == null ? 0 : t103)) + dart.nullCheck(measureOffsetFn(datumIndex))));
              let endY = dart.nullCheck(measureAxis.getLocation(dart.notNull((t103$ = measureUpperBoundFn(datumIndex), t103$ == null ? 0 : t103$)) + dart.nullCheck(measureOffsetFn(datumIndex))));
              if (startY !== endY) {
                let barWidth = bounds[S$.$right] - bounds[S$.$left];
                let x = (bounds[S$.$left] + bounds[S$.$right]) / 2;
                let rectWidth = math.min(core.double, this.strokeWidthPx + 2 * this.outlineWidthPx, barWidth[S$.$toDouble]());
                let strokeWidth = rectWidth - 2 * this.outlineWidthPx;
                let rectEndpointLength = math.min(core.double, this.endpointLengthPx + 2 * this.outlineWidthPx, barWidth[S$.$toDouble]());
                let endpointLength = rectEndpointLength - 2 * this.outlineWidthPx;
                if (this.outlineWidthPx > 0) {
                  canvas.drawRect(T$.RectangleOfnum().fromPoints(new (T$.PointOfnum()).new(x - rectWidth / 2, startY), new (T$.PointOfnum()).new(x + rectWidth / 2, endY)), {fill: this.outlineColor, strokeWidthPx: this.outlineWidthPx});
                  canvas.drawRect(new (T$.RectangleOfnum()).new(x - rectEndpointLength / 2, startY - rectWidth / 2, rectEndpointLength, rectWidth), {fill: this.outlineColor, strokeWidthPx: this.outlineWidthPx});
                  canvas.drawRect(new (T$.RectangleOfnum()).new(x - rectEndpointLength / 2, endY - rectWidth / 2, rectEndpointLength, rectWidth), {fill: this.outlineColor, strokeWidthPx: this.outlineWidthPx});
                }
                canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([new (T$.PointOfnum()).new(x, startY), new (T$.PointOfnum()).new(x, endY)]), stroke: this.strokeColor, strokeWidthPx: strokeWidth});
                canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([new (T$.PointOfnum()).new(x - endpointLength / 2, startY), new (T$.PointOfnum()).new(x + endpointLength / 2, startY)]), stroke: this.strokeColor, strokeWidthPx: strokeWidth});
                canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([new (T$.PointOfnum()).new(x - endpointLength / 2, endY), new (T$.PointOfnum()).new(x + endpointLength / 2, endY)]), stroke: this.strokeColor, strokeWidthPx: strokeWidth});
              }
            } else {
              let startX = dart.nullCheck(measureAxis.getLocation(dart.notNull((t103$0 = measureLowerBoundFn(datumIndex), t103$0 == null ? 0 : t103$0)) + dart.nullCheck(measureOffsetFn(datumIndex))));
              let endX = dart.nullCheck(measureAxis.getLocation(dart.notNull((t103$1 = measureUpperBoundFn(datumIndex), t103$1 == null ? 0 : t103$1)) + dart.nullCheck(measureOffsetFn(datumIndex))));
              if (startX !== endX) {
                let barWidth = bounds[S$.$bottom] - bounds[S$.$top];
                let y = (bounds[S$.$top] + bounds[S$.$bottom]) / 2;
                let rectWidth = math.min(core.double, this.strokeWidthPx + 2 * this.outlineWidthPx, barWidth[S$.$toDouble]());
                let strokeWidth = rectWidth - 2 * this.outlineWidthPx;
                let rectEndpointLength = math.min(core.double, this.endpointLengthPx + 2 * this.outlineWidthPx, barWidth[S$.$toDouble]());
                let endpointLength = rectEndpointLength - 2 * this.outlineWidthPx;
                if (this.outlineWidthPx > 0) {
                  canvas.drawRect(T$.RectangleOfnum().fromPoints(new (T$.PointOfnum()).new(startX, y - rectWidth / 2), new (T$.PointOfnum()).new(endX, y + rectWidth / 2)), {fill: this.outlineColor, strokeWidthPx: this.outlineWidthPx});
                  canvas.drawRect(new (T$.RectangleOfnum()).new(startX - rectWidth / 2, y - rectEndpointLength / 2, rectWidth, rectEndpointLength), {fill: this.outlineColor, strokeWidthPx: this.outlineWidthPx});
                  canvas.drawRect(new (T$.RectangleOfnum()).new(endX - rectWidth / 2, y - rectEndpointLength / 2, rectWidth, rectEndpointLength), {fill: this.outlineColor, strokeWidthPx: this.outlineWidthPx});
                }
                canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([new (T$.PointOfnum()).new(startX, y), new (T$.PointOfnum()).new(endX, y)]), stroke: this.strokeColor, strokeWidthPx: strokeWidth});
                canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([new (T$.PointOfnum()).new(startX, y - endpointLength / 2), new (T$.PointOfnum()).new(startX, y + endpointLength / 2)]), stroke: this.strokeColor, strokeWidthPx: strokeWidth});
                canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([new (T$.PointOfnum()).new(endX, y - endpointLength / 2), new (T$.PointOfnum()).new(endX, y + endpointLength / 2)]), stroke: this.strokeColor, strokeWidthPx: strokeWidth});
              }
            }
          }
        }
      }
    }
    (BarErrorDecorator.new = function(opts) {
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : C[151] || CT.C151;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 1;
      let endpointLengthPx = opts && 'endpointLengthPx' in opts ? opts.endpointLengthPx : 16;
      let outlineWidthPx = opts && 'outlineWidthPx' in opts ? opts.outlineWidthPx : 0;
      let outlineColor = opts && 'outlineColor' in opts ? opts.outlineColor : C[152] || CT.C152;
      this[S$1.strokeColor$3] = strokeColor;
      this[S$1.strokeWidthPx$12] = strokeWidthPx;
      this[S$1.endpointLengthPx] = endpointLengthPx;
      this[S$1.outlineWidthPx] = outlineWidthPx;
      this[S$1.outlineColor] = outlineColor;
      BarErrorDecorator.__proto__.new.call(this);
      ;
    }).prototype = BarErrorDecorator.prototype;
    dart.addTypeTests(BarErrorDecorator);
    BarErrorDecorator.prototype[_is_BarErrorDecorator_default] = true;
    dart.addTypeCaches(BarErrorDecorator);
    dart.setMethodSignature(BarErrorDecorator, () => ({
      __proto__: dart.getMethods(BarErrorDecorator.__proto__),
      decorate: dart.fnType(dart.void, [dart.nullable(core.Object), chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory], {animationPercent: core.double, drawBounds: math.Rectangle$(core.num), renderingVertically: core.bool, rtl: core.bool}, {})
    }));
    dart.setLibraryUri(BarErrorDecorator, I[133]);
    dart.setFieldSignature(BarErrorDecorator, () => ({
      __proto__: dart.getFields(BarErrorDecorator.__proto__),
      strokeWidthPx: dart.finalFieldType(core.double),
      endpointLengthPx: dart.finalFieldType(core.double),
      outlineWidthPx: dart.finalFieldType(core.double),
      strokeColor: dart.finalFieldType(color$.Color),
      outlineColor: dart.finalFieldType(color$.Color)
    }));
    return BarErrorDecorator;
  });
  bar_error_decorator.BarErrorDecorator = bar_error_decorator.BarErrorDecorator$();
  dart.defineLazy(bar_error_decorator.BarErrorDecorator, {
    /*bar_error_decorator.BarErrorDecorator._defaultStrokeColor*/get _defaultStrokeColor() {
      return C[151] || CT.C151;
    },
    /*bar_error_decorator.BarErrorDecorator._defaultStrokeWidthPx*/get _defaultStrokeWidthPx() {
      return 1;
    },
    /*bar_error_decorator.BarErrorDecorator._defaultEndpointLengthPx*/get _defaultEndpointLengthPx() {
      return 16;
    },
    /*bar_error_decorator.BarErrorDecorator._defaultOutlineColor*/get _defaultOutlineColor() {
      return C[152] || CT.C152;
    },
    /*bar_error_decorator.BarErrorDecorator._defaultOutlineWidthPx*/get _defaultOutlineWidthPx() {
      return 0;
    }
  }, false);
  dart.addTypeTests(bar_error_decorator.BarErrorDecorator, _is_BarErrorDecorator_default);
  const _is_StaticTickProvider_default = Symbol('_is_StaticTickProvider_default');
  static_tick_provider.StaticTickProvider$ = dart.generic(D => {
    var MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    var TickFormatterOfD = () => (TickFormatterOfD = dart.constFn(tick_formatter.TickFormatter$(D)))();
    var MapOfD$String = () => (MapOfD$String = dart.constFn(core.Map$(D, core.String)))();
    var TickDrawStrategyOfD = () => (TickDrawStrategyOfD = dart.constFn(tick_draw_strategy.TickDrawStrategy$(D)))();
    var TickHintOfD = () => (TickHintOfD = dart.constFn(tick_provider.TickHint$(D)))();
    var TickHintNOfD = () => (TickHintNOfD = dart.constFn(dart.nullable(TickHintOfD())))();
    var TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    var JSArrayOfTickOfD = () => (JSArrayOfTickOfD = dart.constFn(_interceptors.JSArray$(TickOfD())))();
    var TickSpecOfD = () => (TickSpecOfD = dart.constFn(tick_spec.TickSpec$(D)))();
    var TickSpecOfDToD = () => (TickSpecOfDToD = dart.constFn(dart.fnType(D, [TickSpecOfD()])))();
    class StaticTickProvider extends tick_provider.TickProvider$(D) {
      get tickSpec() {
        return this[S$1.tickSpec$1];
      }
      set tickSpec(value) {
        super.tickSpec = value;
      }
      getTicks(opts) {
        let t107, t107$, t107$0;
        let context = opts && 'context' in opts ? opts.context : null;
        let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
        let scale = opts && 'scale' in opts ? opts.scale : null;
        MutableScaleOfD().as(scale);
        let formatter = opts && 'formatter' in opts ? opts.formatter : null;
        TickFormatterOfD().as(formatter);
        let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
        MapOfD$String().as(formatterValueCache);
        let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
        TickDrawStrategyOfD().as(tickDrawStrategy);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
        let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
        TickHintNOfD().as(tickHint);
        let ticks = JSArrayOfTickOfD().of([]);
        let allTicksHaveLabels = true;
        for (let spec of this.tickSpec) {
          if (numeric_scale.NumericScale.is(scale) || date_time_scale.DateTimeScale.is(scale)) {
            scale.addDomain(spec.value);
          }
          allTicksHaveLabels = allTicksHaveLabels && spec.label != null;
        }
        let formattedValues = null;
        function formattedValues$35get() {
          let t104;
          t104 = formattedValues;
          return t104 == null ? dart.throw(new _internal.LateError.localNI("formattedValues")) : t104;
        }
        dart.fn(formattedValues$35get, T$0.VoidToListOfString());
        function formattedValues$35set(t105) {
          return formattedValues = t105;
        }
        dart.fn(formattedValues$35set, T$0.ListOfStringTodynamic());
        if (!allTicksHaveLabels) {
          formattedValues$35set(formatter.format(this.tickSpec[S$.$map](D, dart.fn(spec => spec.value, TickSpecOfDToD()))[S$.$toList](), formatterValueCache, {stepSize: scale.domainStepSize}));
        }
        for (let i = 0; i < this.tickSpec[S$.$length]; i = i + 1) {
          let spec = this.tickSpec[S$.$_get](i);
          if (scale.compareDomainValueToViewport(spec.value) === 0) {
            let tick = new (TickOfD()).new({value: spec.value, textElement: graphicsFactory.createTextElement((t107 = spec.label, t107 == null ? formattedValues$35get()[S$.$_get](i) : t107)), locationPx: (t107$ = scale._get(spec.value), t107$ == null ? null : t107$[S$.$toDouble]())});
            let style = spec.style;
            if (style != null) {
              dart.nullCheck(tick.textElement).textStyle = (t107$0 = graphicsFactory.createTextPaint(), (() => {
                t107$0.fontFamily = style.fontFamily;
                t107$0.fontSize = style.fontSize;
                t107$0.color = style.color;
                t107$0.lineHeight = style.lineHeight;
                return t107$0;
              })());
            }
            ticks[S$.$add](tick);
          }
        }
        tickDrawStrategy.decorateTicks(ticks);
        return ticks;
      }
      _equals(other) {
        if (other == null) return false;
        return static_tick_provider.StaticTickProvider.is(other) && this.tickSpec[S$.$_equals](other.tickSpec);
      }
      get hashCode() {
        return this.tickSpec[S$.$hashCode];
      }
    }
    (StaticTickProvider.new = function(tickSpec) {
      this[S$1.tickSpec$1] = tickSpec;
      ;
    }).prototype = StaticTickProvider.prototype;
    dart.addTypeTests(StaticTickProvider);
    StaticTickProvider.prototype[_is_StaticTickProvider_default] = true;
    dart.addTypeCaches(StaticTickProvider);
    dart.setMethodSignature(StaticTickProvider, () => ({
      __proto__: dart.getMethods(StaticTickProvider.__proto__),
      getTicks: dart.fnType(core.List$(tick.Tick$(D)), [], {context: dart.nullable(chart_context.ChartContext), formatter: dart.nullable(core.Object), formatterValueCache: dart.nullable(core.Object), graphicsFactory: graphics_factory.GraphicsFactory, orientation: dart.nullable(axis$.AxisOrientation), scale: dart.nullable(core.Object), tickDrawStrategy: dart.nullable(core.Object), tickHint: dart.nullable(core.Object), viewportExtensionEnabled: core.bool}, {})
    }));
    dart.setLibraryUri(StaticTickProvider, I[134]);
    dart.setFieldSignature(StaticTickProvider, () => ({
      __proto__: dart.getFields(StaticTickProvider.__proto__),
      tickSpec: dart.finalFieldType(core.List$(tick_spec.TickSpec$(D)))
    }));
    dart.defineExtensionMethods(StaticTickProvider, ['_equals']);
    dart.defineExtensionAccessors(StaticTickProvider, ['hashCode']);
    return StaticTickProvider;
  });
  static_tick_provider.StaticTickProvider = static_tick_provider.StaticTickProvider$();
  dart.addTypeTests(static_tick_provider.StaticTickProvider, _is_StaticTickProvider_default);
  const _is_Extents_default = Symbol('_is_Extents_default');
  scale$.Extents$ = dart.generic(D => {
    class Extents extends core.Object {}
    (Extents.new = function() {
      ;
    }).prototype = Extents.prototype;
    dart.addTypeTests(Extents);
    Extents.prototype[_is_Extents_default] = true;
    dart.addTypeCaches(Extents);
    dart.setLibraryUri(Extents, I[135]);
    return Extents;
  });
  scale$.Extents = scale$.Extents$();
  dart.addTypeTests(scale$.Extents, _is_Extents_default);
  date_time_extents.DateTimeExtents = class DateTimeExtents extends scale$.Extents$(core.DateTime) {
    get start() {
      return this[S$1.start];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[S$1.end];
    }
    set end(value) {
      super.end = value;
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_extents.DateTimeExtents.is(other) && this.start._equals(other.start) && this.end._equals(other.end);
    }
    get hashCode() {
      return this.start.hashCode + this.end.hashCode * 37;
    }
  };
  (date_time_extents.DateTimeExtents.new = function(opts) {
    let start = opts && 'start' in opts ? opts.start : null;
    let end = opts && 'end' in opts ? opts.end : null;
    this[S$1.start] = start;
    this[S$1.end] = end;
    ;
  }).prototype = date_time_extents.DateTimeExtents.prototype;
  dart.addTypeTests(date_time_extents.DateTimeExtents);
  dart.addTypeCaches(date_time_extents.DateTimeExtents);
  dart.setLibraryUri(date_time_extents.DateTimeExtents, I[136]);
  dart.setFieldSignature(date_time_extents.DateTimeExtents, () => ({
    __proto__: dart.getFields(date_time_extents.DateTimeExtents.__proto__),
    start: dart.finalFieldType(core.DateTime),
    end: dart.finalFieldType(core.DateTime)
  }));
  dart.defineExtensionMethods(date_time_extents.DateTimeExtents, ['_equals']);
  dart.defineExtensionAccessors(date_time_extents.DateTimeExtents, ['hashCode']);
  const _is_Scale_default = Symbol('_is_Scale_default');
  scale$.Scale$ = dart.generic(D => {
    class Scale extends core.Object {}
    (Scale.new = function() {
      ;
    }).prototype = Scale.prototype;
    dart.addTypeTests(Scale);
    Scale.prototype[_is_Scale_default] = true;
    dart.addTypeCaches(Scale);
    dart.setLibraryUri(Scale, I[135]);
    return Scale;
  });
  scale$.Scale = scale$.Scale$();
  dart.addTypeTests(scale$.Scale, _is_Scale_default);
  const _is_MutableScale_default = Symbol('_is_MutableScale_default');
  scale$.MutableScale$ = dart.generic(D => {
    class MutableScale extends scale$.Scale$(D) {}
    (MutableScale.new = function() {
      ;
    }).prototype = MutableScale.prototype;
    dart.addTypeTests(MutableScale);
    MutableScale.prototype[_is_MutableScale_default] = true;
    dart.addTypeCaches(MutableScale);
    dart.setLibraryUri(MutableScale, I[135]);
    return MutableScale;
  });
  scale$.MutableScale = scale$.MutableScale$();
  dart.addTypeTests(scale$.MutableScale, _is_MutableScale_default);
  date_time_scale.DateTimeScale = class DateTimeScale extends scale$.MutableScale$(core.DateTime) {
    get dateTimeFactory() {
      return this[S$1.dateTimeFactory$2];
    }
    set dateTimeFactory(value) {
      super.dateTimeFactory = value;
    }
    _get(domainValue) {
      core.DateTime.as(domainValue);
      return this[S$1._linearScale]._get(domainValue.millisecondsSinceEpoch);
    }
    reverse(pixelLocation) {
      return this.dateTimeFactory.createDateTimeFromMilliSecondsSinceEpoch(this[S$1._linearScale].reverse(pixelLocation)[S$.$round]());
    }
    resetDomain() {
      this[S$1._linearScale].resetDomain();
    }
    set stepSizeConfig(config) {
      this[S$1._linearScale].stepSizeConfig = config;
    }
    get stepSizeConfig() {
      return this[S$1._linearScale].stepSizeConfig;
    }
    set rangeBandConfig(barGroupWidthConfig) {
      this[S$1._linearScale].rangeBandConfig = barGroupWidthConfig;
    }
    setViewportSettings(viewportScale, viewportTranslatePx) {
      this[S$1._linearScale].setViewportSettings(viewportScale, viewportTranslatePx);
    }
    set range(extent) {
      this[S$1._linearScale].range = extent;
    }
    addDomain(domainValue) {
      core.DateTime.as(domainValue);
      this[S$1._linearScale].addDomain(domainValue.millisecondsSinceEpoch);
    }
    resetViewportSettings() {
      this[S$1._linearScale].resetViewportSettings();
    }
    get viewportDomain() {
      let extents = this[S$1._linearScale].viewportDomain;
      return new date_time_extents.DateTimeExtents.new({start: this.dateTimeFactory.createDateTimeFromMilliSecondsSinceEpoch(extents.min[S$.$toInt]()), end: this.dateTimeFactory.createDateTimeFromMilliSecondsSinceEpoch(extents.max[S$.$toInt]())});
    }
    set viewportDomain(extents) {
      this[S$1._linearScale].viewportDomain = new numeric_extents.NumericExtents.new(extents.start.millisecondsSinceEpoch, extents.end.millisecondsSinceEpoch);
    }
    copy() {
      return new date_time_scale.DateTimeScale._copy(this);
    }
    get viewportTranslatePx() {
      return this[S$1._linearScale].viewportTranslatePx;
    }
    get viewportScalingFactor() {
      return this[S$1._linearScale].viewportScalingFactor;
    }
    isRangeValueWithinViewport(rangeValue) {
      return this[S$1._linearScale].isRangeValueWithinViewport(rangeValue);
    }
    compareDomainValueToViewport(domainValue) {
      core.DateTime.as(domainValue);
      return this[S$1._linearScale].compareDomainValueToViewport(domainValue.millisecondsSinceEpoch);
    }
    get rangeBand() {
      return this[S$1._linearScale].rangeBand;
    }
    get stepSize() {
      return this[S$1._linearScale].stepSize;
    }
    get domainStepSize() {
      return this[S$1._linearScale].domainStepSize;
    }
    get rangeBandConfig() {
      return this[S$1._linearScale].rangeBandConfig;
    }
    get rangeWidth() {
      return this[S$1._linearScale].rangeWidth;
    }
    get range() {
      return this[S$1._linearScale].range;
    }
    canTranslate(domainValue) {
      core.DateTime.as(domainValue);
      return this[S$1._linearScale].canTranslate(domainValue.millisecondsSinceEpoch);
    }
    get dataExtent() {
      return this[S$1._linearScale].dataExtent;
    }
  };
  (date_time_scale.DateTimeScale.new = function(dateTimeFactory) {
    this[S$1.dateTimeFactory$2] = dateTimeFactory;
    this[S$1._linearScale] = new linear_scale.LinearScale.new();
    ;
  }).prototype = date_time_scale.DateTimeScale.prototype;
  (date_time_scale.DateTimeScale._copy = function(other) {
    this[S$1.dateTimeFactory$2] = other.dateTimeFactory;
    this[S$1._linearScale] = other[S$1._linearScale].copy();
    ;
  }).prototype = date_time_scale.DateTimeScale.prototype;
  dart.addTypeTests(date_time_scale.DateTimeScale);
  dart.addTypeCaches(date_time_scale.DateTimeScale);
  dart.setMethodSignature(date_time_scale.DateTimeScale, () => ({
    __proto__: dart.getMethods(date_time_scale.DateTimeScale.__proto__),
    _get: dart.fnType(core.num, [dart.nullable(core.Object)]),
    reverse: dart.fnType(core.DateTime, [core.double]),
    resetDomain: dart.fnType(dart.void, []),
    setViewportSettings: dart.fnType(dart.void, [core.double, core.double]),
    addDomain: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    resetViewportSettings: dart.fnType(dart.void, []),
    copy: dart.fnType(date_time_scale.DateTimeScale, []),
    isRangeValueWithinViewport: dart.fnType(core.bool, [core.double]),
    compareDomainValueToViewport: dart.fnType(core.int, [dart.nullable(core.Object)]),
    canTranslate: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(date_time_scale.DateTimeScale, () => ({
    __proto__: dart.getGetters(date_time_scale.DateTimeScale.__proto__),
    stepSizeConfig: scale$.StepSizeConfig,
    viewportDomain: date_time_extents.DateTimeExtents,
    viewportTranslatePx: core.double,
    viewportScalingFactor: core.double,
    rangeBand: core.double,
    stepSize: core.double,
    domainStepSize: core.double,
    rangeBandConfig: scale$.RangeBandConfig,
    rangeWidth: core.int,
    range: dart.nullable(scale$.ScaleOutputExtent),
    dataExtent: numeric_extents.NumericExtents
  }));
  dart.setSetterSignature(date_time_scale.DateTimeScale, () => ({
    __proto__: dart.getSetters(date_time_scale.DateTimeScale.__proto__),
    stepSizeConfig: scale$.StepSizeConfig,
    rangeBandConfig: scale$.RangeBandConfig,
    range: dart.nullable(scale$.ScaleOutputExtent),
    viewportDomain: date_time_extents.DateTimeExtents
  }));
  dart.setLibraryUri(date_time_scale.DateTimeScale, I[137]);
  dart.setFieldSignature(date_time_scale.DateTimeScale, () => ({
    __proto__: dart.getFields(date_time_scale.DateTimeScale.__proto__),
    dateTimeFactory: dart.finalFieldType(date_time_factory.DateTimeFactory),
    [S$1._linearScale]: dart.finalFieldType(linear_scale.LinearScale)
  }));
  const _is_EndPointsTickProvider_default = Symbol('_is_EndPointsTickProvider_default');
  end_points_tick_provider.EndPointsTickProvider$ = dart.generic(D => {
    var MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    var TickFormatterOfD = () => (TickFormatterOfD = dart.constFn(tick_formatter.TickFormatter$(D)))();
    var MapOfD$String = () => (MapOfD$String = dart.constFn(core.Map$(D, core.String)))();
    var TickDrawStrategyOfD = () => (TickDrawStrategyOfD = dart.constFn(tick_draw_strategy.TickDrawStrategy$(D)))();
    var TickHintOfD = () => (TickHintOfD = dart.constFn(tick_provider.TickHint$(D)))();
    var TickHintNOfD = () => (TickHintNOfD = dart.constFn(dart.nullable(TickHintOfD())))();
    var TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    var JSArrayOfTickOfD = () => (JSArrayOfTickOfD = dart.constFn(_interceptors.JSArray$(TickOfD())))();
    var JSArrayOfD = () => (JSArrayOfD = dart.constFn(_interceptors.JSArray$(D)))();
    class EndPointsTickProvider extends tick_provider.BaseTickProvider$(D) {
      getTicks(opts) {
        let t107, t107$;
        let context = opts && 'context' in opts ? opts.context : null;
        let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
        let scale = opts && 'scale' in opts ? opts.scale : null;
        MutableScaleOfD().as(scale);
        let formatter = opts && 'formatter' in opts ? opts.formatter : null;
        TickFormatterOfD().as(formatter);
        let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
        MapOfD$String().as(formatterValueCache);
        let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
        TickDrawStrategyOfD().as(tickDrawStrategy);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
        let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
        TickHintNOfD().as(tickHint);
        let ticks = JSArrayOfTickOfD().of([]);
        if (scale.domainStepSize[S$.$abs]() !== 1 / 0) {
          let start = this[S$1._getStartValue](tickHint, scale);
          let end = this[S$1._getEndValue](tickHint, scale);
          let labels = formatter.format(JSArrayOfD().of([start, end]), formatterValueCache, {stepSize: scale.domainStepSize});
          if (start != null) {
            ticks[S$.$add](new (TickOfD()).new({value: start, textElement: graphicsFactory.createTextElement(labels[S$.$_get](0)), locationPx: (t107 = scale._get(start), t107 == null ? null : t107[S$.$toDouble]())}));
          }
          if (end != null) {
            ticks[S$.$add](new (TickOfD()).new({value: end, textElement: graphicsFactory.createTextElement(labels[S$.$_get](1)), locationPx: (t107$ = scale._get(end), t107$ == null ? null : t107$[S$.$toDouble]())}));
          }
          tickDrawStrategy.decorateTicks(ticks);
        }
        return ticks;
      }
      [S$1._getStartValue](tickHint, scale) {
        let start = null;
        if (tickHint != null) {
          start = tickHint.start;
        } else {
          let _scale = scale;
          if (numeric_scale.NumericScale.is(_scale)) {
            start = _scale.viewportDomain.min;
          } else if (date_time_scale.DateTimeScale.is(_scale)) {
            start = _scale.viewportDomain.start;
          } else if (ordinal_scale.OrdinalScale.is(_scale)) {
            start = _scale.domain.first;
          } else {
            dart.throw(new core.UnsupportedError.new("Unrecognized scale: {scale.runtimeType}"));
          }
        }
        return D.as(start);
      }
      [S$1._getEndValue](tickHint, scale) {
        let end = null;
        if (tickHint != null) {
          end = tickHint.end;
        } else {
          let _scale = scale;
          if (numeric_scale.NumericScale.is(_scale)) {
            end = _scale.viewportDomain.max;
          } else if (date_time_scale.DateTimeScale.is(_scale)) {
            end = _scale.viewportDomain.end;
          } else if (ordinal_scale.OrdinalScale.is(_scale)) {
            end = _scale.domain.last;
          } else {
            dart.throw(new core.UnsupportedError.new("Unrecognized scale: {scale.runtimeType}"));
          }
        }
        return D.as(end);
      }
    }
    (EndPointsTickProvider.new = function() {
      EndPointsTickProvider.__proto__.new.call(this);
      ;
    }).prototype = EndPointsTickProvider.prototype;
    dart.addTypeTests(EndPointsTickProvider);
    EndPointsTickProvider.prototype[_is_EndPointsTickProvider_default] = true;
    dart.addTypeCaches(EndPointsTickProvider);
    dart.setMethodSignature(EndPointsTickProvider, () => ({
      __proto__: dart.getMethods(EndPointsTickProvider.__proto__),
      getTicks: dart.fnType(core.List$(tick.Tick$(D)), [], {context: dart.nullable(chart_context.ChartContext), formatter: dart.nullable(core.Object), formatterValueCache: dart.nullable(core.Object), graphicsFactory: graphics_factory.GraphicsFactory, orientation: dart.nullable(axis$.AxisOrientation), scale: dart.nullable(core.Object), tickDrawStrategy: dart.nullable(core.Object), tickHint: dart.nullable(core.Object), viewportExtensionEnabled: core.bool}, {}),
      [S$1._getStartValue]: dart.fnType(D, [dart.nullable(tick_provider.TickHint$(D)), scale$.MutableScale$(D)]),
      [S$1._getEndValue]: dart.fnType(D, [dart.nullable(tick_provider.TickHint$(D)), scale$.MutableScale$(D)])
    }));
    dart.setLibraryUri(EndPointsTickProvider, I[138]);
    return EndPointsTickProvider;
  });
  end_points_tick_provider.EndPointsTickProvider = end_points_tick_provider.EndPointsTickProvider$();
  dart.addTypeTests(end_points_tick_provider.EndPointsTickProvider, _is_EndPointsTickProvider_default);
  numeric_axis_spec.NumericTickProviderSpec = class NumericTickProviderSpec extends axis_spec.TickProviderSpec$(core.num) {};
  (numeric_axis_spec.NumericTickProviderSpec.new = function() {
    ;
  }).prototype = numeric_axis_spec.NumericTickProviderSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.NumericTickProviderSpec);
  dart.addTypeCaches(numeric_axis_spec.NumericTickProviderSpec);
  dart.setLibraryUri(numeric_axis_spec.NumericTickProviderSpec, I[78]);
  numeric_axis_spec.NumericTickFormatterSpec = class NumericTickFormatterSpec extends axis_spec.TickFormatterSpec$(core.num) {};
  (numeric_axis_spec.NumericTickFormatterSpec.new = function() {
    ;
  }).prototype = numeric_axis_spec.NumericTickFormatterSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.NumericTickFormatterSpec);
  dart.addTypeCaches(numeric_axis_spec.NumericTickFormatterSpec);
  dart.setLibraryUri(numeric_axis_spec.NumericTickFormatterSpec, I[78]);
  numeric_axis_spec.NumericEndPointsTickProviderSpec = class NumericEndPointsTickProviderSpec extends core.Object {
    createTickProvider(context) {
      return new (T$0.EndPointsTickProviderOfnum()).new();
    }
    _equals(other) {
      if (other == null) return false;
      return numeric_axis_spec.NumericEndPointsTickProviderSpec.is(other);
    }
  };
  (numeric_axis_spec.NumericEndPointsTickProviderSpec.new = function() {
    ;
  }).prototype = numeric_axis_spec.NumericEndPointsTickProviderSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.NumericEndPointsTickProviderSpec);
  dart.addTypeCaches(numeric_axis_spec.NumericEndPointsTickProviderSpec);
  numeric_axis_spec.NumericEndPointsTickProviderSpec[dart.implements] = () => [numeric_axis_spec.NumericTickProviderSpec];
  dart.setMethodSignature(numeric_axis_spec.NumericEndPointsTickProviderSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.NumericEndPointsTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(end_points_tick_provider.EndPointsTickProvider$(core.num), [chart_context.ChartContext])
  }));
  dart.setLibraryUri(numeric_axis_spec.NumericEndPointsTickProviderSpec, I[78]);
  dart.defineExtensionMethods(numeric_axis_spec.NumericEndPointsTickProviderSpec, ['_equals']);
  numeric_axis_spec.StaticNumericTickProviderSpec = class StaticNumericTickProviderSpec extends core.Object {
    get tickSpecs() {
      return this[S$1.tickSpecs$3];
    }
    set tickSpecs(value) {
      super.tickSpecs = value;
    }
    createTickProvider(context) {
      return new (T$0.StaticTickProviderOfnum()).new(this.tickSpecs);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || numeric_axis_spec.StaticNumericTickProviderSpec.is(other) && this.tickSpecs[S$.$_equals](other.tickSpecs);
    }
    get hashCode() {
      return this.tickSpecs[S$.$hashCode];
    }
  };
  (numeric_axis_spec.StaticNumericTickProviderSpec.new = function(tickSpecs) {
    this[S$1.tickSpecs$3] = tickSpecs;
    ;
  }).prototype = numeric_axis_spec.StaticNumericTickProviderSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.StaticNumericTickProviderSpec);
  dart.addTypeCaches(numeric_axis_spec.StaticNumericTickProviderSpec);
  numeric_axis_spec.StaticNumericTickProviderSpec[dart.implements] = () => [numeric_axis_spec.NumericTickProviderSpec];
  dart.setMethodSignature(numeric_axis_spec.StaticNumericTickProviderSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.StaticNumericTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(static_tick_provider.StaticTickProvider$(core.num), [chart_context.ChartContext])
  }));
  dart.setLibraryUri(numeric_axis_spec.StaticNumericTickProviderSpec, I[78]);
  dart.setFieldSignature(numeric_axis_spec.StaticNumericTickProviderSpec, () => ({
    __proto__: dart.getFields(numeric_axis_spec.StaticNumericTickProviderSpec.__proto__),
    tickSpecs: dart.finalFieldType(core.List$(tick_spec.TickSpec$(core.num)))
  }));
  dart.defineExtensionMethods(numeric_axis_spec.StaticNumericTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(numeric_axis_spec.StaticNumericTickProviderSpec, ['hashCode']);
  numeric_axis_spec.BasicNumericTickFormatterSpec = class BasicNumericTickFormatterSpec extends core.Object {
    get formatter() {
      return this[S$1.formatter$1];
    }
    set formatter(value) {
      super.formatter = value;
    }
    get numberFormat() {
      return this[S$1.numberFormat];
    }
    set numberFormat(value) {
      super.numberFormat = value;
    }
    createTickFormatter(context) {
      return this.numberFormat != null ? tick_formatter.NumericTickFormatter.fromNumberFormat(dart.nullCheck(this.numberFormat)) : tick_formatter.NumericTickFormatter.new({formatter: this.formatter});
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || numeric_axis_spec.BasicNumericTickFormatterSpec.is(other) && dart.equals(this.formatter, other.formatter) && dart.equals(this.numberFormat, other.numberFormat);
    }
    get hashCode() {
      let hashcode = dart.hashCode(this.formatter);
      hashcode = hashcode * 37 * dart.hashCode(this.numberFormat);
      return hashcode;
    }
  };
  (numeric_axis_spec.BasicNumericTickFormatterSpec.new = function(formatter) {
    this[S$1.formatter$1] = formatter;
    this[S$1.numberFormat] = null;
    ;
  }).prototype = numeric_axis_spec.BasicNumericTickFormatterSpec.prototype;
  (numeric_axis_spec.BasicNumericTickFormatterSpec.fromNumberFormat = function(numberFormat) {
    this[S$1.numberFormat] = numberFormat;
    this[S$1.formatter$1] = null;
    ;
  }).prototype = numeric_axis_spec.BasicNumericTickFormatterSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.BasicNumericTickFormatterSpec);
  dart.addTypeCaches(numeric_axis_spec.BasicNumericTickFormatterSpec);
  numeric_axis_spec.BasicNumericTickFormatterSpec[dart.implements] = () => [numeric_axis_spec.NumericTickFormatterSpec];
  dart.setMethodSignature(numeric_axis_spec.BasicNumericTickFormatterSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.BasicNumericTickFormatterSpec.__proto__),
    createTickFormatter: dart.fnType(tick_formatter.NumericTickFormatter, [chart_context.ChartContext])
  }));
  dart.setLibraryUri(numeric_axis_spec.BasicNumericTickFormatterSpec, I[78]);
  dart.setFieldSignature(numeric_axis_spec.BasicNumericTickFormatterSpec, () => ({
    __proto__: dart.getFields(numeric_axis_spec.BasicNumericTickFormatterSpec.__proto__),
    formatter: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [dart.nullable(core.num)]))),
    numberFormat: dart.finalFieldType(dart.nullable(number_format.NumberFormat))
  }));
  dart.defineExtensionMethods(numeric_axis_spec.BasicNumericTickFormatterSpec, ['_equals']);
  dart.defineExtensionAccessors(numeric_axis_spec.BasicNumericTickFormatterSpec, ['hashCode']);
  const _is_RenderSpec_default = Symbol('_is_RenderSpec_default');
  axis_spec.RenderSpec$ = dart.generic(D => {
    class RenderSpec extends core.Object {}
    (RenderSpec.new = function() {
      ;
    }).prototype = RenderSpec.prototype;
    dart.addTypeTests(RenderSpec);
    RenderSpec.prototype[_is_RenderSpec_default] = true;
    dart.addTypeCaches(RenderSpec);
    dart.setLibraryUri(RenderSpec, I[77]);
    return RenderSpec;
  });
  axis_spec.RenderSpec = axis_spec.RenderSpec$();
  dart.addTypeTests(axis_spec.RenderSpec, _is_RenderSpec_default);
  const _is_NoneRenderSpec_default = Symbol('_is_NoneRenderSpec_default');
  none_draw_strategy.NoneRenderSpec$ = dart.generic(D => {
    var NoneDrawStrategyOfD = () => (NoneDrawStrategyOfD = dart.constFn(none_draw_strategy.NoneDrawStrategy$(D)))();
    class NoneRenderSpec extends axis_spec.RenderSpec$(D) {
      get axisLineStyle() {
        return this[S$1.axisLineStyle$2];
      }
      set axisLineStyle(value) {
        super.axisLineStyle = value;
      }
      createDrawStrategy(context, graphicFactory) {
        return new (NoneDrawStrategyOfD()).new(context, graphicFactory, {axisLineStyleSpec: this.axisLineStyle});
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || none_draw_strategy.NoneRenderSpec.is(other);
      }
      get hashCode() {
        return 0;
      }
    }
    (NoneRenderSpec.new = function(opts) {
      let axisLineStyle = opts && 'axisLineStyle' in opts ? opts.axisLineStyle : null;
      this[S$1.axisLineStyle$2] = axisLineStyle;
      NoneRenderSpec.__proto__.new.call(this);
      ;
    }).prototype = NoneRenderSpec.prototype;
    dart.addTypeTests(NoneRenderSpec);
    NoneRenderSpec.prototype[_is_NoneRenderSpec_default] = true;
    dart.addTypeCaches(NoneRenderSpec);
    dart.setMethodSignature(NoneRenderSpec, () => ({
      __proto__: dart.getMethods(NoneRenderSpec.__proto__),
      createDrawStrategy: dart.fnType(tick_draw_strategy.TickDrawStrategy$(D), [chart_context.ChartContext, graphics_factory.GraphicsFactory])
    }));
    dart.setLibraryUri(NoneRenderSpec, I[139]);
    dart.setFieldSignature(NoneRenderSpec, () => ({
      __proto__: dart.getFields(NoneRenderSpec.__proto__),
      axisLineStyle: dart.finalFieldType(dart.nullable(axis_spec.LineStyleSpec))
    }));
    dart.defineExtensionMethods(NoneRenderSpec, ['_equals']);
    dart.defineExtensionAccessors(NoneRenderSpec, ['hashCode']);
    return NoneRenderSpec;
  });
  none_draw_strategy.NoneRenderSpec = none_draw_strategy.NoneRenderSpec$();
  dart.addTypeTests(none_draw_strategy.NoneRenderSpec, _is_NoneRenderSpec_default);
  const _is_NoneDrawStrategy_default = Symbol('_is_NoneDrawStrategy_default');
  none_draw_strategy.NoneDrawStrategy$ = dart.generic(D => {
    var TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    var ListOfTickOfD = () => (ListOfTickOfD = dart.constFn(core.List$(TickOfD())))();
    var ListNOfTickOfD = () => (ListNOfTickOfD = dart.constFn(dart.nullable(ListOfTickOfD())))();
    var CollisionReportOfD = () => (CollisionReportOfD = dart.constFn(collision_report.CollisionReport$(D)))();
    var TickOfDTovoid = () => (TickOfDTovoid = dart.constFn(dart.fnType(dart.void, [TickOfD()])))();
    class NoneDrawStrategy extends core.Object {
      get axisLineStyle() {
        return this[S$1.axisLineStyle$3];
      }
      set axisLineStyle(value) {
        this[S$1.axisLineStyle$3] = value;
      }
      get noneTextStyle() {
        return this[S$1.noneTextStyle];
      }
      set noneTextStyle(value) {
        this[S$1.noneTextStyle] = value;
      }
      updateTickWidth(ticks, maxWidth, maxHeight, orientation, opts) {
        ListOfTickOfD().as(ticks);
        let collision = opts && 'collision' in opts ? opts.collision : false;
      }
      collides(ticks, orientation) {
        ListNOfTickOfD().as(ticks);
        return new (CollisionReportOfD()).new({ticksCollide: false, ticks: ticks});
      }
      decorateTicks(ticks) {
        ListOfTickOfD().as(ticks);
        ticks[S$.$forEach](dart.fn(tick => dart.nullCheck(tick.textElement).textStyle = this.noneTextStyle, TickOfDTovoid()));
      }
      drawAxisLine(canvas, orientation, axisBounds) {
        let start = null;
        let end = null;
        switch (orientation) {
          case C[115] || CT.C115:
          {
            start = axisBounds[S$0.$bottomLeft];
            end = axisBounds[S$.$bottomRight];
            break;
          }
          case C[117] || CT.C117:
          {
            start = axisBounds[S$.$topLeft];
            end = axisBounds[S$0.$topRight];
            break;
          }
          case C[116] || CT.C116:
          {
            start = axisBounds[S$.$topLeft];
            end = axisBounds[S$0.$bottomLeft];
            break;
          }
          case C[118] || CT.C118:
          {
            start = axisBounds[S$0.$topRight];
            end = axisBounds[S$.$bottomRight];
            break;
          }
        }
        canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([start, end]), dashPattern: this.axisLineStyle.dashPattern, fill: this.axisLineStyle.color, stroke: this.axisLineStyle.color, strokeWidthPx: this.axisLineStyle.strokeWidth[S$.$toDouble]()});
      }
      draw(canvas, tick, opts) {
        TickOfD().as(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
        let collision = opts && 'collision' in opts ? opts.collision : false;
      }
      measureHorizontallyDrawnTicks(ticks, maxWidth, maxHeight, opts) {
        ListOfTickOfD().as(ticks);
        let collision = opts && 'collision' in opts ? opts.collision : false;
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: 0, preferredHeight: 0});
      }
      measureVerticallyDrawnTicks(ticks, maxWidth, maxHeight, opts) {
        ListOfTickOfD().as(ticks);
        let collision = opts && 'collision' in opts ? opts.collision : false;
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: 0, preferredHeight: 0});
      }
    }
    (NoneDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t107;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      this[S$1.axisLineStyle$3] = style_factory.StyleFactory.style.createAxisLineStyle(graphicsFactory, axisLineStyleSpec);
      this[S$1.noneTextStyle] = (t107 = graphicsFactory.createTextPaint(), (() => {
        t107.color = color$.Color.transparent;
        t107.fontSize = 0;
        return t107;
      })());
      ;
    }).prototype = NoneDrawStrategy.prototype;
    dart.addTypeTests(NoneDrawStrategy);
    NoneDrawStrategy.prototype[_is_NoneDrawStrategy_default] = true;
    dart.addTypeCaches(NoneDrawStrategy);
    NoneDrawStrategy[dart.implements] = () => [tick_draw_strategy.TickDrawStrategy$(D)];
    dart.setMethodSignature(NoneDrawStrategy, () => ({
      __proto__: dart.getMethods(NoneDrawStrategy.__proto__),
      updateTickWidth: dart.fnType(dart.void, [dart.nullable(core.Object), core.int, core.int, axis$.AxisOrientation], {collision: core.bool}, {}),
      collides: dart.fnType(collision_report.CollisionReport$(D), [dart.nullable(core.Object), dart.nullable(axis$.AxisOrientation)]),
      decorateTicks: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      drawAxisLine: dart.fnType(dart.void, [chart_canvas.ChartCanvas, axis$.AxisOrientation, math.Rectangle$(core.int)]),
      draw: dart.fnType(dart.void, [chart_canvas.ChartCanvas, dart.nullable(core.Object)], {axisBounds: math.Rectangle$(core.int), collision: core.bool, drawAreaBounds: math.Rectangle$(core.int), isFirst: core.bool, isLast: core.bool, orientation: axis$.AxisOrientation}, {}),
      measureHorizontallyDrawnTicks: dart.fnType(layout_view.ViewMeasuredSizes, [dart.nullable(core.Object), core.int, core.int], {collision: core.bool}, {}),
      measureVerticallyDrawnTicks: dart.fnType(layout_view.ViewMeasuredSizes, [dart.nullable(core.Object), core.int, core.int], {collision: core.bool}, {})
    }));
    dart.setLibraryUri(NoneDrawStrategy, I[139]);
    dart.setFieldSignature(NoneDrawStrategy, () => ({
      __proto__: dart.getFields(NoneDrawStrategy.__proto__),
      axisLineStyle: dart.fieldType(line_style.LineStyle),
      noneTextStyle: dart.fieldType(text_style.TextStyle)
    }));
    return NoneDrawStrategy;
  });
  none_draw_strategy.NoneDrawStrategy = none_draw_strategy.NoneDrawStrategy$();
  dart.addTypeTests(none_draw_strategy.NoneDrawStrategy, _is_NoneDrawStrategy_default);
  const _is_GridlineRendererSpec_default = Symbol('_is_GridlineRendererSpec_default');
  gridline_draw_strategy.GridlineRendererSpec$ = dart.generic(D => {
    var GridlineTickDrawStrategyOfD = () => (GridlineTickDrawStrategyOfD = dart.constFn(gridline_draw_strategy.GridlineTickDrawStrategy$(D)))();
    class GridlineRendererSpec extends small_tick_draw_strategy.SmallTickRendererSpec$(D) {
      createDrawStrategy(context, graphicsFactory) {
        return new (GridlineTickDrawStrategyOfD()).new(context, graphicsFactory, {tickLengthPx: this.tickLengthPx, lineStyleSpec: this.lineStyle, labelStyleSpec: this.labelStyle, axisLineStyleSpec: this.axisLineStyle, labelAnchor: this.labelAnchor, labelJustification: this.labelJustification, labelOffsetFromAxisPx: this.labelOffsetFromAxisPx, labelCollisionOffsetFromAxisPx: this.labelCollisionOffsetFromAxisPx, labelOffsetFromTickPx: this.labelOffsetFromTickPx, labelCollisionOffsetFromTickPx: this.labelCollisionOffsetFromTickPx, minimumPaddingBetweenLabelsPx: this.minimumPaddingBetweenLabelsPx, labelRotation: this.labelRotation, labelCollisionRotation: this.labelCollisionRotation});
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || gridline_draw_strategy.GridlineRendererSpec.is(other) && super._equals(other);
      }
    }
    (GridlineRendererSpec.new = function(opts) {
      let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
      let lineStyle = opts && 'lineStyle' in opts ? opts.lineStyle : null;
      let axisLineStyle = opts && 'axisLineStyle' in opts ? opts.axisLineStyle : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelCollisionOffsetFromAxisPx = opts && 'labelCollisionOffsetFromAxisPx' in opts ? opts.labelCollisionOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let labelCollisionOffsetFromTickPx = opts && 'labelCollisionOffsetFromTickPx' in opts ? opts.labelCollisionOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      let labelCollisionRotation = opts && 'labelCollisionRotation' in opts ? opts.labelCollisionRotation : null;
      GridlineRendererSpec.__proto__.new.call(this, {labelStyle: labelStyle, lineStyle: lineStyle, labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelCollisionOffsetFromAxisPx: labelCollisionOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, labelCollisionOffsetFromTickPx: labelCollisionOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation, labelCollisionRotation: labelCollisionRotation, tickLengthPx: tickLengthPx, axisLineStyle: axisLineStyle});
      ;
    }).prototype = GridlineRendererSpec.prototype;
    dart.addTypeTests(GridlineRendererSpec);
    GridlineRendererSpec.prototype[_is_GridlineRendererSpec_default] = true;
    dart.addTypeCaches(GridlineRendererSpec);
    dart.setLibraryUri(GridlineRendererSpec, I[140]);
    dart.defineExtensionMethods(GridlineRendererSpec, ['_equals']);
    return GridlineRendererSpec;
  });
  gridline_draw_strategy.GridlineRendererSpec = gridline_draw_strategy.GridlineRendererSpec$();
  dart.addTypeTests(gridline_draw_strategy.GridlineRendererSpec, _is_GridlineRendererSpec_default);
  const _is_GridlineTickDrawStrategy_default = Symbol('_is_GridlineTickDrawStrategy_default');
  gridline_draw_strategy.GridlineTickDrawStrategy$ = dart.generic(D => {
    var TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    class GridlineTickDrawStrategy extends base_tick_draw_strategy.BaseTickDrawStrategy$(D) {
      get tickLength() {
        return this[S$1.tickLength$1];
      }
      set tickLength(value) {
        this[S$1.tickLength$1] = value;
      }
      get lineStyle() {
        return this[S$1.lineStyle$2];
      }
      set lineStyle(value) {
        this[S$1.lineStyle$2] = value;
      }
      draw(canvas, tick, opts) {
        TickOfD().as(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
        let collision = opts && 'collision' in opts ? opts.collision : false;
        let lineStart = null;
        let lineEnd = null;
        let tickLocationPx = dart.nullCheck(tick.locationPx);
        switch (orientation) {
          case C[115] || CT.C115:
          {
            let x = tickLocationPx;
            lineStart = new (T$.PointOfnum()).new(x, axisBounds[S$.$bottom] - this.tickLength);
            lineEnd = new (T$.PointOfnum()).new(x, drawAreaBounds[S$.$bottom]);
            break;
          }
          case C[117] || CT.C117:
          {
            let x = tickLocationPx;
            lineStart = new (T$.PointOfnum()).new(x, drawAreaBounds[S$.$top] + this.tickLength);
            lineEnd = new (T$.PointOfnum()).new(x, axisBounds[S$.$top]);
            break;
          }
          case C[116] || CT.C116:
          {
            let y = tickLocationPx;
            if (this.tickLabelAnchor({collision: collision}) === axis_spec.TickLabelAnchor.after || this.tickLabelAnchor({collision: collision}) === axis_spec.TickLabelAnchor.before) {
              lineStart = new (T$.PointOfnum()).new(axisBounds[S$.$right], y);
            } else {
              lineStart = new (T$.PointOfnum()).new(axisBounds[S$.$left] + this.tickLength, y);
            }
            lineEnd = new (T$.PointOfnum()).new(drawAreaBounds[S$.$left], y);
            break;
          }
          case C[118] || CT.C118:
          {
            let y = tickLocationPx;
            if (this.tickLabelAnchor({collision: collision}) === axis_spec.TickLabelAnchor.after || this.tickLabelAnchor({collision: collision}) === axis_spec.TickLabelAnchor.before) {
              lineStart = new (T$.PointOfnum()).new(axisBounds[S$.$left], y);
            } else {
              lineStart = new (T$.PointOfnum()).new(axisBounds[S$.$right] - this.tickLength, y);
            }
            lineEnd = new (T$.PointOfnum()).new(drawAreaBounds[S$.$right], y);
            break;
          }
        }
        canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([lineStart, lineEnd]), dashPattern: this.lineStyle.dashPattern, fill: this.lineStyle.color, stroke: this.lineStyle.color, strokeWidthPx: this.lineStyle.strokeWidth[S$.$toDouble]()});
        this.drawLabel(canvas, tick, {orientation: orientation, axisBounds: axisBounds, drawAreaBounds: drawAreaBounds, isFirst: isFirst, isLast: isLast, collision: collision});
      }
    }
    (GridlineTickDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t107, t107$;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let lineStyleSpec = opts && 'lineStyleSpec' in opts ? opts.lineStyleSpec : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelCollisionOffsetFromAxisPx = opts && 'labelCollisionOffsetFromAxisPx' in opts ? opts.labelCollisionOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let labelCollisionOffsetFromTickPx = opts && 'labelCollisionOffsetFromTickPx' in opts ? opts.labelCollisionOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      let labelCollisionRotation = opts && 'labelCollisionRotation' in opts ? opts.labelCollisionRotation : null;
      this[S$1.tickLength$1] = (t107 = tickLengthPx, t107 == null ? 0 : t107);
      this[S$1.lineStyle$2] = style_factory.StyleFactory.style.createGridlineStyle(graphicsFactory, lineStyleSpec);
      GridlineTickDrawStrategy.__proto__.new.call(this, chartContext, graphicsFactory, {labelStyleSpec: labelStyleSpec, axisLineStyleSpec: (t107$ = axisLineStyleSpec, t107$ == null ? lineStyleSpec : t107$), labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelCollisionOffsetFromAxisPx: labelCollisionOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, labelCollisionOffsetFromTickPx: labelCollisionOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation, labelCollisionRotation: labelCollisionRotation});
      ;
    }).prototype = GridlineTickDrawStrategy.prototype;
    dart.addTypeTests(GridlineTickDrawStrategy);
    GridlineTickDrawStrategy.prototype[_is_GridlineTickDrawStrategy_default] = true;
    dart.addTypeCaches(GridlineTickDrawStrategy);
    dart.setMethodSignature(GridlineTickDrawStrategy, () => ({
      __proto__: dart.getMethods(GridlineTickDrawStrategy.__proto__),
      draw: dart.fnType(dart.void, [chart_canvas.ChartCanvas, dart.nullable(core.Object)], {axisBounds: math.Rectangle$(core.int), collision: core.bool, drawAreaBounds: math.Rectangle$(core.int), isFirst: core.bool, isLast: core.bool, orientation: axis$.AxisOrientation}, {})
    }));
    dart.setLibraryUri(GridlineTickDrawStrategy, I[140]);
    dart.setFieldSignature(GridlineTickDrawStrategy, () => ({
      __proto__: dart.getFields(GridlineTickDrawStrategy.__proto__),
      tickLength: dart.fieldType(core.int),
      lineStyle: dart.fieldType(line_style.LineStyle)
    }));
    return GridlineTickDrawStrategy;
  });
  gridline_draw_strategy.GridlineTickDrawStrategy = gridline_draw_strategy.GridlineTickDrawStrategy$();
  dart.addTypeTests(gridline_draw_strategy.GridlineTickDrawStrategy, _is_GridlineTickDrawStrategy_default);
  cartesian_chart.OrdinalCartesianChart = class OrdinalCartesianChart extends cartesian_chart.CartesianChart$(core.String) {
    initDomainAxis() {
      dart.nullCheck(this[S$._domainAxis]).tickDrawStrategy = new (T$0.SmallTickRendererSpecOfString()).new().createDrawStrategy(this.context, dart.nullCheck(this.graphicsFactory));
    }
  };
  (cartesian_chart.OrdinalCartesianChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    cartesian_chart.OrdinalCartesianChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, domainAxis: new axis$.OrdinalAxis.new(), primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = cartesian_chart.OrdinalCartesianChart.prototype;
  dart.addTypeTests(cartesian_chart.OrdinalCartesianChart);
  dart.addTypeCaches(cartesian_chart.OrdinalCartesianChart);
  dart.setMethodSignature(cartesian_chart.OrdinalCartesianChart, () => ({
    __proto__: dart.getMethods(cartesian_chart.OrdinalCartesianChart.__proto__),
    initDomainAxis: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(cartesian_chart.OrdinalCartesianChart, I[14]);
  const _is_SeriesRenderer_default = Symbol('_is_SeriesRenderer_default');
  series_renderer.SeriesRenderer$ = dart.generic(D => {
    class SeriesRenderer extends layout_view.LayoutView {}
    (SeriesRenderer.new = function() {
      ;
    }).prototype = SeriesRenderer.prototype;
    dart.addTypeTests(SeriesRenderer);
    SeriesRenderer.prototype[_is_SeriesRenderer_default] = true;
    dart.addTypeCaches(SeriesRenderer);
    dart.setLibraryUri(SeriesRenderer, I[3]);
    return SeriesRenderer;
  });
  series_renderer.SeriesRenderer = series_renderer.SeriesRenderer$();
  dart.defineLazy(series_renderer.SeriesRenderer, {
    /*series_renderer.SeriesRenderer.defaultRendererId*/get defaultRendererId() {
      return "default";
    }
  }, false);
  dart.addTypeTests(series_renderer.SeriesRenderer, _is_SeriesRenderer_default);
  const _is_CartesianRenderer_default = Symbol('_is_CartesianRenderer_default');
  cartesian_renderer.CartesianRenderer$ = dart.generic(D => {
    class CartesianRenderer extends series_renderer.SeriesRenderer$(D) {}
    (CartesianRenderer.new = function() {
      ;
    }).prototype = CartesianRenderer.prototype;
    dart.addTypeTests(CartesianRenderer);
    CartesianRenderer.prototype[_is_CartesianRenderer_default] = true;
    dart.addTypeCaches(CartesianRenderer);
    dart.setLibraryUri(CartesianRenderer, I[24]);
    return CartesianRenderer;
  });
  cartesian_renderer.CartesianRenderer = cartesian_renderer.CartesianRenderer$();
  dart.addTypeTests(cartesian_renderer.CartesianRenderer, _is_CartesianRenderer_default);
  const _is__ReversedSeriesIterable_default = Symbol('_is__ReversedSeriesIterable_default');
  base_bar_renderer._ReversedSeriesIterable$ = dart.generic(S => {
    var _ReversedSeriesIteratorOfS = () => (_ReversedSeriesIteratorOfS = dart.constFn(base_bar_renderer._ReversedSeriesIterator$(S)))();
    class _ReversedSeriesIterable extends core.Iterable$(S) {
      get iterator() {
        return new (_ReversedSeriesIteratorOfS()).new(this.seriesList);
      }
    }
    (_ReversedSeriesIterable.new = function(seriesList) {
      this.seriesList = seriesList;
      _ReversedSeriesIterable.__proto__.new.call(this);
      ;
    }).prototype = _ReversedSeriesIterable.prototype;
    dart.addTypeTests(_ReversedSeriesIterable);
    _ReversedSeriesIterable.prototype[_is__ReversedSeriesIterable_default] = true;
    dart.addTypeCaches(_ReversedSeriesIterable);
    dart.setGetterSignature(_ReversedSeriesIterable, () => ({
      __proto__: dart.getGetters(_ReversedSeriesIterable.__proto__),
      iterator: core.Iterator$(S),
      [S$0.$iterator]: core.Iterator$(S)
    }));
    dart.setLibraryUri(_ReversedSeriesIterable, I[123]);
    dart.setFieldSignature(_ReversedSeriesIterable, () => ({
      __proto__: dart.getFields(_ReversedSeriesIterable.__proto__),
      seriesList: dart.finalFieldType(core.List$(S))
    }));
    dart.defineExtensionAccessors(_ReversedSeriesIterable, ['iterator']);
    return _ReversedSeriesIterable;
  });
  base_bar_renderer._ReversedSeriesIterable = base_bar_renderer._ReversedSeriesIterable$();
  dart.addTypeTests(base_bar_renderer._ReversedSeriesIterable, _is__ReversedSeriesIterable_default);
  const _is__ReversedSeriesIterator_default = Symbol('_is__ReversedSeriesIterator_default');
  base_bar_renderer._ReversedSeriesIterator$ = dart.generic(S => {
    class _ReversedSeriesIterator extends core.Iterator$(S) {
      moveNext() {
        this[S$1._current$1] = this[S$1._current$1] == null ? 0 : dart.nullCheck(this[S$1._current$1]) + 1;
        return dart.nullCheck(this[S$1._current$1]) < this[S$1._list][S$.$length];
      }
      get current() {
        return this[S$1._list][S$.$_get](this[S$1._visitIndex][S$.$_get](dart.nullCheck(this[S$1._current$1])));
      }
    }
    (_ReversedSeriesIterator.new = function(list) {
      this[S$1._visitIndex] = T$0.JSArrayOfint().of([]);
      this[S$1._current$1] = null;
      this[S$1._list] = list;
      let categoryAndSeriesIndexMap = new (T$0.IdentityMapOfStringN$ListOfint()).new();
      for (let i = 0; i < list[S$.$length]; i = i + 1) {
        categoryAndSeriesIndexMap[S$.$putIfAbsent](list[S$.$_get](i).seriesCategory, dart.fn(() => T$0.JSArrayOfint().of([]), T$0.VoidToListOfint()))[S$.$add](i);
      }
      categoryAndSeriesIndexMap[S$.$forEach](dart.fn((_, indices) => this[S$1._visitIndex][S$.$addAll](indices[S$.$reversed]), T$0.StringNAndListOfintTovoid()));
    }).prototype = _ReversedSeriesIterator.prototype;
    dart.addTypeTests(_ReversedSeriesIterator);
    _ReversedSeriesIterator.prototype[_is__ReversedSeriesIterator_default] = true;
    dart.addTypeCaches(_ReversedSeriesIterator);
    dart.setMethodSignature(_ReversedSeriesIterator, () => ({
      __proto__: dart.getMethods(_ReversedSeriesIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(_ReversedSeriesIterator, () => ({
      __proto__: dart.getGetters(_ReversedSeriesIterator.__proto__),
      current: S
    }));
    dart.setLibraryUri(_ReversedSeriesIterator, I[123]);
    dart.setFieldSignature(_ReversedSeriesIterator, () => ({
      __proto__: dart.getFields(_ReversedSeriesIterator.__proto__),
      [S$1._list]: dart.finalFieldType(core.List$(S)),
      [S$1._visitIndex]: dart.finalFieldType(core.List$(core.int)),
      [S$1._current$1]: dart.fieldType(dart.nullable(core.int))
    }));
    return _ReversedSeriesIterator;
  });
  base_bar_renderer._ReversedSeriesIterator = base_bar_renderer._ReversedSeriesIterator$();
  dart.addTypeTests(base_bar_renderer._ReversedSeriesIterator, _is__ReversedSeriesIterator_default);
  dart.defineLazy(base_bar_renderer, {
    /*base_bar_renderer.barGroupIndexKey*/get barGroupIndexKey() {
      return C[153] || CT.C153;
    },
    /*base_bar_renderer.barGroupCountKey*/get barGroupCountKey() {
      return C[154] || CT.C154;
    },
    /*base_bar_renderer.barGroupWeightKey*/get barGroupWeightKey() {
      return C[155] || CT.C155;
    },
    /*base_bar_renderer.previousBarGroupWeightKey*/get previousBarGroupWeightKey() {
      return C[156] || CT.C156;
    },
    /*base_bar_renderer.allBarGroupWeightsKey*/get allBarGroupWeightsKey() {
      return C[157] || CT.C157;
    },
    /*base_bar_renderer.stackKeyKey*/get stackKeyKey() {
      return C[158] || CT.C158;
    },
    /*base_bar_renderer.barElementsKey*/get barElementsKey() {
      return C[159] || CT.C159;
    }
  }, false);
  const _is_SeriesRendererConfig_default = Symbol('_is_SeriesRendererConfig_default');
  series_renderer_config.SeriesRendererConfig$ = dart.generic(D => {
    class SeriesRendererConfig extends core.Object {}
    (SeriesRendererConfig.new = function() {
      ;
    }).prototype = SeriesRendererConfig.prototype;
    dart.addTypeTests(SeriesRendererConfig);
    SeriesRendererConfig.prototype[_is_SeriesRendererConfig_default] = true;
    dart.addTypeCaches(SeriesRendererConfig);
    dart.setLibraryUri(SeriesRendererConfig, I[141]);
    return SeriesRendererConfig;
  });
  series_renderer_config.SeriesRendererConfig = series_renderer_config.SeriesRendererConfig$();
  dart.addTypeTests(series_renderer_config.SeriesRendererConfig, _is_SeriesRendererConfig_default);
  const _is_RendererAttributeKey_default = Symbol('_is_RendererAttributeKey_default');
  series_renderer_config.RendererAttributeKey$ = dart.generic(R => {
    class RendererAttributeKey extends typed_registry.TypedKey$(R) {}
    (RendererAttributeKey.new = function(uniqueKey) {
      RendererAttributeKey.__proto__.new.call(this, uniqueKey);
      ;
    }).prototype = RendererAttributeKey.prototype;
    dart.addTypeTests(RendererAttributeKey);
    RendererAttributeKey.prototype[_is_RendererAttributeKey_default] = true;
    dart.addTypeCaches(RendererAttributeKey);
    dart.setLibraryUri(RendererAttributeKey, I[141]);
    return RendererAttributeKey;
  });
  series_renderer_config.RendererAttributeKey = series_renderer_config.RendererAttributeKey$();
  dart.addTypeTests(series_renderer_config.RendererAttributeKey, _is_RendererAttributeKey_default);
  series_renderer_config.RendererAttributes = class RendererAttributes extends typed_registry.TypedRegistry {};
  (series_renderer_config.RendererAttributes.new = function() {
    series_renderer_config.RendererAttributes.__proto__.new.call(this);
    ;
  }).prototype = series_renderer_config.RendererAttributes.prototype;
  dart.addTypeTests(series_renderer_config.RendererAttributes);
  dart.addTypeCaches(series_renderer_config.RendererAttributes);
  dart.setLibraryUri(series_renderer_config.RendererAttributes, I[141]);
  base_bar_renderer_config.BarGroupingType = class BarGroupingType extends core.Object {
    toString() {
      return this[S$0._name$20];
    }
  };
  (base_bar_renderer_config.BarGroupingType.new = function(index, _name) {
    this.index = index;
    this[S$0._name$20] = _name;
    ;
  }).prototype = base_bar_renderer_config.BarGroupingType.prototype;
  dart.addTypeTests(base_bar_renderer_config.BarGroupingType);
  dart.addTypeCaches(base_bar_renderer_config.BarGroupingType);
  dart.setLibraryUri(base_bar_renderer_config.BarGroupingType, I[120]);
  dart.setFieldSignature(base_bar_renderer_config.BarGroupingType, () => ({
    __proto__: dart.getFields(base_bar_renderer_config.BarGroupingType.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$20]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(base_bar_renderer_config.BarGroupingType, ['toString']);
  base_bar_renderer_config.BarGroupingType.grouped = C[137] || CT.C137;
  base_bar_renderer_config.BarGroupingType.groupedStacked = C[160] || CT.C160;
  base_bar_renderer_config.BarGroupingType.stacked = C[161] || CT.C161;
  base_bar_renderer_config.BarGroupingType.values = C[162] || CT.C162;
  bar_renderer_config.CornerStrategy = class CornerStrategy extends core.Object {};
  (bar_renderer_config.CornerStrategy.new = function() {
    ;
  }).prototype = bar_renderer_config.CornerStrategy.prototype;
  dart.addTypeTests(bar_renderer_config.CornerStrategy);
  dart.addTypeCaches(bar_renderer_config.CornerStrategy);
  dart.setLibraryUri(bar_renderer_config.CornerStrategy, I[129]);
  bar_renderer_config.ConstCornerStrategy = class ConstCornerStrategy extends core.Object {
    get radius() {
      return this[S$1.radius$2];
    }
    set radius(value) {
      super.radius = value;
    }
    getRadius(_) {
      return this.radius;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return bar_renderer_config.ConstCornerStrategy.is(other) && other.radius === this.radius;
    }
    get hashCode() {
      return this.radius[S$.$hashCode];
    }
  };
  (bar_renderer_config.ConstCornerStrategy.new = function(radius) {
    this[S$1.radius$2] = radius;
    ;
  }).prototype = bar_renderer_config.ConstCornerStrategy.prototype;
  dart.addTypeTests(bar_renderer_config.ConstCornerStrategy);
  dart.addTypeCaches(bar_renderer_config.ConstCornerStrategy);
  bar_renderer_config.ConstCornerStrategy[dart.implements] = () => [bar_renderer_config.CornerStrategy];
  dart.setMethodSignature(bar_renderer_config.ConstCornerStrategy, () => ({
    __proto__: dart.getMethods(bar_renderer_config.ConstCornerStrategy.__proto__),
    getRadius: dart.fnType(core.int, [core.int])
  }));
  dart.setLibraryUri(bar_renderer_config.ConstCornerStrategy, I[129]);
  dart.setFieldSignature(bar_renderer_config.ConstCornerStrategy, () => ({
    __proto__: dart.getFields(bar_renderer_config.ConstCornerStrategy.__proto__),
    radius: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(bar_renderer_config.ConstCornerStrategy, ['_equals']);
  dart.defineExtensionAccessors(bar_renderer_config.ConstCornerStrategy, ['hashCode']);
  bar_renderer_config.NoCornerStrategy = class NoCornerStrategy extends bar_renderer_config.ConstCornerStrategy {
    _equals(other) {
      if (other == null) return false;
      return bar_renderer_config.NoCornerStrategy.is(other);
    }
    get hashCode() {
      return 31;
    }
  };
  (bar_renderer_config.NoCornerStrategy.new = function() {
    bar_renderer_config.NoCornerStrategy.__proto__.new.call(this, 0);
    ;
  }).prototype = bar_renderer_config.NoCornerStrategy.prototype;
  dart.addTypeTests(bar_renderer_config.NoCornerStrategy);
  dart.addTypeCaches(bar_renderer_config.NoCornerStrategy);
  dart.setLibraryUri(bar_renderer_config.NoCornerStrategy, I[129]);
  dart.defineExtensionMethods(bar_renderer_config.NoCornerStrategy, ['_equals']);
  dart.defineExtensionAccessors(bar_renderer_config.NoCornerStrategy, ['hashCode']);
  simple_ordinal_scale.SimpleOrdinalScale = class SimpleOrdinalScale extends core.Object {
    set [S$1._cachedStepSizePixels](t107) {
      this[S$1.__SimpleOrdinalScale__cachedStepSizePixels] = t107;
    }
    get [S$1._cachedStepSizePixels]() {
      let t108;
      t108 = this[S$1.__SimpleOrdinalScale__cachedStepSizePixels];
      return t108 == null ? dart.throw(new _internal.LateError.fieldNI("_cachedStepSizePixels")) : t108;
    }
    get [S$1._cachedRangeBandShift]() {
      let t108;
      t108 = this[S$1.__SimpleOrdinalScale__cachedRangeBandShift];
      return t108 == null ? dart.throw(new _internal.LateError.fieldNI("_cachedRangeBandShift")) : t108;
    }
    set [S$1._cachedRangeBandShift](t108) {
      this[S$1.__SimpleOrdinalScale__cachedRangeBandShift] = t108;
    }
    get [S$1._cachedRangeBandSize]() {
      let t109;
      t109 = this[S$1.__SimpleOrdinalScale__cachedRangeBandSize];
      return t109 == null ? dart.throw(new _internal.LateError.fieldNI("_cachedRangeBandSize")) : t109;
    }
    set [S$1._cachedRangeBandSize](t109) {
      this[S$1.__SimpleOrdinalScale__cachedRangeBandSize] = t109;
    }
    get [S$1._isVertical]() {
      return this.range.start > this.range.end;
    }
    get rangeBand() {
      if (this[S$1._scaleChanged]) {
        this[S$1._updateScale]();
      }
      return this[S$1._cachedRangeBandSize];
    }
    get stepSize() {
      if (this[S$1._scaleChanged]) {
        this[S$1._updateScale]();
      }
      return this[S$1._cachedStepSizePixels];
    }
    get domainStepSize() {
      return 1.0;
    }
    set rangeBandConfig(barGroupWidthConfig) {
      if (barGroupWidthConfig === null) {
        dart.throw(new core.ArgumentError.notNull("RangeBandConfig must not be null."));
      }
      if (barGroupWidthConfig.type === scale$.RangeBandType.fixedDomain || barGroupWidthConfig.type === scale$.RangeBandType.none) {
        dart.throw(new core.ArgumentError.new("barGroupWidthConfig must not be NONE or FIXED_DOMAIN"));
      }
      this[S$1._rangeBandConfig] = barGroupWidthConfig;
      this[S$1._scaleChanged] = true;
    }
    get rangeBandConfig() {
      return this[S$1._rangeBandConfig];
    }
    set stepSizeConfig(config) {
      if (config != null && config.type !== scale$.StepSizeType.autoDetect) {
        dart.throw(new core.ArgumentError.new("Ordinal scales only support StepSizeConfig of type Auto"));
      }
    }
    get stepSizeConfig() {
      return this[S$1._stepSizeConfig];
    }
    _get(domainValue) {
      core.String.as(domainValue);
      if (this[S$1._scaleChanged]) {
        this[S$1._updateScale]();
      }
      let i = this[S$1._domain].indexOf(domainValue);
      if (i != null) {
        return this.viewportTranslatePx + this[S$1._range].start + this[S$1._cachedRangeBandShift] + this[S$1._cachedStepSizePixels] * dart.notNull(i);
      }
      return 0.0;
    }
    reverse(pixelLocation) {
      let index = (pixelLocation - this.viewportTranslatePx - this[S$1._range].start - this[S$1._cachedRangeBandShift]) / this[S$1._cachedStepSizePixels];
      return this[S$1._domain].getDomainAtIndex(math.max(core.int, 0, math.min(core.int, index[S$.$round](), this.domain.size - 1)));
    }
    canTranslate(domainValue) {
      core.String.as(domainValue);
      return this[S$1._domain].indexOf(domainValue) != null;
    }
    get domain() {
      return this[S$1._domain];
    }
    addDomain(domainValue) {
      core.String.as(domainValue);
      this[S$1._domain].add(domainValue);
      this[S$1._scaleChanged] = true;
    }
    set range(extent) {
      this[S$1._range] = dart.nullCheck(extent);
      this[S$1._scaleChanged] = true;
    }
    get range() {
      return this[S$1._range];
    }
    resetDomain() {
      this[S$1._domain].clear();
      this[S$1._scaleChanged] = true;
    }
    resetViewportSettings() {
      this[S$1._viewportScale] = 1.0;
      this[S$1._viewportTranslatePx] = 0.0;
      this[S$1._scaleChanged] = true;
    }
    get rangeWidth() {
      return (this.range.start - this.range.end)[S$.$abs]()[S$.$toInt]();
    }
    get viewportScalingFactor() {
      return this[S$1._viewportScale];
    }
    get viewportTranslatePx() {
      return this[S$1._viewportTranslatePx];
    }
    setViewportSettings(viewportScale, viewportTranslatePx) {
      this[S$1._viewportScale] = viewportScale;
      if (this[S$1._isVertical]) {
        this[S$1._viewportTranslatePx] = math.max(core.double, math.min(core.double, -(this.rangeWidth * (1.0 - viewportScale)), viewportTranslatePx), 0.0);
      } else {
        this[S$1._viewportTranslatePx] = math.min(core.double, math.max(core.double, this.rangeWidth * (1.0 - viewportScale), viewportTranslatePx), 0.0);
      }
      this[S$1._scaleChanged] = true;
    }
    setViewport(viewportDataSize, startingDomain) {
      if (startingDomain != null && viewportDataSize != null && dart.notNull(viewportDataSize) <= 0) {
        dart.throw(new core.ArgumentError.new("viewportDataSize cannot be less than 1."));
      }
      this[S$1._scaleChanged] = true;
      this[S$1._viewportDataSize] = viewportDataSize;
      this[S$1._viewportStartingDomain] = startingDomain;
    }
    [S$1._updateViewport]() {
      this.setViewportSettings(1.0, 0.0);
      this[S$1._recalculateScale]();
      if (this[S$1._domain].isEmpty) {
        return;
      }
      this.setViewportSettings(this[S$1._domain].size / math.min(core.num, dart.nullCheck(this[S$1._viewportDataSize]), this[S$1._domain].size), this[S$1._isVertical] ? 1.7976931348623157e+308 : 0.0);
      this[S$1._recalculateScale]();
      let domainIndex = this[S$1._domain].indexOf(dart.nullCheck(this[S$1._viewportStartingDomain]));
      if (domainIndex != null) {
        let viewportTranslatePx = 0.0;
        if (this[S$1._isVertical]) {
          viewportTranslatePx = (dart.nullCheck(this[S$1._viewportDataSize]) - dart.notNull(domainIndex) - 1) * this[S$1._cachedStepSizePixels];
        } else {
          viewportTranslatePx = -(this[S$1._cachedStepSizePixels] * dart.notNull(domainIndex));
        }
        this.setViewportSettings(this[S$1._viewportScale], viewportTranslatePx);
      }
    }
    get viewportDataSize() {
      if (this[S$1._scaleChanged]) {
        this[S$1._updateScale]();
      }
      return this[S$1._domain].isEmpty ? 0 : (this.rangeWidth / this[S$1._cachedStepSizePixels][S$.$abs]())[S$1.$truncate]();
    }
    get viewportStartingDomain() {
      if (this[S$1._scaleChanged]) {
        this[S$1._updateScale]();
      }
      if (this[S$1._domain].isEmpty) {
        return null;
      }
      if (this[S$1._isVertical]) {
        let index = (-(this.rangeWidth + this[S$1._viewportTranslatePx]) / this[S$1._cachedStepSizePixels])[S$.$ceil]()[S$.$toInt]() - 1;
        return this[S$1._domain].getDomainAtIndex(index);
      } else {
        return this[S$1._domain].getDomainAtIndex((-this[S$1._viewportTranslatePx] / this[S$1._cachedStepSizePixels])[S$.$ceil]()[S$.$toInt]());
      }
    }
    isRangeValueWithinViewport(rangeValue) {
      return math$.withinBounds(rangeValue, this.range.min, this.range.max);
    }
    compareDomainValueToViewport(domainValue) {
      core.String.as(domainValue);
      let i = this[S$1._domain].indexOf(domainValue);
      if (i != null && this.range !== null) {
        let domainPx = this._get(domainValue);
        if (domainPx < this.range.min) {
          return -1;
        }
        if (domainPx > this.range.max) {
          return 1;
        }
        return 0;
      }
      return -1;
    }
    copy() {
      return new simple_ordinal_scale.SimpleOrdinalScale._copy(this);
    }
    [S$1._updateCachedFields](stepSizePixels, rangeBandPixels, rangeBandShift) {
      this[S$1._cachedStepSizePixels] = stepSizePixels;
      this[S$1._cachedRangeBandSize] = rangeBandPixels;
      this[S$1._cachedRangeBandShift] = rangeBandShift;
      if (this[S$1._isVertical]) {
        this[S$1._cachedStepSizePixels] = this[S$1._cachedStepSizePixels] * -1;
        this[S$1._cachedRangeBandShift] = this[S$1._cachedRangeBandShift] * -1;
      }
      this[S$1._scaleChanged] = false;
    }
    [S$1._updateScale]() {
      if (this[S$1._viewportStartingDomain] != null && this[S$1._viewportDataSize] != null) {
        this[S$1._updateViewport]();
      }
      this[S$1._recalculateScale]();
    }
    [S$1._recalculateScale]() {
      let stepSizePixels = this[S$1._domain].isEmpty ? 0.0 : this[S$1._viewportScale] * (this.rangeWidth[S$.$toDouble]() / this[S$1._domain].size[S$.$toDouble]());
      let rangeBandPixels = null;
      switch (this.rangeBandConfig.type) {
        case C[163] || CT.C163:
        {
          rangeBandPixels = this.rangeBandConfig.size[S$.$toDouble]();
          break;
        }
        case C[164] || CT.C164:
        {
          let spaceInPixels = this.rangeBandConfig.size[S$.$toDouble]();
          rangeBandPixels = math.max(core.double, 0.0, stepSizePixels - spaceInPixels);
          break;
        }
        case C[165] || CT.C165:
        case C[166] || CT.C166:
        {
          let percent = this.rangeBandConfig.size[S$.$toDouble]();
          rangeBandPixels = stepSizePixels * percent;
          break;
        }
        case C[167] || CT.C167:
        case C[168] || CT.C168:
        {
          dart.throw(new core.StateError.new("RangeBandType must not be NONE or FIXED_DOMAIN"));
        }
      }
      this[S$1._updateCachedFields](stepSizePixels, rangeBandPixels, stepSizePixels / 2.0);
    }
  };
  (simple_ordinal_scale.SimpleOrdinalScale.new = function() {
    this[S$1._stepSizeConfig] = new scale$.StepSizeConfig.auto();
    this[S$1._range] = new scale$.ScaleOutputExtent.new(0, 1);
    this[S$1._viewportScale] = 1.0;
    this[S$1._viewportTranslatePx] = 0.0;
    this[S$1._rangeBandConfig] = new scale$.RangeBandConfig.styleAssignedPercent();
    this[S$1._scaleChanged] = true;
    this[S$1.__SimpleOrdinalScale__cachedStepSizePixels] = null;
    this[S$1.__SimpleOrdinalScale__cachedRangeBandShift] = null;
    this[S$1.__SimpleOrdinalScale__cachedRangeBandSize] = null;
    this[S$1._viewportDataSize] = null;
    this[S$1._viewportStartingDomain] = null;
    this[S$1._domain] = new ordinal_scale_domain_info.OrdinalScaleDomainInfo.new();
    ;
  }).prototype = simple_ordinal_scale.SimpleOrdinalScale.prototype;
  (simple_ordinal_scale.SimpleOrdinalScale._copy = function(other) {
    this[S$1._stepSizeConfig] = new scale$.StepSizeConfig.auto();
    this[S$1._range] = new scale$.ScaleOutputExtent.new(0, 1);
    this[S$1._viewportScale] = 1.0;
    this[S$1._viewportTranslatePx] = 0.0;
    this[S$1._rangeBandConfig] = new scale$.RangeBandConfig.styleAssignedPercent();
    this[S$1._scaleChanged] = true;
    this[S$1.__SimpleOrdinalScale__cachedStepSizePixels] = null;
    this[S$1.__SimpleOrdinalScale__cachedRangeBandShift] = null;
    this[S$1.__SimpleOrdinalScale__cachedRangeBandSize] = null;
    this[S$1._viewportDataSize] = null;
    this[S$1._viewportStartingDomain] = null;
    this[S$1._domain] = other[S$1._domain].copy();
    this[S$1._range] = new scale$.ScaleOutputExtent.new(other[S$1._range].start, other[S$1._range].end);
    this[S$1._viewportScale] = other[S$1._viewportScale];
    this[S$1._viewportTranslatePx] = other[S$1._viewportTranslatePx];
    this[S$1._rangeBandConfig] = other[S$1._rangeBandConfig];
    ;
  }).prototype = simple_ordinal_scale.SimpleOrdinalScale.prototype;
  dart.addTypeTests(simple_ordinal_scale.SimpleOrdinalScale);
  dart.addTypeCaches(simple_ordinal_scale.SimpleOrdinalScale);
  simple_ordinal_scale.SimpleOrdinalScale[dart.implements] = () => [ordinal_scale.OrdinalScale];
  dart.setMethodSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getMethods(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    _get: dart.fnType(core.double, [dart.nullable(core.Object)]),
    reverse: dart.fnType(core.String, [core.double]),
    canTranslate: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    addDomain: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    resetDomain: dart.fnType(dart.void, []),
    resetViewportSettings: dart.fnType(dart.void, []),
    setViewportSettings: dart.fnType(dart.void, [core.double, core.double]),
    setViewport: dart.fnType(dart.void, [dart.nullable(core.int), dart.nullable(core.String)]),
    [S$1._updateViewport]: dart.fnType(dart.void, []),
    isRangeValueWithinViewport: dart.fnType(core.bool, [core.double]),
    compareDomainValueToViewport: dart.fnType(core.int, [dart.nullable(core.Object)]),
    copy: dart.fnType(simple_ordinal_scale.SimpleOrdinalScale, []),
    [S$1._updateCachedFields]: dart.fnType(dart.void, [core.double, core.double, core.double]),
    [S$1._updateScale]: dart.fnType(dart.void, []),
    [S$1._recalculateScale]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getGetters(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    [S$1._cachedStepSizePixels]: core.double,
    [S$1._cachedRangeBandShift]: core.double,
    [S$1._cachedRangeBandSize]: core.double,
    [S$1._isVertical]: core.bool,
    rangeBand: core.double,
    stepSize: core.double,
    domainStepSize: core.double,
    rangeBandConfig: scale$.RangeBandConfig,
    stepSizeConfig: scale$.StepSizeConfig,
    domain: ordinal_scale_domain_info.OrdinalScaleDomainInfo,
    range: scale$.ScaleOutputExtent,
    rangeWidth: core.int,
    viewportScalingFactor: core.double,
    viewportTranslatePx: core.double,
    viewportDataSize: core.int,
    viewportStartingDomain: dart.nullable(core.String)
  }));
  dart.setSetterSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getSetters(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    [S$1._cachedStepSizePixels]: core.double,
    [S$1._cachedRangeBandShift]: core.double,
    [S$1._cachedRangeBandSize]: core.double,
    rangeBandConfig: scale$.RangeBandConfig,
    stepSizeConfig: dart.nullable(scale$.StepSizeConfig),
    range: dart.nullable(scale$.ScaleOutputExtent)
  }));
  dart.setLibraryUri(simple_ordinal_scale.SimpleOrdinalScale, I[142]);
  dart.setFieldSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getFields(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    [S$1._stepSizeConfig]: dart.finalFieldType(scale$.StepSizeConfig),
    [S$1._domain]: dart.finalFieldType(ordinal_scale_domain_info.OrdinalScaleDomainInfo),
    [S$1._range]: dart.fieldType(scale$.ScaleOutputExtent),
    [S$1._viewportScale]: dart.fieldType(core.double),
    [S$1._viewportTranslatePx]: dart.fieldType(core.double),
    [S$1._rangeBandConfig]: dart.fieldType(scale$.RangeBandConfig),
    [S$1._scaleChanged]: dart.fieldType(core.bool),
    [S$1.__SimpleOrdinalScale__cachedStepSizePixels]: dart.fieldType(dart.nullable(core.double)),
    [S$1.__SimpleOrdinalScale__cachedRangeBandShift]: dart.fieldType(dart.nullable(core.double)),
    [S$1.__SimpleOrdinalScale__cachedRangeBandSize]: dart.fieldType(dart.nullable(core.double)),
    [S$1._viewportDataSize]: dart.fieldType(dart.nullable(core.int)),
    [S$1._viewportStartingDomain]: dart.fieldType(dart.nullable(core.String))
  }));
  ordinal_tick_provider.OrdinalTickProvider = class OrdinalTickProvider extends tick_provider.BaseTickProvider$(core.String) {
    getTicks(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      ordinal_scale.OrdinalScale.as(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      T$0.TickFormatterOfString().as(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      T$0.MapOfString$String().as(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      T$0.TickDrawStrategyOfString().as(tickDrawStrategy);
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      T$0.TickHintNOfString().as(tickHint);
      return this.createTicks(scale.domain.domains, {context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy});
    }
    _equals(other) {
      if (other == null) return false;
      return ordinal_tick_provider.OrdinalTickProvider.is(other);
    }
    get hashCode() {
      return 31;
    }
  };
  (ordinal_tick_provider.OrdinalTickProvider.new = function() {
    ordinal_tick_provider.OrdinalTickProvider.__proto__.new.call(this);
    ;
  }).prototype = ordinal_tick_provider.OrdinalTickProvider.prototype;
  dart.addTypeTests(ordinal_tick_provider.OrdinalTickProvider);
  dart.addTypeCaches(ordinal_tick_provider.OrdinalTickProvider);
  dart.setMethodSignature(ordinal_tick_provider.OrdinalTickProvider, () => ({
    __proto__: dart.getMethods(ordinal_tick_provider.OrdinalTickProvider.__proto__),
    getTicks: dart.fnType(core.List$(tick.Tick$(core.String)), [], {context: dart.nullable(chart_context.ChartContext), formatter: dart.nullable(core.Object), formatterValueCache: dart.nullable(core.Object), graphicsFactory: graphics_factory.GraphicsFactory, orientation: dart.nullable(axis$.AxisOrientation), scale: dart.nullable(core.Object), tickDrawStrategy: dart.nullable(core.Object), tickHint: dart.nullable(core.Object), viewportExtensionEnabled: core.bool}, {})
  }));
  dart.setLibraryUri(ordinal_tick_provider.OrdinalTickProvider, I[143]);
  dart.defineExtensionMethods(ordinal_tick_provider.OrdinalTickProvider, ['_equals']);
  dart.defineExtensionAccessors(ordinal_tick_provider.OrdinalTickProvider, ['hashCode']);
  ordinal_extents.OrdinalExtents = class OrdinalExtents extends scale$.Extents$(core.String) {
    static all(range) {
      return new ordinal_extents.OrdinalExtents.new(range);
    }
    get isEmpty() {
      return this[S$1._range$1][S$.$isEmpty];
    }
    get length() {
      return this[S$1._range$1][S$.$length];
    }
    _get(index) {
      return this[S$1._range$1][S$.$_get](index);
    }
    indexOf(value) {
      return this[S$1._range$1][S$.$indexOf](value);
    }
  };
  (ordinal_extents.OrdinalExtents.new = function(range) {
    this[S$1._range$1] = range;
    if (!dart.fn(() => {
      let uniqueValueCount = T$0.HashSetOfString().of(this[S$1._range$1])[S$.$length];
      return uniqueValueCount === range[S$.$length];
    }, T$0.VoidTobool())()) dart.assertFailed(null, I[144], 30, 12, "() {\n      final uniqueValueCount = HashSet.of(_range).length;\n      return uniqueValueCount == range.length;\n    }()");
  }).prototype = ordinal_extents.OrdinalExtents.prototype;
  dart.addTypeTests(ordinal_extents.OrdinalExtents);
  dart.addTypeCaches(ordinal_extents.OrdinalExtents);
  dart.setMethodSignature(ordinal_extents.OrdinalExtents, () => ({
    __proto__: dart.getMethods(ordinal_extents.OrdinalExtents.__proto__),
    _get: dart.fnType(dart.nullable(core.String), [core.int]),
    indexOf: dart.fnType(core.int, [core.String])
  }));
  dart.setGetterSignature(ordinal_extents.OrdinalExtents, () => ({
    __proto__: dart.getGetters(ordinal_extents.OrdinalExtents.__proto__),
    isEmpty: core.bool,
    length: core.int
  }));
  dart.setLibraryUri(ordinal_extents.OrdinalExtents, I[145]);
  dart.setFieldSignature(ordinal_extents.OrdinalExtents, () => ({
    __proto__: dart.getFields(ordinal_extents.OrdinalExtents.__proto__),
    [S$1._range$1]: dart.finalFieldType(core.List$(core.String))
  }));
  ordinal_scale_domain_info.OrdinalScaleDomainInfo = class OrdinalScaleDomainInfo extends core.Object {
    copy() {
      let t110;
      t110 = new ordinal_scale_domain_info.OrdinalScaleDomainInfo.new();
      return (() => {
        t110[S$1._domainsToOrder][S$.$addAll](this[S$1._domainsToOrder]);
        t110[S$1._index] = this[S$1._index];
        t110[S$1._domainList][S$.$addAll](this[S$1._domainList]);
        return t110;
      })();
    }
    add(domain) {
      if (!this[S$1._domainsToOrder][S$.$containsKey](domain)) {
        this[S$1._domainsToOrder][S$.$_set](domain, this[S$1._index]);
        this[S$1._index] = this[S$1._index] + 1;
        this[S$1._domainList][S$.$add](domain);
      }
    }
    indexOf(domain) {
      return this[S$1._domainsToOrder][S$.$_get](domain);
    }
    getDomainAtIndex(index) {
      if (!(index >= 0)) dart.assertFailed(null, I[146], 53, 12, "index >= 0");
      if (!(index < this[S$1._index])) dart.assertFailed(null, I[146], 54, 12, "index < _index");
      return this[S$1._domainList][S$.$_get](index);
    }
    get domains() {
      return this[S$1._domainList];
    }
    get first() {
      return this[S$1._domainList][S$.$isEmpty] ? null : this[S$1._domainList][S$.$first];
    }
    get last() {
      return this[S$1._domainList][S$.$isEmpty] ? null : this[S$1._domainList][S$.$last];
    }
    get isEmpty() {
      return this[S$1._index] === 0;
    }
    get isNotEmpty() {
      return !this.isEmpty;
    }
    get extent() {
      return ordinal_extents.OrdinalExtents.all(this[S$1._domainList]);
    }
    get size() {
      return this[S$1._index];
    }
    clear() {
      this[S$1._domainsToOrder][S$.$clear]();
      this[S$1._domainList][S$.$clear]();
      this[S$1._index] = 0;
    }
  };
  (ordinal_scale_domain_info.OrdinalScaleDomainInfo.new = function() {
    this[S$1._index] = 0;
    this[S$1._domainsToOrder] = new (T$.IdentityMapOfString$int()).new();
    this[S$1._domainList] = T$.JSArrayOfString().of([]);
    ;
  }).prototype = ordinal_scale_domain_info.OrdinalScaleDomainInfo.prototype;
  dart.addTypeTests(ordinal_scale_domain_info.OrdinalScaleDomainInfo);
  dart.addTypeCaches(ordinal_scale_domain_info.OrdinalScaleDomainInfo);
  dart.setMethodSignature(ordinal_scale_domain_info.OrdinalScaleDomainInfo, () => ({
    __proto__: dart.getMethods(ordinal_scale_domain_info.OrdinalScaleDomainInfo.__proto__),
    copy: dart.fnType(ordinal_scale_domain_info.OrdinalScaleDomainInfo, []),
    add: dart.fnType(dart.void, [core.String]),
    indexOf: dart.fnType(dart.nullable(core.int), [core.String]),
    getDomainAtIndex: dart.fnType(core.String, [core.int]),
    clear: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(ordinal_scale_domain_info.OrdinalScaleDomainInfo, () => ({
    __proto__: dart.getGetters(ordinal_scale_domain_info.OrdinalScaleDomainInfo.__proto__),
    domains: core.List$(core.String),
    first: dart.nullable(core.String),
    last: dart.nullable(core.String),
    isEmpty: core.bool,
    isNotEmpty: core.bool,
    extent: ordinal_extents.OrdinalExtents,
    size: core.int
  }));
  dart.setLibraryUri(ordinal_scale_domain_info.OrdinalScaleDomainInfo, I[147]);
  dart.setFieldSignature(ordinal_scale_domain_info.OrdinalScaleDomainInfo, () => ({
    __proto__: dart.getFields(ordinal_scale_domain_info.OrdinalScaleDomainInfo.__proto__),
    [S$1._index]: dart.fieldType(core.int),
    [S$1._domainsToOrder]: dart.finalFieldType(collection.HashMap$(core.String, core.int)),
    [S$1._domainList]: dart.finalFieldType(core.List$(core.String))
  }));
  ordinal_scale.OrdinalScale = class OrdinalScale extends scale$.MutableScale$(core.String) {};
  (ordinal_scale.OrdinalScale.new = function() {
    ;
  }).prototype = ordinal_scale.OrdinalScale.prototype;
  dart.addTypeTests(ordinal_scale.OrdinalScale);
  dart.addTypeCaches(ordinal_scale.OrdinalScale);
  dart.setLibraryUri(ordinal_scale.OrdinalScale, I[148]);
  numeric_tick_provider._TickStepInfo = class _TickStepInfo extends core.Object {};
  (numeric_tick_provider._TickStepInfo.new = function(stepSize, tickStart) {
    this.stepSize = stepSize;
    this.tickStart = tickStart;
    ;
  }).prototype = numeric_tick_provider._TickStepInfo.prototype;
  dart.addTypeTests(numeric_tick_provider._TickStepInfo);
  dart.addTypeCaches(numeric_tick_provider._TickStepInfo);
  dart.setLibraryUri(numeric_tick_provider._TickStepInfo, I[111]);
  dart.setFieldSignature(numeric_tick_provider._TickStepInfo, () => ({
    __proto__: dart.getFields(numeric_tick_provider._TickStepInfo.__proto__),
    stepSize: dart.fieldType(core.double),
    tickStart: dart.fieldType(core.double)
  }));
  linear_scale_viewport.LinearScaleViewportSettings = class LinearScaleViewportSettings extends core.Object {
    get range() {
      return this[S$1.range];
    }
    set range(value) {
      this[S$1.range] = value;
    }
    get keepViewportWithinData() {
      return this[S$1.keepViewportWithinData];
    }
    set keepViewportWithinData(value) {
      this[S$1.keepViewportWithinData] = value;
    }
    get scalingFactor() {
      return this[S$1.scalingFactor];
    }
    set scalingFactor(value) {
      this[S$1.scalingFactor] = value;
    }
    get translatePx() {
      return this[S$1.translatePx];
    }
    set translatePx(value) {
      this[S$1.translatePx] = value;
    }
    set domainExtent(extent) {
      this[S$1._domainExtent] = extent;
      this[S$1._manualDomainExtent] = extent != null;
    }
    get domainExtent() {
      return this[S$1._domainExtent];
    }
    reset() {
      this.scalingFactor = 1.0;
      this.translatePx = 0.0;
      this.domainExtent = null;
    }
    get rangeWidth() {
      return dart.nullCheck(this.range).diff[S$.$abs]()[S$.$toInt]();
    }
    isRangeValueWithinViewport(rangeValue) {
      return dart.nullCheck(this.range).containsValue(rangeValue);
    }
    updateViewportScaleFactor(domainInfo) {
      let t110, t110$, t110$0;
      if (this[S$1._manualDomainExtent]) {
        let viewportDomainDiff = (t110 = this[S$1._domainExtent], t110 == null ? null : t110.width[S$.$toDouble]());
        if (domainInfo.domainDiff !== 0.0) {
          this.scalingFactor = domainInfo.domainDiff / dart.nullCheck(viewportDomainDiff);
        } else {
          this.scalingFactor = 1.0;
          domainInfo.extendDomain((t110$ = this[S$1._domainExtent], t110$ == null ? null : t110$.min));
          domainInfo.extendDomain((t110$0 = this[S$1._domainExtent], t110$0 == null ? null : t110$0.max));
        }
      }
      if (!this.keepViewportWithinData) {
        this.scalingFactor = math.max(core.double, 1.0, this.scalingFactor);
      }
    }
    updateViewportTranslatePx(domainInfo, scaleScalingFactor) {
      if (this[S$1._manualDomainExtent]) {
        this.translatePx = -scaleScalingFactor * (dart.nullCheck(this[S$1._domainExtent]).min - domainInfo.extent.min);
      }
      if (!this.keepViewportWithinData) {
        this.translatePx = math.min(core.double, 0.0, this.translatePx);
        this.translatePx = math.max(core.double, dart.nullCheck(this.range).diff * (1.0 - this.scalingFactor), this.translatePx);
      }
    }
    updateViewportDomainExtent(domainInfo, scaleScalingFactor) {
      if (!this[S$1._manualDomainExtent]) {
        let viewportDomainDiff = domainInfo.domainDiff / this.scalingFactor;
        let viewportStart = -this.translatePx / scaleScalingFactor + domainInfo.extent.min;
        this[S$1._domainExtent] = new numeric_extents.NumericExtents.new(viewportStart, viewportStart + viewportDomainDiff);
      }
    }
  };
  (linear_scale_viewport.LinearScaleViewportSettings.new = function() {
    this[S$1.range] = null;
    this[S$1.keepViewportWithinData] = true;
    this[S$1.scalingFactor] = 1.0;
    this[S$1.translatePx] = 0.0;
    this[S$1._domainExtent] = null;
    this[S$1._manualDomainExtent] = false;
    ;
  }).prototype = linear_scale_viewport.LinearScaleViewportSettings.prototype;
  (linear_scale_viewport.LinearScaleViewportSettings.copy = function(other) {
    this[S$1.range] = null;
    this[S$1.keepViewportWithinData] = true;
    this[S$1.scalingFactor] = 1.0;
    this[S$1.translatePx] = 0.0;
    this[S$1._domainExtent] = null;
    this[S$1._manualDomainExtent] = false;
    this.range = other.range;
    this.keepViewportWithinData = other.keepViewportWithinData;
    this.scalingFactor = other.scalingFactor;
    this.translatePx = other.translatePx;
    this[S$1._manualDomainExtent] = other[S$1._manualDomainExtent];
    this[S$1._domainExtent] = other[S$1._domainExtent];
  }).prototype = linear_scale_viewport.LinearScaleViewportSettings.prototype;
  dart.addTypeTests(linear_scale_viewport.LinearScaleViewportSettings);
  dart.addTypeCaches(linear_scale_viewport.LinearScaleViewportSettings);
  dart.setMethodSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getMethods(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    reset: dart.fnType(dart.void, []),
    isRangeValueWithinViewport: dart.fnType(core.bool, [core.double]),
    updateViewportScaleFactor: dart.fnType(dart.void, [linear_scale_domain_info.LinearScaleDomainInfo]),
    updateViewportTranslatePx: dart.fnType(dart.void, [linear_scale_domain_info.LinearScaleDomainInfo, core.double]),
    updateViewportDomainExtent: dart.fnType(dart.void, [linear_scale_domain_info.LinearScaleDomainInfo, core.double])
  }));
  dart.setGetterSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getGetters(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    domainExtent: dart.nullable(numeric_extents.NumericExtents),
    rangeWidth: core.int
  }));
  dart.setSetterSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getSetters(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    domainExtent: dart.nullable(numeric_extents.NumericExtents)
  }));
  dart.setLibraryUri(linear_scale_viewport.LinearScaleViewportSettings, I[149]);
  dart.setFieldSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getFields(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    range: dart.fieldType(dart.nullable(scale$.ScaleOutputExtent)),
    keepViewportWithinData: dart.fieldType(core.bool),
    scalingFactor: dart.fieldType(core.double),
    translatePx: dart.fieldType(core.double),
    [S$1._domainExtent]: dart.fieldType(dart.nullable(numeric_extents.NumericExtents)),
    [S$1._manualDomainExtent]: dart.fieldType(core.bool)
  }));
  linear_scale_function.LinearScaleFunction = class LinearScaleFunction extends core.Object {
    get rangeBandPixels() {
      return this[S$1.rangeBandPixels];
    }
    set rangeBandPixels(value) {
      this[S$1.rangeBandPixels] = value;
    }
    get domainTranslate() {
      return this[S$1.domainTranslate];
    }
    set domainTranslate(value) {
      this[S$1.domainTranslate] = value;
    }
    get scalingFactor() {
      return this[S$1.scalingFactor$1];
    }
    set scalingFactor(value) {
      this[S$1.scalingFactor$1] = value;
    }
    get rangeTranslate() {
      return this[S$1.rangeTranslate];
    }
    set rangeTranslate(value) {
      this[S$1.rangeTranslate] = value;
    }
    get stepSizePixels() {
      return this[S$1.stepSizePixels];
    }
    set stepSizePixels(value) {
      this[S$1.stepSizePixels] = value;
    }
    _get(domainValue) {
      return ((domainValue + this.domainTranslate) * this.scalingFactor + this.rangeTranslate)[S$.$toDouble]();
    }
    reverse(viewPixels) {
      return (viewPixels - this.rangeTranslate) / this.scalingFactor - this.domainTranslate;
    }
    updateScaleFactor(viewportSettings, domainInfo, rangeBandConfig, stepSizeConfig) {
      let rangeDiff = dart.nullCheck(viewportSettings.range).diff[S$.$toDouble]();
      let hasHalfStepAtStart = domainInfo.extent.min === domainInfo.dataDomainStart;
      let hasHalfStepAtEnd = domainInfo.extent.max === domainInfo.dataDomainEnd;
      let reservedRangePercentOfStep = this.getStepReservationPercent(hasHalfStepAtStart, hasHalfStepAtEnd);
      this[S$1._updateStepSizeAndScaleFactor](viewportSettings, domainInfo, rangeDiff, reservedRangePercentOfStep, rangeBandConfig, stepSizeConfig);
    }
    getStepReservationPercent(hasHalfStepAtStart, hasHalfStepAtEnd) {
      if (!hasHalfStepAtStart && !hasHalfStepAtEnd) {
        return 0.0;
      }
      if (hasHalfStepAtStart && hasHalfStepAtEnd) {
        return 1.0;
      }
      return 0.5;
    }
    updateTranslateAndRangeBand(viewportSettings, domainInfo, rangeBandConfig) {
      if (domainInfo.domainDiff === 0) {
        this.rangeTranslate = dart.nullCheck(viewportSettings.range).start + dart.nullCheck(viewportSettings.range).diff / 2;
      } else {
        let hasHalfStepAtStart = domainInfo.extent.min === domainInfo.dataDomainStart;
        let reservedRangePixelShift = hasHalfStepAtStart ? this.stepSizePixels / 2.0 : 0.0;
        this.rangeTranslate = dart.nullCheck(viewportSettings.range).start + viewportSettings.translatePx + reservedRangePixelShift;
      }
      this.domainTranslate = -1 * domainInfo.extent.min;
      this.rangeBandPixels = this[S$1._calculateRangeBandSize](rangeBandConfig);
    }
    [S$1._calculateRangeBandSize](rangeBandConfig) {
      switch (rangeBandConfig.type) {
        case C[167] || CT.C167:
        {
          return rangeBandConfig.size * this.scalingFactor;
        }
        case C[163] || CT.C163:
        {
          return rangeBandConfig.size;
        }
        case C[164] || CT.C164:
        {
          return this.stepSizePixels - rangeBandConfig.size;
        }
        case C[165] || CT.C165:
        case C[166] || CT.C166:
        {
          return this.stepSizePixels * rangeBandConfig.size;
        }
        case C[168] || CT.C168:
        {
          return 0.0;
        }
      }
    }
    [S$1._updateStepSizeAndScaleFactor](viewportSettings, domainInfo, rangeDiff, reservedRangePercentOfStep, rangeBandConfig, stepSizeConfig) {
      let domainDiff = domainInfo.domainDiff[S$.$toDouble]();
      if (rangeBandConfig.type !== scale$.RangeBandType.none) {
        switch (stepSizeConfig.type) {
          case C[169] || CT.C169:
          {
            let minimumDetectedDomainStep = domainInfo.minimumDetectedDomainStep[S$.$toDouble]();
            if (minimumDetectedDomainStep !== null && minimumDetectedDomainStep[S$1.$isFinite]) {
              this.scalingFactor = viewportSettings.scalingFactor * (rangeDiff / (domainDiff + minimumDetectedDomainStep * reservedRangePercentOfStep));
              this.stepSizePixels = minimumDetectedDomainStep * this.scalingFactor;
            } else {
              this.stepSizePixels = rangeDiff[S$.$abs]();
              this.scalingFactor = 1.0;
            }
            return;
          }
          case C[170] || CT.C170:
          {
            this.stepSizePixels = stepSizeConfig.size;
            let reservedRangeForStepPixels = this.stepSizePixels * reservedRangePercentOfStep;
            this.scalingFactor = domainDiff === 0 ? 1.0 : viewportSettings.scalingFactor * (rangeDiff - reservedRangeForStepPixels) / domainDiff;
            return;
          }
          case C[171] || CT.C171:
          {
            let domainStepWidth = stepSizeConfig.size;
            let totalDomainDiff = domainDiff + domainStepWidth * reservedRangePercentOfStep;
            this.scalingFactor = totalDomainDiff === 0 ? 1.0 : viewportSettings.scalingFactor * (rangeDiff / totalDomainDiff);
            this.stepSizePixels = domainStepWidth * this.scalingFactor;
            return;
          }
        }
      }
      this.stepSizePixels = 0.0;
      this.scalingFactor = domainDiff === 0 ? 1.0 : viewportSettings.scalingFactor * rangeDiff / domainDiff;
    }
  };
  (linear_scale_function.LinearScaleFunction.new = function() {
    this[S$1.rangeBandPixels] = 0.0;
    this[S$1.domainTranslate] = 0.0;
    this[S$1.scalingFactor$1] = 1.0;
    this[S$1.rangeTranslate] = 0.0;
    this[S$1.stepSizePixels] = 0.0;
    ;
  }).prototype = linear_scale_function.LinearScaleFunction.prototype;
  dart.addTypeTests(linear_scale_function.LinearScaleFunction);
  dart.addTypeCaches(linear_scale_function.LinearScaleFunction);
  dart.setMethodSignature(linear_scale_function.LinearScaleFunction, () => ({
    __proto__: dart.getMethods(linear_scale_function.LinearScaleFunction.__proto__),
    _get: dart.fnType(core.double, [core.num]),
    reverse: dart.fnType(core.double, [core.double]),
    updateScaleFactor: dart.fnType(dart.void, [linear_scale_viewport.LinearScaleViewportSettings, linear_scale_domain_info.LinearScaleDomainInfo, scale$.RangeBandConfig, scale$.StepSizeConfig]),
    getStepReservationPercent: dart.fnType(core.double, [core.bool, core.bool]),
    updateTranslateAndRangeBand: dart.fnType(dart.void, [linear_scale_viewport.LinearScaleViewportSettings, linear_scale_domain_info.LinearScaleDomainInfo, scale$.RangeBandConfig]),
    [S$1._calculateRangeBandSize]: dart.fnType(core.double, [scale$.RangeBandConfig]),
    [S$1._updateStepSizeAndScaleFactor]: dart.fnType(dart.void, [linear_scale_viewport.LinearScaleViewportSettings, linear_scale_domain_info.LinearScaleDomainInfo, core.double, core.double, scale$.RangeBandConfig, scale$.StepSizeConfig])
  }));
  dart.setLibraryUri(linear_scale_function.LinearScaleFunction, I[150]);
  dart.setFieldSignature(linear_scale_function.LinearScaleFunction, () => ({
    __proto__: dart.getFields(linear_scale_function.LinearScaleFunction.__proto__),
    rangeBandPixels: dart.fieldType(core.double),
    domainTranslate: dart.fieldType(core.num),
    scalingFactor: dart.fieldType(core.double),
    rangeTranslate: dart.fieldType(core.double),
    stepSizePixels: dart.fieldType(core.double)
  }));
  linear_scale_domain_info.LinearScaleDomainInfo = class LinearScaleDomainInfo extends core.Object {
    get domainOverride() {
      return this[S$1.domainOverride];
    }
    set domainOverride(value) {
      this[S$1.domainOverride] = value;
    }
    get dataDomainStart() {
      return this[S$1._dataDomainStart];
    }
    get dataDomainEnd() {
      return this[S$1._dataDomainEnd];
    }
    get minimumDetectedDomainStep() {
      return this[S$1._minimumDetectedDomainStep];
    }
    get domainDiff() {
      return this.extent.width;
    }
    reset() {
      this[S$1._previouslyAddedDomain] = null;
      this[S$1._dataDomainStart] = 1 / 0;
      this[S$1._dataDomainEnd] = -1 / 0;
      this[S$1._minimumDetectedDomainStep] = 1 / 0;
    }
    addDomainValue(domainValue) {
      if (domainValue == null || !domainValue[S$1.$isFinite]) {
        return;
      }
      this.extendDomain(domainValue);
      if (this[S$1._previouslyAddedDomain] != null) {
        let domainStep = (dart.notNull(domainValue) - dart.nullCheck(this[S$1._previouslyAddedDomain]))[S$.$abs]();
        if (domainStep !== 0.0 && domainStep < this.minimumDetectedDomainStep) {
          this[S$1._minimumDetectedDomainStep] = domainStep;
        }
      }
      this[S$1._previouslyAddedDomain] = domainValue;
    }
    extendDomain(domainValue) {
      if (domainValue == null || !domainValue[S$1.$isFinite]) {
        return false;
      }
      let domainExtended = false;
      if (dart.notNull(domainValue) < this[S$1._dataDomainStart]) {
        this[S$1._dataDomainStart] = domainValue;
        domainExtended = true;
      }
      if (dart.notNull(domainValue) > this[S$1._dataDomainEnd]) {
        this[S$1._dataDomainEnd] = domainValue;
        domainExtended = true;
      }
      return domainExtended;
    }
    get extent() {
      let tmpDomainStart = null;
      let tmpDomainEnd = null;
      if (this.domainOverride != null) {
        tmpDomainStart = dart.nullCheck(this.domainOverride).min;
        tmpDomainEnd = dart.nullCheck(this.domainOverride).max;
      } else {
        tmpDomainStart = this[S$1._dataDomainStart][S$1.$isFinite] ? this[S$1._dataDomainStart] : 0.0;
        tmpDomainEnd = this[S$1._dataDomainEnd][S$1.$isFinite] ? this[S$1._dataDomainEnd] : 1.0;
      }
      return new numeric_extents.NumericExtents.new(tmpDomainStart, tmpDomainEnd);
    }
  };
  (linear_scale_domain_info.LinearScaleDomainInfo.new = function() {
    this[S$1.domainOverride] = null;
    this[S$1._dataDomainStart] = 1 / 0;
    this[S$1._dataDomainEnd] = -1 / 0;
    this[S$1._previouslyAddedDomain] = null;
    this[S$1._minimumDetectedDomainStep] = 1 / 0;
    ;
  }).prototype = linear_scale_domain_info.LinearScaleDomainInfo.prototype;
  (linear_scale_domain_info.LinearScaleDomainInfo.copy = function(other) {
    this[S$1.domainOverride] = null;
    this[S$1._dataDomainStart] = 1 / 0;
    this[S$1._dataDomainEnd] = -1 / 0;
    this[S$1._previouslyAddedDomain] = null;
    this[S$1._minimumDetectedDomainStep] = 1 / 0;
    if (other.domainOverride != null) {
      this.domainOverride = other.domainOverride;
    }
    this[S$1._dataDomainStart] = other[S$1._dataDomainStart];
    this[S$1._dataDomainEnd] = other[S$1._dataDomainEnd];
    this[S$1._previouslyAddedDomain] = other[S$1._previouslyAddedDomain];
    this[S$1._minimumDetectedDomainStep] = other[S$1._minimumDetectedDomainStep];
  }).prototype = linear_scale_domain_info.LinearScaleDomainInfo.prototype;
  dart.addTypeTests(linear_scale_domain_info.LinearScaleDomainInfo);
  dart.addTypeCaches(linear_scale_domain_info.LinearScaleDomainInfo);
  dart.setMethodSignature(linear_scale_domain_info.LinearScaleDomainInfo, () => ({
    __proto__: dart.getMethods(linear_scale_domain_info.LinearScaleDomainInfo.__proto__),
    reset: dart.fnType(dart.void, []),
    addDomainValue: dart.fnType(dart.void, [dart.nullable(core.num)]),
    extendDomain: dart.fnType(core.bool, [dart.nullable(core.num)])
  }));
  dart.setGetterSignature(linear_scale_domain_info.LinearScaleDomainInfo, () => ({
    __proto__: dart.getGetters(linear_scale_domain_info.LinearScaleDomainInfo.__proto__),
    dataDomainStart: core.num,
    dataDomainEnd: core.num,
    minimumDetectedDomainStep: core.num,
    domainDiff: core.num,
    extent: numeric_extents.NumericExtents
  }));
  dart.setLibraryUri(linear_scale_domain_info.LinearScaleDomainInfo, I[151]);
  dart.setFieldSignature(linear_scale_domain_info.LinearScaleDomainInfo, () => ({
    __proto__: dart.getFields(linear_scale_domain_info.LinearScaleDomainInfo.__proto__),
    domainOverride: dart.fieldType(dart.nullable(numeric_extents.NumericExtents)),
    [S$1._dataDomainStart]: dart.fieldType(core.num),
    [S$1._dataDomainEnd]: dart.fieldType(core.num),
    [S$1._previouslyAddedDomain]: dart.fieldType(dart.nullable(core.num)),
    [S$1._minimumDetectedDomainStep]: dart.fieldType(core.num)
  }));
  numeric_scale.NumericScale = class NumericScale extends scale$.MutableScale$(core.num) {};
  (numeric_scale.NumericScale.new = function() {
    ;
  }).prototype = numeric_scale.NumericScale.prototype;
  dart.addTypeTests(numeric_scale.NumericScale);
  dart.addTypeCaches(numeric_scale.NumericScale);
  dart.setLibraryUri(numeric_scale.NumericScale, I[152]);
  numeric_extents.NumericExtents = class NumericExtents extends core.Object {
    get min() {
      return this[S$1.min];
    }
    set min(value) {
      super.min = value;
    }
    get max() {
      return this[S$1.max];
    }
    set max(value) {
      super.max = value;
    }
    static fromValues(values) {
      if (values[S$.$isEmpty]) {
        return numeric_extents.NumericExtents.empty;
      }
      let min = values[S$.$first];
      let max = values[S$.$first];
      for (let value of values) {
        if (value < min) {
          min = value;
        } else if (max < value) {
          max = value;
        }
      }
      return new numeric_extents.NumericExtents.new(min, max);
    }
    plus(other) {
      if (this.min <= other.min) {
        if (this.max >= other.max) {
          return this;
        } else {
          return new numeric_extents.NumericExtents.new(this.min, other.max);
        }
      } else {
        if (other.max >= this.max) {
          return other;
        } else {
          return new numeric_extents.NumericExtents.new(other.min, this.max);
        }
      }
    }
    compareValue(value) {
      if (value < this.min) {
        return -1;
      }
      if (value > this.max) {
        return 1;
      }
      return 0;
    }
    [S$1._containsValue](value) {
      return this.compareValue(value) === 0;
    }
    overlaps(other) {
      return this[S$1._containsValue](other.min[S$.$toDouble]()) || this[S$1._containsValue](other.max[S$.$toDouble]()) || other[S$1._containsValue](this.min[S$.$toDouble]()) || other[S$1._containsValue](this.max[S$.$toDouble]());
    }
    _equals(other) {
      if (other == null) return false;
      return numeric_extents.NumericExtents.is(other) && this.min === other.min && this.max === other.max;
    }
    get hashCode() {
      return this.min[S$.$hashCode] + this.max[S$.$hashCode] * 31;
    }
    get width() {
      return this.max - this.min;
    }
    toString() {
      return "Extent(" + dart.str(this.min) + ", " + dart.str(this.max) + ")";
    }
  };
  (numeric_extents.NumericExtents.new = function(min, max) {
    this[S$1.min] = min;
    this[S$1.max] = max;
    ;
  }).prototype = numeric_extents.NumericExtents.prototype;
  dart.addTypeTests(numeric_extents.NumericExtents);
  dart.addTypeCaches(numeric_extents.NumericExtents);
  numeric_extents.NumericExtents[dart.implements] = () => [scale$.Extents$(core.num)];
  dart.setMethodSignature(numeric_extents.NumericExtents, () => ({
    __proto__: dart.getMethods(numeric_extents.NumericExtents.__proto__),
    plus: dart.fnType(numeric_extents.NumericExtents, [numeric_extents.NumericExtents]),
    compareValue: dart.fnType(core.int, [core.num]),
    [S$1._containsValue]: dart.fnType(core.bool, [core.double]),
    overlaps: dart.fnType(core.bool, [numeric_extents.NumericExtents])
  }));
  dart.setGetterSignature(numeric_extents.NumericExtents, () => ({
    __proto__: dart.getGetters(numeric_extents.NumericExtents.__proto__),
    width: core.num
  }));
  dart.setLibraryUri(numeric_extents.NumericExtents, I[153]);
  dart.setFieldSignature(numeric_extents.NumericExtents, () => ({
    __proto__: dart.getFields(numeric_extents.NumericExtents.__proto__),
    min: dart.finalFieldType(core.num),
    max: dart.finalFieldType(core.num)
  }));
  dart.defineExtensionMethods(numeric_extents.NumericExtents, ['_equals', 'toString']);
  dart.defineExtensionAccessors(numeric_extents.NumericExtents, ['hashCode']);
  dart.defineLazy(numeric_extents.NumericExtents, {
    /*numeric_extents.NumericExtents.unbounded*/get unbounded() {
      return C[172] || CT.C172;
    },
    /*numeric_extents.NumericExtents.empty*/get empty() {
      return C[173] || CT.C173;
    }
  }, false);
  linear_scale.LinearScale = class LinearScale extends core.Object {
    get rangeBandConfig() {
      return this[S$1.rangeBandConfig];
    }
    set rangeBandConfig(value) {
      this[S$1.rangeBandConfig] = value;
    }
    get stepSizeConfig() {
      return this[S$1.stepSizeConfig];
    }
    set stepSizeConfig(value) {
      this[S$1.stepSizeConfig] = value;
    }
    copy() {
      return new linear_scale.LinearScale._copy(this);
    }
    addDomain(domainValue) {
      core.num.as(domainValue);
      this[S$1._domainInfo].addDomainValue(domainValue);
    }
    resetDomain() {
      this[S$1._scaleReady] = false;
      this[S$1._domainInfo].reset();
    }
    resetViewportSettings() {
      this[S$1._viewportSettings].reset();
    }
    get dataExtent() {
      return new numeric_extents.NumericExtents.new(this[S$1._domainInfo].dataDomainStart, this[S$1._domainInfo].dataDomainEnd);
    }
    get minimumDomainStep() {
      return this[S$1._domainInfo].minimumDetectedDomainStep;
    }
    canTranslate(_) {
      core.num.as(_);
      return true;
    }
    set domainOverride(domainMaxExtent) {
      this[S$1._domainInfo].domainOverride = domainMaxExtent;
    }
    get domainOverride() {
      return this[S$1._domainInfo].domainOverride;
    }
    compareDomainValueToViewport(domainValue) {
      let t110;
      core.num.as(domainValue);
      let dataExtent = (t110 = this[S$1._viewportSettings].domainExtent, t110 == null ? this[S$1._domainInfo].extent : t110);
      return dataExtent.compareValue(domainValue);
    }
    setViewportSettings(viewportScale, viewportTranslatePx) {
      let t110;
      t110 = this[S$1._viewportSettings];
      (() => {
        t110.scalingFactor = viewportScale;
        t110.translatePx = viewportTranslatePx;
        t110.domainExtent = null;
        return t110;
      })();
      this[S$1._scaleReady] = false;
    }
    get viewportScalingFactor() {
      return this[S$1._viewportSettings].scalingFactor;
    }
    get viewportTranslatePx() {
      return this[S$1._viewportSettings].translatePx;
    }
    set viewportDomain(extent) {
      this[S$1._scaleReady] = false;
      this[S$1._viewportSettings].domainExtent = extent;
    }
    get viewportDomain() {
      this[S$1._configureScale]();
      return dart.nullCheck(this[S$1._viewportSettings].domainExtent);
    }
    set keepViewportWithinData(autoAdjustViewportToNiceValues) {
      this[S$1._scaleReady] = false;
      this[S$1._viewportSettings].keepViewportWithinData = true;
    }
    get keepViewportWithinData() {
      return this[S$1._viewportSettings].keepViewportWithinData;
    }
    computeViewportScaleFactor(domainWindow) {
      return this[S$1._domainInfo].domainDiff / domainWindow;
    }
    set range(extent) {
      this[S$1._viewportSettings].range = extent;
      this[S$1._scaleReady] = false;
    }
    get range() {
      return this[S$1._viewportSettings].range;
    }
    _get(domainValue) {
      core.num.as(domainValue);
      this[S$1._configureScale]();
      return this[S$1._scaleFunction]._get(domainValue);
    }
    reverse(viewPixels) {
      this[S$1._configureScale]();
      let domain = this[S$1._scaleFunction].reverse(viewPixels);
      return domain;
    }
    get rangeBand() {
      this[S$1._configureScale]();
      return this[S$1._scaleFunction].rangeBandPixels;
    }
    get stepSize() {
      this[S$1._configureScale]();
      return this[S$1._scaleFunction].stepSizePixels;
    }
    get domainStepSize() {
      return this[S$1._domainInfo].minimumDetectedDomainStep[S$.$toDouble]();
    }
    get rangeWidth() {
      return (dart.nullCheck(this.range).end - dart.nullCheck(this.range).start)[S$.$abs]()[S$.$toInt]();
    }
    isRangeValueWithinViewport(rangeValue) {
      return dart.nullCheck(this.range).containsValue(rangeValue);
    }
    [S$1._configureScale]() {
      if (this[S$1._scaleReady]) return;
      if (!(this[S$1._viewportSettings].range != null)) dart.assertFailed(null, I[154], 219, 12, "_viewportSettings.range != null");
      this[S$1._viewportSettings].updateViewportScaleFactor(this[S$1._domainInfo]);
      this[S$1._scaleFunction].updateScaleFactor(this[S$1._viewportSettings], this[S$1._domainInfo], this.rangeBandConfig, this.stepSizeConfig);
      this[S$1._viewportSettings].updateViewportTranslatePx(this[S$1._domainInfo], this[S$1._scaleFunction].scalingFactor);
      this[S$1._scaleFunction].updateTranslateAndRangeBand(this[S$1._viewportSettings], this[S$1._domainInfo], this.rangeBandConfig);
      this[S$1._viewportSettings].updateViewportDomainExtent(this[S$1._domainInfo], this[S$1._scaleFunction].scalingFactor);
      this[S$1._scaleReady] = true;
    }
  };
  (linear_scale.LinearScale.new = function() {
    this[S$1._scaleFunction] = new linear_scale_function.LinearScaleFunction.new();
    this[S$1.rangeBandConfig] = C[174] || CT.C174;
    this[S$1.stepSizeConfig] = C[175] || CT.C175;
    this[S$1._scaleReady] = false;
    this[S$1._domainInfo] = new linear_scale_domain_info.LinearScaleDomainInfo.new();
    this[S$1._viewportSettings] = new linear_scale_viewport.LinearScaleViewportSettings.new();
    ;
  }).prototype = linear_scale.LinearScale.prototype;
  (linear_scale.LinearScale._copy = function(other) {
    this[S$1._scaleFunction] = new linear_scale_function.LinearScaleFunction.new();
    this[S$1._scaleReady] = false;
    this[S$1._domainInfo] = new linear_scale_domain_info.LinearScaleDomainInfo.copy(other[S$1._domainInfo]);
    this[S$1._viewportSettings] = new linear_scale_viewport.LinearScaleViewportSettings.copy(other[S$1._viewportSettings]);
    this[S$1.rangeBandConfig] = other.rangeBandConfig;
    this[S$1.stepSizeConfig] = other.stepSizeConfig;
    ;
  }).prototype = linear_scale.LinearScale.prototype;
  dart.addTypeTests(linear_scale.LinearScale);
  dart.addTypeCaches(linear_scale.LinearScale);
  linear_scale.LinearScale[dart.implements] = () => [numeric_scale.NumericScale];
  dart.setMethodSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getMethods(linear_scale.LinearScale.__proto__),
    copy: dart.fnType(linear_scale.LinearScale, []),
    addDomain: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    resetDomain: dart.fnType(dart.void, []),
    resetViewportSettings: dart.fnType(dart.void, []),
    canTranslate: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    compareDomainValueToViewport: dart.fnType(core.int, [dart.nullable(core.Object)]),
    setViewportSettings: dart.fnType(dart.void, [core.double, core.double]),
    computeViewportScaleFactor: dart.fnType(core.double, [core.double]),
    _get: dart.fnType(core.num, [dart.nullable(core.Object)]),
    reverse: dart.fnType(core.num, [core.double]),
    isRangeValueWithinViewport: dart.fnType(core.bool, [core.double]),
    [S$1._configureScale]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getGetters(linear_scale.LinearScale.__proto__),
    dataExtent: numeric_extents.NumericExtents,
    minimumDomainStep: core.num,
    domainOverride: dart.nullable(numeric_extents.NumericExtents),
    viewportScalingFactor: core.double,
    viewportTranslatePx: core.double,
    viewportDomain: numeric_extents.NumericExtents,
    keepViewportWithinData: core.bool,
    range: dart.nullable(scale$.ScaleOutputExtent),
    rangeBand: core.double,
    stepSize: core.double,
    domainStepSize: core.double,
    rangeWidth: core.int
  }));
  dart.setSetterSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getSetters(linear_scale.LinearScale.__proto__),
    domainOverride: dart.nullable(numeric_extents.NumericExtents),
    viewportDomain: numeric_extents.NumericExtents,
    keepViewportWithinData: core.bool,
    range: dart.nullable(scale$.ScaleOutputExtent)
  }));
  dart.setLibraryUri(linear_scale.LinearScale, I[155]);
  dart.setFieldSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getFields(linear_scale.LinearScale.__proto__),
    [S$1._domainInfo]: dart.finalFieldType(linear_scale_domain_info.LinearScaleDomainInfo),
    [S$1._viewportSettings]: dart.finalFieldType(linear_scale_viewport.LinearScaleViewportSettings),
    [S$1._scaleFunction]: dart.finalFieldType(linear_scale_function.LinearScaleFunction),
    rangeBandConfig: dart.fieldType(scale$.RangeBandConfig),
    stepSizeConfig: dart.fieldType(scale$.StepSizeConfig),
    [S$1._scaleReady]: dart.fieldType(core.bool)
  }));
  base_tick_draw_strategy._PixelVerticalDirection = class _PixelVerticalDirection extends core.Object {
    toString() {
      return this[S$0._name$19];
    }
  };
  (base_tick_draw_strategy._PixelVerticalDirection.new = function(index, _name) {
    this.index = index;
    this[S$0._name$19] = _name;
    ;
  }).prototype = base_tick_draw_strategy._PixelVerticalDirection.prototype;
  dart.addTypeTests(base_tick_draw_strategy._PixelVerticalDirection);
  dart.addTypeCaches(base_tick_draw_strategy._PixelVerticalDirection);
  dart.setLibraryUri(base_tick_draw_strategy._PixelVerticalDirection, I[116]);
  dart.setFieldSignature(base_tick_draw_strategy._PixelVerticalDirection, () => ({
    __proto__: dart.getFields(base_tick_draw_strategy._PixelVerticalDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$19]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(base_tick_draw_strategy._PixelVerticalDirection, ['toString']);
  base_tick_draw_strategy._PixelVerticalDirection.over = C[130] || CT.C130;
  base_tick_draw_strategy._PixelVerticalDirection.center = C[132] || CT.C132;
  base_tick_draw_strategy._PixelVerticalDirection.under = C[131] || CT.C131;
  base_tick_draw_strategy._PixelVerticalDirection.values = C[176] || CT.C176;
  const _is_TickHint_default = Symbol('_is_TickHint_default');
  tick_provider.TickHint$ = dart.generic(D => {
    class TickHint extends core.Object {
      get start() {
        return this[S$1.start$1];
      }
      set start(value) {
        super.start = value;
      }
      get end() {
        return this[S$1.end$1];
      }
      set end(value) {
        super.end = value;
      }
      get tickCount() {
        return this[S$1.tickCount];
      }
      set tickCount(value) {
        super.tickCount = value;
      }
    }
    (TickHint.new = function(start, end, opts) {
      let tickCount = opts && 'tickCount' in opts ? opts.tickCount : null;
      this[S$1.start$1] = start;
      this[S$1.end$1] = end;
      this[S$1.tickCount] = tickCount;
      ;
    }).prototype = TickHint.prototype;
    dart.addTypeTests(TickHint);
    TickHint.prototype[_is_TickHint_default] = true;
    dart.addTypeCaches(TickHint);
    dart.setLibraryUri(TickHint, I[82]);
    dart.setFieldSignature(TickHint, () => ({
      __proto__: dart.getFields(TickHint.__proto__),
      start: dart.finalFieldType(D),
      end: dart.finalFieldType(D),
      tickCount: dart.finalFieldType(core.int)
    }));
    return TickHint;
  });
  tick_provider.TickHint = tick_provider.TickHint$();
  dart.addTypeTests(tick_provider.TickHint, _is_TickHint_default);
  const _is_TickFormatter_default = Symbol('_is_TickFormatter_default');
  tick_formatter.TickFormatter$ = dart.generic(D => {
    class TickFormatter extends core.Object {}
    (TickFormatter.new = function() {
      ;
    }).prototype = TickFormatter.prototype;
    dart.addTypeTests(TickFormatter);
    TickFormatter.prototype[_is_TickFormatter_default] = true;
    dart.addTypeCaches(TickFormatter);
    dart.setLibraryUri(TickFormatter, I[113]);
    return TickFormatter;
  });
  tick_formatter.TickFormatter = tick_formatter.TickFormatter$();
  dart.addTypeTests(tick_formatter.TickFormatter, _is_TickFormatter_default);
  tick_formatter.OrdinalTickFormatter = class OrdinalTickFormatter extends tick_formatter.SimpleTickFormatterBase$(core.String) {
    formatValue(value) {
      core.String.as(value);
      return value;
    }
    _equals(other) {
      if (other == null) return false;
      return tick_formatter.OrdinalTickFormatter.is(other);
    }
    get hashCode() {
      return 31;
    }
  };
  (tick_formatter.OrdinalTickFormatter.new = function() {
    tick_formatter.OrdinalTickFormatter.__proto__.new.call(this);
    ;
  }).prototype = tick_formatter.OrdinalTickFormatter.prototype;
  dart.addTypeTests(tick_formatter.OrdinalTickFormatter);
  dart.addTypeCaches(tick_formatter.OrdinalTickFormatter);
  dart.setMethodSignature(tick_formatter.OrdinalTickFormatter, () => ({
    __proto__: dart.getMethods(tick_formatter.OrdinalTickFormatter.__proto__),
    formatValue: dart.fnType(core.String, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(tick_formatter.OrdinalTickFormatter, I[113]);
  dart.defineExtensionMethods(tick_formatter.OrdinalTickFormatter, ['_equals']);
  dart.defineExtensionAccessors(tick_formatter.OrdinalTickFormatter, ['hashCode']);
  tick_formatter.NumericTickFormatter = class NumericTickFormatter extends tick_formatter.SimpleTickFormatterBase$(core.num) {
    get formatter() {
      return this[S$1.formatter$2];
    }
    set formatter(value) {
      super.formatter = value;
    }
    static new(opts) {
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      formatter == null ? formatter = tick_formatter.NumericTickFormatter._getFormatter(number_format.NumberFormat.decimalPattern()) : null;
      return new tick_formatter.NumericTickFormatter._internal(formatter);
    }
    static fromNumberFormat(numberFormat) {
      return new tick_formatter.NumericTickFormatter._internal(tick_formatter.NumericTickFormatter._getFormatter(numberFormat));
    }
    static compactSimpleCurrency() {
      return new tick_formatter.NumericTickFormatter._internal(tick_formatter.NumericTickFormatter._getFormatter(number_format.NumberFormat.compactCurrency()));
    }
    static _getFormatter(numberFormat) {
      return dart.fn(value => value == null ? "" : numberFormat.format(value), T$0.numNToString());
    }
    formatValue(value) {
      let t110;
      core.num.as(value);
      t110 = value;
      return this.formatter(t110);
    }
    _equals(other) {
      if (other == null) return false;
      return tick_formatter.NumericTickFormatter.is(other) && this.formatter[S$.$_equals](other.formatter);
    }
    get hashCode() {
      return this.formatter[S$.$hashCode];
    }
  };
  (tick_formatter.NumericTickFormatter._internal = function(formatter) {
    this[S$1.formatter$2] = formatter;
    tick_formatter.NumericTickFormatter.__proto__.new.call(this);
    ;
  }).prototype = tick_formatter.NumericTickFormatter.prototype;
  dart.addTypeTests(tick_formatter.NumericTickFormatter);
  dart.addTypeCaches(tick_formatter.NumericTickFormatter);
  dart.setMethodSignature(tick_formatter.NumericTickFormatter, () => ({
    __proto__: dart.getMethods(tick_formatter.NumericTickFormatter.__proto__),
    formatValue: dart.fnType(core.String, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(tick_formatter.NumericTickFormatter, I[113]);
  dart.setFieldSignature(tick_formatter.NumericTickFormatter, () => ({
    __proto__: dart.getFields(tick_formatter.NumericTickFormatter.__proto__),
    formatter: dart.finalFieldType(dart.fnType(core.String, [dart.nullable(core.num)]))
  }));
  dart.defineExtensionMethods(tick_formatter.NumericTickFormatter, ['_equals']);
  dart.defineExtensionAccessors(tick_formatter.NumericTickFormatter, ['hashCode']);
  dart.defineLazy(series_renderer, {
    /*series_renderer.rendererIdKey*/get rendererIdKey() {
      return C[177] || CT.C177;
    },
    /*series_renderer.rendererKey*/get rendererKey() {
      return C[178] || CT.C178;
    }
  }, false);
  const _is_SeriesDatum_default = Symbol('_is_SeriesDatum_default');
  series_datum.SeriesDatum$ = dart.generic(D => {
    class SeriesDatum extends core.Object {
      get series() {
        return this[S$1.series$7];
      }
      set series(value) {
        super.series = value;
      }
      get datum() {
        return this[S$1.datum$4];
      }
      set datum(value) {
        super.datum = value;
      }
      get index() {
        if (this.datum == null) return null;
        this[S$1._index$1] == null ? this[S$1._index$1] = this.series.data[S$.$indexOf](this.datum) : null;
        return this[S$1._index$1];
      }
      _equals(other) {
        if (other == null) return false;
        return series_datum.SeriesDatum.is(other) && other.series[S$.$_equals](this.series) && dart.equals(other.datum, this.datum);
      }
      get hashCode() {
        return this.series[S$.$hashCode] * 31 + dart.hashCode(this.datum);
      }
    }
    (SeriesDatum.new = function(series, datum) {
      this[S$1._index$1] = null;
      this[S$1.series$7] = series;
      this[S$1.datum$4] = datum;
      ;
    }).prototype = SeriesDatum.prototype;
    dart.addTypeTests(SeriesDatum);
    SeriesDatum.prototype[_is_SeriesDatum_default] = true;
    dart.addTypeCaches(SeriesDatum);
    dart.setGetterSignature(SeriesDatum, () => ({
      __proto__: dart.getGetters(SeriesDatum.__proto__),
      index: dart.nullable(core.int)
    }));
    dart.setLibraryUri(SeriesDatum, I[156]);
    dart.setFieldSignature(SeriesDatum, () => ({
      __proto__: dart.getFields(SeriesDatum.__proto__),
      series: dart.finalFieldType(processed_series.ImmutableSeries$(D)),
      datum: dart.finalFieldType(dart.dynamic),
      [S$1._index$1]: dart.fieldType(dart.nullable(core.int))
    }));
    dart.defineExtensionMethods(SeriesDatum, ['_equals']);
    dart.defineExtensionAccessors(SeriesDatum, ['hashCode']);
    return SeriesDatum;
  });
  series_datum.SeriesDatum = series_datum.SeriesDatum$();
  dart.addTypeTests(series_datum.SeriesDatum, _is_SeriesDatum_default);
  const _is_SeriesDatumConfig_default = Symbol('_is_SeriesDatumConfig_default');
  series_datum.SeriesDatumConfig$ = dart.generic(D => {
    class SeriesDatumConfig extends core.Object {
      get seriesId() {
        return this[S$1.seriesId];
      }
      set seriesId(value) {
        super.seriesId = value;
      }
      get domainValue() {
        return this[S$1.domainValue$1];
      }
      set domainValue(value) {
        super.domainValue = value;
      }
      _equals(other) {
        if (other == null) return false;
        return series_datum.SeriesDatumConfig.is(other) && this.seriesId === other.seriesId && dart.equals(this.domainValue, other.domainValue);
      }
      get hashCode() {
        let hashcode = this.seriesId[S$.$hashCode];
        hashcode = hashcode * 37 + dart.hashCode(this.domainValue);
        return hashcode;
      }
    }
    (SeriesDatumConfig.new = function(seriesId, domainValue) {
      this[S$1.seriesId] = seriesId;
      this[S$1.domainValue$1] = domainValue;
      ;
    }).prototype = SeriesDatumConfig.prototype;
    dart.addTypeTests(SeriesDatumConfig);
    SeriesDatumConfig.prototype[_is_SeriesDatumConfig_default] = true;
    dart.addTypeCaches(SeriesDatumConfig);
    dart.setLibraryUri(SeriesDatumConfig, I[156]);
    dart.setFieldSignature(SeriesDatumConfig, () => ({
      __proto__: dart.getFields(SeriesDatumConfig.__proto__),
      seriesId: dart.finalFieldType(core.String),
      domainValue: dart.finalFieldType(D)
    }));
    dart.defineExtensionMethods(SeriesDatumConfig, ['_equals']);
    dart.defineExtensionAccessors(SeriesDatumConfig, ['hashCode']);
    return SeriesDatumConfig;
  });
  series_datum.SeriesDatumConfig = series_datum.SeriesDatumConfig$();
  dart.addTypeTests(series_datum.SeriesDatumConfig, _is_SeriesDatumConfig_default);
  const _is_SelectionModel_default = Symbol('_is_SelectionModel_default');
  selection_model.SelectionModel$ = dart.generic(D => {
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var JSArrayOfSeriesDatumOfD = () => (JSArrayOfSeriesDatumOfD = dart.constFn(_interceptors.JSArray$(SeriesDatumOfD())))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var JSArrayOfImmutableSeriesOfD = () => (JSArrayOfImmutableSeriesOfD = dart.constFn(_interceptors.JSArray$(ImmutableSeriesOfD())))();
    var ListOfSeriesDatumOfD = () => (ListOfSeriesDatumOfD = dart.constFn(core.List$(SeriesDatumOfD())))();
    var ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    var ListOfD = () => (ListOfD = dart.constFn(core.List$(D)))();
    var IdentityMapOfString$ListOfD = () => (IdentityMapOfString$ListOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfD())))();
    var JSArrayOfD = () => (JSArrayOfD = dart.constFn(_interceptors.JSArray$(D)))();
    var ImmutableSeriesOfDTobool = () => (ImmutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [ImmutableSeriesOfD()])))();
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var ListEqualityOfSeriesDatumOfD = () => (ListEqualityOfSeriesDatumOfD = dart.constFn(equality.ListEquality$(SeriesDatumOfD())))();
    var ListEqualityOfImmutableSeriesOfD = () => (ListEqualityOfImmutableSeriesOfD = dart.constFn(equality.ListEquality$(ImmutableSeriesOfD())))();
    class SelectionModel extends core.Object {
      get hasDatumSelection() {
        return this[S$1._selectedDatum][S$.$isNotEmpty];
      }
      isDatumSelected(series, index) {
        ImmutableSeriesOfD().as(series);
        let datum = index == null ? null : series.data[S$.$_get](index);
        return this[S$1._selectedDatum][S$.$contains](new (SeriesDatumOfD()).new(series, datum));
      }
      get selectedDatum() {
        return ListOfSeriesDatumOfD().unmodifiable(this[S$1._selectedDatum]);
      }
      get hasSeriesSelection() {
        return this[S$1._selectedSeries][S$.$isNotEmpty];
      }
      get selectedSeries() {
        return ListOfImmutableSeriesOfD().unmodifiable(this[S$1._selectedSeries]);
      }
      get hasAnySelection() {
        return this[S$1._selectedDatum][S$.$isNotEmpty] || this.selectedSeries[S$.$isNotEmpty];
      }
      _equals(other) {
        if (other == null) return false;
        return SelectionModelOfD().is(other) && new (ListEqualityOfSeriesDatumOfD()).new().equals(this[S$1._selectedDatum], other.selectedDatum) && new (ListEqualityOfImmutableSeriesOfD()).new().equals(this[S$1._selectedSeries], other.selectedSeries);
      }
      get hashCode() {
        let hashcode = new (ListEqualityOfSeriesDatumOfD()).new().hash(this[S$1._selectedDatum]);
        hashcode = hashcode * 37 + new (ListEqualityOfImmutableSeriesOfD()).new().hash(this[S$1._selectedSeries]);
        return hashcode;
      }
    }
    (SelectionModel.new = function(opts) {
      let selectedData = opts && 'selectedData' in opts ? opts.selectedData : null;
      let selectedSeries = opts && 'selectedSeries' in opts ? opts.selectedSeries : null;
      this[S$1._selectedDatum] = JSArrayOfSeriesDatumOfD().of([]);
      this[S$1._selectedSeries] = JSArrayOfImmutableSeriesOfD().of([]);
      if (selectedData != null) {
        this[S$1._selectedDatum] = selectedData;
      }
      if (selectedSeries != null) {
        this[S$1._selectedSeries] = selectedSeries;
      }
    }).prototype = SelectionModel.prototype;
    (SelectionModel.fromOther = function(other) {
      this[S$1._selectedDatum] = JSArrayOfSeriesDatumOfD().of([]);
      this[S$1._selectedSeries] = JSArrayOfImmutableSeriesOfD().of([]);
      this[S$1._selectedDatum] = ListOfSeriesDatumOfD().of(other[S$1._selectedDatum]);
      this[S$1._selectedSeries] = ListOfImmutableSeriesOfD().of(other[S$1._selectedSeries]);
    }).prototype = SelectionModel.prototype;
    (SelectionModel.fromConfig = function(selectedDataConfig, selectedSeriesConfig, seriesList) {
      let t110;
      this[S$1._selectedDatum] = JSArrayOfSeriesDatumOfD().of([]);
      this[S$1._selectedSeries] = JSArrayOfImmutableSeriesOfD().of([]);
      let selectedDataMap = new (IdentityMapOfString$ListOfD()).new();
      if (selectedDataConfig != null) {
        for (let config of selectedDataConfig) {
          t110 = config.seriesId;
          selectedDataMap[S$.$_get](t110) == null ? selectedDataMap[S$.$_set](t110, JSArrayOfD().of([])) : null;
          dart.nullCheck(selectedDataMap[S$.$_get](config.seriesId))[S$.$add](config.domainValue);
        }
        this[S$1._selectedSeries][S$.$addAll](seriesList[S$.$where](dart.fn(series => selectedDataMap[S$.$keys][S$.$contains](series.id), ImmutableSeriesOfDTobool())));
        for (let series of seriesList) {
          if (selectedDataMap[S$.$containsKey](series.id)) {
            let domainFn = series.domainFn;
            for (let i = 0; i < series.data[S$.$length]; i = i + 1) {
              let datum = series.data[S$.$_get](i);
              if (dart.nullCheck(selectedDataMap[S$.$_get](series.id))[S$.$contains](domainFn(i))) {
                this[S$1._selectedDatum][S$.$add](new (SeriesDatumOfD()).new(series, datum));
              }
            }
          }
        }
      }
      if (selectedSeriesConfig != null) {
        let existingSeriesIds = (() => {
          let t110 = T$.LinkedHashSetOfString().new();
          for (let series of this[S$1._selectedSeries])
            t110.add(series.id);
          return t110;
        })();
        let remainingSeriesToAdd = selectedSeriesConfig[S$.$where](dart.fn(seriesId => !existingSeriesIds.contains(seriesId), T$.StringTobool()))[S$1.$toSet]();
        this[S$1._selectedSeries][S$.$addAll](seriesList[S$.$where](dart.fn(series => remainingSeriesToAdd.contains(series.id), ImmutableSeriesOfDTobool())));
      }
    }).prototype = SelectionModel.prototype;
    dart.addTypeTests(SelectionModel);
    SelectionModel.prototype[_is_SelectionModel_default] = true;
    dart.addTypeCaches(SelectionModel);
    dart.setMethodSignature(SelectionModel, () => ({
      __proto__: dart.getMethods(SelectionModel.__proto__),
      isDatumSelected: dart.fnType(core.bool, [dart.nullable(core.Object), dart.nullable(core.int)])
    }));
    dart.setGetterSignature(SelectionModel, () => ({
      __proto__: dart.getGetters(SelectionModel.__proto__),
      hasDatumSelection: core.bool,
      selectedDatum: core.List$(series_datum.SeriesDatum$(D)),
      hasSeriesSelection: core.bool,
      selectedSeries: core.List$(processed_series.ImmutableSeries$(D)),
      hasAnySelection: core.bool
    }));
    dart.setLibraryUri(SelectionModel, I[157]);
    dart.setFieldSignature(SelectionModel, () => ({
      __proto__: dart.getFields(SelectionModel.__proto__),
      [S$1._selectedDatum]: dart.fieldType(core.List$(series_datum.SeriesDatum$(D))),
      [S$1._selectedSeries]: dart.fieldType(core.List$(processed_series.ImmutableSeries$(D)))
    }));
    dart.defineExtensionMethods(SelectionModel, ['_equals']);
    dart.defineExtensionAccessors(SelectionModel, ['hashCode']);
    return SelectionModel;
  });
  selection_model.SelectionModel = selection_model.SelectionModel$();
  dart.addTypeTests(selection_model.SelectionModel, _is_SelectionModel_default);
  const _is_MutableSelectionModel_default = Symbol('_is_MutableSelectionModel_default');
  selection_model.MutableSelectionModel$ = dart.generic(D => {
    var SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    var SelectionModelOfDTovoid = () => (SelectionModelOfDTovoid = dart.constFn(dart.fnType(dart.void, [SelectionModelOfD()])))();
    var JSArrayOfSelectionModelOfDTovoid = () => (JSArrayOfSelectionModelOfDTovoid = dart.constFn(_interceptors.JSArray$(SelectionModelOfDTovoid())))();
    var FnTovoid = () => (FnTovoid = dart.constFn(dart.fnType(dart.void, [SelectionModelOfDTovoid()])))();
    var SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    var JSArrayOfSeriesDatumOfD = () => (JSArrayOfSeriesDatumOfD = dart.constFn(_interceptors.JSArray$(SeriesDatumOfD())))();
    var ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    var JSArrayOfImmutableSeriesOfD = () => (JSArrayOfImmutableSeriesOfD = dart.constFn(_interceptors.JSArray$(ImmutableSeriesOfD())))();
    var ListOfSeriesDatumOfD = () => (ListOfSeriesDatumOfD = dart.constFn(core.List$(SeriesDatumOfD())))();
    var ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    var ListEqualityOfSeriesDatumOfD = () => (ListEqualityOfSeriesDatumOfD = dart.constFn(equality.ListEquality$(SeriesDatumOfD())))();
    var ListEqualityOfImmutableSeriesOfD = () => (ListEqualityOfImmutableSeriesOfD = dart.constFn(equality.ListEquality$(ImmutableSeriesOfD())))();
    class MutableSelectionModel extends selection_model.SelectionModel$(D) {
      set locked(locked) {
        this[S$1._locked] = locked;
        this[S$1._lockChangedListeners][S$.$forEach](dart.fn(listener => listener(new (SelectionModelOfD()).fromOther(this)), FnTovoid()));
      }
      get locked() {
        return this[S$1._locked];
      }
      clearSelection(opts) {
        let notifyListeners = opts && 'notifyListeners' in opts ? opts.notifyListeners : true;
        return this.updateSelection(JSArrayOfSeriesDatumOfD().of([]), JSArrayOfImmutableSeriesOfD().of([]), {notifyListeners: notifyListeners});
      }
      updateSelection(datumSelection, seriesList, opts) {
        ListOfSeriesDatumOfD().as(datumSelection);
        ListOfImmutableSeriesOfD().as(seriesList);
        let notifyListeners = opts && 'notifyListeners' in opts ? opts.notifyListeners : true;
        if (this[S$1._locked]) return false;
        let origSelectedDatum = this[S$1._selectedDatum];
        let origSelectedSeries = this[S$1._selectedSeries];
        this[S$1._selectedDatum] = datumSelection;
        this[S$1._selectedSeries] = seriesList;
        let copyOfSelectionModel = new (SelectionModelOfD()).fromOther(this);
        this[S$1._updatedListeners][S$.$forEach](dart.fn(listener => listener(copyOfSelectionModel), FnTovoid()));
        let changed = !new (ListEqualityOfSeriesDatumOfD()).new().equals(origSelectedDatum, this[S$1._selectedDatum]) || !new (ListEqualityOfImmutableSeriesOfD()).new().equals(origSelectedSeries, this[S$1._selectedSeries]);
        if (notifyListeners && changed) {
          this[S$1._changedListeners][S$.$forEach](dart.fn(listener => listener(copyOfSelectionModel), FnTovoid()));
        }
        return changed;
      }
      addSelectionChangedListener(listener) {
        this[S$1._changedListeners][S$.$add](listener);
      }
      removeSelectionChangedListener(listener) {
        this[S$1._changedListeners][S$.$remove](listener);
      }
      addSelectionUpdatedListener(listener) {
        this[S$1._updatedListeners][S$.$add](listener);
      }
      removeSelectionUpdatedListener(listener) {
        this[S$1._updatedListeners][S$.$remove](listener);
      }
      addSelectionLockChangedListener(listener) {
        this[S$1._lockChangedListeners][S$.$add](listener);
      }
      removeSelectionLockChangedListener(listener) {
        this[S$1._lockChangedListeners][S$.$remove](listener);
      }
      clearAllListeners() {
        this[S$1._changedListeners][S$.$clear]();
        this[S$1._updatedListeners][S$.$clear]();
        this[S$1._lockChangedListeners][S$.$clear]();
      }
    }
    (MutableSelectionModel.new = function() {
      this[S$1._changedListeners] = JSArrayOfSelectionModelOfDTovoid().of([]);
      this[S$1._updatedListeners] = JSArrayOfSelectionModelOfDTovoid().of([]);
      this[S$1._lockChangedListeners] = JSArrayOfSelectionModelOfDTovoid().of([]);
      this[S$1._locked] = false;
      MutableSelectionModel.__proto__.new.call(this);
      ;
    }).prototype = MutableSelectionModel.prototype;
    dart.addTypeTests(MutableSelectionModel);
    MutableSelectionModel.prototype[_is_MutableSelectionModel_default] = true;
    dart.addTypeCaches(MutableSelectionModel);
    dart.setMethodSignature(MutableSelectionModel, () => ({
      __proto__: dart.getMethods(MutableSelectionModel.__proto__),
      clearSelection: dart.fnType(core.bool, [], {notifyListeners: core.bool}, {}),
      updateSelection: dart.fnType(core.bool, [dart.nullable(core.Object), dart.nullable(core.Object)], {notifyListeners: core.bool}, {}),
      addSelectionChangedListener: dart.fnType(dart.void, [dart.fnType(dart.void, [selection_model.SelectionModel$(D)])]),
      removeSelectionChangedListener: dart.fnType(dart.void, [dart.fnType(dart.void, [selection_model.SelectionModel$(D)])]),
      addSelectionUpdatedListener: dart.fnType(dart.void, [dart.fnType(dart.void, [selection_model.SelectionModel$(D)])]),
      removeSelectionUpdatedListener: dart.fnType(dart.void, [dart.fnType(dart.void, [selection_model.SelectionModel$(D)])]),
      addSelectionLockChangedListener: dart.fnType(dart.void, [dart.fnType(dart.void, [selection_model.SelectionModel$(D)])]),
      removeSelectionLockChangedListener: dart.fnType(dart.void, [dart.fnType(dart.void, [selection_model.SelectionModel$(D)])]),
      clearAllListeners: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(MutableSelectionModel, () => ({
      __proto__: dart.getGetters(MutableSelectionModel.__proto__),
      locked: core.bool
    }));
    dart.setSetterSignature(MutableSelectionModel, () => ({
      __proto__: dart.getSetters(MutableSelectionModel.__proto__),
      locked: core.bool
    }));
    dart.setLibraryUri(MutableSelectionModel, I[157]);
    dart.setFieldSignature(MutableSelectionModel, () => ({
      __proto__: dart.getFields(MutableSelectionModel.__proto__),
      [S$1._changedListeners]: dart.finalFieldType(core.List$(dart.fnType(dart.void, [selection_model.SelectionModel$(D)]))),
      [S$1._updatedListeners]: dart.finalFieldType(core.List$(dart.fnType(dart.void, [selection_model.SelectionModel$(D)]))),
      [S$1._lockChangedListeners]: dart.finalFieldType(core.List$(dart.fnType(dart.void, [selection_model.SelectionModel$(D)]))),
      [S$1._locked]: dart.fieldType(core.bool)
    }));
    return MutableSelectionModel;
  });
  selection_model.MutableSelectionModel = selection_model.MutableSelectionModel$();
  dart.addTypeTests(selection_model.MutableSelectionModel, _is_MutableSelectionModel_default);
  selection_model.SelectionModelType = class SelectionModelType extends core.Object {
    toString() {
      return this[S$._name$4];
    }
  };
  (selection_model.SelectionModelType.new = function(index, _name) {
    this.index = index;
    this[S$._name$4] = _name;
    ;
  }).prototype = selection_model.SelectionModelType.prototype;
  dart.addTypeTests(selection_model.SelectionModelType);
  dart.addTypeCaches(selection_model.SelectionModelType);
  dart.setLibraryUri(selection_model.SelectionModelType, I[157]);
  dart.setFieldSignature(selection_model.SelectionModelType, () => ({
    __proto__: dart.getFields(selection_model.SelectionModelType.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name$4]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(selection_model.SelectionModelType, ['toString']);
  selection_model.SelectionModelType.info = C[32] || CT.C32;
  selection_model.SelectionModelType.action = C[31] || CT.C31;
  selection_model.SelectionModelType.values = C[179] || CT.C179;
  const _is_ImmutableSeries_default = Symbol('_is_ImmutableSeries_default');
  processed_series.ImmutableSeries$ = dart.generic(D => {
    class ImmutableSeries extends core.Object {
      get keyFn() {
        return this[S$1.keyFn$1];
      }
      set keyFn(value) {
        this[S$1.keyFn$1] = value;
      }
      get insideLabelStyleAccessorFn() {
        return this[S$1.insideLabelStyleAccessorFn$1];
      }
      set insideLabelStyleAccessorFn(value) {
        this[S$1.insideLabelStyleAccessorFn$1] = value;
      }
      get outsideLabelStyleAccessorFn() {
        return this[S$1.outsideLabelStyleAccessorFn$1];
      }
      set outsideLabelStyleAccessorFn(value) {
        this[S$1.outsideLabelStyleAccessorFn$1] = value;
      }
    }
    (ImmutableSeries.new = function() {
      this[S$1.keyFn$1] = null;
      this[S$1.insideLabelStyleAccessorFn$1] = null;
      this[S$1.outsideLabelStyleAccessorFn$1] = null;
      ;
    }).prototype = ImmutableSeries.prototype;
    dart.addTypeTests(ImmutableSeries);
    ImmutableSeries.prototype[_is_ImmutableSeries_default] = true;
    dart.addTypeCaches(ImmutableSeries);
    dart.setLibraryUri(ImmutableSeries, I[158]);
    dart.setFieldSignature(ImmutableSeries, () => ({
      __proto__: dart.getFields(ImmutableSeries.__proto__),
      keyFn: dart.fieldType(dart.nullable(dart.fnType(core.String, [dart.nullable(core.int)]))),
      insideLabelStyleAccessorFn: dart.fieldType(dart.nullable(dart.fnType(axis_spec.TextStyleSpec, [dart.nullable(core.int)]))),
      outsideLabelStyleAccessorFn: dart.fieldType(dart.nullable(dart.fnType(axis_spec.TextStyleSpec, [dart.nullable(core.int)])))
    }));
    return ImmutableSeries;
  });
  processed_series.ImmutableSeries = processed_series.ImmutableSeries$();
  dart.addTypeTests(processed_series.ImmutableSeries, _is_ImmutableSeries_default);
  const _is_MutableSeries_default = Symbol('_is_MutableSeries_default');
  processed_series.MutableSeries$ = dart.generic(D => {
    var DToString = () => (DToString = dart.constFn(dart.fnType(core.String, [D])))();
    var intNToFn = () => (intNToFn = dart.constFn(dart.fnType(DToString(), [T$.intN()])))();
    var intNToNFn = () => (intNToNFn = dart.constFn(dart.nullable(intNToFn())))();
    var intNToD = () => (intNToD = dart.constFn(dart.fnType(D, [T$.intN()])))();
    var DN = () => (DN = dart.constFn(dart.nullable(D)))();
    var intNToDN = () => (intNToDN = dart.constFn(dart.fnType(DN(), [T$.intN()])))();
    var intNToNDN = () => (intNToNDN = dart.constFn(dart.nullable(intNToDN())))();
    var AxisOfD = () => (AxisOfD = dart.constFn(axis$.Axis$(D)))();
    var AxisNOfD = () => (AxisNOfD = dart.constFn(dart.nullable(AxisOfD())))();
    class MutableSeries extends processed_series.ImmutableSeries$(D) {
      get id() {
        return this[S$1.id$2];
      }
      set id(value) {
        super.id = value;
      }
      get displayName() {
        return this[S$1.displayName];
      }
      set displayName(value) {
        this[S$1.displayName] = value;
      }
      get overlaySeries() {
        return this[S$1.overlaySeries$1];
      }
      set overlaySeries(value) {
        this[S$1.overlaySeries$1] = value;
      }
      get seriesCategory() {
        return this[S$1.seriesCategory];
      }
      set seriesCategory(value) {
        this[S$1.seriesCategory] = value;
      }
      get seriesColor() {
        return this[S$1.seriesColor];
      }
      set seriesColor(value) {
        this[S$1.seriesColor] = value;
      }
      get data() {
        return this[S$1.data$1];
      }
      set data(value) {
        this[S$1.data$1] = value;
      }
      get keyFn() {
        return this[S$1.keyFn];
      }
      set keyFn(value) {
        this[S$1.keyFn] = value;
      }
      get domainFn() {
        return this[S$1.domainFn$1];
      }
      set domainFn(value) {
        this[S$1.domainFn$1] = intNToD().as(value);
      }
      get domainFormatterFn() {
        return this[S$1.domainFormatterFn];
      }
      set domainFormatterFn(value) {
        this[S$1.domainFormatterFn] = value;
      }
      get domainLowerBoundFn() {
        return this[S$1.domainLowerBoundFn];
      }
      set domainLowerBoundFn(value) {
        this[S$1.domainLowerBoundFn] = intNToNDN().as(value);
      }
      get domainUpperBoundFn() {
        return this[S$1.domainUpperBoundFn];
      }
      set domainUpperBoundFn(value) {
        this[S$1.domainUpperBoundFn] = intNToNDN().as(value);
      }
      get measureFn() {
        return this[S$1.measureFn$1];
      }
      set measureFn(value) {
        this[S$1.measureFn$1] = value;
      }
      get measureFormatterFn() {
        return this[S$1.measureFormatterFn];
      }
      set measureFormatterFn(value) {
        this[S$1.measureFormatterFn] = value;
      }
      get measureLowerBoundFn() {
        return this[S$1.measureLowerBoundFn];
      }
      set measureLowerBoundFn(value) {
        this[S$1.measureLowerBoundFn] = value;
      }
      get measureUpperBoundFn() {
        return this[S$1.measureUpperBoundFn];
      }
      set measureUpperBoundFn(value) {
        this[S$1.measureUpperBoundFn] = value;
      }
      get measureOffsetFn() {
        return this[S$1.measureOffsetFn];
      }
      set measureOffsetFn(value) {
        this[S$1.measureOffsetFn] = value;
      }
      get rawMeasureFn() {
        return this[S$1.rawMeasureFn];
      }
      set rawMeasureFn(value) {
        this[S$1.rawMeasureFn] = value;
      }
      get rawMeasureLowerBoundFn() {
        return this[S$1.rawMeasureLowerBoundFn];
      }
      set rawMeasureLowerBoundFn(value) {
        this[S$1.rawMeasureLowerBoundFn] = value;
      }
      get rawMeasureUpperBoundFn() {
        return this[S$1.rawMeasureUpperBoundFn];
      }
      set rawMeasureUpperBoundFn(value) {
        this[S$1.rawMeasureUpperBoundFn] = value;
      }
      get areaColorFn() {
        return this[S$1.areaColorFn];
      }
      set areaColorFn(value) {
        this[S$1.areaColorFn] = value;
      }
      get colorFn() {
        return this[S$1.colorFn$1];
      }
      set colorFn(value) {
        this[S$1.colorFn$1] = value;
      }
      get dashPatternFn() {
        return this[S$1.dashPatternFn];
      }
      set dashPatternFn(value) {
        this[S$1.dashPatternFn] = value;
      }
      get fillColorFn() {
        return this[S$1.fillColorFn$1];
      }
      set fillColorFn(value) {
        this[S$1.fillColorFn$1] = value;
      }
      get fillPatternFn() {
        return this[S$1.fillPatternFn$1];
      }
      set fillPatternFn(value) {
        this[S$1.fillPatternFn$1] = value;
      }
      get patternColorFn() {
        return this[S$1.patternColorFn$1];
      }
      set patternColorFn(value) {
        this[S$1.patternColorFn$1] = value;
      }
      get radiusPxFn() {
        return this[S$1.radiusPxFn];
      }
      set radiusPxFn(value) {
        this[S$1.radiusPxFn] = value;
      }
      get strokeWidthPxFn() {
        return this[S$1.strokeWidthPxFn$1];
      }
      set strokeWidthPxFn(value) {
        this[S$1.strokeWidthPxFn$1] = value;
      }
      get labelAccessorFn() {
        return this[S$1.labelAccessorFn];
      }
      set labelAccessorFn(value) {
        this[S$1.labelAccessorFn] = value;
      }
      get insideLabelStyleAccessorFn() {
        return this[S$1.insideLabelStyleAccessorFn];
      }
      set insideLabelStyleAccessorFn(value) {
        this[S$1.insideLabelStyleAccessorFn] = value;
      }
      get outsideLabelStyleAccessorFn() {
        return this[S$1.outsideLabelStyleAccessorFn];
      }
      set outsideLabelStyleAccessorFn(value) {
        this[S$1.outsideLabelStyleAccessorFn] = value;
      }
      get measureAxis() {
        return this[S$1.measureAxis];
      }
      set measureAxis(value) {
        this[S$1.measureAxis] = value;
      }
      get domainAxis() {
        return this[S$1.domainAxis];
      }
      set domainAxis(value) {
        this[S$1.domainAxis] = AxisNOfD().as(value);
      }
      get seriesIndex() {
        let t111;
        t111 = this[S$1.__MutableSeries_seriesIndex];
        return t111 == null ? dart.throw(new _internal.LateError.fieldNI("seriesIndex")) : t111;
      }
      set seriesIndex(t111) {
        this[S$1.__MutableSeries_seriesIndex] = t111;
      }
      get seriesMeasureTotal() {
        let t112;
        t112 = this[S$1.__MutableSeries_seriesMeasureTotal];
        return t112 == null ? dart.throw(new _internal.LateError.fieldNI("seriesMeasureTotal")) : t112;
      }
      set seriesMeasureTotal(t112) {
        this[S$1.__MutableSeries_seriesMeasureTotal] = t112;
      }
      setAttr(R, key, value) {
        return this[S$1._attrs].setAttr(R, key, value);
      }
      getAttr(R, key) {
        return this[S$1._attrs].getAttr(R, key);
      }
      _equals(other) {
        if (other == null) return false;
        return processed_series.MutableSeries.is(other) && this.data[S$.$_equals](other.data) && this.id === other.id;
      }
      get hashCode() {
        return this.data[S$.$hashCode] * 31 + this.id[S$.$hashCode];
      }
    }
    (MutableSeries.new = function(series) {
      let t111, t111$, t111$0;
      this[S$1.__MutableSeries_seriesIndex] = null;
      this[S$1.__MutableSeries_seriesMeasureTotal] = null;
      this[S$1._attrs] = new series$.SeriesAttributes.new();
      this[S$1.domainAxis] = null;
      this[S$1.measureAxis] = null;
      this[S$1.labelAccessorFn] = null;
      this[S$1.id$2] = series.id;
      this[S$1.displayName] = (t111 = series.displayName, t111 == null ? series.id : t111);
      this[S$1.overlaySeries$1] = series.overlaySeries;
      this[S$1.seriesCategory] = series.seriesCategory;
      this[S$1.seriesColor] = series.seriesColor;
      this[S$1.data$1] = series.data;
      this[S$1.keyFn] = series.keyFn;
      this[S$1.domainFn$1] = series.domainFn;
      this[S$1.domainFormatterFn] = intNToNFn().as(series.domainFormatterFn);
      this[S$1.domainLowerBoundFn] = series.domainLowerBoundFn;
      this[S$1.domainUpperBoundFn] = series.domainUpperBoundFn;
      this[S$1.measureFn$1] = series.measureFn;
      this[S$1.measureFormatterFn] = series.measureFormatterFn;
      this[S$1.measureLowerBoundFn] = series.measureLowerBoundFn;
      this[S$1.measureUpperBoundFn] = series.measureUpperBoundFn;
      this[S$1.measureOffsetFn] = series.measureOffsetFn;
      this[S$1.rawMeasureFn] = series.measureFn;
      this[S$1.rawMeasureLowerBoundFn] = series.measureLowerBoundFn;
      this[S$1.rawMeasureUpperBoundFn] = series.measureUpperBoundFn;
      this[S$1.areaColorFn] = series.areaColorFn;
      this[S$1.colorFn$1] = series.colorFn;
      this[S$1.dashPatternFn] = series.dashPatternFn;
      this[S$1.fillColorFn$1] = series.fillColorFn;
      this[S$1.fillPatternFn$1] = series.fillPatternFn;
      this[S$1.patternColorFn$1] = series.patternColorFn;
      this[S$1.insideLabelStyleAccessorFn] = series.insideLabelStyleAccessorFn;
      this[S$1.outsideLabelStyleAccessorFn] = series.outsideLabelStyleAccessorFn;
      this[S$1.radiusPxFn] = series.radiusPxFn;
      this[S$1.strokeWidthPxFn$1] = series.strokeWidthPxFn;
      MutableSeries.__proto__.new.call(this);
      this.seriesMeasureTotal = 0;
      for (let i = 0; i < this.data[S$.$length]; i = i + 1) {
        let measure = (t111$ = i, this.measureFn(t111$));
        if (measure != null) {
          this.seriesMeasureTotal = this.seriesMeasureTotal + dart.notNull(measure);
        }
      }
      this.labelAccessorFn = (t111$0 = series.labelAccessorFn, t111$0 == null ? dart.fn(i => {
        let t112;
        return dart.toString((t112 = i, this.domainFn(t112)));
      }, T$.intNToString()) : t111$0);
      this[S$1._attrs].mergeFrom(series.attributes);
    }).prototype = MutableSeries.prototype;
    (MutableSeries.clone = function(other) {
      this[S$1.__MutableSeries_seriesIndex] = null;
      this[S$1.__MutableSeries_seriesMeasureTotal] = null;
      this[S$1._attrs] = new series$.SeriesAttributes.new();
      this[S$1.id$2] = other.id;
      this[S$1.displayName] = other.displayName;
      this[S$1.overlaySeries$1] = other.overlaySeries;
      this[S$1.seriesCategory] = other.seriesCategory;
      this[S$1.seriesColor] = other.seriesColor;
      this[S$1.__MutableSeries_seriesIndex] = other.seriesIndex;
      this[S$1.data$1] = other.data;
      this[S$1.keyFn] = other.keyFn;
      this[S$1.domainFn$1] = other.domainFn;
      this[S$1.domainFormatterFn] = intNToNFn().as(other.domainFormatterFn);
      this[S$1.domainLowerBoundFn] = other.domainLowerBoundFn;
      this[S$1.domainUpperBoundFn] = other.domainUpperBoundFn;
      this[S$1.measureFn$1] = other.measureFn;
      this[S$1.measureFormatterFn] = other.measureFormatterFn;
      this[S$1.measureLowerBoundFn] = other.measureLowerBoundFn;
      this[S$1.measureUpperBoundFn] = other.measureUpperBoundFn;
      this[S$1.measureOffsetFn] = other.measureOffsetFn;
      this[S$1.rawMeasureFn] = other.rawMeasureFn;
      this[S$1.rawMeasureLowerBoundFn] = other.rawMeasureLowerBoundFn;
      this[S$1.rawMeasureUpperBoundFn] = other.rawMeasureUpperBoundFn;
      this[S$1.__MutableSeries_seriesMeasureTotal] = other.seriesMeasureTotal;
      this[S$1.areaColorFn] = other.areaColorFn;
      this[S$1.colorFn$1] = other.colorFn;
      this[S$1.dashPatternFn] = other.dashPatternFn;
      this[S$1.fillColorFn$1] = other.fillColorFn;
      this[S$1.fillPatternFn$1] = other.fillPatternFn;
      this[S$1.patternColorFn$1] = other.patternColorFn;
      this[S$1.labelAccessorFn] = other.labelAccessorFn;
      this[S$1.insideLabelStyleAccessorFn] = other.insideLabelStyleAccessorFn;
      this[S$1.outsideLabelStyleAccessorFn] = other.outsideLabelStyleAccessorFn;
      this[S$1.radiusPxFn] = other.radiusPxFn;
      this[S$1.strokeWidthPxFn$1] = other.strokeWidthPxFn;
      this[S$1.measureAxis] = other.measureAxis;
      this[S$1.domainAxis] = other.domainAxis;
      MutableSeries.__proto__.new.call(this);
      this[S$1._attrs].mergeFrom(other[S$1._attrs]);
    }).prototype = MutableSeries.prototype;
    dart.addTypeTests(MutableSeries);
    MutableSeries.prototype[_is_MutableSeries_default] = true;
    dart.addTypeCaches(MutableSeries);
    dart.setMethodSignature(MutableSeries, () => ({
      __proto__: dart.getMethods(MutableSeries.__proto__),
      setAttr: dart.gFnType(R => [dart.void, [series$.AttributeKey$(R), R]], R => [dart.nullable(core.Object)]),
      getAttr: dart.gFnType(R => [dart.nullable(R), [series$.AttributeKey$(R)]], R => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(MutableSeries, () => ({
      __proto__: dart.getGetters(MutableSeries.__proto__),
      seriesIndex: core.int,
      seriesMeasureTotal: core.num
    }));
    dart.setSetterSignature(MutableSeries, () => ({
      __proto__: dart.getSetters(MutableSeries.__proto__),
      seriesIndex: core.int,
      seriesMeasureTotal: core.num
    }));
    dart.setLibraryUri(MutableSeries, I[158]);
    dart.setFieldSignature(MutableSeries, () => ({
      __proto__: dart.getFields(MutableSeries.__proto__),
      id: dart.finalFieldType(core.String),
      displayName: dart.fieldType(dart.nullable(core.String)),
      overlaySeries: dart.fieldType(core.bool),
      seriesCategory: dart.fieldType(dart.nullable(core.String)),
      seriesColor: dart.fieldType(dart.nullable(color$.Color)),
      [S$1.__MutableSeries_seriesIndex]: dart.fieldType(dart.nullable(core.int)),
      [S$1.__MutableSeries_seriesMeasureTotal]: dart.fieldType(dart.nullable(core.num)),
      data: dart.fieldType(core.List),
      keyFn: dart.fieldType(dart.nullable(dart.fnType(core.String, [dart.nullable(core.int)]))),
      domainFn: dart.fieldType(dart.fnType(D, [dart.nullable(core.int)])),
      domainFormatterFn: dart.fieldType(dart.nullable(dart.fnType(dart.fnType(core.String, [D]), [dart.nullable(core.int)]))),
      domainLowerBoundFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(D), [dart.nullable(core.int)]))),
      domainUpperBoundFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(D), [dart.nullable(core.int)]))),
      measureFn: dart.fieldType(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)])),
      measureFormatterFn: dart.fieldType(dart.nullable(dart.fnType(dart.fnType(core.String, [dart.nullable(core.num)]), [dart.nullable(core.int)]))),
      measureLowerBoundFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)]))),
      measureUpperBoundFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)]))),
      measureOffsetFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)]))),
      rawMeasureFn: dart.fieldType(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)])),
      rawMeasureLowerBoundFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)]))),
      rawMeasureUpperBoundFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)]))),
      areaColorFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(color$.Color), [dart.nullable(core.int)]))),
      colorFn: dart.fieldType(dart.nullable(dart.fnType(color$.Color, [dart.nullable(core.int)]))),
      dashPatternFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(core.List$(core.int)), [dart.nullable(core.int)]))),
      fillColorFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(color$.Color), [dart.nullable(core.int)]))),
      fillPatternFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(chart_canvas.FillPatternType), [dart.nullable(core.int)]))),
      patternColorFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(color$.Color), [dart.nullable(core.int)]))),
      radiusPxFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)]))),
      strokeWidthPxFn: dart.fieldType(dart.nullable(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)]))),
      labelAccessorFn: dart.fieldType(dart.nullable(dart.fnType(core.String, [dart.nullable(core.int)]))),
      insideLabelStyleAccessorFn: dart.fieldType(dart.nullable(dart.fnType(axis_spec.TextStyleSpec, [dart.nullable(core.int)]))),
      outsideLabelStyleAccessorFn: dart.fieldType(dart.nullable(dart.fnType(axis_spec.TextStyleSpec, [dart.nullable(core.int)]))),
      [S$1._attrs]: dart.finalFieldType(series$.SeriesAttributes),
      measureAxis: dart.fieldType(dart.nullable(axis$.Axis$(core.num))),
      domainAxis: dart.fieldType(dart.nullable(axis$.Axis$(D)))
    }));
    dart.defineExtensionMethods(MutableSeries, ['_equals']);
    dart.defineExtensionAccessors(MutableSeries, ['hashCode']);
    return MutableSeries;
  });
  processed_series.MutableSeries = processed_series.MutableSeries$();
  dart.addTypeTests(processed_series.MutableSeries, _is_MutableSeries_default);
  symbol_renderer.BaseSymbolRenderer = class BaseSymbolRenderer extends core.Object {};
  (symbol_renderer.BaseSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.BaseSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.BaseSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.BaseSymbolRenderer);
  dart.setLibraryUri(symbol_renderer.BaseSymbolRenderer, I[159]);
  symbol_renderer.SymbolRenderer = class SymbolRenderer extends symbol_renderer.BaseSymbolRenderer {
    get isSolid() {
      return this[S$1.isSolid];
    }
    set isSolid(value) {
      super.isSolid = value;
    }
    getSolidStrokeWidthPx(strokeWidthPx) {
      let t113;
      return this.isSolid ? strokeWidthPx : (t113 = strokeWidthPx, t113 == null ? 2.0 : t113);
    }
    getSolidFillColor(fillColor) {
      return this.isSolid ? fillColor : style_factory.StyleFactory.style.white;
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.SymbolRenderer.is(other) && other.isSolid === this.isSolid;
    }
    get hashCode() {
      return this.isSolid[S$.$hashCode];
    }
  };
  (symbol_renderer.SymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : null;
    this[S$1.isSolid] = isSolid;
    ;
  }).prototype = symbol_renderer.SymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.SymbolRenderer);
  dart.addTypeCaches(symbol_renderer.SymbolRenderer);
  dart.setMethodSignature(symbol_renderer.SymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.SymbolRenderer.__proto__),
    getSolidStrokeWidthPx: dart.fnType(dart.nullable(core.double), [dart.nullable(core.double)]),
    getSolidFillColor: dart.fnType(dart.nullable(color$.Color), [dart.nullable(color$.Color)])
  }));
  dart.setLibraryUri(symbol_renderer.SymbolRenderer, I[159]);
  dart.setFieldSignature(symbol_renderer.SymbolRenderer, () => ({
    __proto__: dart.getFields(symbol_renderer.SymbolRenderer.__proto__),
    isSolid: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(symbol_renderer.SymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.SymbolRenderer, ['hashCode']);
  symbol_renderer.PointSymbolRenderer = class PointSymbolRenderer extends symbol_renderer.BaseSymbolRenderer {};
  (symbol_renderer.PointSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.PointSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.PointSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.PointSymbolRenderer);
  dart.setLibraryUri(symbol_renderer.PointSymbolRenderer, I[159]);
  symbol_renderer.RoundedRectSymbolRenderer = class RoundedRectSymbolRenderer extends symbol_renderer.SymbolRenderer {
    get radius() {
      return this[S$1.radius$3];
    }
    set radius(value) {
      super.radius = value;
    }
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      canvas.drawRRect(bounds, {fill: this.getSolidFillColor(fillColor), fillPattern: fillPattern, stroke: strokeColor, radius: this.radius, roundTopLeft: true, roundTopRight: true, roundBottomRight: true, roundBottomLeft: true});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.RoundedRectSymbolRenderer.as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.RoundedRectSymbolRenderer.is(other) && other.radius === this.radius && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = hashcode * 37 + this.radius[S$.$hashCode];
      return hashcode;
    }
  };
  (symbol_renderer.RoundedRectSymbolRenderer.new = function(opts) {
    let t113;
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    this[S$1.radius$3] = (t113 = radius, t113 == null ? 1.0 : t113);
    symbol_renderer.RoundedRectSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.RoundedRectSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.RoundedRectSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.RoundedRectSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.RoundedRectSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.RoundedRectSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Rectangle$(core.num)], {dashPattern: dart.nullable(core.List$(core.int)), fillColor: dart.nullable(color$.Color), fillPattern: dart.nullable(chart_canvas.FillPatternType), strokeColor: dart.nullable(color$.Color), strokeWidthPx: dart.nullable(core.double)}, {}),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.RoundedRectSymbolRenderer, I[159]);
  dart.setFieldSignature(symbol_renderer.RoundedRectSymbolRenderer, () => ({
    __proto__: dart.getFields(symbol_renderer.RoundedRectSymbolRenderer.__proto__),
    radius: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(symbol_renderer.RoundedRectSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.RoundedRectSymbolRenderer, ['hashCode']);
  symbol_renderer.LineSymbolRenderer = class LineSymbolRenderer extends symbol_renderer.SymbolRenderer {
    get strokeWidth() {
      return this[S$1.strokeWidth];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    paint(canvas, bounds, opts) {
      let t113, t113$;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let centerHeight = (bounds[S$.$bottom] - bounds[S$.$top]) / 2;
      let localDashPattern = (t113 = dashPattern, t113 == null ? this[S$1._dashPattern] : t113);
      let roundEndCaps = localDashPattern == null;
      let localStrokeWidthPx = localDashPattern == null ? this.getSolidStrokeWidthPx((t113$ = strokeWidthPx, t113$ == null ? this.strokeWidth : t113$)) : 2;
      let left = bounds[S$.$left];
      let right = bounds[S$.$right];
      if (roundEndCaps && bounds[S$.$width] >= 5) {
        left = left + 2;
        right = right - 2;
      }
      canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([new (T$.PointOfnum()).new(left, centerHeight), new (T$.PointOfnum()).new(right, centerHeight)]), dashPattern: localDashPattern, fill: this.getSolidFillColor(fillColor), roundEndCaps: roundEndCaps, stroke: strokeColor, strokeWidthPx: localStrokeWidthPx});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.LineSymbolRenderer.as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.LineSymbolRenderer.is(other) && other.strokeWidth === this.strokeWidth && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = hashcode * 37 + this.strokeWidth[S$.$hashCode];
      return hashcode;
    }
  };
  (symbol_renderer.LineSymbolRenderer.new = function(opts) {
    let t113;
    let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    this[S$1.strokeWidth] = (t113 = strokeWidth, t113 == null ? 4 : t113);
    this[S$1._dashPattern] = dashPattern;
    symbol_renderer.LineSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.LineSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.LineSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.LineSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.LineSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.LineSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Rectangle$(core.num)], {dashPattern: dart.nullable(core.List$(core.int)), fillColor: dart.nullable(color$.Color), fillPattern: dart.nullable(chart_canvas.FillPatternType), strokeColor: dart.nullable(color$.Color), strokeWidthPx: dart.nullable(core.double)}, {}),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.LineSymbolRenderer, I[159]);
  dart.setFieldSignature(symbol_renderer.LineSymbolRenderer, () => ({
    __proto__: dart.getFields(symbol_renderer.LineSymbolRenderer.__proto__),
    strokeWidth: dart.finalFieldType(core.double),
    [S$1._dashPattern]: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  dart.defineExtensionMethods(symbol_renderer.LineSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.LineSymbolRenderer, ['hashCode']);
  dart.defineLazy(symbol_renderer.LineSymbolRenderer, {
    /*symbol_renderer.LineSymbolRenderer.roundEndCapsPixels*/get roundEndCapsPixels() {
      return 2;
    },
    /*symbol_renderer.LineSymbolRenderer.minLengthToRoundCaps*/get minLengthToRoundCaps() {
      return 5;
    },
    /*symbol_renderer.LineSymbolRenderer.strokeWidthForRoundEndCaps*/get strokeWidthForRoundEndCaps() {
      return 4;
    },
    /*symbol_renderer.LineSymbolRenderer.strokeWidthForNonRoundedEndCaps*/get strokeWidthForNonRoundedEndCaps() {
      return 2;
    }
  }, false);
  symbol_renderer.CircleSymbolRenderer = class CircleSymbolRenderer extends symbol_renderer.SymbolRenderer {
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let center = new (T$.PointOfdouble()).new(bounds[S$.$left] + bounds[S$.$width] / 2, bounds[S$.$top] + bounds[S$.$height] / 2);
      let radius = math.min(core.num, bounds[S$.$width], bounds[S$.$height]) / 2;
      canvas.drawPoint({point: center, radius: radius, fill: this.getSolidFillColor(fillColor), stroke: strokeColor, strokeWidthPx: this.getSolidStrokeWidthPx(strokeWidthPx)});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.CircleSymbolRenderer.as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.CircleSymbolRenderer.is(other) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = hashcode * 37 + this[S$.$runtimeType].hashCode;
      return hashcode;
    }
  };
  (symbol_renderer.CircleSymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    symbol_renderer.CircleSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.CircleSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.CircleSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.CircleSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.CircleSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.CircleSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Rectangle$(core.num)], {dashPattern: dart.nullable(core.List$(core.int)), fillColor: dart.nullable(color$.Color), fillPattern: dart.nullable(chart_canvas.FillPatternType), strokeColor: dart.nullable(color$.Color), strokeWidthPx: dart.nullable(core.double)}, {}),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.CircleSymbolRenderer, I[159]);
  dart.defineExtensionMethods(symbol_renderer.CircleSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.CircleSymbolRenderer, ['hashCode']);
  symbol_renderer.RectSymbolRenderer = class RectSymbolRenderer extends symbol_renderer.SymbolRenderer {
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      canvas.drawRect(bounds, {fill: this.getSolidFillColor(fillColor), stroke: strokeColor, strokeWidthPx: this.getSolidStrokeWidthPx(strokeWidthPx)});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.RectSymbolRenderer.as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.RectSymbolRenderer.is(other) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = hashcode * 37 + this[S$.$runtimeType].hashCode;
      return hashcode;
    }
  };
  (symbol_renderer.RectSymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    symbol_renderer.RectSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.RectSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.RectSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.RectSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.RectSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.RectSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Rectangle$(core.num)], {dashPattern: dart.nullable(core.List$(core.int)), fillColor: dart.nullable(color$.Color), fillPattern: dart.nullable(chart_canvas.FillPatternType), strokeColor: dart.nullable(color$.Color), strokeWidthPx: dart.nullable(core.double)}, {}),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.RectSymbolRenderer, I[159]);
  dart.defineExtensionMethods(symbol_renderer.RectSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.RectSymbolRenderer, ['hashCode']);
  symbol_renderer.TriangleSymbolRenderer = class TriangleSymbolRenderer extends symbol_renderer.SymbolRenderer {
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let dy = math.sqrt(3) / 2 * bounds[S$.$width];
      let centerX = (bounds[S$.$left] + bounds[S$.$right]) / 2;
      canvas.drawPolygon({points: T$.JSArrayOfPointOfnum().of([new (T$.PointOfnum()).new(bounds[S$.$left], bounds[S$.$top] + dy), new (T$.PointOfnum()).new(bounds[S$.$right], bounds[S$.$top] + dy), new (T$.PointOfnum()).new(centerX, bounds[S$.$top])]), fill: this.getSolidFillColor(fillColor), stroke: strokeColor, strokeWidthPx: this.getSolidStrokeWidthPx(strokeWidthPx)});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.TriangleSymbolRenderer.as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.TriangleSymbolRenderer.is(other) && super._equals(other);
    }
  };
  (symbol_renderer.TriangleSymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    symbol_renderer.TriangleSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.TriangleSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.TriangleSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.TriangleSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.TriangleSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.TriangleSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Rectangle$(core.num)], {dashPattern: dart.nullable(core.List$(core.int)), fillColor: dart.nullable(color$.Color), fillPattern: dart.nullable(chart_canvas.FillPatternType), strokeColor: dart.nullable(color$.Color), strokeWidthPx: dart.nullable(core.double)}, {}),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.TriangleSymbolRenderer, I[159]);
  dart.defineExtensionMethods(symbol_renderer.TriangleSymbolRenderer, ['_equals']);
  symbol_renderer.CylinderSymbolRenderer = class CylinderSymbolRenderer extends symbol_renderer.PointSymbolRenderer {
    paint(canvas, p1, radius, opts) {
      let p2 = opts && 'p2' in opts ? opts.p2 : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      if (p1 === null) {
        dart.throw(new core.ArgumentError.new("Invalid point p1 \"" + dart.str(p1) + "\""));
      }
      if (p2 === null) {
        dart.throw(new core.ArgumentError.new("Invalid point p2 \"" + dart.str(p2) + "\""));
      }
      let adjustedP1 = new (T$.PointOfdouble()).new(p1.x, p1.y);
      let adjustedP2 = new (T$.PointOfdouble()).new(p2.x, p2.y);
      canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([adjustedP1, adjustedP2]), stroke: strokeColor, roundEndCaps: true, strokeWidthPx: radius * 2});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.CylinderSymbolRenderer.as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.CylinderSymbolRenderer.is(other);
    }
    get hashCode() {
      return this[S$.$runtimeType].hashCode;
    }
  };
  (symbol_renderer.CylinderSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.CylinderSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.CylinderSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.CylinderSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.CylinderSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.CylinderSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Point$(core.double), core.double], {fillColor: dart.nullable(color$.Color), strokeColor: dart.nullable(color$.Color), strokeWidthPx: dart.nullable(core.double)}, {p2: math.Point$(core.double)}),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.CylinderSymbolRenderer, I[159]);
  dart.defineExtensionMethods(symbol_renderer.CylinderSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.CylinderSymbolRenderer, ['hashCode']);
  symbol_renderer.RectangleRangeSymbolRenderer = class RectangleRangeSymbolRenderer extends symbol_renderer.PointSymbolRenderer {
    paint(canvas, p1, radius, opts) {
      let p2 = opts && 'p2' in opts ? opts.p2 : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      if (p1 === null) {
        dart.throw(new core.ArgumentError.new("Invalid point p1 \"" + dart.str(p1) + "\""));
      }
      if (p2 === null) {
        dart.throw(new core.ArgumentError.new("Invalid point p2 \"" + dart.str(p2) + "\""));
      }
      let adjustedP1 = new (T$.PointOfdouble()).new(p1.x, p1.y);
      let adjustedP2 = new (T$.PointOfdouble()).new(p2.x, p2.y);
      canvas.drawLine({points: T$.JSArrayOfPointOfnum().of([adjustedP1, adjustedP2]), stroke: strokeColor, roundEndCaps: false, strokeWidthPx: radius * 2});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.RectangleRangeSymbolRenderer.as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.RectangleRangeSymbolRenderer.is(other);
    }
    get hashCode() {
      return this[S$.$runtimeType].hashCode;
    }
  };
  (symbol_renderer.RectangleRangeSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.RectangleRangeSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.RectangleRangeSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.RectangleRangeSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.RectangleRangeSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.RectangleRangeSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Point$(core.double), core.double], {fillColor: dart.nullable(color$.Color), strokeColor: dart.nullable(color$.Color), strokeWidthPx: dart.nullable(core.double)}, {p2: math.Point$(core.double)}),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.RectangleRangeSymbolRenderer, I[159]);
  dart.defineExtensionMethods(symbol_renderer.RectangleRangeSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.RectangleRangeSymbolRenderer, ['hashCode']);
  const _is_DatumDetails_default = Symbol('_is_DatumDetails_default');
  datum_details.DatumDetails$ = dart.generic(D => {
    class DatumDetails extends core.Object {
      get datum() {
        return this[S$1.datum$5];
      }
      set datum(value) {
        super.datum = value;
      }
      get index() {
        return this[S$1.index$4];
      }
      set index(value) {
        super.index = value;
      }
      get domain() {
        return this[S$1.domain$5];
      }
      set domain(value) {
        super.domain = value;
      }
      get domainLowerBound() {
        return this[S$1.domainLowerBound];
      }
      set domainLowerBound(value) {
        super.domainLowerBound = value;
      }
      get domainUpperBound() {
        return this[S$1.domainUpperBound];
      }
      set domainUpperBound(value) {
        super.domainUpperBound = value;
      }
      get measure() {
        return this[S$1.measure$1];
      }
      set measure(value) {
        super.measure = value;
      }
      get measureLowerBound() {
        return this[S$1.measureLowerBound];
      }
      set measureLowerBound(value) {
        super.measureLowerBound = value;
      }
      get measureUpperBound() {
        return this[S$1.measureUpperBound];
      }
      set measureUpperBound(value) {
        super.measureUpperBound = value;
      }
      get measureOffset() {
        return this[S$1.measureOffset$1];
      }
      set measureOffset(value) {
        super.measureOffset = value;
      }
      get rawMeasure() {
        return this[S$1.rawMeasure];
      }
      set rawMeasure(value) {
        super.rawMeasure = value;
      }
      get rawMeasureLowerBound() {
        return this[S$1.rawMeasureLowerBound];
      }
      set rawMeasureLowerBound(value) {
        super.rawMeasureLowerBound = value;
      }
      get rawMeasureUpperBound() {
        return this[S$1.rawMeasureUpperBound];
      }
      set rawMeasureUpperBound(value) {
        super.rawMeasureUpperBound = value;
      }
      get series() {
        return this[S$1.series$8];
      }
      set series(value) {
        super.series = value;
      }
      get color() {
        return this[S$1.color$6];
      }
      set color(value) {
        super.color = value;
      }
      get fillColor() {
        return this[S$1.fillColor$4];
      }
      set fillColor(value) {
        super.fillColor = value;
      }
      get fillPattern() {
        return this[S$1.fillPattern$3];
      }
      set fillPattern(value) {
        super.fillPattern = value;
      }
      get areaColor() {
        return this[S$1.areaColor];
      }
      set areaColor(value) {
        super.areaColor = value;
      }
      get dashPattern() {
        return this[S$1.dashPattern$5];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get chartPosition() {
        return this[S$1.chartPosition];
      }
      set chartPosition(value) {
        super.chartPosition = value;
      }
      get chartPositionLower() {
        return this[S$1.chartPositionLower];
      }
      set chartPositionLower(value) {
        super.chartPositionLower = value;
      }
      get chartPositionUpper() {
        return this[S$1.chartPositionUpper];
      }
      set chartPositionUpper(value) {
        super.chartPositionUpper = value;
      }
      get bounds() {
        return this[S$1.bounds$2];
      }
      set bounds(value) {
        super.bounds = value;
      }
      get domainDistance() {
        return this[S$1.domainDistance];
      }
      set domainDistance(value) {
        super.domainDistance = value;
      }
      get measureDistance() {
        return this[S$1.measureDistance];
      }
      set measureDistance(value) {
        super.measureDistance = value;
      }
      get relativeDistance() {
        return this[S$1.relativeDistance];
      }
      set relativeDistance(value) {
        super.relativeDistance = value;
      }
      get radiusPx() {
        return this[S$1.radiusPx$3];
      }
      set radiusPx(value) {
        super.radiusPx = value;
      }
      get symbolRenderer() {
        return this[S$1.symbolRenderer$8];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get strokeWidthPx() {
        return this[S$1.strokeWidthPx$13];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get domainFormatter() {
        return this[S$1.domainFormatter];
      }
      set domainFormatter(value) {
        this[S$1.domainFormatter] = value;
      }
      get measureFormatter() {
        return this[S$1.measureFormatter$2];
      }
      set measureFormatter(value) {
        this[S$1.measureFormatter$2] = value;
      }
      static from(other, opts) {
        let t113, t113$, t113$0, t113$1, t113$2, t113$3, t113$4, t113$5, t113$6, t113$7, t113$8, t113$9, t113$10, t113$11, t113$12, t113$13, t113$14, t113$15, t113$16, t113$17, t113$18, t113$19, t113$20, t113$21, t113$22, t113$23, t113$24, t113$25, t113$26;
        let datum = opts && 'datum' in opts ? opts.datum : null;
        let index = opts && 'index' in opts ? opts.index : null;
        let domain = opts && 'domain' in opts ? opts.domain : null;
        let domainLowerBound = opts && 'domainLowerBound' in opts ? opts.domainLowerBound : null;
        let domainUpperBound = opts && 'domainUpperBound' in opts ? opts.domainUpperBound : null;
        let measure = opts && 'measure' in opts ? opts.measure : null;
        let measureFormatter = opts && 'measureFormatter' in opts ? opts.measureFormatter : null;
        let measureLowerBound = opts && 'measureLowerBound' in opts ? opts.measureLowerBound : null;
        let measureUpperBound = opts && 'measureUpperBound' in opts ? opts.measureUpperBound : null;
        let measureOffset = opts && 'measureOffset' in opts ? opts.measureOffset : null;
        let rawMeasure = opts && 'rawMeasure' in opts ? opts.rawMeasure : null;
        let rawMeasureLowerBound = opts && 'rawMeasureLowerBound' in opts ? opts.rawMeasureLowerBound : null;
        let rawMeasureUpperBound = opts && 'rawMeasureUpperBound' in opts ? opts.rawMeasureUpperBound : null;
        let series = opts && 'series' in opts ? opts.series : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
        let areaColor = opts && 'areaColor' in opts ? opts.areaColor : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let chartPosition = opts && 'chartPosition' in opts ? opts.chartPosition : null;
        let chartPositionLower = opts && 'chartPositionLower' in opts ? opts.chartPositionLower : null;
        let chartPositionUpper = opts && 'chartPositionUpper' in opts ? opts.chartPositionUpper : null;
        let bounds = opts && 'bounds' in opts ? opts.bounds : null;
        let domainFormatter = opts && 'domainFormatter' in opts ? opts.domainFormatter : null;
        let domainDistance = opts && 'domainDistance' in opts ? opts.domainDistance : null;
        let measureDistance = opts && 'measureDistance' in opts ? opts.measureDistance : null;
        let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : null;
        let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        return new (datum_details.DatumDetails$(D)).new({datum: (t113 = datum, t113 == null ? other.datum : t113), index: (t113$ = index, t113$ == null ? other.index : t113$), domain: (t113$0 = domain, t113$0 == null ? other.domain : t113$0), domainFormatter: (t113$1 = domainFormatter, t113$1 == null ? dart.nullable(dart.fnType(core.String, [D])).as(other.domainFormatter) : t113$1), domainLowerBound: (t113$2 = domainLowerBound, t113$2 == null ? other.domainLowerBound : t113$2), domainUpperBound: (t113$3 = domainUpperBound, t113$3 == null ? other.domainUpperBound : t113$3), measure: (t113$4 = measure, t113$4 == null ? other.measure : t113$4), measureFormatter: (t113$5 = measureFormatter, t113$5 == null ? other.measureFormatter : t113$5), measureLowerBound: (t113$6 = measureLowerBound, t113$6 == null ? other.measureLowerBound : t113$6), measureUpperBound: (t113$7 = measureUpperBound, t113$7 == null ? other.measureUpperBound : t113$7), measureOffset: (t113$8 = measureOffset, t113$8 == null ? other.measureOffset : t113$8), rawMeasure: (t113$9 = rawMeasure, t113$9 == null ? other.rawMeasure : t113$9), rawMeasureLowerBound: (t113$10 = rawMeasureLowerBound, t113$10 == null ? other.rawMeasureLowerBound : t113$10), rawMeasureUpperBound: (t113$11 = rawMeasureUpperBound, t113$11 == null ? other.rawMeasureUpperBound : t113$11), series: (t113$12 = series, t113$12 == null ? other.series : t113$12), color: (t113$13 = color, t113$13 == null ? other.color : t113$13), fillColor: (t113$14 = fillColor, t113$14 == null ? other.fillColor : t113$14), fillPattern: (t113$15 = fillPattern, t113$15 == null ? other.fillPattern : t113$15), areaColor: (t113$16 = areaColor, t113$16 == null ? other.areaColor : t113$16), dashPattern: (t113$17 = dashPattern, t113$17 == null ? other.dashPattern : t113$17), chartPosition: (t113$18 = chartPosition, t113$18 == null ? other.chartPosition : t113$18), chartPositionLower: (t113$19 = chartPositionLower, t113$19 == null ? other.chartPositionLower : t113$19), chartPositionUpper: (t113$20 = chartPositionUpper, t113$20 == null ? other.chartPositionUpper : t113$20), bounds: (t113$21 = bounds, t113$21 == null ? other.bounds : t113$21), domainDistance: (t113$22 = domainDistance, t113$22 == null ? other.domainDistance : t113$22), measureDistance: (t113$23 = measureDistance, t113$23 == null ? other.measureDistance : t113$23), radiusPx: (t113$24 = radiusPx, t113$24 == null ? other.radiusPx : t113$24), symbolRenderer: (t113$25 = symbolRenderer, t113$25 == null ? other.symbolRenderer : t113$25), strokeWidthPx: (t113$26 = radiusPx, t113$26 == null ? other.strokeWidthPx : t113$26)});
      }
      get formattedDomain() {
        return this.domainFormatter != null ? dart.nullCheck(this.domainFormatter)(dart.nullCheck(this.domain)) : dart.toString(this.domain);
      }
      get formattedMeasure() {
        return this.measureFormatter != null ? dart.nullCheck(this.measureFormatter)(this.measure) : dart.toString(this.measure);
      }
    }
    (DatumDetails.new = function(opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let domainFormatter = opts && 'domainFormatter' in opts ? opts.domainFormatter : null;
      let domainLowerBound = opts && 'domainLowerBound' in opts ? opts.domainLowerBound : null;
      let domainUpperBound = opts && 'domainUpperBound' in opts ? opts.domainUpperBound : null;
      let measure = opts && 'measure' in opts ? opts.measure : null;
      let measureFormatter = opts && 'measureFormatter' in opts ? opts.measureFormatter : null;
      let measureLowerBound = opts && 'measureLowerBound' in opts ? opts.measureLowerBound : null;
      let measureUpperBound = opts && 'measureUpperBound' in opts ? opts.measureUpperBound : null;
      let measureOffset = opts && 'measureOffset' in opts ? opts.measureOffset : null;
      let rawMeasure = opts && 'rawMeasure' in opts ? opts.rawMeasure : null;
      let rawMeasureLowerBound = opts && 'rawMeasureLowerBound' in opts ? opts.rawMeasureLowerBound : null;
      let rawMeasureUpperBound = opts && 'rawMeasureUpperBound' in opts ? opts.rawMeasureUpperBound : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let areaColor = opts && 'areaColor' in opts ? opts.areaColor : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let chartPosition = opts && 'chartPosition' in opts ? opts.chartPosition : null;
      let chartPositionLower = opts && 'chartPositionLower' in opts ? opts.chartPositionLower : null;
      let chartPositionUpper = opts && 'chartPositionUpper' in opts ? opts.chartPositionUpper : null;
      let bounds = opts && 'bounds' in opts ? opts.bounds : null;
      let domainDistance = opts && 'domainDistance' in opts ? opts.domainDistance : null;
      let measureDistance = opts && 'measureDistance' in opts ? opts.measureDistance : null;
      let relativeDistance = opts && 'relativeDistance' in opts ? opts.relativeDistance : null;
      let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      this[S$1.datum$5] = datum;
      this[S$1.index$4] = index;
      this[S$1.domain$5] = domain;
      this[S$1.domainFormatter] = domainFormatter;
      this[S$1.domainLowerBound] = domainLowerBound;
      this[S$1.domainUpperBound] = domainUpperBound;
      this[S$1.measure$1] = measure;
      this[S$1.measureFormatter$2] = measureFormatter;
      this[S$1.measureLowerBound] = measureLowerBound;
      this[S$1.measureUpperBound] = measureUpperBound;
      this[S$1.measureOffset$1] = measureOffset;
      this[S$1.rawMeasure] = rawMeasure;
      this[S$1.rawMeasureLowerBound] = rawMeasureLowerBound;
      this[S$1.rawMeasureUpperBound] = rawMeasureUpperBound;
      this[S$1.series$8] = series;
      this[S$1.color$6] = color;
      this[S$1.fillColor$4] = fillColor;
      this[S$1.fillPattern$3] = fillPattern;
      this[S$1.areaColor] = areaColor;
      this[S$1.dashPattern$5] = dashPattern;
      this[S$1.chartPosition] = chartPosition;
      this[S$1.chartPositionLower] = chartPositionLower;
      this[S$1.chartPositionUpper] = chartPositionUpper;
      this[S$1.bounds$2] = bounds;
      this[S$1.domainDistance] = domainDistance;
      this[S$1.measureDistance] = measureDistance;
      this[S$1.relativeDistance] = relativeDistance;
      this[S$1.radiusPx$3] = radiusPx;
      this[S$1.symbolRenderer$8] = symbolRenderer;
      this[S$1.strokeWidthPx$13] = strokeWidthPx;
      ;
    }).prototype = DatumDetails.prototype;
    dart.addTypeTests(DatumDetails);
    DatumDetails.prototype[_is_DatumDetails_default] = true;
    dart.addTypeCaches(DatumDetails);
    dart.setGetterSignature(DatumDetails, () => ({
      __proto__: dart.getGetters(DatumDetails.__proto__),
      formattedDomain: core.String,
      formattedMeasure: core.String
    }));
    dart.setLibraryUri(DatumDetails, I[160]);
    dart.setFieldSignature(DatumDetails, () => ({
      __proto__: dart.getFields(DatumDetails.__proto__),
      datum: dart.finalFieldType(dart.dynamic),
      index: dart.finalFieldType(dart.nullable(core.int)),
      domain: dart.finalFieldType(dart.nullable(D)),
      domainLowerBound: dart.finalFieldType(dart.nullable(D)),
      domainUpperBound: dart.finalFieldType(dart.nullable(D)),
      measure: dart.finalFieldType(dart.nullable(core.num)),
      measureLowerBound: dart.finalFieldType(dart.nullable(core.num)),
      measureUpperBound: dart.finalFieldType(dart.nullable(core.num)),
      measureOffset: dart.finalFieldType(dart.nullable(core.num)),
      rawMeasure: dart.finalFieldType(dart.nullable(core.num)),
      rawMeasureLowerBound: dart.finalFieldType(dart.nullable(core.num)),
      rawMeasureUpperBound: dart.finalFieldType(dart.nullable(core.num)),
      series: dart.finalFieldType(dart.nullable(processed_series.ImmutableSeries$(D))),
      color: dart.finalFieldType(dart.nullable(color$.Color)),
      fillColor: dart.finalFieldType(dart.nullable(color$.Color)),
      fillPattern: dart.finalFieldType(dart.nullable(chart_canvas.FillPatternType)),
      areaColor: dart.finalFieldType(dart.nullable(color$.Color)),
      dashPattern: dart.finalFieldType(dart.nullable(core.List$(core.int))),
      chartPosition: dart.finalFieldType(dart.nullable(math$.NullablePoint)),
      chartPositionLower: dart.finalFieldType(dart.nullable(math$.NullablePoint)),
      chartPositionUpper: dart.finalFieldType(dart.nullable(math$.NullablePoint)),
      bounds: dart.finalFieldType(dart.nullable(math.Rectangle$(core.int))),
      domainDistance: dart.finalFieldType(dart.nullable(core.double)),
      measureDistance: dart.finalFieldType(dart.nullable(core.double)),
      relativeDistance: dart.finalFieldType(dart.nullable(core.double)),
      radiusPx: dart.finalFieldType(dart.nullable(core.double)),
      symbolRenderer: dart.finalFieldType(dart.nullable(symbol_renderer.SymbolRenderer)),
      strokeWidthPx: dart.finalFieldType(dart.nullable(core.double)),
      domainFormatter: dart.fieldType(dart.nullable(dart.fnType(core.String, [D]))),
      measureFormatter: dart.fieldType(dart.nullable(dart.fnType(core.String, [dart.nullable(core.num)])))
    }));
    return DatumDetails;
  });
  datum_details.DatumDetails = datum_details.DatumDetails$();
  dart.addTypeTests(datum_details.DatumDetails, _is_DatumDetails_default);
  layout_margin_strategy.SizeList = class SizeList extends core.Object {
    _get(i) {
      return this[S$1._sizes][S$.$_get](i);
    }
    get total() {
      return this[S$1._total];
    }
    get length() {
      return this[S$1._sizes][S$.$length];
    }
    add(size) {
      this[S$1._sizes][S$.$add](size);
      this[S$1._total] = this[S$1._total] + size;
    }
    adjust(index, amount) {
      let t114, t113;
      t113 = this[S$1._sizes];
      t114 = index;
      t113[S$.$_set](t114, t113[S$.$_get](t114) + amount);
      this[S$1._total] = this[S$1._total] + amount;
    }
  };
  (layout_margin_strategy.SizeList.new = function() {
    this[S$1._sizes] = T$0.JSArrayOfint().of([]);
    this[S$1._total] = 0;
    ;
  }).prototype = layout_margin_strategy.SizeList.prototype;
  dart.addTypeTests(layout_margin_strategy.SizeList);
  dart.addTypeCaches(layout_margin_strategy.SizeList);
  dart.setMethodSignature(layout_margin_strategy.SizeList, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.SizeList.__proto__),
    _get: dart.fnType(core.int, [core.int]),
    add: dart.fnType(dart.void, [core.int]),
    adjust: dart.fnType(dart.void, [core.int, core.int])
  }));
  dart.setGetterSignature(layout_margin_strategy.SizeList, () => ({
    __proto__: dart.getGetters(layout_margin_strategy.SizeList.__proto__),
    total: core.int,
    length: core.int
  }));
  dart.setLibraryUri(layout_margin_strategy.SizeList, I[161]);
  dart.setFieldSignature(layout_margin_strategy.SizeList, () => ({
    __proto__: dart.getFields(layout_margin_strategy.SizeList.__proto__),
    [S$1._sizes]: dart.finalFieldType(core.List$(core.int)),
    [S$1._total]: dart.fieldType(core.int)
  }));
  layout_margin_strategy._DesiredViewSizes = class _DesiredViewSizes extends core.Object {
    add(preferred, minimum) {
      this.preferredSizes.add(preferred);
      this.minimumSizes.add(minimum);
    }
    adjustedTo(maxSize) {
      if (maxSize < this.preferredSizes.total) {
        let delta = this.preferredSizes.total - maxSize;
        for (let i = this.preferredSizes.length - 1; i >= 0; i = i - 1) {
          let viewAvailablePx = this.preferredSizes._get(i) - this.minimumSizes._get(i);
          if (viewAvailablePx < delta) {
            this.preferredSizes.adjust(i, -viewAvailablePx);
            delta = delta - viewAvailablePx;
          } else {
            this.preferredSizes.adjust(i, -delta);
            return;
          }
        }
      }
    }
  };
  (layout_margin_strategy._DesiredViewSizes.new = function() {
    this.preferredSizes = new layout_margin_strategy.SizeList.new();
    this.minimumSizes = new layout_margin_strategy.SizeList.new();
    ;
  }).prototype = layout_margin_strategy._DesiredViewSizes.prototype;
  dart.addTypeTests(layout_margin_strategy._DesiredViewSizes);
  dart.addTypeCaches(layout_margin_strategy._DesiredViewSizes);
  dart.setMethodSignature(layout_margin_strategy._DesiredViewSizes, () => ({
    __proto__: dart.getMethods(layout_margin_strategy._DesiredViewSizes.__proto__),
    add: dart.fnType(dart.void, [core.int, core.int]),
    adjustedTo: dart.fnType(dart.void, [core.int])
  }));
  dart.setLibraryUri(layout_margin_strategy._DesiredViewSizes, I[161]);
  dart.setFieldSignature(layout_margin_strategy._DesiredViewSizes, () => ({
    __proto__: dart.getFields(layout_margin_strategy._DesiredViewSizes.__proto__),
    preferredSizes: dart.finalFieldType(layout_margin_strategy.SizeList),
    minimumSizes: dart.finalFieldType(layout_margin_strategy.SizeList)
  }));
  layout_margin_strategy.VerticalMarginStrategy = class VerticalMarginStrategy extends core.Object {
    measure(views, opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let fullHeight = opts && 'fullHeight' in opts ? opts.fullHeight : null;
      let measuredWidths = new layout_margin_strategy._DesiredViewSizes.new();
      let remainingWidth = maxWidth;
      views[S$.$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let viewMargin = params.viewMargin;
        let availableHeight = (params.isFullPosition ? fullHeight : height) - viewMargin.height;
        remainingWidth = remainingWidth - viewMargin.width;
        maxWidth = maxWidth - viewMargin.width;
        let size = layout_view.ViewMeasuredSizes.zero;
        if (remainingWidth > 0 || availableHeight > 0) {
          size = dart.nullCheck(view.measure(remainingWidth, availableHeight));
          remainingWidth = remainingWidth - size.preferredWidth;
        }
        measuredWidths.add(size.preferredWidth, size.minWidth);
      }, T$.LayoutViewTovoid()));
      measuredWidths.adjustedTo(maxWidth);
      return measuredWidths.preferredSizes;
    }
  };
  (layout_margin_strategy.VerticalMarginStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.VerticalMarginStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.VerticalMarginStrategy);
  dart.addTypeCaches(layout_margin_strategy.VerticalMarginStrategy);
  dart.setMethodSignature(layout_margin_strategy.VerticalMarginStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.VerticalMarginStrategy.__proto__),
    measure: dart.fnType(layout_margin_strategy.SizeList, [core.Iterable$(layout_view.LayoutView)], {}, {fullHeight: core.int, height: core.int, maxWidth: core.int})
  }));
  dart.setLibraryUri(layout_margin_strategy.VerticalMarginStrategy, I[161]);
  layout_margin_strategy.LeftMarginLayoutStrategy = class LeftMarginLayoutStrategy extends layout_margin_strategy.VerticalMarginStrategy {
    layout(views, measuredSizes, fullBounds, drawAreaBounds) {
      let prevBoundsRight = drawAreaBounds[S$.$left];
      let i = 0;
      views[S$.$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let width = measuredSizes._get(i);
        let left = prevBoundsRight - params.viewMargin.rightPx - width;
        let height = (params.isFullPosition ? fullBounds[S$.$height] : drawAreaBounds[S$.$height]) - params.viewMargin.height;
        let top = params.viewMargin.topPx + (params.isFullPosition ? fullBounds[S$.$top] : drawAreaBounds[S$.$top]);
        prevBoundsRight = left - params.viewMargin.leftPx;
        view.layout(new (T$.RectangleOfint()).new(left, top, width, height), drawAreaBounds);
        i = i + 1;
      }, T$.LayoutViewTovoid()));
    }
  };
  (layout_margin_strategy.LeftMarginLayoutStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.LeftMarginLayoutStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.LeftMarginLayoutStrategy);
  dart.addTypeCaches(layout_margin_strategy.LeftMarginLayoutStrategy);
  dart.setMethodSignature(layout_margin_strategy.LeftMarginLayoutStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.LeftMarginLayoutStrategy.__proto__),
    layout: dart.fnType(dart.void, [core.Iterable$(layout_view.LayoutView), layout_margin_strategy.SizeList, math.Rectangle$(core.int), math.Rectangle$(core.int)])
  }));
  dart.setLibraryUri(layout_margin_strategy.LeftMarginLayoutStrategy, I[161]);
  layout_margin_strategy.RightMarginLayoutStrategy = class RightMarginLayoutStrategy extends layout_margin_strategy.VerticalMarginStrategy {
    layout(views, measuredSizes, fullBounds, drawAreaBounds) {
      let prevBoundsLeft = drawAreaBounds[S$.$right];
      let i = 0;
      views[S$.$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let width = measuredSizes._get(i);
        let left = prevBoundsLeft + params.viewMargin.leftPx;
        let height = (params.isFullPosition ? fullBounds[S$.$height] : drawAreaBounds[S$.$height]) - params.viewMargin.height;
        let top = params.viewMargin.topPx + (params.isFullPosition ? fullBounds[S$.$top] : drawAreaBounds[S$.$top]);
        prevBoundsLeft = left + width + params.viewMargin.rightPx;
        view.layout(new (T$.RectangleOfint()).new(left, top, width, height), drawAreaBounds);
        i = i + 1;
      }, T$.LayoutViewTovoid()));
    }
  };
  (layout_margin_strategy.RightMarginLayoutStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.RightMarginLayoutStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.RightMarginLayoutStrategy);
  dart.addTypeCaches(layout_margin_strategy.RightMarginLayoutStrategy);
  dart.setMethodSignature(layout_margin_strategy.RightMarginLayoutStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.RightMarginLayoutStrategy.__proto__),
    layout: dart.fnType(dart.void, [core.Iterable$(layout_view.LayoutView), layout_margin_strategy.SizeList, math.Rectangle$(core.int), math.Rectangle$(core.int)])
  }));
  dart.setLibraryUri(layout_margin_strategy.RightMarginLayoutStrategy, I[161]);
  layout_margin_strategy.HorizontalMarginStrategy = class HorizontalMarginStrategy extends core.Object {
    measure(views, opts) {
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let fullWidth = opts && 'fullWidth' in opts ? opts.fullWidth : null;
      let measuredHeights = new layout_margin_strategy._DesiredViewSizes.new();
      let remainingHeight = maxHeight;
      views[S$.$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let viewMargin = params.viewMargin;
        let availableWidth = (params.isFullPosition ? fullWidth : width) - viewMargin.width;
        remainingHeight = remainingHeight - viewMargin.height;
        maxHeight = maxHeight - viewMargin.height;
        let size = layout_view.ViewMeasuredSizes.zero;
        if (remainingHeight > 0 || availableWidth > 0) {
          size = dart.nullCheck(view.measure(availableWidth, remainingHeight));
          remainingHeight = remainingHeight - size.preferredHeight;
        }
        measuredHeights.add(size.preferredHeight, size.minHeight);
      }, T$.LayoutViewTovoid()));
      measuredHeights.adjustedTo(maxHeight);
      return measuredHeights.preferredSizes;
    }
  };
  (layout_margin_strategy.HorizontalMarginStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.HorizontalMarginStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.HorizontalMarginStrategy);
  dart.addTypeCaches(layout_margin_strategy.HorizontalMarginStrategy);
  dart.setMethodSignature(layout_margin_strategy.HorizontalMarginStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.HorizontalMarginStrategy.__proto__),
    measure: dart.fnType(layout_margin_strategy.SizeList, [core.Iterable$(layout_view.LayoutView)], {}, {fullWidth: core.int, maxHeight: core.int, width: core.int})
  }));
  dart.setLibraryUri(layout_margin_strategy.HorizontalMarginStrategy, I[161]);
  layout_margin_strategy.TopMarginLayoutStrategy = class TopMarginLayoutStrategy extends layout_margin_strategy.HorizontalMarginStrategy {
    layout(views, measuredSizes, fullBounds, drawAreaBounds) {
      let prevBoundsBottom = drawAreaBounds[S$.$top];
      let i = 0;
      views[S$.$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let height = measuredSizes._get(i);
        let top = prevBoundsBottom - height - params.viewMargin.bottomPx;
        let width = (params.isFullPosition ? fullBounds[S$.$width] : drawAreaBounds[S$.$width]) - params.viewMargin.width;
        let left = params.viewMargin.leftPx + (params.isFullPosition ? fullBounds[S$.$left] : drawAreaBounds[S$.$left]);
        prevBoundsBottom = top - params.viewMargin.topPx;
        view.layout(new (T$.RectangleOfint()).new(left, top, width, height), drawAreaBounds);
        i = i + 1;
      }, T$.LayoutViewTovoid()));
    }
  };
  (layout_margin_strategy.TopMarginLayoutStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.TopMarginLayoutStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.TopMarginLayoutStrategy);
  dart.addTypeCaches(layout_margin_strategy.TopMarginLayoutStrategy);
  dart.setMethodSignature(layout_margin_strategy.TopMarginLayoutStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.TopMarginLayoutStrategy.__proto__),
    layout: dart.fnType(dart.void, [core.Iterable$(layout_view.LayoutView), layout_margin_strategy.SizeList, math.Rectangle$(core.int), math.Rectangle$(core.int)])
  }));
  dart.setLibraryUri(layout_margin_strategy.TopMarginLayoutStrategy, I[161]);
  layout_margin_strategy.BottomMarginLayoutStrategy = class BottomMarginLayoutStrategy extends layout_margin_strategy.HorizontalMarginStrategy {
    layout(views, measuredSizes, fullBounds, drawAreaBounds) {
      let prevBoundsTop = drawAreaBounds[S$.$bottom];
      let i = 0;
      views[S$.$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let height = measuredSizes._get(i);
        let top = prevBoundsTop + params.viewMargin.topPx;
        let width = (params.isFullPosition ? fullBounds[S$.$width] : drawAreaBounds[S$.$width]) - params.viewMargin.width;
        let left = params.viewMargin.leftPx + (params.isFullPosition ? fullBounds[S$.$left] : drawAreaBounds[S$.$left]);
        prevBoundsTop = top + height + params.viewMargin.bottomPx;
        view.layout(new (T$.RectangleOfint()).new(left, top, width, height), drawAreaBounds);
        i = i + 1;
      }, T$.LayoutViewTovoid()));
    }
  };
  (layout_margin_strategy.BottomMarginLayoutStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.BottomMarginLayoutStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.BottomMarginLayoutStrategy);
  dart.addTypeCaches(layout_margin_strategy.BottomMarginLayoutStrategy);
  dart.setMethodSignature(layout_margin_strategy.BottomMarginLayoutStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.BottomMarginLayoutStrategy.__proto__),
    layout: dart.fnType(dart.void, [core.Iterable$(layout_view.LayoutView), layout_margin_strategy.SizeList, math.Rectangle$(core.int), math.Rectangle$(core.int)])
  }));
  dart.setLibraryUri(layout_margin_strategy.BottomMarginLayoutStrategy, I[161]);
  layout_manager_impl.LayoutManagerImpl = class LayoutManagerImpl extends core.Object {
    get config() {
      return this[S$1.config$7];
    }
    set config(value) {
      this[S$1.config$7] = value;
    }
    get [S$1._paintOrderedViews]() {
      let t113;
      t113 = this[S$1.__LayoutManagerImpl__paintOrderedViews];
      return t113 == null ? dart.throw(new _internal.LateError.fieldNI("_paintOrderedViews")) : t113;
    }
    set [S$1._paintOrderedViews](t113) {
      this[S$1.__LayoutManagerImpl__paintOrderedViews] = t113;
    }
    get [S$1._positionOrderedViews]() {
      let t114;
      t114 = this[S$1.__LayoutManagerImpl__positionOrderedViews];
      return t114 == null ? dart.throw(new _internal.LateError.fieldNI("_positionOrderedViews")) : t114;
    }
    set [S$1._positionOrderedViews](t114) {
      this[S$1.__LayoutManagerImpl__positionOrderedViews] = t114;
    }
    get [S$1._measurements]() {
      let t115;
      t115 = this[S$1.__LayoutManagerImpl__measurements];
      return t115 == null ? dart.throw(new _internal.LateError.fieldNI("_measurements")) : t115;
    }
    set [S$1._measurements](t115) {
      this[S$1.__LayoutManagerImpl__measurements] = t115;
    }
    get [S$1._drawAreaBounds$7]() {
      let t116;
      t116 = this[S$1.__LayoutManagerImpl__drawAreaBounds];
      return t116 == null ? dart.throw(new _internal.LateError.fieldNI("_drawAreaBounds")) : t116;
    }
    set [S$1._drawAreaBounds$7](t116) {
      this[S$1.__LayoutManagerImpl__drawAreaBounds] = t116;
    }
    addView(view) {
      this[S$1._views][S$.$add](view);
      this[S$1._drawAreaBoundsOutdated] = true;
      this[S$1._viewsNeedPositionSort] = true;
      this[S$1._viewsNeedPaintSort] = true;
    }
    removeView(view) {
      if (this[S$1._views][S$.$remove](view)) {
        this[S$1._drawAreaBoundsOutdated] = true;
        this[S$1._viewsNeedPositionSort] = true;
        this[S$1._viewsNeedPaintSort] = true;
      }
    }
    isAttached(view) {
      return this[S$1._views][S$.$contains](view);
    }
    updateConfig(layoutConfig) {
      this.config = layoutConfig;
    }
    get paintOrderedViews() {
      if (this[S$1._viewsNeedPaintSort]) {
        this[S$1._paintOrderedViews] = T$0.ListOfLayoutView().of(this[S$1._views]);
        this[S$1._paintOrderedViews][S$.$sort](dart.fn((v1, v2) => dart.nullCheck(v1.layoutConfig.paintOrder)[S$.$compareTo](dart.nullCheck(v2.layoutConfig.paintOrder)), T$0.LayoutViewAndLayoutViewToint()));
        this[S$1._viewsNeedPaintSort] = false;
      }
      return this[S$1._paintOrderedViews];
    }
    get positionOrderedViews() {
      if (this[S$1._viewsNeedPositionSort]) {
        this[S$1._positionOrderedViews] = T$0.ListOfLayoutView().of(this[S$1._views]);
        this[S$1._positionOrderedViews][S$.$sort](dart.fn((v1, v2) => dart.nullCheck(v1.layoutConfig.positionOrder)[S$.$compareTo](dart.nullCheck(v2.layoutConfig.positionOrder)), T$0.LayoutViewAndLayoutViewToint()));
        this[S$1._viewsNeedPositionSort] = false;
      }
      return this[S$1._positionOrderedViews];
    }
    get drawAreaBounds() {
      if (!(this[S$1._drawAreaBoundsOutdated] === false)) dart.assertFailed(null, I[162], 114, 12, "_drawAreaBoundsOutdated == false");
      return this[S$1._drawAreaBounds$7];
    }
    get drawableLayoutAreaBounds() {
      if (!(this[S$1._drawAreaBoundsOutdated] === false)) dart.assertFailed(null, I[162], 120, 12, "_drawAreaBoundsOutdated == false");
      let drawableViews = this[S$1._views][S$.$where](dart.fn(view => view.isSeriesRenderer, T$0.LayoutViewTobool()));
      let componentBounds = drawableViews[S$.$first].componentBounds;
      if (componentBounds != null) {
        for (let view of drawableViews[S$0.$skip](1)) {
          if (view.componentBounds != null) {
            componentBounds = dart.nullCheck(componentBounds)[S$1.$boundingBox](dart.nullCheck(view.componentBounds));
          }
        }
      } else {
        componentBounds = new (T$.RectangleOfint()).new(0, 0, 0, 0);
      }
      return dart.nullCheck(componentBounds);
    }
    get marginBottom() {
      if (!(this[S$1._drawAreaBoundsOutdated] === false)) dart.assertFailed(null, I[162], 144, 12, "_drawAreaBoundsOutdated == false");
      return this[S$1._measurements].bottomHeight;
    }
    get marginLeft() {
      if (!(this[S$1._drawAreaBoundsOutdated] === false)) dart.assertFailed(null, I[162], 150, 12, "_drawAreaBoundsOutdated == false");
      return this[S$1._measurements].leftWidth;
    }
    get marginRight() {
      if (!(this[S$1._drawAreaBoundsOutdated] === false)) dart.assertFailed(null, I[162], 156, 12, "_drawAreaBoundsOutdated == false");
      return this[S$1._measurements].rightWidth;
    }
    get marginTop() {
      if (!(this[S$1._drawAreaBoundsOutdated] === false)) dart.assertFailed(null, I[162], 162, 12, "_drawAreaBoundsOutdated == false");
      return this[S$1._measurements].topHeight;
    }
    withinDrawArea(point) {
      return this[S$1._drawAreaBounds$7][S$.$containsPoint](point);
    }
    measure(width, height) {
      let topViews = this[S$1._viewsForPositions](layout_view.LayoutPosition.Top, layout_view.LayoutPosition.FullTop);
      let rightViews = this[S$1._viewsForPositions](layout_view.LayoutPosition.Right, layout_view.LayoutPosition.FullRight);
      let bottomViews = this[S$1._viewsForPositions](layout_view.LayoutPosition.Bottom, layout_view.LayoutPosition.FullBottom);
      let leftViews = this[S$1._viewsForPositions](layout_view.LayoutPosition.Left, layout_view.LayoutPosition.FullLeft);
      let measurements = this[S$1._measure](width, height, {topViews: topViews, rightViews: rightViews, bottomViews: bottomViews, leftViews: leftViews, useMax: true});
      let secondMeasurements = this[S$1._measure](width, height, {topViews: topViews, rightViews: rightViews, bottomViews: bottomViews, leftViews: leftViews, previousMeasurements: measurements, useMax: true});
      if (measurements.leftWidth !== secondMeasurements.leftWidth || measurements.rightWidth !== secondMeasurements.rightWidth || measurements.topHeight !== secondMeasurements.topHeight || measurements.bottomHeight !== secondMeasurements.bottomHeight) {
        let thirdMeasurements = this[S$1._measure](width, height, {topViews: topViews, rightViews: rightViews, bottomViews: bottomViews, leftViews: leftViews, previousMeasurements: secondMeasurements, useMax: false});
        measurements = thirdMeasurements;
      } else {
        measurements = secondMeasurements;
      }
      this[S$1._measurements] = measurements;
      let drawAreaWidth = math.max(core.int, 20, width - measurements.leftWidth - measurements.rightWidth);
      let drawAreaHeight = math.max(core.int, 20, height - measurements.bottomHeight - measurements.topHeight);
      this[S$1._drawAreaBounds$7] = new (T$.RectangleOfint()).new(measurements.leftWidth, measurements.topHeight, drawAreaWidth, drawAreaHeight);
      this[S$1._drawAreaBoundsOutdated] = false;
    }
    layout(width, height) {
      let topViews = this[S$1._viewsForPositions](layout_view.LayoutPosition.Top, layout_view.LayoutPosition.FullTop);
      let rightViews = this[S$1._viewsForPositions](layout_view.LayoutPosition.Right, layout_view.LayoutPosition.FullRight);
      let bottomViews = this[S$1._viewsForPositions](layout_view.LayoutPosition.Bottom, layout_view.LayoutPosition.FullBottom);
      let leftViews = this[S$1._viewsForPositions](layout_view.LayoutPosition.Left, layout_view.LayoutPosition.FullLeft);
      let drawAreaViews = this[S$1._viewsForPositions](layout_view.LayoutPosition.DrawArea);
      let fullBounds = new (T$.RectangleOfint()).new(0, 0, width, height);
      new layout_margin_strategy.LeftMarginLayoutStrategy.new().layout(leftViews, this[S$1._measurements].leftSizes, fullBounds, this.drawAreaBounds);
      new layout_margin_strategy.RightMarginLayoutStrategy.new().layout(rightViews, this[S$1._measurements].rightSizes, fullBounds, this.drawAreaBounds);
      new layout_margin_strategy.BottomMarginLayoutStrategy.new().layout(bottomViews, this[S$1._measurements].bottomSizes, fullBounds, this.drawAreaBounds);
      new layout_margin_strategy.TopMarginLayoutStrategy.new().layout(topViews, this[S$1._measurements].topSizes, fullBounds, this.drawAreaBounds);
      drawAreaViews[S$.$forEach](dart.fn(view => view.layout(this[S$1._drawAreaBounds$7], this[S$1._drawAreaBounds$7]), T$.LayoutViewTovoid()));
    }
    [S$1._viewsForPositions](p1, p2 = null) {
      return this.positionOrderedViews[S$.$where](dart.fn(view => view.layoutConfig.position === p1 || p2 != null && view.layoutConfig.position == p2, T$0.LayoutViewTobool()));
    }
    [S$1._measure](width, height, opts) {
      let t117, t117$, t117$0, t117$1, t117$2, t117$3, t117$4, t117$5;
      let topViews = opts && 'topViews' in opts ? opts.topViews : null;
      let rightViews = opts && 'rightViews' in opts ? opts.rightViews : null;
      let bottomViews = opts && 'bottomViews' in opts ? opts.bottomViews : null;
      let leftViews = opts && 'leftViews' in opts ? opts.leftViews : null;
      let previousMeasurements = opts && 'previousMeasurements' in opts ? opts.previousMeasurements : null;
      let useMax = opts && 'useMax' in opts ? opts.useMax : null;
      let maxLeftWidth = this.config.leftSpec.getMaxPixels(width);
      let maxRightWidth = this.config.rightSpec.getMaxPixels(width);
      let maxBottomHeight = this.config.bottomSpec.getMaxPixels(height);
      let maxTopHeight = this.config.topSpec.getMaxPixels(height);
      let leftWidth = (t117$ = (t117 = previousMeasurements, t117 == null ? null : t117.leftWidth), t117$ == null ? maxLeftWidth : t117$);
      let rightWidth = (t117$1 = (t117$0 = previousMeasurements, t117$0 == null ? null : t117$0.rightWidth), t117$1 == null ? maxRightWidth : t117$1);
      let bottomHeight = (t117$3 = (t117$2 = previousMeasurements, t117$2 == null ? null : t117$2.bottomHeight), t117$3 == null ? maxBottomHeight : t117$3);
      let topHeight = (t117$5 = (t117$4 = previousMeasurements, t117$4 == null ? null : t117$4.topHeight), t117$5 == null ? maxTopHeight : t117$5);
      let adjustedHeight = previousMeasurements != null ? height - bottomHeight - topHeight : height;
      let leftSizes = new layout_margin_strategy.LeftMarginLayoutStrategy.new().measure(leftViews, {maxWidth: useMax ? maxLeftWidth : leftWidth, height: adjustedHeight, fullHeight: height});
      leftWidth = math.max(core.int, leftSizes.total, this.config.leftSpec.getMinPixels(width));
      let rightSizes = new layout_margin_strategy.RightMarginLayoutStrategy.new().measure(rightViews, {maxWidth: useMax ? maxRightWidth : rightWidth, height: adjustedHeight, fullHeight: height});
      rightWidth = math.max(core.int, rightSizes.total, this.config.rightSpec.getMinPixels(width));
      let adjustedWidth = width - leftWidth - rightWidth;
      let bottomSizes = new layout_margin_strategy.BottomMarginLayoutStrategy.new().measure(bottomViews, {maxHeight: useMax ? maxBottomHeight : bottomHeight, width: adjustedWidth, fullWidth: width});
      bottomHeight = math.max(core.int, bottomSizes.total, this.config.bottomSpec.getMinPixels(height));
      let topSizes = new layout_margin_strategy.TopMarginLayoutStrategy.new().measure(topViews, {maxHeight: useMax ? maxTopHeight : topHeight, width: adjustedWidth, fullWidth: width});
      topHeight = math.max(core.int, topSizes.total, this.config.topSpec.getMinPixels(height));
      return new layout_manager_impl._MeasuredSizes.new({leftWidth: leftWidth, leftSizes: leftSizes, rightWidth: rightWidth, rightSizes: rightSizes, topHeight: topHeight, topSizes: topSizes, bottomHeight: bottomHeight, bottomSizes: bottomSizes});
    }
    applyToViews(apply) {
      this[S$1._views][S$.$forEach](apply);
    }
  };
  (layout_manager_impl.LayoutManagerImpl.new = function(opts) {
    let t113;
    let config = opts && 'config' in opts ? opts.config : null;
    this[S$1._views] = T$0.JSArrayOfLayoutView().of([]);
    this[S$1.__LayoutManagerImpl__paintOrderedViews] = null;
    this[S$1.__LayoutManagerImpl__positionOrderedViews] = null;
    this[S$1.__LayoutManagerImpl__measurements] = null;
    this[S$1.__LayoutManagerImpl__drawAreaBounds] = null;
    this[S$1._drawAreaBoundsOutdated] = true;
    this[S$1._viewsNeedPaintSort] = true;
    this[S$1._viewsNeedPositionSort] = true;
    this[S$1.config$7] = (t113 = config, t113 == null ? new layout_config.LayoutConfig.new() : t113);
    ;
  }).prototype = layout_manager_impl.LayoutManagerImpl.prototype;
  dart.addTypeTests(layout_manager_impl.LayoutManagerImpl);
  dart.addTypeCaches(layout_manager_impl.LayoutManagerImpl);
  layout_manager_impl.LayoutManagerImpl[dart.implements] = () => [layout_manager.LayoutManager];
  dart.setMethodSignature(layout_manager_impl.LayoutManagerImpl, () => ({
    __proto__: dart.getMethods(layout_manager_impl.LayoutManagerImpl.__proto__),
    addView: dart.fnType(dart.void, [layout_view.LayoutView]),
    removeView: dart.fnType(dart.void, [layout_view.LayoutView]),
    isAttached: dart.fnType(core.bool, [layout_view.LayoutView]),
    updateConfig: dart.fnType(dart.void, [layout_config.LayoutConfig]),
    withinDrawArea: dart.fnType(core.bool, [math.Point$(core.num)]),
    measure: dart.fnType(dart.void, [core.int, core.int]),
    layout: dart.fnType(dart.void, [core.int, core.int]),
    [S$1._viewsForPositions]: dart.fnType(core.Iterable$(layout_view.LayoutView), [layout_view.LayoutPosition], [dart.nullable(layout_view.LayoutPosition)]),
    [S$1._measure]: dart.fnType(layout_manager_impl._MeasuredSizes, [core.int, core.int], {previousMeasurements: dart.nullable(layout_manager_impl._MeasuredSizes)}, {bottomViews: core.Iterable$(layout_view.LayoutView), leftViews: core.Iterable$(layout_view.LayoutView), rightViews: core.Iterable$(layout_view.LayoutView), topViews: core.Iterable$(layout_view.LayoutView), useMax: core.bool}),
    applyToViews: dart.fnType(dart.void, [dart.fnType(dart.void, [layout_view.LayoutView])])
  }));
  dart.setGetterSignature(layout_manager_impl.LayoutManagerImpl, () => ({
    __proto__: dart.getGetters(layout_manager_impl.LayoutManagerImpl.__proto__),
    [S$1._paintOrderedViews]: core.List$(layout_view.LayoutView),
    [S$1._positionOrderedViews]: core.List$(layout_view.LayoutView),
    [S$1._measurements]: layout_manager_impl._MeasuredSizes,
    [S$1._drawAreaBounds$7]: math.Rectangle$(core.int),
    paintOrderedViews: core.List$(layout_view.LayoutView),
    positionOrderedViews: core.List$(layout_view.LayoutView),
    drawAreaBounds: math.Rectangle$(core.int),
    drawableLayoutAreaBounds: math.Rectangle$(core.int),
    marginBottom: core.int,
    marginLeft: core.int,
    marginRight: core.int,
    marginTop: core.int
  }));
  dart.setSetterSignature(layout_manager_impl.LayoutManagerImpl, () => ({
    __proto__: dart.getSetters(layout_manager_impl.LayoutManagerImpl.__proto__),
    [S$1._paintOrderedViews]: core.List$(layout_view.LayoutView),
    [S$1._positionOrderedViews]: core.List$(layout_view.LayoutView),
    [S$1._measurements]: layout_manager_impl._MeasuredSizes,
    [S$1._drawAreaBounds$7]: math.Rectangle$(core.int)
  }));
  dart.setLibraryUri(layout_manager_impl.LayoutManagerImpl, I[163]);
  dart.setFieldSignature(layout_manager_impl.LayoutManagerImpl, () => ({
    __proto__: dart.getFields(layout_manager_impl.LayoutManagerImpl.__proto__),
    config: dart.fieldType(layout_config.LayoutConfig),
    [S$1._views]: dart.finalFieldType(core.List$(layout_view.LayoutView)),
    [S$1.__LayoutManagerImpl__paintOrderedViews]: dart.fieldType(dart.nullable(core.List$(layout_view.LayoutView))),
    [S$1.__LayoutManagerImpl__positionOrderedViews]: dart.fieldType(dart.nullable(core.List$(layout_view.LayoutView))),
    [S$1.__LayoutManagerImpl__measurements]: dart.fieldType(dart.nullable(layout_manager_impl._MeasuredSizes)),
    [S$1.__LayoutManagerImpl__drawAreaBounds]: dart.fieldType(dart.nullable(math.Rectangle$(core.int))),
    [S$1._drawAreaBoundsOutdated]: dart.fieldType(core.bool),
    [S$1._viewsNeedPaintSort]: dart.fieldType(core.bool),
    [S$1._viewsNeedPositionSort]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(layout_manager_impl.LayoutManagerImpl, {
    /*layout_manager_impl.LayoutManagerImpl._minDrawWidth*/get _minDrawWidth() {
      return 20;
    },
    /*layout_manager_impl.LayoutManagerImpl._minDrawHeight*/get _minDrawHeight() {
      return 20;
    }
  }, false);
  layout_manager_impl._MeasuredSizes = class _MeasuredSizes extends core.Object {};
  (layout_manager_impl._MeasuredSizes.new = function(opts) {
    let leftWidth = opts && 'leftWidth' in opts ? opts.leftWidth : null;
    let leftSizes = opts && 'leftSizes' in opts ? opts.leftSizes : null;
    let rightWidth = opts && 'rightWidth' in opts ? opts.rightWidth : null;
    let rightSizes = opts && 'rightSizes' in opts ? opts.rightSizes : null;
    let topHeight = opts && 'topHeight' in opts ? opts.topHeight : null;
    let topSizes = opts && 'topSizes' in opts ? opts.topSizes : null;
    let bottomHeight = opts && 'bottomHeight' in opts ? opts.bottomHeight : null;
    let bottomSizes = opts && 'bottomSizes' in opts ? opts.bottomSizes : null;
    this.leftWidth = leftWidth;
    this.leftSizes = leftSizes;
    this.rightWidth = rightWidth;
    this.rightSizes = rightSizes;
    this.topHeight = topHeight;
    this.topSizes = topSizes;
    this.bottomHeight = bottomHeight;
    this.bottomSizes = bottomSizes;
    ;
  }).prototype = layout_manager_impl._MeasuredSizes.prototype;
  dart.addTypeTests(layout_manager_impl._MeasuredSizes);
  dart.addTypeCaches(layout_manager_impl._MeasuredSizes);
  dart.setLibraryUri(layout_manager_impl._MeasuredSizes, I[163]);
  dart.setFieldSignature(layout_manager_impl._MeasuredSizes, () => ({
    __proto__: dart.getFields(layout_manager_impl._MeasuredSizes.__proto__),
    leftWidth: dart.finalFieldType(core.int),
    leftSizes: dart.finalFieldType(layout_margin_strategy.SizeList),
    rightWidth: dart.finalFieldType(core.int),
    rightSizes: dart.finalFieldType(layout_margin_strategy.SizeList),
    topHeight: dart.finalFieldType(core.int),
    topSizes: dart.finalFieldType(layout_margin_strategy.SizeList),
    bottomHeight: dart.finalFieldType(core.int),
    bottomSizes: dart.finalFieldType(layout_margin_strategy.SizeList)
  }));
  layout_manager.LayoutManager = class LayoutManager extends core.Object {};
  (layout_manager.LayoutManager.new = function() {
    ;
  }).prototype = layout_manager.LayoutManager.prototype;
  dart.addTypeTests(layout_manager.LayoutManager);
  dart.addTypeCaches(layout_manager.LayoutManager);
  dart.setLibraryUri(layout_manager.LayoutManager, I[164]);
  const _is_LifecycleListener_default = Symbol('_is_LifecycleListener_default');
  base_chart.LifecycleListener$ = dart.generic(D => {
    class LifecycleListener extends core.Object {
      get onData() {
        return this[S$1.onData];
      }
      set onData(value) {
        super.onData = value;
      }
      get onPreprocess() {
        return this[S$1.onPreprocess];
      }
      set onPreprocess(value) {
        super.onPreprocess = value;
      }
      get onPostprocess() {
        return this[S$1.onPostprocess];
      }
      set onPostprocess(value) {
        super.onPostprocess = value;
      }
      get onAxisConfigured() {
        return this[S$1.onAxisConfigured];
      }
      set onAxisConfigured(value) {
        super.onAxisConfigured = value;
      }
      get onPostrender() {
        return this[S$1.onPostrender];
      }
      set onPostrender(value) {
        super.onPostrender = value;
      }
      get onAnimationComplete() {
        return this[S$1.onAnimationComplete];
      }
      set onAnimationComplete(value) {
        super.onAnimationComplete = value;
      }
    }
    (LifecycleListener.new = function(opts) {
      let onData = opts && 'onData' in opts ? opts.onData : null;
      let onPreprocess = opts && 'onPreprocess' in opts ? opts.onPreprocess : null;
      let onPostprocess = opts && 'onPostprocess' in opts ? opts.onPostprocess : null;
      let onAxisConfigured = opts && 'onAxisConfigured' in opts ? opts.onAxisConfigured : null;
      let onPostrender = opts && 'onPostrender' in opts ? opts.onPostrender : null;
      let onAnimationComplete = opts && 'onAnimationComplete' in opts ? opts.onAnimationComplete : null;
      this[S$1.onData] = onData;
      this[S$1.onPreprocess] = onPreprocess;
      this[S$1.onPostprocess] = onPostprocess;
      this[S$1.onAxisConfigured] = onAxisConfigured;
      this[S$1.onPostrender] = onPostrender;
      this[S$1.onAnimationComplete] = onAnimationComplete;
      ;
    }).prototype = LifecycleListener.prototype;
    dart.addTypeTests(LifecycleListener);
    LifecycleListener.prototype[_is_LifecycleListener_default] = true;
    dart.addTypeCaches(LifecycleListener);
    dart.setLibraryUri(LifecycleListener, I[0]);
    dart.setFieldSignature(LifecycleListener, () => ({
      __proto__: dart.getFields(LifecycleListener.__proto__),
      onData: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.List$(processed_series.MutableSeries$(D))]))),
      onPreprocess: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.List$(processed_series.MutableSeries$(D))]))),
      onPostprocess: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.List$(processed_series.MutableSeries$(D))]))),
      onAxisConfigured: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onPostrender: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [chart_canvas.ChartCanvas]))),
      onAnimationComplete: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    return LifecycleListener;
  });
  base_chart.LifecycleListener = base_chart.LifecycleListener$();
  dart.addTypeTests(base_chart.LifecycleListener, _is_LifecycleListener_default);
  const _is_ChartBehavior_default = Symbol('_is_ChartBehavior_default');
  chart_behavior.ChartBehavior$ = dart.generic(D => {
    class ChartBehavior extends core.Object {}
    (ChartBehavior.new = function() {
      ;
    }).prototype = ChartBehavior.prototype;
    dart.addTypeTests(ChartBehavior);
    ChartBehavior.prototype[_is_ChartBehavior_default] = true;
    dart.addTypeCaches(ChartBehavior);
    dart.setLibraryUri(ChartBehavior, I[165]);
    return ChartBehavior;
  });
  chart_behavior.ChartBehavior = chart_behavior.ChartBehavior$();
  dart.addTypeTests(chart_behavior.ChartBehavior, _is_ChartBehavior_default);
  chart_behavior.BehaviorPosition = class BehaviorPosition extends core.Object {
    toString() {
      return this[S$0._name$12];
    }
  };
  (chart_behavior.BehaviorPosition.new = function(index, _name) {
    this.index = index;
    this[S$0._name$12] = _name;
    ;
  }).prototype = chart_behavior.BehaviorPosition.prototype;
  dart.addTypeTests(chart_behavior.BehaviorPosition);
  dart.addTypeCaches(chart_behavior.BehaviorPosition);
  dart.setLibraryUri(chart_behavior.BehaviorPosition, I[165]);
  dart.setFieldSignature(chart_behavior.BehaviorPosition, () => ({
    __proto__: dart.getFields(chart_behavior.BehaviorPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$12]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(chart_behavior.BehaviorPosition, ['toString']);
  chart_behavior.BehaviorPosition.top = C[85] || CT.C85;
  chart_behavior.BehaviorPosition.bottom = C[89] || CT.C89;
  chart_behavior.BehaviorPosition.start = C[91] || CT.C91;
  chart_behavior.BehaviorPosition.end = C[90] || CT.C90;
  chart_behavior.BehaviorPosition.inside = C[92] || CT.C92;
  chart_behavior.BehaviorPosition.values = C[180] || CT.C180;
  chart_behavior.OutsideJustification = class OutsideJustification extends core.Object {
    toString() {
      return this[S$0._name$12];
    }
  };
  (chart_behavior.OutsideJustification.new = function(index, _name) {
    this.index = index;
    this[S$0._name$12] = _name;
    ;
  }).prototype = chart_behavior.OutsideJustification.prototype;
  dart.addTypeTests(chart_behavior.OutsideJustification);
  dart.addTypeCaches(chart_behavior.OutsideJustification);
  dart.setLibraryUri(chart_behavior.OutsideJustification, I[165]);
  dart.setFieldSignature(chart_behavior.OutsideJustification, () => ({
    __proto__: dart.getFields(chart_behavior.OutsideJustification.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$12]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(chart_behavior.OutsideJustification, ['toString']);
  chart_behavior.OutsideJustification.startDrawArea = C[97] || CT.C97;
  chart_behavior.OutsideJustification.start = C[96] || CT.C96;
  chart_behavior.OutsideJustification.middleDrawArea = C[93] || CT.C93;
  chart_behavior.OutsideJustification.middle = C[88] || CT.C88;
  chart_behavior.OutsideJustification.endDrawArea = C[95] || CT.C95;
  chart_behavior.OutsideJustification.end = C[94] || CT.C94;
  chart_behavior.OutsideJustification.values = C[181] || CT.C181;
  chart_behavior.InsideJustification = class InsideJustification extends core.Object {
    toString() {
      return this[S$0._name$12];
    }
  };
  (chart_behavior.InsideJustification.new = function(index, _name) {
    this.index = index;
    this[S$0._name$12] = _name;
    ;
  }).prototype = chart_behavior.InsideJustification.prototype;
  dart.addTypeTests(chart_behavior.InsideJustification);
  dart.addTypeCaches(chart_behavior.InsideJustification);
  dart.setLibraryUri(chart_behavior.InsideJustification, I[165]);
  dart.setFieldSignature(chart_behavior.InsideJustification, () => ({
    __proto__: dart.getFields(chart_behavior.InsideJustification.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$12]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(chart_behavior.InsideJustification, ['toString']);
  chart_behavior.InsideJustification.topStart = C[182] || CT.C182;
  chart_behavior.InsideJustification.topEnd = C[183] || CT.C183;
  chart_behavior.InsideJustification.values = C[184] || CT.C184;
  layout_view.LayoutPosition = class LayoutPosition extends core.Object {
    toString() {
      return this[S$1._name$23];
    }
  };
  (layout_view.LayoutPosition.new = function(index, _name) {
    this.index = index;
    this[S$1._name$23] = _name;
    ;
  }).prototype = layout_view.LayoutPosition.prototype;
  dart.addTypeTests(layout_view.LayoutPosition);
  dart.addTypeCaches(layout_view.LayoutPosition);
  dart.setLibraryUri(layout_view.LayoutPosition, I[8]);
  dart.setFieldSignature(layout_view.LayoutPosition, () => ({
    __proto__: dart.getFields(layout_view.LayoutPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [S$1._name$23]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(layout_view.LayoutPosition, ['toString']);
  layout_view.LayoutPosition.Bottom = C[185] || CT.C185;
  layout_view.LayoutPosition.FullBottom = C[186] || CT.C186;
  layout_view.LayoutPosition.Top = C[187] || CT.C187;
  layout_view.LayoutPosition.FullTop = C[188] || CT.C188;
  layout_view.LayoutPosition.Left = C[189] || CT.C189;
  layout_view.LayoutPosition.FullLeft = C[190] || CT.C190;
  layout_view.LayoutPosition.Right = C[191] || CT.C191;
  layout_view.LayoutPosition.FullRight = C[192] || CT.C192;
  layout_view.LayoutPosition.DrawArea = C[193] || CT.C193;
  layout_view.LayoutPosition.values = C[194] || CT.C194;
  layout_view.LayoutViewPaintOrder = class LayoutViewPaintOrder extends core.Object {};
  (layout_view.LayoutViewPaintOrder.new = function() {
    ;
  }).prototype = layout_view.LayoutViewPaintOrder.prototype;
  dart.addTypeTests(layout_view.LayoutViewPaintOrder);
  dart.addTypeCaches(layout_view.LayoutViewPaintOrder);
  dart.setLibraryUri(layout_view.LayoutViewPaintOrder, I[8]);
  dart.defineLazy(layout_view.LayoutViewPaintOrder, {
    /*layout_view.LayoutViewPaintOrder.rangeAnnotation*/get rangeAnnotation() {
      return -10;
    },
    /*layout_view.LayoutViewPaintOrder.measureAxis*/get measureAxis() {
      return 0;
    },
    /*layout_view.LayoutViewPaintOrder.domainAxis*/get domainAxis() {
      return 5;
    },
    /*layout_view.LayoutViewPaintOrder.arc*/get arc() {
      return 10;
    },
    /*layout_view.LayoutViewPaintOrder.bar*/get bar() {
      return 10;
    },
    /*layout_view.LayoutViewPaintOrder.treeMap*/get treeMap() {
      return 10;
    },
    /*layout_view.LayoutViewPaintOrder.barTargetLine*/get barTargetLine() {
      return 15;
    },
    /*layout_view.LayoutViewPaintOrder.line*/get line() {
      return 20;
    },
    /*layout_view.LayoutViewPaintOrder.point*/get point() {
      return 25;
    },
    /*layout_view.LayoutViewPaintOrder.legend*/get legend() {
      return 100;
    },
    /*layout_view.LayoutViewPaintOrder.linePointHighlighter*/get linePointHighlighter() {
      return 110;
    },
    /*layout_view.LayoutViewPaintOrder.slider*/get slider() {
      return 150;
    },
    /*layout_view.LayoutViewPaintOrder.chartTitle*/get chartTitle() {
      return 160;
    }
  }, false);
  layout_view.LayoutViewPositionOrder = class LayoutViewPositionOrder extends core.Object {};
  (layout_view.LayoutViewPositionOrder.new = function() {
    ;
  }).prototype = layout_view.LayoutViewPositionOrder.prototype;
  dart.addTypeTests(layout_view.LayoutViewPositionOrder);
  dart.addTypeCaches(layout_view.LayoutViewPositionOrder);
  dart.setLibraryUri(layout_view.LayoutViewPositionOrder, I[8]);
  dart.defineLazy(layout_view.LayoutViewPositionOrder, {
    /*layout_view.LayoutViewPositionOrder.drawArea*/get drawArea() {
      return 0;
    },
    /*layout_view.LayoutViewPositionOrder.symbolAnnotation*/get symbolAnnotation() {
      return 10;
    },
    /*layout_view.LayoutViewPositionOrder.axis*/get axis() {
      return 20;
    },
    /*layout_view.LayoutViewPositionOrder.legend*/get legend() {
      return 30;
    },
    /*layout_view.LayoutViewPositionOrder.chartTitle*/get chartTitle() {
      return 40;
    }
  }, false);
  layout_view.ViewMargin = class ViewMargin extends core.Object {
    get topPx() {
      return this[S$1.topPx$1];
    }
    set topPx(value) {
      super.topPx = value;
    }
    get bottomPx() {
      return this[S$1.bottomPx$1];
    }
    set bottomPx(value) {
      super.bottomPx = value;
    }
    get rightPx() {
      return this[S$1.rightPx$1];
    }
    set rightPx(value) {
      super.rightPx = value;
    }
    get leftPx() {
      return this[S$1.leftPx$1];
    }
    set leftPx(value) {
      super.leftPx = value;
    }
    get width() {
      return this.leftPx + this.rightPx;
    }
    get height() {
      return this.topPx + this.bottomPx;
    }
  };
  (layout_view.ViewMargin.new = function(opts) {
    let t117, t117$, t117$0, t117$1;
    let topPx = opts && 'topPx' in opts ? opts.topPx : null;
    let bottomPx = opts && 'bottomPx' in opts ? opts.bottomPx : null;
    let rightPx = opts && 'rightPx' in opts ? opts.rightPx : null;
    let leftPx = opts && 'leftPx' in opts ? opts.leftPx : null;
    this[S$1.topPx$1] = (t117 = topPx, t117 == null ? 0 : t117);
    this[S$1.bottomPx$1] = (t117$ = bottomPx, t117$ == null ? 0 : t117$);
    this[S$1.rightPx$1] = (t117$0 = rightPx, t117$0 == null ? 0 : t117$0);
    this[S$1.leftPx$1] = (t117$1 = leftPx, t117$1 == null ? 0 : t117$1);
    ;
  }).prototype = layout_view.ViewMargin.prototype;
  dart.addTypeTests(layout_view.ViewMargin);
  dart.addTypeCaches(layout_view.ViewMargin);
  dart.setGetterSignature(layout_view.ViewMargin, () => ({
    __proto__: dart.getGetters(layout_view.ViewMargin.__proto__),
    width: core.int,
    height: core.int
  }));
  dart.setLibraryUri(layout_view.ViewMargin, I[8]);
  dart.setFieldSignature(layout_view.ViewMargin, () => ({
    __proto__: dart.getFields(layout_view.ViewMargin.__proto__),
    topPx: dart.finalFieldType(core.int),
    bottomPx: dart.finalFieldType(core.int),
    rightPx: dart.finalFieldType(core.int),
    leftPx: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(layout_view.ViewMargin, {
    /*layout_view.ViewMargin.empty*/get empty() {
      return C[195] || CT.C195;
    }
  }, false);
  layout_view.ViewMeasuredSizes = class ViewMeasuredSizes extends core.Object {
    get preferredWidth() {
      return this[S$1.preferredWidth];
    }
    set preferredWidth(value) {
      super.preferredWidth = value;
    }
    get preferredHeight() {
      return this[S$1.preferredHeight];
    }
    set preferredHeight(value) {
      super.preferredHeight = value;
    }
    get minWidth() {
      return this[S$1.minWidth];
    }
    set minWidth(value) {
      super.minWidth = value;
    }
    get minHeight() {
      return this[S$1.minHeight];
    }
    set minHeight(value) {
      super.minHeight = value;
    }
  };
  (layout_view.ViewMeasuredSizes.new = function(opts) {
    let t117, t117$;
    let preferredWidth = opts && 'preferredWidth' in opts ? opts.preferredWidth : null;
    let preferredHeight = opts && 'preferredHeight' in opts ? opts.preferredHeight : null;
    let minWidth = opts && 'minWidth' in opts ? opts.minWidth : null;
    let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
    this[S$1.preferredWidth] = preferredWidth;
    this[S$1.preferredHeight] = preferredHeight;
    this[S$1.minWidth] = (t117 = minWidth, t117 == null ? 0 : t117);
    this[S$1.minHeight] = (t117$ = minHeight, t117$ == null ? 0 : t117$);
    ;
  }).prototype = layout_view.ViewMeasuredSizes.prototype;
  dart.addTypeTests(layout_view.ViewMeasuredSizes);
  dart.addTypeCaches(layout_view.ViewMeasuredSizes);
  dart.setLibraryUri(layout_view.ViewMeasuredSizes, I[8]);
  dart.setFieldSignature(layout_view.ViewMeasuredSizes, () => ({
    __proto__: dart.getFields(layout_view.ViewMeasuredSizes.__proto__),
    preferredWidth: dart.finalFieldType(core.int),
    preferredHeight: dart.finalFieldType(core.int),
    minWidth: dart.finalFieldType(core.int),
    minHeight: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(layout_view.ViewMeasuredSizes, {
    /*layout_view.ViewMeasuredSizes.zero*/get zero() {
      return C[196] || CT.C196;
    }
  }, false);
  layout_view.layoutPosition = function layoutPosition(behaviorPosition, outsideJustification, isRtl) {
    let position = null;
    switch (behaviorPosition) {
      case C[89] || CT.C89:
      {
        position = layout_view.LayoutPosition.Bottom;
        break;
      }
      case C[90] || CT.C90:
      {
        position = isRtl ? layout_view.LayoutPosition.Left : layout_view.LayoutPosition.Right;
        break;
      }
      case C[92] || CT.C92:
      {
        position = layout_view.LayoutPosition.DrawArea;
        break;
      }
      case C[91] || CT.C91:
      {
        position = isRtl ? layout_view.LayoutPosition.Right : layout_view.LayoutPosition.Left;
        break;
      }
      case C[85] || CT.C85:
      {
        position = layout_view.LayoutPosition.Top;
        break;
      }
    }
    if (outsideJustification === chart_behavior.OutsideJustification.start || outsideJustification === chart_behavior.OutsideJustification.middle || outsideJustification === chart_behavior.OutsideJustification.end) {
      switch (position) {
        case C[185] || CT.C185:
        {
          position = layout_view.LayoutPosition.FullBottom;
          break;
        }
        case C[189] || CT.C189:
        {
          position = layout_view.LayoutPosition.FullLeft;
          break;
        }
        case C[187] || CT.C187:
        {
          position = layout_view.LayoutPosition.FullTop;
          break;
        }
        case C[191] || CT.C191:
        {
          position = layout_view.LayoutPosition.FullRight;
          break;
        }
        default:
        {
          break;
        }
      }
    }
    return position;
  };
  const _is_TickDrawStrategy_default = Symbol('_is_TickDrawStrategy_default');
  tick_draw_strategy.TickDrawStrategy$ = dart.generic(D => {
    class TickDrawStrategy extends core.Object {}
    (TickDrawStrategy.new = function() {
      ;
    }).prototype = TickDrawStrategy.prototype;
    dart.addTypeTests(TickDrawStrategy);
    TickDrawStrategy.prototype[_is_TickDrawStrategy_default] = true;
    dart.addTypeCaches(TickDrawStrategy);
    dart.setLibraryUri(TickDrawStrategy, I[166]);
    return TickDrawStrategy;
  });
  tick_draw_strategy.TickDrawStrategy = tick_draw_strategy.TickDrawStrategy$();
  dart.addTypeTests(tick_draw_strategy.TickDrawStrategy, _is_TickDrawStrategy_default);
  style.Style = class Style extends core.Object {};
  (style.Style.new = function() {
    ;
  }).prototype = style.Style.prototype;
  dart.addTypeTests(style.Style);
  dart.addTypeCaches(style.Style);
  dart.setLibraryUri(style.Style, I[167]);
  material_style.MaterialStyle = class MaterialStyle extends core.Object {
    get black() {
      return material_palette.MaterialPalette.black;
    }
    get transparent() {
      return material_palette.MaterialPalette.transparent;
    }
    get white() {
      return material_palette.MaterialPalette.white;
    }
    getOrderedPalettes(count) {
      return material_palette.MaterialPalette.getOrderedPalettes(count);
    }
    createAxisLineStyle(graphicsFactory, spec) {
      let t118, t118$, t118$0, t118$1, t118$2, t117;
      t117 = graphicsFactory.createLinePaint();
      return (() => {
        t117.color = (t118$ = (t118 = spec, t118 == null ? null : t118.color), t118$ == null ? material_palette.MaterialPalette.gray.shadeDefault : t118$);
        t117.dashPattern = (t118$0 = spec, t118$0 == null ? null : t118$0.dashPattern);
        t117.strokeWidth = (t118$2 = (t118$1 = spec, t118$1 == null ? null : t118$1.thickness), t118$2 == null ? 1 : t118$2);
        return t117;
      })();
    }
    createTickLineStyle(graphicsFactory, spec) {
      let t118, t118$, t118$0, t118$1, t118$2, t117;
      t117 = graphicsFactory.createLinePaint();
      return (() => {
        t117.color = (t118$ = (t118 = spec, t118 == null ? null : t118.color), t118$ == null ? material_palette.MaterialPalette.gray.shadeDefault : t118$);
        t117.dashPattern = (t118$0 = spec, t118$0 == null ? null : t118$0.dashPattern);
        t117.strokeWidth = (t118$2 = (t118$1 = spec, t118$1 == null ? null : t118$1.thickness), t118$2 == null ? 1 : t118$2);
        return t117;
      })();
    }
    get tickLength() {
      return 3;
    }
    get tickColor() {
      return material_palette.MaterialPalette.gray.shade800;
    }
    createGridlineStyle(graphicsFactory, spec) {
      let t118, t118$, t118$0, t118$1, t118$2, t117;
      t117 = graphicsFactory.createLinePaint();
      return (() => {
        t117.color = (t118$ = (t118 = spec, t118 == null ? null : t118.color), t118$ == null ? material_palette.MaterialPalette.gray.shade300 : t118$);
        t117.dashPattern = (t118$0 = spec, t118$0 == null ? null : t118$0.dashPattern);
        t117.strokeWidth = (t118$2 = (t118$1 = spec, t118$1 == null ? null : t118$1.thickness), t118$2 == null ? 1 : t118$2);
        return t117;
      })();
    }
    get arcLabelOutsideLeaderLine() {
      return material_palette.MaterialPalette.gray.shade600;
    }
    get defaultSeriesColor() {
      return material_palette.MaterialPalette.gray.shadeDefault;
    }
    get arcStrokeColor() {
      return material_palette.MaterialPalette.white;
    }
    get legendEntryTextColor() {
      return material_palette.MaterialPalette.gray.shade800;
    }
    get legendTitleTextColor() {
      return material_palette.MaterialPalette.gray.shade800;
    }
    get linePointHighlighterColor() {
      return material_palette.MaterialPalette.gray.shade600;
    }
    get noDataColor() {
      return material_palette.MaterialPalette.gray.shade200;
    }
    get rangeAnnotationColor() {
      return material_palette.MaterialPalette.gray.shade100;
    }
    get sliderFillColor() {
      return material_palette.MaterialPalette.white;
    }
    get sliderStrokeColor() {
      return material_palette.MaterialPalette.gray.shade600;
    }
    get chartBackgroundColor() {
      return material_palette.MaterialPalette.white;
    }
    get rangeBandSize() {
      return 0.65;
    }
  };
  (material_style.MaterialStyle.new = function() {
    ;
  }).prototype = material_style.MaterialStyle.prototype;
  dart.addTypeTests(material_style.MaterialStyle);
  dart.addTypeCaches(material_style.MaterialStyle);
  material_style.MaterialStyle[dart.implements] = () => [style.Style];
  dart.setMethodSignature(material_style.MaterialStyle, () => ({
    __proto__: dart.getMethods(material_style.MaterialStyle.__proto__),
    getOrderedPalettes: dart.fnType(core.List$(palette.Palette), [core.int]),
    createAxisLineStyle: dart.fnType(line_style.LineStyle, [graphics_factory.GraphicsFactory, dart.nullable(axis_spec.LineStyleSpec)]),
    createTickLineStyle: dart.fnType(line_style.LineStyle, [graphics_factory.GraphicsFactory, dart.nullable(axis_spec.LineStyleSpec)]),
    createGridlineStyle: dart.fnType(line_style.LineStyle, [graphics_factory.GraphicsFactory, dart.nullable(axis_spec.LineStyleSpec)])
  }));
  dart.setGetterSignature(material_style.MaterialStyle, () => ({
    __proto__: dart.getGetters(material_style.MaterialStyle.__proto__),
    black: color$.Color,
    transparent: color$.Color,
    white: color$.Color,
    tickLength: core.int,
    tickColor: color$.Color,
    arcLabelOutsideLeaderLine: color$.Color,
    defaultSeriesColor: color$.Color,
    arcStrokeColor: color$.Color,
    legendEntryTextColor: color$.Color,
    legendTitleTextColor: color$.Color,
    linePointHighlighterColor: color$.Color,
    noDataColor: color$.Color,
    rangeAnnotationColor: color$.Color,
    sliderFillColor: color$.Color,
    sliderStrokeColor: color$.Color,
    chartBackgroundColor: color$.Color,
    rangeBandSize: core.double
  }));
  dart.setLibraryUri(material_style.MaterialStyle, I[168]);
  style_factory.StyleFactory = class StyleFactory extends core.Object {
    static get style() {
      return style_factory.StyleFactory._styleFactory[S$1._style$1];
    }
    static set style(value) {
      style_factory.StyleFactory._styleFactory[S$1._style$1] = value;
    }
  };
  (style_factory.StyleFactory._internal = function() {
    this[S$1._style$1] = C[197] || CT.C197;
    ;
  }).prototype = style_factory.StyleFactory.prototype;
  dart.addTypeTests(style_factory.StyleFactory);
  dart.addTypeCaches(style_factory.StyleFactory);
  dart.setLibraryUri(style_factory.StyleFactory, I[169]);
  dart.setFieldSignature(style_factory.StyleFactory, () => ({
    __proto__: dart.getFields(style_factory.StyleFactory.__proto__),
    [S$1._style$1]: dart.fieldType(style.Style)
  }));
  dart.defineLazy(style_factory.StyleFactory, {
    /*style_factory.StyleFactory._styleFactory*/get _styleFactory() {
      return new style_factory.StyleFactory._internal();
    }
  }, false);
  scale$.ScaleOutputExtent = class ScaleOutputExtent extends core.Object {
    get start() {
      return this[S$1.start$2];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[S$1.end$2];
    }
    set end(value) {
      super.end = value;
    }
    get min() {
      return math.min(core.int, this.start, this.end);
    }
    get max() {
      return math.max(core.int, this.start, this.end);
    }
    containsValue(value) {
      return math$.withinBounds(value, this.min, this.max);
    }
    get diff() {
      return this.end - this.start;
    }
    get width() {
      return this.diff[S$.$abs]();
    }
    _equals(other) {
      if (other == null) return false;
      return scale$.ScaleOutputExtent.is(other) && this.start === other.start && this.end === other.end;
    }
    get hashCode() {
      return this.start[S$.$hashCode] + this.end[S$.$hashCode] * 31;
    }
    toString() {
      return "ScaleOutputRange(" + dart.str(this.start) + ", " + dart.str(this.end) + ")";
    }
  };
  (scale$.ScaleOutputExtent.new = function(start, end) {
    this[S$1.start$2] = start;
    this[S$1.end$2] = end;
    ;
  }).prototype = scale$.ScaleOutputExtent.prototype;
  dart.addTypeTests(scale$.ScaleOutputExtent);
  dart.addTypeCaches(scale$.ScaleOutputExtent);
  dart.setMethodSignature(scale$.ScaleOutputExtent, () => ({
    __proto__: dart.getMethods(scale$.ScaleOutputExtent.__proto__),
    containsValue: dart.fnType(core.bool, [core.double])
  }));
  dart.setGetterSignature(scale$.ScaleOutputExtent, () => ({
    __proto__: dart.getGetters(scale$.ScaleOutputExtent.__proto__),
    min: core.int,
    max: core.int,
    diff: core.int,
    width: core.int
  }));
  dart.setLibraryUri(scale$.ScaleOutputExtent, I[135]);
  dart.setFieldSignature(scale$.ScaleOutputExtent, () => ({
    __proto__: dart.getFields(scale$.ScaleOutputExtent.__proto__),
    start: dart.finalFieldType(core.int),
    end: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(scale$.ScaleOutputExtent, ['_equals', 'toString']);
  dart.defineExtensionAccessors(scale$.ScaleOutputExtent, ['hashCode']);
  scale$.RangeBandType = class RangeBandType extends core.Object {
    toString() {
      return this[S$1._name$22];
    }
  };
  (scale$.RangeBandType.new = function(index, _name) {
    this.index = index;
    this[S$1._name$22] = _name;
    ;
  }).prototype = scale$.RangeBandType.prototype;
  dart.addTypeTests(scale$.RangeBandType);
  dart.addTypeCaches(scale$.RangeBandType);
  dart.setLibraryUri(scale$.RangeBandType, I[135]);
  dart.setFieldSignature(scale$.RangeBandType, () => ({
    __proto__: dart.getFields(scale$.RangeBandType.__proto__),
    index: dart.finalFieldType(core.int),
    [S$1._name$22]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(scale$.RangeBandType, ['toString']);
  scale$.RangeBandType.none = C[168] || CT.C168;
  scale$.RangeBandType.fixedPixel = C[163] || CT.C163;
  scale$.RangeBandType.fixedDomain = C[167] || CT.C167;
  scale$.RangeBandType.fixedPercentOfStep = C[166] || CT.C166;
  scale$.RangeBandType.styleAssignedPercentOfStep = C[165] || CT.C165;
  scale$.RangeBandType.fixedPixelSpaceFromStep = C[164] || CT.C164;
  scale$.RangeBandType.values = C[198] || CT.C198;
  scale$.RangeBandConfig = class RangeBandConfig extends core.Object {
    get type() {
      return this[S$1.type];
    }
    set type(value) {
      super.type = value;
    }
    get size() {
      return this[S$1.size];
    }
    set size(value) {
      super.size = value;
    }
  };
  (scale$.RangeBandConfig.none = function() {
    this[S$1.type] = scale$.RangeBandType.none;
    this[S$1.size] = 0.0;
    ;
  }).prototype = scale$.RangeBandConfig.prototype;
  (scale$.RangeBandConfig.fixedPixel = function(pixels) {
    this[S$1.type] = scale$.RangeBandType.fixedPixel;
    this[S$1.size] = pixels;
    ;
  }).prototype = scale$.RangeBandConfig.prototype;
  (scale$.RangeBandConfig.fixedDomain = function(domainSize) {
    this[S$1.type] = scale$.RangeBandType.fixedDomain;
    this[S$1.size] = domainSize;
    ;
  }).prototype = scale$.RangeBandConfig.prototype;
  (scale$.RangeBandConfig.stepChartBand = function() {
    this[S$1.type] = scale$.RangeBandType.fixedPercentOfStep;
    this[S$1.size] = 1.0;
    ;
  }).prototype = scale$.RangeBandConfig.prototype;
  (scale$.RangeBandConfig.percentOfStep = function(percentOfStepWidth) {
    this[S$1.type] = scale$.RangeBandType.fixedPercentOfStep;
    this[S$1.size] = percentOfStepWidth;
    if (!(percentOfStepWidth >= 0 && percentOfStepWidth <= 1.0)) dart.assertFailed(null, I[170], 263, 12, "percentOfStepWidth >= 0 && percentOfStepWidth <= 1.0");
  }).prototype = scale$.RangeBandConfig.prototype;
  (scale$.RangeBandConfig.styleAssignedPercent = function(seriesCount = 1) {
    this[S$1.type] = scale$.RangeBandType.styleAssignedPercentOfStep;
    this[S$1.size] = style_factory.StyleFactory.style.rangeBandSize;
    ;
  }).prototype = scale$.RangeBandConfig.prototype;
  (scale$.RangeBandConfig.fixedPixelSpaceBetweenStep = function(pixels) {
    this[S$1.type] = scale$.RangeBandType.fixedPixelSpaceFromStep;
    this[S$1.size] = pixels;
    ;
  }).prototype = scale$.RangeBandConfig.prototype;
  dart.addTypeTests(scale$.RangeBandConfig);
  dart.addTypeCaches(scale$.RangeBandConfig);
  dart.setLibraryUri(scale$.RangeBandConfig, I[135]);
  dart.setFieldSignature(scale$.RangeBandConfig, () => ({
    __proto__: dart.getFields(scale$.RangeBandConfig.__proto__),
    type: dart.finalFieldType(scale$.RangeBandType),
    size: dart.finalFieldType(core.double)
  }));
  scale$.StepSizeType = class StepSizeType extends core.Object {
    toString() {
      return this[S$1._name$22];
    }
  };
  (scale$.StepSizeType.new = function(index, _name) {
    this.index = index;
    this[S$1._name$22] = _name;
    ;
  }).prototype = scale$.StepSizeType.prototype;
  dart.addTypeTests(scale$.StepSizeType);
  dart.addTypeCaches(scale$.StepSizeType);
  dart.setLibraryUri(scale$.StepSizeType, I[135]);
  dart.setFieldSignature(scale$.StepSizeType, () => ({
    __proto__: dart.getFields(scale$.StepSizeType.__proto__),
    index: dart.finalFieldType(core.int),
    [S$1._name$22]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(scale$.StepSizeType, ['toString']);
  scale$.StepSizeType.autoDetect = C[169] || CT.C169;
  scale$.StepSizeType.fixedDomain = C[171] || CT.C171;
  scale$.StepSizeType.fixedPixels = C[170] || CT.C170;
  scale$.StepSizeType.values = C[199] || CT.C199;
  scale$.StepSizeConfig = class StepSizeConfig extends core.Object {
    get type() {
      return this[S$1.type$1];
    }
    set type(value) {
      super.type = value;
    }
    get size() {
      return this[S$1.size$1];
    }
    set size(value) {
      super.size = value;
    }
  };
  (scale$.StepSizeConfig.auto = function() {
    this[S$1.type$1] = scale$.StepSizeType.autoDetect;
    this[S$1.size$1] = 0.0;
    ;
  }).prototype = scale$.StepSizeConfig.prototype;
  (scale$.StepSizeConfig.fixedPixels = function(pixels) {
    this[S$1.type$1] = scale$.StepSizeType.fixedPixels;
    this[S$1.size$1] = pixels;
    ;
  }).prototype = scale$.StepSizeConfig.prototype;
  (scale$.StepSizeConfig.fixedDomain = function(domainSize) {
    this[S$1.type$1] = scale$.StepSizeType.fixedDomain;
    this[S$1.size$1] = domainSize;
    ;
  }).prototype = scale$.StepSizeConfig.prototype;
  dart.addTypeTests(scale$.StepSizeConfig);
  dart.addTypeCaches(scale$.StepSizeConfig);
  dart.setLibraryUri(scale$.StepSizeConfig, I[135]);
  dart.setFieldSignature(scale$.StepSizeConfig, () => ({
    __proto__: dart.getFields(scale$.StepSizeConfig.__proto__),
    type: dart.finalFieldType(scale$.StepSizeType),
    size: dart.finalFieldType(core.double)
  }));
  axis_spec.TextStyleSpec = class TextStyleSpec extends core.Object {
    get fontFamily() {
      return this[S$1.fontFamily];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontSize() {
      return this[S$1.fontSize];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get lineHeight() {
      return this[S$1.lineHeight];
    }
    set lineHeight(value) {
      super.lineHeight = value;
    }
    get color() {
      return this[S$1.color$7];
    }
    set color(value) {
      super.color = value;
    }
    get fontWeight() {
      return this[S$1.fontWeight];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || axis_spec.TextStyleSpec.is(other) && this.fontFamily == other.fontFamily && this.fontSize == other.fontSize && this.lineHeight == other.lineHeight && dart.equals(this.color, other.color) && this.fontWeight == other.fontWeight;
    }
    get hashCode() {
      let hashcode = dart.hashCode(this.fontFamily);
      hashcode = hashcode * 37 + dart.hashCode(this.fontSize);
      hashcode = hashcode * 37 + dart.hashCode(this.lineHeight);
      hashcode = hashcode * 37 + dart.hashCode(this.color);
      hashcode = hashcode * 37 + dart.hashCode(this.fontWeight);
      return hashcode;
    }
  };
  (axis_spec.TextStyleSpec.new = function(opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let lineHeight = opts && 'lineHeight' in opts ? opts.lineHeight : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    this[S$1.fontFamily] = fontFamily;
    this[S$1.fontSize] = fontSize;
    this[S$1.lineHeight] = lineHeight;
    this[S$1.color$7] = color;
    this[S$1.fontWeight] = fontWeight;
    ;
  }).prototype = axis_spec.TextStyleSpec.prototype;
  dart.addTypeTests(axis_spec.TextStyleSpec);
  dart.addTypeCaches(axis_spec.TextStyleSpec);
  dart.setLibraryUri(axis_spec.TextStyleSpec, I[77]);
  dart.setFieldSignature(axis_spec.TextStyleSpec, () => ({
    __proto__: dart.getFields(axis_spec.TextStyleSpec.__proto__),
    fontFamily: dart.finalFieldType(dart.nullable(core.String)),
    fontSize: dart.finalFieldType(dart.nullable(core.int)),
    lineHeight: dart.finalFieldType(dart.nullable(core.double)),
    color: dart.finalFieldType(dart.nullable(color$.Color)),
    fontWeight: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(axis_spec.TextStyleSpec, ['_equals']);
  dart.defineExtensionAccessors(axis_spec.TextStyleSpec, ['hashCode']);
  axis_spec.LineStyleSpec = class LineStyleSpec extends core.Object {
    get color() {
      return this[S$1.color$8];
    }
    set color(value) {
      super.color = value;
    }
    get dashPattern() {
      return this[S$1.dashPattern$6];
    }
    set dashPattern(value) {
      super.dashPattern = value;
    }
    get thickness() {
      return this[S$1.thickness$1];
    }
    set thickness(value) {
      super.thickness = value;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || axis_spec.LineStyleSpec.is(other) && dart.equals(this.color, other.color) && dart.equals(this.dashPattern, other.dashPattern) && this.thickness == other.thickness;
    }
    get hashCode() {
      let hashcode = dart.hashCode(this.color);
      hashcode = hashcode * 37 + dart.hashCode(this.dashPattern);
      hashcode = hashcode * 37 + dart.hashCode(this.thickness);
      return hashcode;
    }
  };
  (axis_spec.LineStyleSpec.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    this[S$1.color$8] = color;
    this[S$1.dashPattern$6] = dashPattern;
    this[S$1.thickness$1] = thickness;
    ;
  }).prototype = axis_spec.LineStyleSpec.prototype;
  dart.addTypeTests(axis_spec.LineStyleSpec);
  dart.addTypeCaches(axis_spec.LineStyleSpec);
  dart.setLibraryUri(axis_spec.LineStyleSpec, I[77]);
  dart.setFieldSignature(axis_spec.LineStyleSpec, () => ({
    __proto__: dart.getFields(axis_spec.LineStyleSpec.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.Color)),
    dashPattern: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    thickness: dart.finalFieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(axis_spec.LineStyleSpec, ['_equals']);
  dart.defineExtensionAccessors(axis_spec.LineStyleSpec, ['hashCode']);
  axis_spec.TickLabelAnchor = class TickLabelAnchor extends core.Object {
    toString() {
      return this[S$0._name$17];
    }
  };
  (axis_spec.TickLabelAnchor.new = function(index, _name) {
    this.index = index;
    this[S$0._name$17] = _name;
    ;
  }).prototype = axis_spec.TickLabelAnchor.prototype;
  dart.addTypeTests(axis_spec.TickLabelAnchor);
  dart.addTypeCaches(axis_spec.TickLabelAnchor);
  dart.setLibraryUri(axis_spec.TickLabelAnchor, I[77]);
  dart.setFieldSignature(axis_spec.TickLabelAnchor, () => ({
    __proto__: dart.getFields(axis_spec.TickLabelAnchor.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$17]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(axis_spec.TickLabelAnchor, ['toString']);
  axis_spec.TickLabelAnchor.before = C[133] || CT.C133;
  axis_spec.TickLabelAnchor.centered = C[135] || CT.C135;
  axis_spec.TickLabelAnchor.after = C[134] || CT.C134;
  axis_spec.TickLabelAnchor.inside = C[113] || CT.C113;
  axis_spec.TickLabelAnchor.values = C[200] || CT.C200;
  axis_spec.TickLabelJustification = class TickLabelJustification extends core.Object {
    toString() {
      return this[S$0._name$17];
    }
  };
  (axis_spec.TickLabelJustification.new = function(index, _name) {
    this.index = index;
    this[S$0._name$17] = _name;
    ;
  }).prototype = axis_spec.TickLabelJustification.prototype;
  dart.addTypeTests(axis_spec.TickLabelJustification);
  dart.addTypeCaches(axis_spec.TickLabelJustification);
  dart.setLibraryUri(axis_spec.TickLabelJustification, I[77]);
  dart.setFieldSignature(axis_spec.TickLabelJustification, () => ({
    __proto__: dart.getFields(axis_spec.TickLabelJustification.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$17]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(axis_spec.TickLabelJustification, ['toString']);
  axis_spec.TickLabelJustification.inside = C[201] || CT.C201;
  axis_spec.TickLabelJustification.outside = C[202] || CT.C202;
  axis_spec.TickLabelJustification.values = C[203] || CT.C203;
  const _is_Series_default = Symbol('_is_Series_default');
  series$.Series$ = dart.generic((T, D) => {
    class Series extends core.Object {
      get id() {
        return this[S$1.id$3];
      }
      set id(value) {
        super.id = value;
      }
      get displayName() {
        return this[S$1.displayName$1];
      }
      set displayName(value) {
        super.displayName = value;
      }
      get overlaySeries() {
        return this[S$1.overlaySeries$2];
      }
      set overlaySeries(value) {
        super.overlaySeries = value;
      }
      get seriesCategory() {
        return this[S$1.seriesCategory$1];
      }
      set seriesCategory(value) {
        super.seriesCategory = value;
      }
      get seriesColor() {
        return this[S$1.seriesColor$1];
      }
      set seriesColor(value) {
        super.seriesColor = value;
      }
      get data() {
        return this[S$1.data$2];
      }
      set data(value) {
        super.data = value;
      }
      get keyFn() {
        return this[S$1.keyFn$2];
      }
      set keyFn(value) {
        super.keyFn = value;
      }
      get domainFn() {
        return this[S$1.domainFn$2];
      }
      set domainFn(value) {
        super.domainFn = value;
      }
      get domainFormatterFn() {
        return this[S$1.domainFormatterFn$1];
      }
      set domainFormatterFn(value) {
        super.domainFormatterFn = value;
      }
      get domainLowerBoundFn() {
        return this[S$1.domainLowerBoundFn$1];
      }
      set domainLowerBoundFn(value) {
        super.domainLowerBoundFn = value;
      }
      get domainUpperBoundFn() {
        return this[S$1.domainUpperBoundFn$1];
      }
      set domainUpperBoundFn(value) {
        super.domainUpperBoundFn = value;
      }
      get measureFn() {
        return this[S$1.measureFn$2];
      }
      set measureFn(value) {
        super.measureFn = value;
      }
      get measureFormatterFn() {
        return this[S$1.measureFormatterFn$1];
      }
      set measureFormatterFn(value) {
        super.measureFormatterFn = value;
      }
      get measureLowerBoundFn() {
        return this[S$1.measureLowerBoundFn$1];
      }
      set measureLowerBoundFn(value) {
        super.measureLowerBoundFn = value;
      }
      get measureUpperBoundFn() {
        return this[S$1.measureUpperBoundFn$1];
      }
      set measureUpperBoundFn(value) {
        super.measureUpperBoundFn = value;
      }
      get measureOffsetFn() {
        return this[S$1.measureOffsetFn$1];
      }
      set measureOffsetFn(value) {
        super.measureOffsetFn = value;
      }
      get areaColorFn() {
        return this[S$1.areaColorFn$1];
      }
      set areaColorFn(value) {
        super.areaColorFn = value;
      }
      get colorFn() {
        return this[S$1.colorFn$2];
      }
      set colorFn(value) {
        super.colorFn = value;
      }
      get dashPatternFn() {
        return this[S$1.dashPatternFn$1];
      }
      set dashPatternFn(value) {
        super.dashPatternFn = value;
      }
      get fillColorFn() {
        return this[S$1.fillColorFn$2];
      }
      set fillColorFn(value) {
        super.fillColorFn = value;
      }
      get patternColorFn() {
        return this[S$1.patternColorFn$2];
      }
      set patternColorFn(value) {
        super.patternColorFn = value;
      }
      get fillPatternFn() {
        return this[S$1.fillPatternFn$2];
      }
      set fillPatternFn(value) {
        super.fillPatternFn = value;
      }
      get radiusPxFn() {
        return this[S$1.radiusPxFn$1];
      }
      set radiusPxFn(value) {
        super.radiusPxFn = value;
      }
      get strokeWidthPxFn() {
        return this[S$1.strokeWidthPxFn$2];
      }
      set strokeWidthPxFn(value) {
        super.strokeWidthPxFn = value;
      }
      get labelAccessorFn() {
        return this[S$1.labelAccessorFn$1];
      }
      set labelAccessorFn(value) {
        super.labelAccessorFn = value;
      }
      get insideLabelStyleAccessorFn() {
        return this[S$1.insideLabelStyleAccessorFn$2];
      }
      set insideLabelStyleAccessorFn(value) {
        super.insideLabelStyleAccessorFn = value;
      }
      get outsideLabelStyleAccessorFn() {
        return this[S$1.outsideLabelStyleAccessorFn$2];
      }
      set outsideLabelStyleAccessorFn(value) {
        super.outsideLabelStyleAccessorFn = value;
      }
      get attributes() {
        return this[S$1.attributes$1];
      }
      set attributes(value) {
        super.attributes = value;
      }
      static new(opts) {
        let id = opts && 'id' in opts ? opts.id : null;
        let data = opts && 'data' in opts ? opts.data : null;
        let domainFn = opts && 'domainFn' in opts ? opts.domainFn : null;
        let measureFn = opts && 'measureFn' in opts ? opts.measureFn : null;
        let displayName = opts && 'displayName' in opts ? opts.displayName : null;
        let seriesColor = opts && 'seriesColor' in opts ? opts.seriesColor : null;
        let areaColorFn = opts && 'areaColorFn' in opts ? opts.areaColorFn : null;
        let colorFn = opts && 'colorFn' in opts ? opts.colorFn : null;
        let dashPatternFn = opts && 'dashPatternFn' in opts ? opts.dashPatternFn : null;
        let domainFormatterFn = opts && 'domainFormatterFn' in opts ? opts.domainFormatterFn : null;
        let domainLowerBoundFn = opts && 'domainLowerBoundFn' in opts ? opts.domainLowerBoundFn : null;
        let domainUpperBoundFn = opts && 'domainUpperBoundFn' in opts ? opts.domainUpperBoundFn : null;
        let fillColorFn = opts && 'fillColorFn' in opts ? opts.fillColorFn : null;
        let patternColorFn = opts && 'patternColorFn' in opts ? opts.patternColorFn : null;
        let fillPatternFn = opts && 'fillPatternFn' in opts ? opts.fillPatternFn : null;
        let keyFn = opts && 'keyFn' in opts ? opts.keyFn : null;
        let labelAccessorFn = opts && 'labelAccessorFn' in opts ? opts.labelAccessorFn : null;
        let insideLabelStyleAccessorFn = opts && 'insideLabelStyleAccessorFn' in opts ? opts.insideLabelStyleAccessorFn : null;
        let outsideLabelStyleAccessorFn = opts && 'outsideLabelStyleAccessorFn' in opts ? opts.outsideLabelStyleAccessorFn : null;
        let measureFormatterFn = opts && 'measureFormatterFn' in opts ? opts.measureFormatterFn : null;
        let measureLowerBoundFn = opts && 'measureLowerBoundFn' in opts ? opts.measureLowerBoundFn : null;
        let measureUpperBoundFn = opts && 'measureUpperBoundFn' in opts ? opts.measureUpperBoundFn : null;
        let measureOffsetFn = opts && 'measureOffsetFn' in opts ? opts.measureOffsetFn : null;
        let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : false;
        let radiusPxFn = opts && 'radiusPxFn' in opts ? opts.radiusPxFn : null;
        let seriesCategory = opts && 'seriesCategory' in opts ? opts.seriesCategory : null;
        let strokeWidthPxFn = opts && 'strokeWidthPxFn' in opts ? opts.strokeWidthPxFn : null;
        let _domainFn = dart.fn(index => domainFn(data[S$.$_get](dart.nullCheck(index)), index), dart.fnType(D, [T$.intN()]));
        let _measureFn = dart.fn(index => measureFn(data[S$.$_get](dart.nullCheck(index)), index), T$.intNTonumN());
        let _areaColorFn = areaColorFn == null ? null : dart.fn(index => areaColorFn(data[S$.$_get](dart.nullCheck(index)), index), T$.intNToColor());
        let _colorFn = colorFn == null ? null : dart.fn(index => colorFn(data[S$.$_get](dart.nullCheck(index)), index), T$.intNToColor());
        let _dashPatternFn = dashPatternFn == null ? null : dart.fn(index => dashPatternFn(data[S$.$_get](dart.nullCheck(index)), index), T$.intNToListNOfint());
        let _domainFormatterFn = domainFormatterFn == null ? null : dart.fn(index => domainFormatterFn(data[S$.$_get](dart.nullCheck(index)), index), dart.fnType(dart.fnType(core.String, [D]), [T$.intN()]));
        let _domainLowerBoundFn = domainLowerBoundFn == null ? null : dart.fn(index => domainLowerBoundFn(data[S$.$_get](dart.nullCheck(index)), index), dart.fnType(dart.nullable(D), [T$.intN()]));
        let _domainUpperBoundFn = domainUpperBoundFn == null ? null : dart.fn(index => domainUpperBoundFn(data[S$.$_get](dart.nullCheck(index)), index), dart.fnType(dart.nullable(D), [T$.intN()]));
        let _fillColorFn = fillColorFn == null ? null : dart.fn(index => fillColorFn(data[S$.$_get](dart.nullCheck(index)), index), T$.intNToColorN());
        let _patternColorFn = patternColorFn == null ? null : dart.fn(index => patternColorFn(data[S$.$_get](dart.nullCheck(index)), index), T$.intNToColor());
        let _fillPatternFn = fillPatternFn == null ? null : dart.fn(index => fillPatternFn(data[S$.$_get](dart.nullCheck(index)), index), T$0.intNToFillPatternType());
        let _labelAccessorFn = labelAccessorFn == null ? null : dart.fn(index => labelAccessorFn(data[S$.$_get](dart.nullCheck(index)), index), T$.intNToString());
        let _insideLabelStyleAccessorFn = insideLabelStyleAccessorFn == null ? null : dart.fn(index => insideLabelStyleAccessorFn(data[S$.$_get](dart.nullCheck(index)), index), T$0.intNToTextStyleSpec());
        let _outsideLabelStyleAccessorFn = outsideLabelStyleAccessorFn == null ? null : dart.fn(index => outsideLabelStyleAccessorFn(data[S$.$_get](dart.nullCheck(index)), index), T$0.intNToTextStyleSpec());
        let _measureFormatterFn = measureFormatterFn == null ? null : dart.fn(index => measureFormatterFn(data[S$.$_get](dart.nullCheck(index)), index), T$0.intNToFn$2());
        let _measureLowerBoundFn = measureLowerBoundFn == null ? null : dart.fn(index => measureLowerBoundFn(data[S$.$_get](dart.nullCheck(index)), index), T$.intNTonumN());
        let _measureUpperBoundFn = measureUpperBoundFn == null ? null : dart.fn(index => measureUpperBoundFn(data[S$.$_get](dart.nullCheck(index)), index), T$.intNTonumN());
        let _measureOffsetFn = measureOffsetFn == null ? null : dart.fn(index => measureOffsetFn(data[S$.$_get](dart.nullCheck(index)), index), T$0.intNTonum());
        let _radiusPxFn = radiusPxFn == null ? null : dart.fn(index => radiusPxFn(data[S$.$_get](dart.nullCheck(index)), index), T$0.intNTonum());
        let _strokeWidthPxFn = strokeWidthPxFn == null ? null : dart.fn(index => strokeWidthPxFn(data[S$.$_get](dart.nullCheck(index)), index), T$.intNTonumN());
        let _keyFn = keyFn == null ? null : dart.fn(index => keyFn(data[S$.$_get](dart.nullCheck(index)), index), T$.intNToString());
        return new (series$.Series$(T, D))._internal({id: id, data: data, domainFn: _domainFn, measureFn: _measureFn, displayName: displayName, areaColorFn: _areaColorFn, colorFn: _colorFn, dashPatternFn: _dashPatternFn, domainFormatterFn: _domainFormatterFn, domainLowerBoundFn: _domainLowerBoundFn, domainUpperBoundFn: _domainUpperBoundFn, fillColorFn: _fillColorFn, fillPatternFn: _fillPatternFn, keyFn: _keyFn, patternColorFn: _patternColorFn, labelAccessorFn: _labelAccessorFn, insideLabelStyleAccessorFn: _insideLabelStyleAccessorFn, outsideLabelStyleAccessorFn: _outsideLabelStyleAccessorFn, measureFormatterFn: _measureFormatterFn, measureLowerBoundFn: _measureLowerBoundFn, measureUpperBoundFn: _measureUpperBoundFn, measureOffsetFn: _measureOffsetFn, overlaySeries: overlaySeries, radiusPxFn: _radiusPxFn, seriesCategory: seriesCategory, seriesColor: seriesColor, strokeWidthPxFn: _strokeWidthPxFn});
      }
      setAttribute(R, key, value) {
        this.attributes.setAttr(R, key, value);
      }
      getAttribute(R, key) {
        return this.attributes.getAttr(R, key);
      }
    }
    (Series._internal = function(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let domainFn = opts && 'domainFn' in opts ? opts.domainFn : null;
      let measureFn = opts && 'measureFn' in opts ? opts.measureFn : null;
      let displayName = opts && 'displayName' in opts ? opts.displayName : null;
      let areaColorFn = opts && 'areaColorFn' in opts ? opts.areaColorFn : null;
      let colorFn = opts && 'colorFn' in opts ? opts.colorFn : null;
      let dashPatternFn = opts && 'dashPatternFn' in opts ? opts.dashPatternFn : null;
      let domainFormatterFn = opts && 'domainFormatterFn' in opts ? opts.domainFormatterFn : null;
      let domainLowerBoundFn = opts && 'domainLowerBoundFn' in opts ? opts.domainLowerBoundFn : null;
      let domainUpperBoundFn = opts && 'domainUpperBoundFn' in opts ? opts.domainUpperBoundFn : null;
      let fillColorFn = opts && 'fillColorFn' in opts ? opts.fillColorFn : null;
      let fillPatternFn = opts && 'fillPatternFn' in opts ? opts.fillPatternFn : null;
      let patternColorFn = opts && 'patternColorFn' in opts ? opts.patternColorFn : null;
      let keyFn = opts && 'keyFn' in opts ? opts.keyFn : null;
      let labelAccessorFn = opts && 'labelAccessorFn' in opts ? opts.labelAccessorFn : null;
      let insideLabelStyleAccessorFn = opts && 'insideLabelStyleAccessorFn' in opts ? opts.insideLabelStyleAccessorFn : null;
      let outsideLabelStyleAccessorFn = opts && 'outsideLabelStyleAccessorFn' in opts ? opts.outsideLabelStyleAccessorFn : null;
      let measureFormatterFn = opts && 'measureFormatterFn' in opts ? opts.measureFormatterFn : null;
      let measureLowerBoundFn = opts && 'measureLowerBoundFn' in opts ? opts.measureLowerBoundFn : null;
      let measureUpperBoundFn = opts && 'measureUpperBoundFn' in opts ? opts.measureUpperBoundFn : null;
      let measureOffsetFn = opts && 'measureOffsetFn' in opts ? opts.measureOffsetFn : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : null;
      let radiusPxFn = opts && 'radiusPxFn' in opts ? opts.radiusPxFn : null;
      let seriesCategory = opts && 'seriesCategory' in opts ? opts.seriesCategory : null;
      let seriesColor = opts && 'seriesColor' in opts ? opts.seriesColor : null;
      let strokeWidthPxFn = opts && 'strokeWidthPxFn' in opts ? opts.strokeWidthPxFn : null;
      this[S$1.attributes$1] = new series$.SeriesAttributes.new();
      this[S$1.id$3] = id;
      this[S$1.data$2] = data;
      this[S$1.domainFn$2] = domainFn;
      this[S$1.measureFn$2] = measureFn;
      this[S$1.displayName$1] = displayName;
      this[S$1.areaColorFn$1] = areaColorFn;
      this[S$1.colorFn$2] = colorFn;
      this[S$1.dashPatternFn$1] = dashPatternFn;
      this[S$1.domainFormatterFn$1] = domainFormatterFn;
      this[S$1.domainLowerBoundFn$1] = domainLowerBoundFn;
      this[S$1.domainUpperBoundFn$1] = domainUpperBoundFn;
      this[S$1.fillColorFn$2] = fillColorFn;
      this[S$1.fillPatternFn$2] = fillPatternFn;
      this[S$1.patternColorFn$2] = patternColorFn;
      this[S$1.keyFn$2] = keyFn;
      this[S$1.labelAccessorFn$1] = labelAccessorFn;
      this[S$1.insideLabelStyleAccessorFn$2] = insideLabelStyleAccessorFn;
      this[S$1.outsideLabelStyleAccessorFn$2] = outsideLabelStyleAccessorFn;
      this[S$1.measureFormatterFn$1] = measureFormatterFn;
      this[S$1.measureLowerBoundFn$1] = measureLowerBoundFn;
      this[S$1.measureUpperBoundFn$1] = measureUpperBoundFn;
      this[S$1.measureOffsetFn$1] = measureOffsetFn;
      this[S$1.overlaySeries$2] = overlaySeries;
      this[S$1.radiusPxFn$1] = radiusPxFn;
      this[S$1.seriesCategory$1] = seriesCategory;
      this[S$1.seriesColor$1] = seriesColor;
      this[S$1.strokeWidthPxFn$2] = strokeWidthPxFn;
      ;
    }).prototype = Series.prototype;
    dart.addTypeTests(Series);
    Series.prototype[_is_Series_default] = true;
    dart.addTypeCaches(Series);
    dart.setMethodSignature(Series, () => ({
      __proto__: dart.getMethods(Series.__proto__),
      setAttribute: dart.gFnType(R => [dart.void, [series$.AttributeKey$(R), R]], R => [dart.nullable(core.Object)]),
      getAttribute: dart.gFnType(R => [dart.nullable(R), [series$.AttributeKey$(R)]], R => [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(Series, I[171]);
    dart.setFieldSignature(Series, () => ({
      __proto__: dart.getFields(Series.__proto__),
      id: dart.finalFieldType(core.String),
      displayName: dart.finalFieldType(dart.nullable(core.String)),
      overlaySeries: dart.finalFieldType(core.bool),
      seriesCategory: dart.finalFieldType(dart.nullable(core.String)),
      seriesColor: dart.finalFieldType(dart.nullable(color$.Color)),
      data: dart.finalFieldType(core.List$(T)),
      keyFn: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [dart.nullable(core.int)]))),
      domainFn: dart.finalFieldType(dart.fnType(D, [dart.nullable(core.int)])),
      domainFormatterFn: dart.finalFieldType(dart.nullable(dart.fnType(dart.fnType(core.String, [D]), [dart.nullable(core.int)]))),
      domainLowerBoundFn: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(D), [dart.nullable(core.int)]))),
      domainUpperBoundFn: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(D), [dart.nullable(core.int)]))),
      measureFn: dart.finalFieldType(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)])),
      measureFormatterFn: dart.finalFieldType(dart.nullable(dart.fnType(dart.fnType(core.String, [dart.nullable(core.num)]), [dart.nullable(core.int)]))),
      measureLowerBoundFn: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)]))),
      measureUpperBoundFn: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)]))),
      measureOffsetFn: dart.finalFieldType(dart.nullable(dart.fnType(core.num, [dart.nullable(core.int)]))),
      areaColorFn: dart.finalFieldType(dart.nullable(dart.fnType(color$.Color, [dart.nullable(core.int)]))),
      colorFn: dart.finalFieldType(dart.nullable(dart.fnType(color$.Color, [dart.nullable(core.int)]))),
      dashPatternFn: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.List$(core.int)), [dart.nullable(core.int)]))),
      fillColorFn: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(color$.Color), [dart.nullable(core.int)]))),
      patternColorFn: dart.finalFieldType(dart.nullable(dart.fnType(color$.Color, [dart.nullable(core.int)]))),
      fillPatternFn: dart.finalFieldType(dart.nullable(dart.fnType(chart_canvas.FillPatternType, [dart.nullable(core.int)]))),
      radiusPxFn: dart.finalFieldType(dart.nullable(dart.fnType(core.num, [dart.nullable(core.int)]))),
      strokeWidthPxFn: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.num), [dart.nullable(core.int)]))),
      labelAccessorFn: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [dart.nullable(core.int)]))),
      insideLabelStyleAccessorFn: dart.finalFieldType(dart.nullable(dart.fnType(axis_spec.TextStyleSpec, [dart.nullable(core.int)]))),
      outsideLabelStyleAccessorFn: dart.finalFieldType(dart.nullable(dart.fnType(axis_spec.TextStyleSpec, [dart.nullable(core.int)]))),
      attributes: dart.finalFieldType(series$.SeriesAttributes)
    }));
    return Series;
  });
  series$.Series = series$.Series$();
  dart.addTypeTests(series$.Series, _is_Series_default);
  const _is_AttributeKey_default = Symbol('_is_AttributeKey_default');
  series$.AttributeKey$ = dart.generic(R => {
    class AttributeKey extends typed_registry.TypedKey$(R) {}
    (AttributeKey.new = function(uniqueKey) {
      AttributeKey.__proto__.new.call(this, uniqueKey);
      ;
    }).prototype = AttributeKey.prototype;
    dart.addTypeTests(AttributeKey);
    AttributeKey.prototype[_is_AttributeKey_default] = true;
    dart.addTypeCaches(AttributeKey);
    dart.setLibraryUri(AttributeKey, I[171]);
    return AttributeKey;
  });
  series$.AttributeKey = series$.AttributeKey$();
  dart.addTypeTests(series$.AttributeKey, _is_AttributeKey_default);
  series$.SeriesAttributes = class SeriesAttributes extends typed_registry.TypedRegistry {};
  (series$.SeriesAttributes.new = function() {
    series$.SeriesAttributes.__proto__.new.call(this);
    ;
  }).prototype = series$.SeriesAttributes.prototype;
  dart.addTypeTests(series$.SeriesAttributes);
  dart.addTypeCaches(series$.SeriesAttributes);
  dart.setLibraryUri(series$.SeriesAttributes, I[171]);
  axis$.AxisOrientation = class AxisOrientation extends core.Object {
    toString() {
      return this[S$0._name$18];
    }
  };
  (axis$.AxisOrientation.new = function(index, _name) {
    this.index = index;
    this[S$0._name$18] = _name;
    ;
  }).prototype = axis$.AxisOrientation.prototype;
  dart.addTypeTests(axis$.AxisOrientation);
  dart.addTypeCaches(axis$.AxisOrientation);
  dart.setLibraryUri(axis$.AxisOrientation, I[90]);
  dart.setFieldSignature(axis$.AxisOrientation, () => ({
    __proto__: dart.getFields(axis$.AxisOrientation.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$18]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(axis$.AxisOrientation, ['toString']);
  axis$.AxisOrientation.top = C[115] || CT.C115;
  axis$.AxisOrientation.right = C[116] || CT.C116;
  axis$.AxisOrientation.bottom = C[117] || CT.C117;
  axis$.AxisOrientation.left = C[118] || CT.C118;
  axis$.AxisOrientation.values = C[204] || CT.C204;
  axis$.OrdinalAxis = class OrdinalAxis extends axis$.Axis$(core.String) {
    setScaleViewport(viewport) {
      this.autoViewport = false;
      ordinal_scale.OrdinalScale.as(this.scale).setViewport(viewport.dataSize, viewport.startingDomain);
    }
    layout(componentBounds, drawAreaBounds) {
      super.layout(componentBounds, drawAreaBounds);
      ordinal_scale.OrdinalScale.as(this.scale).setViewport(null, null);
    }
  };
  (axis$.OrdinalAxis.new = function(opts) {
    let t117, t117$;
    let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
    let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
    let tickFormatter = opts && 'tickFormatter' in opts ? opts.tickFormatter : null;
    axis$.OrdinalAxis.__proto__.new.call(this, {tickProvider: (t117 = tickProvider, t117 == null ? C[205] || CT.C205 : t117), tickFormatter: (t117$ = tickFormatter, t117$ == null ? C[206] || CT.C206 : t117$), scale: new simple_ordinal_scale.SimpleOrdinalScale.new()});
    this.tickDrawStrategy = tickDrawStrategy;
  }).prototype = axis$.OrdinalAxis.prototype;
  dart.addTypeTests(axis$.OrdinalAxis);
  dart.addTypeCaches(axis$.OrdinalAxis);
  dart.setMethodSignature(axis$.OrdinalAxis, () => ({
    __proto__: dart.getMethods(axis$.OrdinalAxis.__proto__),
    setScaleViewport: dart.fnType(dart.void, [axis$.OrdinalViewport])
  }));
  dart.setLibraryUri(axis$.OrdinalAxis, I[90]);
  axis$.OrdinalViewport = class OrdinalViewport extends core.Object {
    get startingDomain() {
      return this[S$1.startingDomain];
    }
    set startingDomain(value) {
      super.startingDomain = value;
    }
    get dataSize() {
      return this[S$1.dataSize];
    }
    set dataSize(value) {
      super.dataSize = value;
    }
    _equals(other) {
      if (other == null) return false;
      return axis$.OrdinalViewport.is(other) && this.startingDomain === other.startingDomain && this.dataSize === other.dataSize;
    }
    get hashCode() {
      let hashcode = this.startingDomain[S$.$hashCode];
      hashcode = hashcode * 37 + this.dataSize;
      return hashcode;
    }
  };
  (axis$.OrdinalViewport.new = function(startingDomain, dataSize) {
    this[S$1.startingDomain] = startingDomain;
    this[S$1.dataSize] = dataSize;
    ;
  }).prototype = axis$.OrdinalViewport.prototype;
  dart.addTypeTests(axis$.OrdinalViewport);
  dart.addTypeCaches(axis$.OrdinalViewport);
  dart.setLibraryUri(axis$.OrdinalViewport, I[90]);
  dart.setFieldSignature(axis$.OrdinalViewport, () => ({
    __proto__: dart.getFields(axis$.OrdinalViewport.__proto__),
    startingDomain: dart.finalFieldType(core.String),
    dataSize: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(axis$.OrdinalViewport, ['_equals']);
  dart.defineExtensionAccessors(axis$.OrdinalViewport, ['hashCode']);
  const _is_AxisTester_default = Symbol('_is_AxisTester_default');
  axis$.AxisTester$ = dart.generic(D => {
    var AxisTicksOfD = () => (AxisTicksOfD = dart.constFn(axis_tick.AxisTicks$(D)))();
    var AxisTicksOfDToD = () => (AxisTicksOfDToD = dart.constFn(dart.fnType(D, [AxisTicksOfD()])))();
    class AxisTester extends core.Object {
      get axisTicks() {
        return this[S$1._axis][S$0._axisTicks];
      }
      get scale() {
        return this[S$1._axis].scale;
      }
      get axisValues() {
        return this.axisTicks[S$.$map](D, dart.fn(t => t.value, AxisTicksOfDToD()))[S$.$toList]();
      }
    }
    (AxisTester.new = function(_axis) {
      this[S$1._axis] = _axis;
      ;
    }).prototype = AxisTester.prototype;
    dart.addTypeTests(AxisTester);
    AxisTester.prototype[_is_AxisTester_default] = true;
    dart.addTypeCaches(AxisTester);
    dart.setGetterSignature(AxisTester, () => ({
      __proto__: dart.getGetters(AxisTester.__proto__),
      axisTicks: core.List$(axis_tick.AxisTicks$(D)),
      scale: dart.nullable(scale$.MutableScale$(D)),
      axisValues: core.List$(D)
    }));
    dart.setLibraryUri(AxisTester, I[90]);
    dart.setFieldSignature(AxisTester, () => ({
      __proto__: dart.getFields(AxisTester.__proto__),
      [S$1._axis]: dart.finalFieldType(axis$.Axis$(D))
    }));
    return AxisTester;
  });
  axis$.AxisTester = axis$.AxisTester$();
  dart.addTypeTests(axis$.AxisTester, _is_AxisTester_default);
  dart.defineLazy(axis$, {
    /*axis$.measureAxisIdKey*/get measureAxisIdKey() {
      return C[207] || CT.C207;
    },
    /*axis$.measureAxisKey*/get measureAxisKey() {
      return C[208] || CT.C208;
    },
    /*axis$.domainAxisKey*/get domainAxisKey() {
      return C[209] || CT.C209;
    }
  }, false);
  const _is_ImmutableBarRendererElement_default = Symbol('_is_ImmutableBarRendererElement_default');
  bar_renderer.ImmutableBarRendererElement$ = dart.generic(D => {
    class ImmutableBarRendererElement extends core.Object {}
    (ImmutableBarRendererElement.new = function() {
      ;
    }).prototype = ImmutableBarRendererElement.prototype;
    dart.addTypeTests(ImmutableBarRendererElement);
    ImmutableBarRendererElement.prototype[_is_ImmutableBarRendererElement_default] = true;
    dart.addTypeCaches(ImmutableBarRendererElement);
    dart.setLibraryUri(ImmutableBarRendererElement, I[127]);
    return ImmutableBarRendererElement;
  });
  bar_renderer.ImmutableBarRendererElement = bar_renderer.ImmutableBarRendererElement$();
  dart.addTypeTests(bar_renderer.ImmutableBarRendererElement, _is_ImmutableBarRendererElement_default);
  bar_chart.BarChart = class BarChart extends cartesian_chart.OrdinalCartesianChart {
    makeDefaultRenderer() {
      let t117;
      t117 = T$0.BarRendererOfString().new();
      return (() => {
        t117.rendererId = "default";
        return t117;
      })();
    }
  };
  (bar_chart.BarChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    bar_chart.BarChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = bar_chart.BarChart.prototype;
  dart.addTypeTests(bar_chart.BarChart);
  dart.addTypeCaches(bar_chart.BarChart);
  dart.setLibraryUri(bar_chart.BarChart, I[172]);
  dart.trackLibraries("packages/charts_common/src/chart/treemap/treemap_chart.dart", {
    "package:charts_common/src/chart/treemap/treemap_chart.dart": treemap_chart,
    "package:charts_common/src/chart/treemap/slice_treemap_renderer.dart": slice_treemap_renderer,
    "package:charts_common/src/chart/treemap/slice_dice_treemap_renderer.dart": slice_dice_treemap_renderer,
    "package:charts_common/src/chart/treemap/dice_treemap_renderer.dart": dice_treemap_renderer,
    "package:charts_common/src/chart/treemap/treemap_renderer_config.dart": treemap_renderer_config,
    "package:charts_common/src/chart/treemap/treemap_renderer_element.dart": treemap_renderer_element,
    "package:charts_common/src/chart/treemap/treemap_renderer_decorator.dart": treemap_renderer_decorator,
    "package:charts_common/src/chart/treemap/treemap_label_decorator.dart": treemap_label_decorator,
    "package:charts_common/src/chart/treemap/base_treemap_renderer.dart": base_treemap_renderer,
    "package:charts_common/src/chart/treemap/squarified_treemap_renderer.dart": squarified_treemap_renderer,
    "package:charts_common/src/chart/time_series/time_series_chart.dart": time_series_chart,
    "package:charts_common/src/chart/sunburst/sunburst_arc_label_decorator.dart": sunburst_arc_label_decorator,
    "package:charts_common/src/chart/scatter_plot/symbol_annotation_renderer_config.dart": symbol_annotation_renderer_config,
    "package:charts_common/src/chart/scatter_plot/symbol_annotation_renderer.dart": symbol_annotation_renderer,
    "package:charts_common/src/chart/scatter_plot/scatter_plot_chart.dart": scatter_plot_chart,
    "package:charts_common/src/chart/pie/pie_chart.dart": pie_chart,
    "package:charts_common/src/chart/pie/arc_label_decorator.dart": arc_label_decorator,
    "package:charts_common/src/chart/line/line_renderer_config.dart": line_renderer_config,
    "package:charts_common/src/chart/scatter_plot/point_renderer_config.dart": point_renderer_config,
    "package:charts_common/src/chart/scatter_plot/point_renderer_decorator.dart": point_renderer_decorator,
    "package:charts_common/src/chart/scatter_plot/comparison_points_decorator.dart": comparison_points_decorator,
    "package:charts_common/src/chart/scatter_plot/point_renderer.dart": point_renderer,
    "package:charts_common/src/chart/line/line_renderer.dart": line_renderer,
    "package:charts_common/src/chart/line/line_chart.dart": line_chart,
    "package:charts_common/src/chart/common/behavior/zoom/panning_tick_provider.dart": panning_tick_provider,
    "package:charts_common/src/chart/common/behavior/zoom/pan_behavior.dart": pan_behavior,
    "package:charts_common/src/chart/common/behavior/zoom/pan_and_zoom_behavior.dart": pan_and_zoom_behavior,
    "package:charts_common/src/chart/common/behavior/zoom/initial_hint_behavior.dart": initial_hint_behavior,
    "package:charts_common/src/chart/sunburst/sunburst_arc_renderer_config.dart": sunburst_arc_renderer_config,
    "package:charts_common/src/chart/pie/base_arc_renderer_config.dart": base_arc_renderer_config,
    "package:charts_common/src/chart/pie/arc_renderer.dart": arc_renderer,
    "package:charts_common/src/chart/pie/arc_renderer_config.dart": arc_renderer_config,
    "package:charts_common/src/chart/pie/base_arc_renderer.dart": base_arc_renderer,
    "package:charts_common/src/chart/pie/arc_renderer_element.dart": arc_renderer_element,
    "package:charts_common/src/chart/pie/arc_renderer_decorator.dart": arc_renderer_decorator,
    "package:charts_common/src/chart/sunburst/sunburst_arc_renderer.dart": sunburst_arc_renderer,
    "package:charts_common/src/data/tree.dart": tree,
    "package:charts_common/src/chart/sunburst/sunburst_chart.dart": sunburst_chart,
    "package:charts_common/src/chart/common/behavior/sunburst_ring_expander.dart": sunburst_ring_expander,
    "package:charts_common/src/chart/common/behavior/sliding_viewport.dart": sliding_viewport,
    "package:charts_common/src/chart/common/behavior/slider/slider.dart": slider,
    "package:charts_common/src/chart/common/behavior/selection/select_nearest.dart": select_nearest,
    "package:charts_common/src/chart/common/behavior/selection/lock_selection.dart": lock_selection,
    "package:charts_common/src/chart/common/behavior/range_annotation.dart": range_annotation,
    "package:charts_common/src/chart/common/behavior/line_point_highlighter.dart": line_point_highlighter,
    "package:charts_common/src/chart/common/behavior/legend/per_series_legend_entry_generator.dart": per_series_legend_entry_generator,
    "package:charts_common/src/chart/common/behavior/legend/series_legend.dart": series_legend,
    "package:charts_common/src/chart/common/behavior/legend/per_datum_legend_entry_generator.dart": per_datum_legend_entry_generator,
    "package:charts_common/src/chart/common/behavior/legend/legend_entry_generator.dart": legend_entry_generator,
    "package:charts_common/src/chart/common/behavior/legend/legend_entry.dart": legend_entry,
    "package:charts_common/src/chart/common/behavior/legend/legend.dart": legend,
    "package:charts_common/src/chart/common/behavior/legend/datum_legend.dart": datum_legend,
    "package:charts_common/src/chart/common/behavior/initial_selection.dart": initial_selection,
    "package:charts_common/src/chart/common/behavior/domain_outliner.dart": domain_outliner,
    "package:charts_common/src/chart/common/behavior/domain_highlighter.dart": domain_highlighter,
    "package:charts_common/src/chart/common/behavior/chart_title/chart_title.dart": chart_title,
    "package:charts_common/src/chart/common/behavior/calculation/percent_injector.dart": percent_injector,
    "package:charts_common/src/chart/common/behavior/a11y/keyboard_domain_navigator.dart": keyboard_domain_navigator,
    "package:charts_common/src/chart/common/behavior/a11y/domain_a11y_explore_behavior.dart": domain_a11y_explore_behavior,
    "package:charts_common/src/chart/common/behavior/a11y/a11y_explore_behavior.dart": a11y_explore_behavior,
    "package:charts_common/src/chart/cartesian/axis/spec/percent_axis_spec.dart": percent_axis_spec,
    "package:charts_common/src/chart/cartesian/axis/spec/range_tick_spec.dart": range_tick_spec,
    "package:charts_common/src/chart/cartesian/axis/range_tick_provider.dart": range_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart": ordinal_axis_spec,
    "package:charts_common/src/chart/cartesian/axis/spec/end_points_time_axis_spec.dart": end_points_time_axis_spec,
    "package:charts_common/src/chart/cartesian/axis/time/date_time_tick_formatter.dart": date_time_tick_formatter,
    "package:charts_common/src/chart/cartesian/axis/time/date_time_axis.dart": date_time_axis,
    "package:charts_common/src/chart/cartesian/axis/time/year_time_stepper.dart": year_time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/time_range_tick_provider_impl.dart": time_range_tick_provider_impl,
    "package:charts_common/src/chart/cartesian/axis/time/time_range_tick_provider.dart": time_range_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/time/month_time_stepper.dart": month_time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/minute_time_stepper.dart": minute_time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/hour_time_stepper.dart": hour_time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/time_stepper.dart": time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/base_time_stepper.dart": base_time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/day_time_stepper.dart": day_time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/auto_adjusting_date_time_tick_provider.dart": auto_adjusting_date_time_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart": date_time_axis_spec,
    "package:charts_common/src/chart/cartesian/axis/linear/bucketing_numeric_tick_provider.dart": bucketing_numeric_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/linear/bucketing_numeric_axis.dart": bucketing_numeric_axis,
    "package:charts_common/src/chart/cartesian/axis/spec/bucketing_axis_spec.dart": bucketing_axis_spec,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/range_tick_draw_strategy.dart": range_tick_draw_strategy,
    "package:charts_common/src/chart/bar/bar_target_line_renderer_config.dart": bar_target_line_renderer_config,
    "package:charts_common/src/chart/bar/bar_target_line_renderer.dart": bar_target_line_renderer,
    "package:charts_common/src/chart/bar/bar_lane_renderer.dart": bar_lane_renderer,
    "package:charts_common/src/chart/bar/bar_lane_renderer_config.dart": bar_lane_renderer_config,
    "package:charts_common/src/chart/bar/bar_label_decorator.dart": bar_label_decorator,
    "package:charts_common/src/chart/bar/bar_error_decorator.dart": bar_error_decorator,
    "package:charts_common/src/chart/bar/base_bar_renderer_element.dart": base_bar_renderer_element,
    "package:charts_common/src/chart/cartesian/axis/spec/tick_spec.dart": tick_spec,
    "package:charts_common/src/chart/cartesian/axis/static_tick_provider.dart": static_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/time/date_time_extents.dart": date_time_extents,
    "package:charts_common/src/chart/cartesian/axis/time/date_time_scale.dart": date_time_scale,
    "package:charts_common/src/chart/cartesian/axis/end_points_tick_provider.dart": end_points_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart": numeric_axis_spec,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/none_draw_strategy.dart": none_draw_strategy,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/gridline_draw_strategy.dart": gridline_draw_strategy,
    "package:charts_common/src/chart/cartesian/cartesian_chart.dart": cartesian_chart,
    "package:charts_common/src/chart/cartesian/cartesian_renderer.dart": cartesian_renderer,
    "package:charts_common/src/chart/bar/base_bar_renderer.dart": base_bar_renderer,
    "package:charts_common/src/chart/common/series_renderer_config.dart": series_renderer_config,
    "package:charts_common/src/chart/bar/base_bar_renderer_config.dart": base_bar_renderer_config,
    "package:charts_common/src/chart/bar/bar_renderer_decorator.dart": bar_renderer_decorator,
    "package:charts_common/src/chart/bar/bar_renderer_config.dart": bar_renderer_config,
    "package:charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart": simple_ordinal_scale,
    "package:charts_common/src/chart/cartesian/axis/ordinal_tick_provider.dart": ordinal_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/ordinal_extents.dart": ordinal_extents,
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale_domain_info.dart": ordinal_scale_domain_info,
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale.dart": ordinal_scale,
    "package:charts_common/src/chart/cartesian/axis/numeric_tick_provider.dart": numeric_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_viewport.dart": linear_scale_viewport,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_function.dart": linear_scale_function,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_domain_info.dart": linear_scale_domain_info,
    "package:charts_common/src/chart/cartesian/axis/numeric_scale.dart": numeric_scale,
    "package:charts_common/src/chart/cartesian/axis/numeric_extents.dart": numeric_extents,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale.dart": linear_scale,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/base_tick_draw_strategy.dart": base_tick_draw_strategy,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/small_tick_draw_strategy.dart": small_tick_draw_strategy,
    "package:charts_common/src/chart/cartesian/axis/tick_provider.dart": tick_provider,
    "package:charts_common/src/chart/cartesian/axis/tick_formatter.dart": tick_formatter,
    "package:charts_common/src/chart/common/series_renderer.dart": series_renderer,
    "package:charts_common/src/chart/common/series_datum.dart": series_datum,
    "package:charts_common/src/chart/common/selection_model/selection_model.dart": selection_model,
    "package:charts_common/src/chart/common/processed_series.dart": processed_series,
    "package:charts_common/src/common/symbol_renderer.dart": symbol_renderer,
    "package:charts_common/src/chart/common/datum_details.dart": datum_details,
    "package:charts_common/src/chart/layout/layout_margin_strategy.dart": layout_margin_strategy,
    "package:charts_common/src/chart/layout/layout_manager_impl.dart": layout_manager_impl,
    "package:charts_common/src/chart/layout/layout_manager.dart": layout_manager,
    "package:charts_common/src/chart/common/base_chart.dart": base_chart,
    "package:charts_common/src/chart/common/behavior/chart_behavior.dart": chart_behavior,
    "package:charts_common/src/chart/layout/layout_view.dart": layout_view,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/tick_draw_strategy.dart": tick_draw_strategy,
    "package:charts_common/src/common/style/style.dart": style,
    "package:charts_common/src/common/style/material_style.dart": material_style,
    "package:charts_common/src/common/style/style_factory.dart": style_factory,
    "package:charts_common/src/chart/cartesian/axis/scale.dart": scale$,
    "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart": axis_spec,
    "package:charts_common/src/data/series.dart": series$,
    "package:charts_common/src/chart/cartesian/axis/axis.dart": axis$,
    "package:charts_common/src/chart/bar/bar_renderer.dart": bar_renderer,
    "package:charts_common/src/chart/bar/bar_chart.dart": bar_chart,
    "package:charts_common/common.dart": common
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../common/base_chart.dart","treemap_chart.dart","../common/series_renderer.dart","base_treemap_renderer.dart","slice_treemap_renderer.dart","slice_dice_treemap_renderer.dart","dice_treemap_renderer.dart","../layout/layout_view.dart","treemap_renderer_config.dart","treemap_renderer_element.dart","treemap_renderer_decorator.dart","treemap_label_decorator.dart","squarified_treemap_renderer.dart","../cartesian/cartesian_chart.dart","../time_series/time_series_chart.dart","../pie/arc_renderer_decorator.dart","../pie/arc_label_decorator.dart","../sunburst/sunburst_arc_label_decorator.dart","../scatter_plot/point_renderer_config.dart","../scatter_plot/symbol_annotation_renderer_config.dart","../cartesian/cartesian_renderer.dart","../scatter_plot/point_renderer.dart","../scatter_plot/symbol_annotation_renderer.dart","../scatter_plot/scatter_plot_chart.dart","../pie/pie_chart.dart","../line/line_renderer_config.dart","../scatter_plot/point_renderer_decorator.dart","../scatter_plot/comparison_points_decorator.dart","../line/line_renderer.dart","../line/line_chart.dart","../common/behavior/zoom/panning_tick_provider.dart","../common/behavior/zoom/pan_behavior.dart","../common/behavior/zoom/pan_and_zoom_behavior.dart","../common/behavior/zoom/initial_hint_behavior.dart","../pie/base_arc_renderer_config.dart","../sunburst/sunburst_arc_renderer_config.dart","../pie/base_arc_renderer.dart","../pie/arc_renderer.dart","../pie/arc_renderer_config.dart","../pie/arc_renderer_element.dart","../sunburst/sunburst_arc_renderer.dart","../../data/tree.dart","../sunburst/sunburst_chart.dart","../common/behavior/sunburst_ring_expander.dart","../common/behavior/sliding_viewport.dart","../common/behavior/slider/slider.dart","../common/behavior/selection/select_nearest.dart","../common/behavior/selection/lock_selection.dart","../common/behavior/range_annotation.dart","../common/behavior/line_point_highlighter.dart","../common/behavior/legend/per_series_legend_entry_generator.dart","../common/behavior/legend/legend.dart","../common/behavior/legend/series_legend.dart","../common/behavior/legend/per_datum_legend_entry_generator.dart","../common/behavior/legend/legend_entry_generator.dart","../common/behavior/legend/legend_entry.dart","../common/behavior/legend/datum_legend.dart","../common/behavior/initial_selection.dart","../common/behavior/domain_outliner.dart","../common/behavior/domain_highlighter.dart","../common/behavior/chart_title/chart_title.dart","../common/behavior/calculation/percent_injector.dart","../common/behavior/a11y/keyboard_domain_navigator.dart","../common/behavior/a11y/a11y_explore_behavior.dart","../common/behavior/a11y/domain_a11y_explore_behavior.dart","../cartesian/axis/spec/axis_spec.dart","../cartesian/axis/spec/numeric_axis_spec.dart","../cartesian/axis/spec/percent_axis_spec.dart","../cartesian/axis/spec/tick_spec.dart","../cartesian/axis/spec/range_tick_spec.dart","../cartesian/axis/tick_provider.dart","../cartesian/axis/range_tick_provider.dart","../cartesian/axis/spec/ordinal_axis_spec.dart","../cartesian/axis/spec/date_time_axis_spec.dart","../cartesian/axis/spec/end_points_time_axis_spec.dart","../cartesian/axis/time/date_time_tick_formatter.dart","../cartesian/axis/axis.dart","../cartesian/axis/time/date_time_axis.dart","../cartesian/axis/time/base_time_stepper.dart","../cartesian/axis/time/year_time_stepper.dart","../cartesian/axis/time/time_range_tick_provider.dart","../cartesian/axis/time/time_range_tick_provider_impl.dart","../cartesian/axis/time/month_time_stepper.dart","../cartesian/axis/time/minute_time_stepper.dart","../cartesian/axis/time/hour_time_stepper.dart","../cartesian/axis/time/time_stepper.dart","../cartesian/axis/time/day_time_stepper.dart","../cartesian/axis/time/auto_adjusting_date_time_tick_provider.dart","../cartesian/axis/numeric_tick_provider.dart","../cartesian/axis/linear/bucketing_numeric_tick_provider.dart","../cartesian/axis/tick_formatter.dart","../cartesian/axis/linear/bucketing_numeric_axis.dart","../cartesian/axis/spec/bucketing_axis_spec.dart","../cartesian/axis/draw_strategy/base_tick_draw_strategy.dart","../cartesian/axis/draw_strategy/small_tick_draw_strategy.dart","../cartesian/axis/draw_strategy/range_tick_draw_strategy.dart","../bar/base_bar_renderer_config.dart","../bar/bar_target_line_renderer_config.dart","../bar/base_bar_renderer.dart","../bar/base_bar_renderer_element.dart","../bar/bar_target_line_renderer.dart","../bar/bar_renderer.dart","../bar/bar_lane_renderer.dart","../bar/bar_renderer_config.dart","../bar/bar_lane_renderer_config.dart","../bar/bar_renderer_decorator.dart","../bar/bar_label_decorator.dart","../bar/bar_error_decorator.dart","../cartesian/axis/static_tick_provider.dart","../cartesian/axis/scale.dart","../cartesian/axis/time/date_time_extents.dart","../cartesian/axis/time/date_time_scale.dart","../cartesian/axis/end_points_tick_provider.dart","../cartesian/axis/draw_strategy/none_draw_strategy.dart","../cartesian/axis/draw_strategy/gridline_draw_strategy.dart","../common/series_renderer_config.dart","../cartesian/axis/simple_ordinal_scale.dart","../cartesian/axis/ordinal_tick_provider.dart","../cartesian/axis/ordinal_extents.dart","../cartesian/axis/ordinal_scale_domain_info.dart","../cartesian/axis/ordinal_scale.dart","../cartesian/axis/linear/linear_scale_viewport.dart","../cartesian/axis/linear/linear_scale_function.dart","../cartesian/axis/linear/linear_scale_domain_info.dart","../cartesian/axis/numeric_scale.dart","../cartesian/axis/numeric_extents.dart","../cartesian/axis/linear/linear_scale.dart","../common/series_datum.dart","../common/selection_model/selection_model.dart","../common/processed_series.dart","../../common/symbol_renderer.dart","../common/datum_details.dart","../layout/layout_margin_strategy.dart","../layout/layout_manager_impl.dart","../layout/layout_manager.dart","../common/behavior/chart_behavior.dart","../cartesian/axis/draw_strategy/tick_draw_strategy.dart","../../common/style/style.dart","../../common/style/material_style.dart","../../common/style/style_factory.dart","../../data/series.dart","../bar/bar_chart.dart"],"names":[],"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","file":"../../../../../../../../../../../../../packages/charts_common/src/chart/treemap/treemap_chart.dart.lib.js"}');
  // Exports:
  return {
    src__chart__treemap__treemap_chart: treemap_chart,
    src__chart__treemap__slice_treemap_renderer: slice_treemap_renderer,
    src__chart__treemap__slice_dice_treemap_renderer: slice_dice_treemap_renderer,
    src__chart__treemap__dice_treemap_renderer: dice_treemap_renderer,
    src__chart__treemap__treemap_renderer_config: treemap_renderer_config,
    src__chart__treemap__treemap_renderer_element: treemap_renderer_element,
    src__chart__treemap__treemap_renderer_decorator: treemap_renderer_decorator,
    src__chart__treemap__treemap_label_decorator: treemap_label_decorator,
    src__chart__treemap__base_treemap_renderer: base_treemap_renderer,
    src__chart__treemap__squarified_treemap_renderer: squarified_treemap_renderer,
    src__chart__time_series__time_series_chart: time_series_chart,
    src__chart__sunburst__sunburst_arc_label_decorator: sunburst_arc_label_decorator,
    src__chart__scatter_plot__symbol_annotation_renderer_config: symbol_annotation_renderer_config,
    src__chart__scatter_plot__symbol_annotation_renderer: symbol_annotation_renderer,
    src__chart__scatter_plot__scatter_plot_chart: scatter_plot_chart,
    src__chart__pie__pie_chart: pie_chart,
    src__chart__pie__arc_label_decorator: arc_label_decorator,
    src__chart__line__line_renderer_config: line_renderer_config,
    src__chart__scatter_plot__point_renderer_config: point_renderer_config,
    src__chart__scatter_plot__point_renderer_decorator: point_renderer_decorator,
    src__chart__scatter_plot__comparison_points_decorator: comparison_points_decorator,
    src__chart__scatter_plot__point_renderer: point_renderer,
    src__chart__line__line_renderer: line_renderer,
    src__chart__line__line_chart: line_chart,
    src__chart__common__behavior__zoom__panning_tick_provider: panning_tick_provider,
    src__chart__common__behavior__zoom__pan_behavior: pan_behavior,
    src__chart__common__behavior__zoom__pan_and_zoom_behavior: pan_and_zoom_behavior,
    src__chart__common__behavior__zoom__initial_hint_behavior: initial_hint_behavior,
    src__chart__sunburst__sunburst_arc_renderer_config: sunburst_arc_renderer_config,
    src__chart__pie__base_arc_renderer_config: base_arc_renderer_config,
    src__chart__pie__arc_renderer: arc_renderer,
    src__chart__pie__arc_renderer_config: arc_renderer_config,
    src__chart__pie__base_arc_renderer: base_arc_renderer,
    src__chart__pie__arc_renderer_element: arc_renderer_element,
    src__chart__pie__arc_renderer_decorator: arc_renderer_decorator,
    src__chart__sunburst__sunburst_arc_renderer: sunburst_arc_renderer,
    src__data__tree: tree,
    src__chart__sunburst__sunburst_chart: sunburst_chart,
    src__chart__common__behavior__sunburst_ring_expander: sunburst_ring_expander,
    src__chart__common__behavior__sliding_viewport: sliding_viewport,
    src__chart__common__behavior__slider__slider: slider,
    src__chart__common__behavior__selection__select_nearest: select_nearest,
    src__chart__common__behavior__selection__lock_selection: lock_selection,
    src__chart__common__behavior__range_annotation: range_annotation,
    src__chart__common__behavior__line_point_highlighter: line_point_highlighter,
    src__chart__common__behavior__legend__per_series_legend_entry_generator: per_series_legend_entry_generator,
    src__chart__common__behavior__legend__series_legend: series_legend,
    src__chart__common__behavior__legend__per_datum_legend_entry_generator: per_datum_legend_entry_generator,
    src__chart__common__behavior__legend__legend_entry_generator: legend_entry_generator,
    src__chart__common__behavior__legend__legend_entry: legend_entry,
    src__chart__common__behavior__legend__legend: legend,
    src__chart__common__behavior__legend__datum_legend: datum_legend,
    src__chart__common__behavior__initial_selection: initial_selection,
    src__chart__common__behavior__domain_outliner: domain_outliner,
    src__chart__common__behavior__domain_highlighter: domain_highlighter,
    src__chart__common__behavior__chart_title__chart_title: chart_title,
    src__chart__common__behavior__calculation__percent_injector: percent_injector,
    src__chart__common__behavior__a11y__keyboard_domain_navigator: keyboard_domain_navigator,
    src__chart__common__behavior__a11y__domain_a11y_explore_behavior: domain_a11y_explore_behavior,
    src__chart__common__behavior__a11y__a11y_explore_behavior: a11y_explore_behavior,
    src__chart__cartesian__axis__spec__percent_axis_spec: percent_axis_spec,
    src__chart__cartesian__axis__spec__range_tick_spec: range_tick_spec,
    src__chart__cartesian__axis__range_tick_provider: range_tick_provider,
    src__chart__cartesian__axis__spec__ordinal_axis_spec: ordinal_axis_spec,
    src__chart__cartesian__axis__spec__end_points_time_axis_spec: end_points_time_axis_spec,
    src__chart__cartesian__axis__time__date_time_tick_formatter: date_time_tick_formatter,
    src__chart__cartesian__axis__time__date_time_axis: date_time_axis,
    src__chart__cartesian__axis__time__year_time_stepper: year_time_stepper,
    src__chart__cartesian__axis__time__time_range_tick_provider_impl: time_range_tick_provider_impl,
    src__chart__cartesian__axis__time__time_range_tick_provider: time_range_tick_provider,
    src__chart__cartesian__axis__time__month_time_stepper: month_time_stepper,
    src__chart__cartesian__axis__time__minute_time_stepper: minute_time_stepper,
    src__chart__cartesian__axis__time__hour_time_stepper: hour_time_stepper,
    src__chart__cartesian__axis__time__time_stepper: time_stepper,
    src__chart__cartesian__axis__time__base_time_stepper: base_time_stepper,
    src__chart__cartesian__axis__time__day_time_stepper: day_time_stepper,
    src__chart__cartesian__axis__time__auto_adjusting_date_time_tick_provider: auto_adjusting_date_time_tick_provider,
    src__chart__cartesian__axis__spec__date_time_axis_spec: date_time_axis_spec,
    src__chart__cartesian__axis__linear__bucketing_numeric_tick_provider: bucketing_numeric_tick_provider,
    src__chart__cartesian__axis__linear__bucketing_numeric_axis: bucketing_numeric_axis,
    src__chart__cartesian__axis__spec__bucketing_axis_spec: bucketing_axis_spec,
    src__chart__cartesian__axis__draw_strategy__range_tick_draw_strategy: range_tick_draw_strategy,
    src__chart__bar__bar_target_line_renderer_config: bar_target_line_renderer_config,
    src__chart__bar__bar_target_line_renderer: bar_target_line_renderer,
    src__chart__bar__bar_lane_renderer: bar_lane_renderer,
    src__chart__bar__bar_lane_renderer_config: bar_lane_renderer_config,
    src__chart__bar__bar_label_decorator: bar_label_decorator,
    src__chart__bar__bar_error_decorator: bar_error_decorator,
    src__chart__bar__base_bar_renderer_element: base_bar_renderer_element,
    src__chart__cartesian__axis__spec__tick_spec: tick_spec,
    src__chart__cartesian__axis__static_tick_provider: static_tick_provider,
    src__chart__cartesian__axis__time__date_time_extents: date_time_extents,
    src__chart__cartesian__axis__time__date_time_scale: date_time_scale,
    src__chart__cartesian__axis__end_points_tick_provider: end_points_tick_provider,
    src__chart__cartesian__axis__spec__numeric_axis_spec: numeric_axis_spec,
    src__chart__cartesian__axis__draw_strategy__none_draw_strategy: none_draw_strategy,
    src__chart__cartesian__axis__draw_strategy__gridline_draw_strategy: gridline_draw_strategy,
    src__chart__cartesian__cartesian_chart: cartesian_chart,
    src__chart__cartesian__cartesian_renderer: cartesian_renderer,
    src__chart__bar__base_bar_renderer: base_bar_renderer,
    src__chart__common__series_renderer_config: series_renderer_config,
    src__chart__bar__base_bar_renderer_config: base_bar_renderer_config,
    src__chart__bar__bar_renderer_decorator: bar_renderer_decorator,
    src__chart__bar__bar_renderer_config: bar_renderer_config,
    src__chart__cartesian__axis__simple_ordinal_scale: simple_ordinal_scale,
    src__chart__cartesian__axis__ordinal_tick_provider: ordinal_tick_provider,
    src__chart__cartesian__axis__ordinal_extents: ordinal_extents,
    src__chart__cartesian__axis__ordinal_scale_domain_info: ordinal_scale_domain_info,
    src__chart__cartesian__axis__ordinal_scale: ordinal_scale,
    src__chart__cartesian__axis__numeric_tick_provider: numeric_tick_provider,
    src__chart__cartesian__axis__linear__linear_scale_viewport: linear_scale_viewport,
    src__chart__cartesian__axis__linear__linear_scale_function: linear_scale_function,
    src__chart__cartesian__axis__linear__linear_scale_domain_info: linear_scale_domain_info,
    src__chart__cartesian__axis__numeric_scale: numeric_scale,
    src__chart__cartesian__axis__numeric_extents: numeric_extents,
    src__chart__cartesian__axis__linear__linear_scale: linear_scale,
    src__chart__cartesian__axis__draw_strategy__base_tick_draw_strategy: base_tick_draw_strategy,
    src__chart__cartesian__axis__draw_strategy__small_tick_draw_strategy: small_tick_draw_strategy,
    src__chart__cartesian__axis__tick_provider: tick_provider,
    src__chart__cartesian__axis__tick_formatter: tick_formatter,
    src__chart__common__series_renderer: series_renderer,
    src__chart__common__series_datum: series_datum,
    src__chart__common__selection_model__selection_model: selection_model,
    src__chart__common__processed_series: processed_series,
    src__common__symbol_renderer: symbol_renderer,
    src__chart__common__datum_details: datum_details,
    src__chart__layout__layout_margin_strategy: layout_margin_strategy,
    src__chart__layout__layout_manager_impl: layout_manager_impl,
    src__chart__layout__layout_manager: layout_manager,
    src__chart__common__base_chart: base_chart,
    src__chart__common__behavior__chart_behavior: chart_behavior,
    src__chart__layout__layout_view: layout_view,
    src__chart__cartesian__axis__draw_strategy__tick_draw_strategy: tick_draw_strategy,
    src__common__style__style: style,
    src__common__style__material_style: material_style,
    src__common__style__style_factory: style_factory,
    src__chart__cartesian__axis__scale: scale$,
    src__chart__cartesian__axis__spec__axis_spec: axis_spec,
    src__data__series: series$,
    src__chart__cartesian__axis__axis: axis$,
    src__chart__bar__bar_renderer: bar_renderer,
    src__chart__bar__bar_chart: bar_chart,
    common: common
  };
}));

//# sourceMappingURL=treemap_chart.dart.lib.js.map
