<<<<<<< HEAD
define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/foundation/key.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/semantics/semantics.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/rendering/proxy_box.dart'], (function load__packages__flutter__src__rendering__custom_paint_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__foundation__key$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__semantics__semantics$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__rendering__proxy_box$46dart) {
=======
define(['dart_sdk', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/rendering/custom_paint.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/cupertino/activity_indicator.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/painting/edge_insets.dart'], (function load__packages__flutter__src__material__progress_indicator_dart(dart_sdk, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__rendering__custom_paint$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__cupertino__activity_indicator$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__painting__edge_insets$46dart) {
>>>>>>> feature-b
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
<<<<<<< HEAD
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const key = packages__flutter__src__foundation__key$46dart.src__foundation__key;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const semantics = packages__flutter__src__semantics__semantics$46dart.src__semantics__semantics;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  var custom_paint = Object.create(dart.library);
  var $toString = dartx.toString;
  var $runtimeType = dartx.runtimeType;
  var $isFinite = dartx.isFinite;
  var $isNotEmpty = dartx.isNotEmpty;
  var $join = dartx.join;
  var $addAll = dartx.addAll;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $containsKey = dartx.containsKey;
  var $add = dartx.add;
  var $_set = dartx._set;
  var $insert = dartx.insert;
  var $remove = dartx.remove;
  var $_equals = dartx._equals;
  var $cast = dartx.cast;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    VoidToint: () => (T.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    intTodynamic: () => (T.intTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.int])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    JSArrayOfSemanticsNode: () => (T.JSArrayOfSemanticsNode = dart.constFn(_interceptors.JSArray$(semantics.SemanticsNode)))(),
    LinkedMapOfKey$int: () => (T.LinkedMapOfKey$int = dart.constFn(_js_helper.LinkedMap$(key.Key, core.int)))(),
    SemanticsNodeN: () => (T.SemanticsNodeN = dart.constFn(dart.nullable(semantics.SemanticsNode)))(),
    ListOfSemanticsNodeN: () => (T.ListOfSemanticsNodeN = dart.constFn(core.List$(T.SemanticsNodeN())))(),
    MapOfKey$SemanticsNode: () => (T.MapOfKey$SemanticsNode = dart.constFn(core.Map$(key.Key, semantics.SemanticsNode)))(),
    VoidToMapOfKey$SemanticsNode: () => (T.VoidToMapOfKey$SemanticsNode = dart.constFn(dart.fnType(T.MapOfKey$SemanticsNode(), [])))(),
    MapOfKey$SemanticsNodeTodynamic: () => (T.MapOfKey$SemanticsNodeTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.MapOfKey$SemanticsNode()])))(),
    LinkedMapOfKey$SemanticsNode: () => (T.LinkedMapOfKey$SemanticsNode = dart.constFn(_js_helper.LinkedMap$(key.Key, semantics.SemanticsNode)))()
=======
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const theme$ = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const material = packages__flutter__src__material__icon_button$46dart.src__material__material;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const transitions = packages__flutter__src__widgets__widget_span$46dart.src__widgets__transitions;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const activity_indicator = packages__flutter__src__cupertino__activity_indicator$46dart.src__cupertino__activity_indicator;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  var progress_indicator = Object.create(dart.library);
  var $round = dartx.round;
  var $clamp = dartx.clamp;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    doubleAnddoubleTovoid: () => (T.doubleAnddoubleTovoid = dart.constFn(dart.fnType(dart.void, [core.double, core.double])))(),
    WidgetN: () => (T.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndWidgetNToWidget: () => (T.BuildContextAndWidgetNToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T.WidgetN()])))()
>>>>>>> feature-b
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
<<<<<<< HEAD
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C1() {
      return C[1] = dart.constList([], custom_paint.CustomPainterSemantics);
    },
    get C2() {
      return C[2] = dart.constList([], semantics.SemanticsNode);
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "package:flutter/src/rendering/custom_paint.dart",
    "file:///C:/flutter/packages/flutter/lib/src/rendering/custom_paint.dart"
  ];
  var _repaint = dart.privateName(custom_paint, "CustomPainter._repaint");
  var _repaint$ = dart.privateName(custom_paint, "_repaint");
  custom_paint.CustomPainter = class CustomPainter extends change_notifier.Listenable {
    get [_repaint$]() {
      return this[_repaint];
    }
    set [_repaint$](value) {
      super[_repaint$] = value;
    }
    addListener(listener) {
      let t0;
      t0 = this[_repaint$];
      return t0 == null ? null : t0.addListener(listener);
    }
    removeListener(listener) {
      let t0;
      t0 = this[_repaint$];
      return t0 == null ? null : t0.removeListener(listener);
    }
    get semanticsBuilder() {
      return null;
    }
    shouldRebuildSemantics(oldDelegate) {
      custom_paint.CustomPainter.as(oldDelegate);
      return this.shouldRepaint(oldDelegate);
    }
    hitTest(position) {
      return null;
    }
    toString() {
      let t0, t0$;
      return diagnostics.describeIdentity(this) + "(" + dart.str((t0$ = (t0 = this[_repaint$], t0 == null ? null : dart.toString(t0)), t0$ == null ? "" : t0$)) + ")";
    }
  };
  (custom_paint.CustomPainter.new = function(opts) {
    let repaint = opts && 'repaint' in opts ? opts.repaint : null;
    this[_repaint] = repaint;
    custom_paint.CustomPainter.__proto__.new.call(this);
    ;
  }).prototype = custom_paint.CustomPainter.prototype;
  dart.addTypeTests(custom_paint.CustomPainter);
  dart.addTypeCaches(custom_paint.CustomPainter);
  dart.setMethodSignature(custom_paint.CustomPainter, () => ({
    __proto__: dart.getMethods(custom_paint.CustomPainter.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    shouldRebuildSemantics: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    hitTest: dart.fnType(dart.nullable(core.bool), [ui.Offset])
  }));
  dart.setGetterSignature(custom_paint.CustomPainter, () => ({
    __proto__: dart.getGetters(custom_paint.CustomPainter.__proto__),
    semanticsBuilder: dart.nullable(dart.fnType(core.List$(custom_paint.CustomPainterSemantics), [ui.Size]))
  }));
  dart.setLibraryUri(custom_paint.CustomPainter, I[0]);
  dart.setFieldSignature(custom_paint.CustomPainter, () => ({
    __proto__: dart.getFields(custom_paint.CustomPainter.__proto__),
    [_repaint$]: dart.finalFieldType(dart.nullable(change_notifier.Listenable))
  }));
  dart.defineExtensionMethods(custom_paint.CustomPainter, ['toString']);
  var key$ = dart.privateName(custom_paint, "CustomPainterSemantics.key");
  var rect$ = dart.privateName(custom_paint, "CustomPainterSemantics.rect");
  var transform$ = dart.privateName(custom_paint, "CustomPainterSemantics.transform");
  var properties$ = dart.privateName(custom_paint, "CustomPainterSemantics.properties");
  var tags$ = dart.privateName(custom_paint, "CustomPainterSemantics.tags");
  custom_paint.CustomPainterSemantics = class CustomPainterSemantics extends core.Object {
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get rect() {
      return this[rect$];
    }
    set rect(value) {
      super.rect = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    get properties() {
      return this[properties$];
    }
    set properties(value) {
      super.properties = value;
    }
    get tags() {
      return this[tags$];
    }
    set tags(value) {
      super.tags = value;
    }
  };
  (custom_paint.CustomPainterSemantics.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let properties = opts && 'properties' in opts ? opts.properties : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let tags = opts && 'tags' in opts ? opts.tags : null;
    this[key$] = key;
    this[rect$] = rect;
    this[properties$] = properties;
    this[transform$] = transform;
    this[tags$] = tags;
    if (!(rect !== null)) dart.assertFailed(null, I[1], 299, 15, "rect != null");
    if (!(properties !== null)) dart.assertFailed(null, I[1], 300, 15, "properties != null");
    ;
  }).prototype = custom_paint.CustomPainterSemantics.prototype;
  dart.addTypeTests(custom_paint.CustomPainterSemantics);
  dart.addTypeCaches(custom_paint.CustomPainterSemantics);
  dart.setLibraryUri(custom_paint.CustomPainterSemantics, I[0]);
  dart.setFieldSignature(custom_paint.CustomPainterSemantics, () => ({
    __proto__: dart.getFields(custom_paint.CustomPainterSemantics.__proto__),
    key: dart.finalFieldType(dart.nullable(key.Key)),
    rect: dart.finalFieldType(ui.Rect),
    transform: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4)),
    properties: dart.finalFieldType(semantics.SemanticsProperties),
    tags: dart.finalFieldType(dart.nullable(core.Set$(semantics.SemanticsTag)))
  }));
  var isComplex$ = dart.privateName(custom_paint, "RenderCustomPaint.isComplex");
  var willChange$ = dart.privateName(custom_paint, "RenderCustomPaint.willChange");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _backgroundSemanticsBuilder = dart.privateName(custom_paint, "_backgroundSemanticsBuilder");
  var _foregroundSemanticsBuilder = dart.privateName(custom_paint, "_foregroundSemanticsBuilder");
  var _backgroundSemanticsNodes = dart.privateName(custom_paint, "_backgroundSemanticsNodes");
  var _foregroundSemanticsNodes = dart.privateName(custom_paint, "_foregroundSemanticsNodes");
  var _painter = dart.privateName(custom_paint, "_painter");
  var _foregroundPainter = dart.privateName(custom_paint, "_foregroundPainter");
  var _preferredSize = dart.privateName(custom_paint, "_preferredSize");
  var _didUpdatePainter = dart.privateName(custom_paint, "_didUpdatePainter");
  var _paintWithPainter = dart.privateName(custom_paint, "_paintWithPainter");
  var _setRasterCacheHints = dart.privateName(custom_paint, "_setRasterCacheHints");
  custom_paint.RenderCustomPaint = class RenderCustomPaint extends proxy_box.RenderProxyBox {
    get isComplex() {
      return this[isComplex$];
    }
    set isComplex(value) {
      this[isComplex$] = value;
    }
    get willChange() {
      return this[willChange$];
    }
    set willChange(value) {
      this[willChange$] = value;
    }
    get painter() {
      return this[_painter];
    }
    set painter(value) {
      if (dart.equals(this[_painter], value)) return;
      let oldPainter = this[_painter];
      this[_painter] = value;
      this[_didUpdatePainter](this[_painter], oldPainter);
    }
    get foregroundPainter() {
      return this[_foregroundPainter];
    }
    set foregroundPainter(value) {
      if (dart.equals(this[_foregroundPainter], value)) return;
      let oldPainter = this[_foregroundPainter];
      this[_foregroundPainter] = value;
      this[_didUpdatePainter](this[_foregroundPainter], oldPainter);
    }
    [_didUpdatePainter](newPainter, oldPainter) {
      let t0, t0$;
      if (newPainter == null) {
        if (!(oldPainter != null)) dart.assertFailed(null, I[1], 435, 14, "oldPainter != null");
        this.markNeedsPaint();
      } else if (oldPainter == null || !dart.runtimeType(newPainter)._equals(dart.runtimeType(oldPainter)) || newPainter.shouldRepaint(oldPainter)) {
        this.markNeedsPaint();
      }
      if (this.attached) {
        t0 = oldPainter;
        t0 == null ? null : t0.removeListener(dart.bind(this, 'markNeedsPaint'));
        t0$ = newPainter;
        t0$ == null ? null : t0$.addListener(dart.bind(this, 'markNeedsPaint'));
      }
      if (newPainter == null) {
        if (!(oldPainter != null)) dart.assertFailed(null, I[1], 449, 14, "oldPainter != null");
        if (this.attached) this.markNeedsSemanticsUpdate();
      } else if (oldPainter == null || !dart.runtimeType(newPainter)._equals(dart.runtimeType(oldPainter)) || newPainter.shouldRebuildSemantics(oldPainter)) {
        this.markNeedsSemanticsUpdate();
      }
    }
    get preferredSize() {
      return this[_preferredSize];
    }
    set preferredSize(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 469, 12, "value != null");
      if (this.preferredSize._equals(value)) return;
      this[_preferredSize] = value;
      this.markNeedsLayout();
    }
    computeMinIntrinsicWidth(height) {
      if (this.child == null) return this.preferredSize.width[$isFinite] ? this.preferredSize.width : 0.0;
      return super.computeMinIntrinsicWidth(height);
    }
    computeMaxIntrinsicWidth(height) {
      if (this.child == null) return this.preferredSize.width[$isFinite] ? this.preferredSize.width : 0.0;
      return super.computeMaxIntrinsicWidth(height);
    }
    computeMinIntrinsicHeight(width) {
      if (this.child == null) return this.preferredSize.height[$isFinite] ? this.preferredSize.height : 0.0;
      return super.computeMinIntrinsicHeight(width);
    }
    computeMaxIntrinsicHeight(width) {
      if (this.child == null) return this.preferredSize.height[$isFinite] ? this.preferredSize.height : 0.0;
      return super.computeMaxIntrinsicHeight(width);
    }
    attach(owner) {
      let t0, t0$;
      object.PipelineOwner.as(owner);
      super.attach(owner);
      t0 = this[_painter];
      t0 == null ? null : t0.addListener(dart.bind(this, 'markNeedsPaint'));
      t0$ = this[_foregroundPainter];
      t0$ == null ? null : t0$.addListener(dart.bind(this, 'markNeedsPaint'));
    }
    detach() {
      let t0, t0$;
      t0 = this[_painter];
      t0 == null ? null : t0.removeListener(dart.bind(this, 'markNeedsPaint'));
      t0$ = this[_foregroundPainter];
      t0$ == null ? null : t0$.removeListener(dart.bind(this, 'markNeedsPaint'));
      super.detach();
    }
    hitTestChildren(result, opts) {
      let t0;
      let position = opts && 'position' in opts ? opts.position : null;
      if (this[_foregroundPainter] != null && dart.test((t0 = dart.nullCheck(this[_foregroundPainter]).hitTest(position), t0 == null ? false : t0))) return true;
      return super.hitTestChildren(result, {position: position});
    }
    hitTestSelf(position) {
      let t0;
      return this[_painter] != null && dart.test((t0 = dart.nullCheck(this[_painter]).hitTest(position), t0 == null ? true : t0));
    }
    performLayout() {
      super.performLayout();
      this.markNeedsSemanticsUpdate();
    }
    computeSizeForNoChild(constraints) {
      return constraints.constrain(this.preferredSize);
    }
    [_paintWithPainter](canvas, offset, painter) {
      let debugPreviousCanvasSaveCount = null;
      function debugPreviousCanvasSaveCount$35get() {
        let t1;
        t1 = debugPreviousCanvasSaveCount;
        return t1 == null ? dart.throw(new _internal.LateError.localNI("debugPreviousCanvasSaveCount")) : t1;
      }
      dart.fn(debugPreviousCanvasSaveCount$35get, T.VoidToint());
      function debugPreviousCanvasSaveCount$35set(t2) {
        return debugPreviousCanvasSaveCount = t2;
      }
      dart.fn(debugPreviousCanvasSaveCount$35set, T.intTodynamic());
      canvas.save();
      if (!dart.fn(() => {
        debugPreviousCanvasSaveCount$35set(canvas.getSaveCount());
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 557, 12, "() {\r\n      debugPreviousCanvasSaveCount = canvas.getSaveCount();\r\n      return true;\r\n    }()");
      if (!offset._equals(ui.Offset.zero)) canvas.translate(offset.dx, offset.dy);
      painter.paint(canvas, this.size);
      if (!dart.fn(() => {
        let debugNewCanvasSaveCount = canvas.getSaveCount();
        if (debugNewCanvasSaveCount > debugPreviousCanvasSaveCount$35get()) {
          dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("The " + dart.str(painter) + " custom painter called canvas.save() or canvas.saveLayer() at least " + dart.str(debugNewCanvasSaveCount - debugPreviousCanvasSaveCount$35get()) + " more " + "time" + (debugNewCanvasSaveCount - debugPreviousCanvasSaveCount$35get() === 1 ? "" : "s") + " " + "than it called canvas.restore()."), new assertions.ErrorDescription.new("This leaves the canvas in an inconsistent state and will probably result in a broken display."), new assertions.ErrorHint.new("You must pair each call to save()/saveLayer() with a later matching call to restore().")])));
        }
        if (debugNewCanvasSaveCount < debugPreviousCanvasSaveCount$35get()) {
          dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("The " + dart.str(painter) + " custom painter called canvas.restore() " + dart.str(debugPreviousCanvasSaveCount$35get() - debugNewCanvasSaveCount) + " more " + "time" + (debugPreviousCanvasSaveCount$35get() - debugNewCanvasSaveCount === 1 ? "" : "s") + " " + "than it called canvas.save() or canvas.saveLayer()."), new assertions.ErrorDescription.new("This leaves the canvas in an inconsistent state and will result in a broken display."), new assertions.ErrorHint.new("You should only call restore() if you first called save() or saveLayer().")])));
        }
        return debugNewCanvasSaveCount === debugPreviousCanvasSaveCount$35get();
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 564, 12, "() {\r\n      // This isn't perfect. For example, we can't catch the case of\r\n      // someone first restoring, then setting a transform or whatnot,\r\n      // then saving.\r\n      // If this becomes a real problem, we could add logic to the\r\n      // Canvas class to lock the canvas at a particular save count\r\n      // such that restore() fails if it would take the lock count\r\n      // below that number.\r\n      final int debugNewCanvasSaveCount = canvas.getSaveCount();\r\n      if (debugNewCanvasSaveCount > debugPreviousCanvasSaveCount) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary(\r\n            'The $painter custom painter called canvas.save() or canvas.saveLayer() at least '\r\n            '${debugNewCanvasSaveCount - debugPreviousCanvasSaveCount} more '\r\n            'time${debugNewCanvasSaveCount - debugPreviousCanvasSaveCount == 1 ? '' : 's' } '\r\n            'than it called canvas.restore().',\r\n          ),\r\n          ErrorDescription('This leaves the canvas in an inconsistent state and will probably result in a broken display.'),\r\n          ErrorHint('You must pair each call to save()/saveLayer() with a later matching call to restore().'),\r\n        ]);\r\n      }\r\n      if (debugNewCanvasSaveCount < debugPreviousCanvasSaveCount) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary(\r\n            'The $painter custom painter called canvas.restore() '\r\n            '${debugPreviousCanvasSaveCount - debugNewCanvasSaveCount} more '\r\n            'time${debugPreviousCanvasSaveCount - debugNewCanvasSaveCount == 1 ? '' : 's' } '\r\n            'than it called canvas.save() or canvas.saveLayer().',\r\n          ),\r\n          ErrorDescription('This leaves the canvas in an inconsistent state and will result in a broken display.'),\r\n          ErrorHint('You should only call restore() if you first called save() or saveLayer().'),\r\n        ]);\r\n      }\r\n      return debugNewCanvasSaveCount == debugPreviousCanvasSaveCount;\r\n    }()");
      canvas.restore();
    }
    paint(context, offset) {
      if (this[_painter] != null) {
        this[_paintWithPainter](context.canvas, offset, dart.nullCheck(this[_painter]));
        this[_setRasterCacheHints](context);
      }
      super.paint(context, offset);
      if (this[_foregroundPainter] != null) {
        this[_paintWithPainter](context.canvas, offset, dart.nullCheck(this[_foregroundPainter]));
        this[_setRasterCacheHints](context);
      }
    }
    [_setRasterCacheHints](context) {
      if (this.isComplex) context.setIsComplexHint();
      if (this.willChange) context.setWillChangeHint();
    }
    describeSemanticsConfiguration(config) {
      let t4, t4$;
      super.describeSemanticsConfiguration(config);
      this[_backgroundSemanticsBuilder] = (t4 = this.painter, t4 == null ? null : t4.semanticsBuilder);
      this[_foregroundSemanticsBuilder] = (t4$ = this.foregroundPainter, t4$ == null ? null : t4$.semanticsBuilder);
      config.isSemanticBoundary = this[_backgroundSemanticsBuilder] != null || this[_foregroundSemanticsBuilder] != null;
    }
    assembleSemanticsNode(node, config, children) {
      if (!dart.fn(() => {
        if (this.child == null && children[$isNotEmpty]) {
          dart.throw(new assertions.FlutterError.fromParts(T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new(dart.str(this[$runtimeType]) + " does not have a child widget but received a non-empty list of child SemanticsNode:\n" + children[$join]("\n"))])));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 648, 12, "() {\r\n      if (child == null && children.isNotEmpty) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary(\r\n            '$runtimeType does not have a child widget but received a non-empty list of child SemanticsNode:\\n'\r\n            '${children.join('\\n')}',\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      let backgroundSemantics = this[_backgroundSemanticsBuilder] != null ? dart.nullCheck(this[_backgroundSemanticsBuilder])(this.size) : C[1] || CT.C1;
      this[_backgroundSemanticsNodes] = custom_paint.RenderCustomPaint._updateSemanticsChildren(this[_backgroundSemanticsNodes], backgroundSemantics);
      let foregroundSemantics = this[_foregroundSemanticsBuilder] != null ? dart.nullCheck(this[_foregroundSemanticsBuilder])(this.size) : C[1] || CT.C1;
      this[_foregroundSemanticsNodes] = custom_paint.RenderCustomPaint._updateSemanticsChildren(this[_foregroundSemanticsNodes], foregroundSemantics);
      let hasBackgroundSemantics = this[_backgroundSemanticsNodes] != null && dart.nullCheck(this[_backgroundSemanticsNodes])[$isNotEmpty];
      let hasForegroundSemantics = this[_foregroundSemanticsNodes] != null && dart.nullCheck(this[_foregroundSemanticsNodes])[$isNotEmpty];
      let finalChildren = (() => {
        let t4 = T.JSArrayOfSemanticsNode().of([]);
        if (hasBackgroundSemantics) t4[$addAll](dart.nullCheck(this[_backgroundSemanticsNodes]));
        t4[$addAll](children);
        if (hasForegroundSemantics) t4[$addAll](dart.nullCheck(this[_foregroundSemanticsNodes]));
        return t4;
      })();
      super.assembleSemanticsNode(node, config, finalChildren);
    }
    clearSemantics() {
      super.clearSemantics();
      this[_backgroundSemanticsNodes] = null;
      this[_foregroundSemanticsNodes] = null;
    }
    static _updateSemanticsChildren(oldSemantics, newChildSemantics) {
      let t5, t5$;
      oldSemantics = (t5 = oldSemantics, t5 == null ? C[2] || CT.C2 : t5);
      newChildSemantics = (t5$ = newChildSemantics, t5$ == null ? C[1] || CT.C1 : t5$);
      if (!dart.fn(() => {
        let keys = new (T.LinkedMapOfKey$int()).new();
        let information = T.JSArrayOfDiagnosticsNode().of([]);
        for (let i = 0; i < dart.nullCheck(newChildSemantics)[$length]; i = i + 1) {
          let child = newChildSemantics[$_get](i);
          if (child.key != null) {
            if (keys[$containsKey](child.key)) {
              information[$add](new assertions.ErrorDescription.new("- duplicate key " + dart.str(child.key) + " found at position " + dart.str(i)));
            }
            keys[$_set](dart.nullCheck(child.key), i);
          }
        }
        if (information[$isNotEmpty]) {
          information[$insert](0, new assertions.ErrorSummary.new("Failed to update the list of CustomPainterSemantics:"));
          dart.throw(new assertions.FlutterError.fromParts(information));
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 716, 12, "() {\r\n      final Map<Key, int> keys = HashMap<Key, int>();\r\n      final List<DiagnosticsNode> information = <DiagnosticsNode>[];\r\n      for (int i = 0; i < newChildSemantics!.length; i += 1) {\r\n        final CustomPainterSemantics child = newChildSemantics[i];\r\n        if (child.key != null) {\r\n          if (keys.containsKey(child.key)) {\r\n            information.add(ErrorDescription('- duplicate key ${child.key} found at position $i'));\r\n          }\r\n          keys[child.key!] = i;\r\n        }\r\n      }\r\n\r\n      if (information.isNotEmpty) {\r\n        information.insert(0, ErrorSummary('Failed to update the list of CustomPainterSemantics:'));\r\n        throw FlutterError.fromParts(information);\r\n      }\r\n\r\n      return true;\r\n    }()");
      let newChildrenTop = 0;
      let oldChildrenTop = 0;
      let newChildrenBottom = newChildSemantics[$length] - 1;
      let oldChildrenBottom = oldSemantics[$length] - 1;
      let newChildren = T.ListOfSemanticsNodeN().filled(newChildSemantics[$length], null, {growable: false});
      while (oldChildrenTop <= oldChildrenBottom && newChildrenTop <= newChildrenBottom) {
        let oldChild = oldSemantics[$_get](oldChildrenTop);
        let newSemantics = newChildSemantics[$_get](newChildrenTop);
        if (!custom_paint.RenderCustomPaint._canUpdateSemanticsChild(oldChild, newSemantics)) break;
        let newChild = custom_paint.RenderCustomPaint._updateSemanticsChild(oldChild, newSemantics);
        newChildren[$_set](newChildrenTop, newChild);
        newChildrenTop = newChildrenTop + 1;
        oldChildrenTop = oldChildrenTop + 1;
      }
      while (oldChildrenTop <= oldChildrenBottom && newChildrenTop <= newChildrenBottom) {
        let oldChild = oldSemantics[$_get](oldChildrenBottom);
        let newChild = newChildSemantics[$_get](newChildrenBottom);
        if (!custom_paint.RenderCustomPaint._canUpdateSemanticsChild(oldChild, newChild)) break;
        oldChildrenBottom = oldChildrenBottom - 1;
        newChildrenBottom = newChildrenBottom - 1;
      }
      let haveOldChildren = oldChildrenTop <= oldChildrenBottom;
      let oldKeyedChildren = null;
      function oldKeyedChildren$35get() {
        let t6;
        t6 = oldKeyedChildren;
        return t6 == null ? dart.throw(new _internal.LateError.localNI("oldKeyedChildren")) : t6;
      }
      dart.fn(oldKeyedChildren$35get, T.VoidToMapOfKey$SemanticsNode());
      function oldKeyedChildren$35set(t7) {
        if (oldKeyedChildren == null)
          return oldKeyedChildren = t7;
        else
          dart.throw(new _internal.LateError.localAI("oldKeyedChildren"));
      }
      dart.fn(oldKeyedChildren$35set, T.MapOfKey$SemanticsNodeTodynamic());
      if (haveOldChildren) {
        oldKeyedChildren$35set(new (T.LinkedMapOfKey$SemanticsNode()).new());
        while (oldChildrenTop <= oldChildrenBottom) {
          let oldChild = oldSemantics[$_get](oldChildrenTop);
          if (oldChild.key != null) oldKeyedChildren$35get()[$_set](dart.nullCheck(oldChild.key), oldChild);
          oldChildrenTop = oldChildrenTop + 1;
        }
      }
      while (newChildrenTop <= newChildrenBottom) {
        let oldChild = null;
        let newSemantics = newChildSemantics[$_get](newChildrenTop);
        if (haveOldChildren) {
          let key = newSemantics.key;
          if (key != null) {
            oldChild = oldKeyedChildren$35get()[$_get](key);
            if (oldChild != null) {
              if (custom_paint.RenderCustomPaint._canUpdateSemanticsChild(oldChild, newSemantics)) {
                oldKeyedChildren$35get()[$remove](key);
              } else {
                oldChild = null;
              }
            }
          }
        }
        if (!(oldChild == null || custom_paint.RenderCustomPaint._canUpdateSemanticsChild(oldChild, newSemantics))) dart.assertFailed(null, I[1], 799, 14, "oldChild == null || _canUpdateSemanticsChild(oldChild, newSemantics)");
        let newChild = custom_paint.RenderCustomPaint._updateSemanticsChild(oldChild, newSemantics);
        if (!(dart.equals(oldChild, newChild) || oldChild == null)) dart.assertFailed(null, I[1], 801, 14, "oldChild == newChild || oldChild == null");
        newChildren[$_set](newChildrenTop, newChild);
        newChildrenTop = newChildrenTop + 1;
      }
      if (!(oldChildrenTop === oldChildrenBottom + 1)) dart.assertFailed(null, I[1], 807, 12, "oldChildrenTop == oldChildrenBottom + 1");
      if (!(newChildrenTop === newChildrenBottom + 1)) dart.assertFailed(null, I[1], 808, 12, "newChildrenTop == newChildrenBottom + 1");
      if (!(newChildSemantics[$length] - newChildrenTop === oldSemantics[$length] - oldChildrenTop)) dart.assertFailed(null, I[1], 809, 12, "newChildSemantics.length - newChildrenTop == oldSemantics.length - oldChildrenTop");
      newChildrenBottom = newChildSemantics[$length] - 1;
      oldChildrenBottom = oldSemantics[$length] - 1;
      while (oldChildrenTop <= oldChildrenBottom && newChildrenTop <= newChildrenBottom) {
        let oldChild = oldSemantics[$_get](oldChildrenTop);
        let newSemantics = newChildSemantics[$_get](newChildrenTop);
        if (!custom_paint.RenderCustomPaint._canUpdateSemanticsChild(oldChild, newSemantics)) dart.assertFailed(null, I[1], 817, 14, "_canUpdateSemanticsChild(oldChild, newSemantics)");
        let newChild = custom_paint.RenderCustomPaint._updateSemanticsChild(oldChild, newSemantics);
        if (!oldChild[$_equals](newChild)) dart.assertFailed(null, I[1], 819, 14, "oldChild == newChild");
        newChildren[$_set](newChildrenTop, newChild);
        newChildrenTop = newChildrenTop + 1;
        oldChildrenTop = oldChildrenTop + 1;
      }
      if (!dart.fn(() => {
        for (let node of newChildren) {
          if (!(node != null)) dart.assertFailed(null, I[1], 827, 16, "node != null");
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 825, 12, "() {\r\n      for (final SemanticsNode? node in newChildren) {\r\n        assert(node != null);\r\n      }\r\n      return true;\r\n    }()");
      return newChildren[$cast](semantics.SemanticsNode);
    }
    static _canUpdateSemanticsChild(oldChild, newSemantics) {
      return dart.equals(oldChild.key, newSemantics.key);
    }
    static _updateSemanticsChild(oldChild, newSemantics) {
      let t9, t9$;
      if (!(oldChild == null || custom_paint.RenderCustomPaint._canUpdateSemanticsChild(oldChild, newSemantics))) dart.assertFailed(null, I[1], 848, 12, "oldChild == null || _canUpdateSemanticsChild(oldChild, newSemantics)");
      let newChild = (t9 = oldChild, t9 == null ? new semantics.SemanticsNode.new({key: newSemantics.key}) : t9);
      let properties = newSemantics.properties;
      let config = new semantics.SemanticsConfiguration.new();
      if (properties.sortKey != null) {
        config.sortKey = properties.sortKey;
      }
      if (properties.checked != null) {
        config.isChecked = properties.checked;
      }
      if (properties.selected != null) {
        config.isSelected = dart.nullCheck(properties.selected);
      }
      if (properties.button != null) {
        config.isButton = dart.nullCheck(properties.button);
      }
      if (properties.link != null) {
        config.isLink = dart.nullCheck(properties.link);
      }
      if (properties.textField != null) {
        config.isTextField = dart.nullCheck(properties.textField);
      }
      if (properties.slider != null) {
        config.isSlider = dart.nullCheck(properties.slider);
      }
      if (properties.keyboardKey != null) {
        config.isKeyboardKey = dart.nullCheck(properties.keyboardKey);
      }
      if (properties.readOnly != null) {
        config.isReadOnly = dart.nullCheck(properties.readOnly);
      }
      if (properties.focusable != null) {
        config.isFocusable = dart.nullCheck(properties.focusable);
      }
      if (properties.focused != null) {
        config.isFocused = dart.nullCheck(properties.focused);
      }
      if (properties.enabled != null) {
        config.isEnabled = properties.enabled;
      }
      if (properties.inMutuallyExclusiveGroup != null) {
        config.isInMutuallyExclusiveGroup = dart.nullCheck(properties.inMutuallyExclusiveGroup);
      }
      if (properties.obscured != null) {
        config.isObscured = dart.nullCheck(properties.obscured);
      }
      if (properties.multiline != null) {
        config.isMultiline = dart.nullCheck(properties.multiline);
      }
      if (properties.hidden != null) {
        config.isHidden = dart.nullCheck(properties.hidden);
      }
      if (properties.header != null) {
        config.isHeader = dart.nullCheck(properties.header);
      }
      if (properties.scopesRoute != null) {
        config.scopesRoute = dart.nullCheck(properties.scopesRoute);
      }
      if (properties.namesRoute != null) {
        config.namesRoute = dart.nullCheck(properties.namesRoute);
      }
      if (properties.liveRegion != null) {
        config.liveRegion = dart.nullCheck(properties.liveRegion);
      }
      if (properties.maxValueLength != null) {
        config.maxValueLength = properties.maxValueLength;
      }
      if (properties.currentValueLength != null) {
        config.currentValueLength = properties.currentValueLength;
      }
      if (properties.toggled != null) {
        config.isToggled = properties.toggled;
      }
      if (properties.image != null) {
        config.isImage = dart.nullCheck(properties.image);
      }
      if (properties.label != null) {
        config.label = dart.nullCheck(properties.label);
      }
      if (properties.value != null) {
        config.value = dart.nullCheck(properties.value);
      }
      if (properties.increasedValue != null) {
        config.increasedValue = dart.nullCheck(properties.increasedValue);
      }
      if (properties.decreasedValue != null) {
        config.decreasedValue = dart.nullCheck(properties.decreasedValue);
      }
      if (properties.hint != null) {
        config.hint = dart.nullCheck(properties.hint);
      }
      if (properties.textDirection != null) {
        config.textDirection = properties.textDirection;
      }
      if (properties.onTap != null) {
        config.onTap = properties.onTap;
      }
      if (properties.onLongPress != null) {
        config.onLongPress = properties.onLongPress;
      }
      if (properties.onScrollLeft != null) {
        config.onScrollLeft = properties.onScrollLeft;
      }
      if (properties.onScrollRight != null) {
        config.onScrollRight = properties.onScrollRight;
      }
      if (properties.onScrollUp != null) {
        config.onScrollUp = properties.onScrollUp;
      }
      if (properties.onScrollDown != null) {
        config.onScrollDown = properties.onScrollDown;
      }
      if (properties.onIncrease != null) {
        config.onIncrease = properties.onIncrease;
      }
      if (properties.onDecrease != null) {
        config.onDecrease = properties.onDecrease;
      }
      if (properties.onCopy != null) {
        config.onCopy = properties.onCopy;
      }
      if (properties.onCut != null) {
        config.onCut = properties.onCut;
      }
      if (properties.onPaste != null) {
        config.onPaste = properties.onPaste;
      }
      if (properties.onMoveCursorForwardByCharacter != null) {
        config.onMoveCursorForwardByCharacter = properties.onMoveCursorForwardByCharacter;
      }
      if (properties.onMoveCursorBackwardByCharacter != null) {
        config.onMoveCursorBackwardByCharacter = properties.onMoveCursorBackwardByCharacter;
      }
      if (properties.onMoveCursorForwardByWord != null) {
        config.onMoveCursorForwardByWord = properties.onMoveCursorForwardByWord;
      }
      if (properties.onMoveCursorBackwardByWord != null) {
        config.onMoveCursorBackwardByWord = properties.onMoveCursorBackwardByWord;
      }
      if (properties.onSetSelection != null) {
        config.onSetSelection = properties.onSetSelection;
      }
      if (properties.onSetText != null) {
        config.onSetText = properties.onSetText;
      }
      if (properties.onDidGainAccessibilityFocus != null) {
        config.onDidGainAccessibilityFocus = properties.onDidGainAccessibilityFocus;
      }
      if (properties.onDidLoseAccessibilityFocus != null) {
        config.onDidLoseAccessibilityFocus = properties.onDidLoseAccessibilityFocus;
      }
      if (properties.onDismiss != null) {
        config.onDismiss = properties.onDismiss;
      }
      newChild.updateWith({config: config, childrenInInversePaintOrder: C[2] || CT.C2});
      t9$ = newChild;
      (() => {
        t9$.rect = newSemantics.rect;
        t9$.transform = newSemantics.transform;
        t9$.tags = newSemantics.tags;
        return t9$;
      })();
      return newChild;
    }
  };
  (custom_paint.RenderCustomPaint.new = function(opts) {
    let painter = opts && 'painter' in opts ? opts.painter : null;
    let foregroundPainter = opts && 'foregroundPainter' in opts ? opts.foregroundPainter : null;
    let preferredSize = opts && 'preferredSize' in opts ? opts.preferredSize : C[0] || CT.C0;
    let isComplex = opts && 'isComplex' in opts ? opts.isComplex : false;
    let willChange = opts && 'willChange' in opts ? opts.willChange : false;
    let child = opts && 'child' in opts ? opts.child : null;
    this[_backgroundSemanticsBuilder] = null;
    this[_foregroundSemanticsBuilder] = null;
    this[_backgroundSemanticsNodes] = null;
    this[_foregroundSemanticsNodes] = null;
    this[isComplex$] = isComplex;
    this[willChange$] = willChange;
    if (!(preferredSize !== null)) dart.assertFailed(null, I[1], 376, 15, "preferredSize != null");
    this[_painter] = painter;
    this[_foregroundPainter] = foregroundPainter;
    this[_preferredSize] = preferredSize;
    custom_paint.RenderCustomPaint.__proto__.new.call(this, child);
    ;
  }).prototype = custom_paint.RenderCustomPaint.prototype;
  dart.addTypeTests(custom_paint.RenderCustomPaint);
  dart.addTypeCaches(custom_paint.RenderCustomPaint);
  dart.setMethodSignature(custom_paint.RenderCustomPaint, () => ({
    __proto__: dart.getMethods(custom_paint.RenderCustomPaint.__proto__),
    [_didUpdatePainter]: dart.fnType(dart.void, [dart.nullable(custom_paint.CustomPainter), dart.nullable(custom_paint.CustomPainter)]),
    [_paintWithPainter]: dart.fnType(dart.void, [ui.Canvas, ui.Offset, custom_paint.CustomPainter]),
    [_setRasterCacheHints]: dart.fnType(dart.void, [object.PaintingContext])
  }));
  dart.setGetterSignature(custom_paint.RenderCustomPaint, () => ({
    __proto__: dart.getGetters(custom_paint.RenderCustomPaint.__proto__),
    painter: dart.nullable(custom_paint.CustomPainter),
    foregroundPainter: dart.nullable(custom_paint.CustomPainter),
    preferredSize: ui.Size
  }));
  dart.setSetterSignature(custom_paint.RenderCustomPaint, () => ({
    __proto__: dart.getSetters(custom_paint.RenderCustomPaint.__proto__),
    painter: dart.nullable(custom_paint.CustomPainter),
    foregroundPainter: dart.nullable(custom_paint.CustomPainter),
    preferredSize: ui.Size
  }));
  dart.setLibraryUri(custom_paint.RenderCustomPaint, I[0]);
  dart.setFieldSignature(custom_paint.RenderCustomPaint, () => ({
    __proto__: dart.getFields(custom_paint.RenderCustomPaint.__proto__),
    [_painter]: dart.fieldType(dart.nullable(custom_paint.CustomPainter)),
    [_foregroundPainter]: dart.fieldType(dart.nullable(custom_paint.CustomPainter)),
    [_preferredSize]: dart.fieldType(ui.Size),
    isComplex: dart.fieldType(core.bool),
    willChange: dart.fieldType(core.bool),
    [_backgroundSemanticsBuilder]: dart.fieldType(dart.nullable(dart.fnType(core.List$(custom_paint.CustomPainterSemantics), [ui.Size]))),
    [_foregroundSemanticsBuilder]: dart.fieldType(dart.nullable(dart.fnType(core.List$(custom_paint.CustomPainterSemantics), [ui.Size]))),
    [_backgroundSemanticsNodes]: dart.fieldType(dart.nullable(core.List$(semantics.SemanticsNode))),
    [_foregroundSemanticsNodes]: dart.fieldType(dart.nullable(core.List$(semantics.SemanticsNode)))
  }));
  dart.trackLibraries("packages/flutter/src/rendering/custom_paint.dart", {
    "package:flutter/src/rendering/custom_paint.dart": custom_paint
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["custom_paint.dart"],"names":[],"mappings":"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","file":"../../../../../../../E:/packages/flutter/src/rendering/custom_paint.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__custom_paint: custom_paint
  };
}));

//# sourceMappingURL=custom_paint.dart.lib.js.map
=======
        __proto__: progress_indicator._ActivityIndicatorType.prototype,
        [_name$]: "_ActivityIndicatorType.material",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: progress_indicator._ActivityIndicatorType.prototype,
        [_name$]: "_ActivityIndicatorType.adaptive",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], progress_indicator._ActivityIndicatorType);
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "label",
        [_Location_column]: 7,
        [_Location_line]: 137,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "value",
        [_Location_column]: 7,
        [_Location_line]: 138,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 139,
        [_Location_file]: null
      });
    },
    get C4() {
      return C[4] = dart.constList([C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7], widget_inspector._Location);
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[4] || CT.C4,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 136,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.rtl",
        index: 0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.ltr",
        index: 1
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 0.8,
        [Cubic_b]: 0,
        [Cubic_a]: 0.2
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: curves.Interval.prototype,
        [Interval_curve]: C[11] || CT.C11,
        [Interval_end]: 0.4166666666666667,
        [Interval_begin]: 0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 1,
        [Cubic_b]: 0,
        [Cubic_a]: 0.4
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: curves.Interval.prototype,
        [Interval_curve]: C[13] || CT.C13,
        [Interval_end]: 0.6016666666666667,
        [Interval_begin]: 0.185
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 0.65,
        [Cubic_b]: 0,
        [Cubic_a]: 0
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: curves.Interval.prototype,
        [Interval_curve]: C[15] || CT.C15,
        [Interval_end]: 0.8705555555555555,
        [Interval_begin]: 0.5555555555555556
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 0.45,
        [Cubic_b]: 0,
        [Cubic_a]: 0.1
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: curves.Interval.prototype,
        [Interval_curve]: C[17] || CT.C17,
        [Interval_end]: 1,
        [Interval_begin]: 0.7038888888888889
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 1800000
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 11,
        [_Location_line]: 379,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.constList([C[21] || CT.C21], widget_inspector._Location);
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[20] || CT.C20,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 378,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "constraints",
        [_Location_column]: 9,
        [_Location_line]: 374,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 378,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.constList([C[24] || CT.C24, C[25] || CT.C25], widget_inspector._Location);
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[23] || CT.C23,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 373,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "animation",
        [_Location_column]: 7,
        [_Location_line]: 399,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 400,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.constList([C[28] || CT.C28, C[29] || CT.C29], widget_inspector._Location);
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[27] || CT.C27,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 398,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 2961926000.0
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 39,
        [_Location_line]: 657,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.constList([C[33] || CT.C33], widget_inspector._Location);
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[32] || CT.C32,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 657,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: box.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 36,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 36
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 11,
        [_Location_line]: 669,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.constList([C[37] || CT.C37], widget_inspector._Location);
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[36] || CT.C36,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 668,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "constraints",
        [_Location_column]: 9,
        [_Location_line]: 664,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 668,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.constList([C[40] || CT.C40, C[41] || CT.C41], widget_inspector._Location);
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[39] || CT.C39,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 663,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "animation",
        [_Location_column]: 7,
        [_Location_line]: 686,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 687,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.constList([C[44] || CT.C44, C[45] || CT.C45], widget_inspector._Location);
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[43] || CT.C43,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 685,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$0]: "TargetPlatform.iOS",
        index: 2
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$0]: "TargetPlatform.macOS",
        index: 4
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$0]: "TargetPlatform.android",
        index: 0
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$0]: "TargetPlatform.fuchsia",
        index: 1
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$0]: "TargetPlatform.linux",
        index: 3
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$0]: "TargetPlatform.windows",
        index: 5
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 0.2,
        [Cubic_b]: 0,
        [Cubic_a]: 0.4
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: curves.Interval.prototype,
        [Interval_curve]: C[53] || CT.C53,
        [Interval_end]: 0.5,
        [Interval_begin]: 0
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: curves.SawTooth.prototype,
        [SawTooth_count]: 2222
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: curves.Interval.prototype,
        [Interval_curve]: C[53] || CT.C53,
        [Interval_end]: 1,
        [Interval_begin]: 0.5
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: curves.SawTooth.prototype,
        [SawTooth_count]: 1333
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 4,
        [EdgeInsets_right]: 4,
        [EdgeInsets_top]: 4,
        [EdgeInsets_left]: 4
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 12,
        [EdgeInsets_right]: 12,
        [EdgeInsets_top]: 12,
        [EdgeInsets_left]: 12
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 15,
        [_Location_line]: 856,
        [_Location_file]: null
      });
    },
    get C60() {
      return C[60] = dart.constList([C[61] || CT.C61], widget_inspector._Location);
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[60] || CT.C60,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 855,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 13,
        [_Location_line]: 854,
        [_Location_file]: null
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 855,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.constList([C[64] || CT.C64, C[65] || CT.C65], widget_inspector._Location);
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[63] || CT.C63,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 853,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "type",
        [_Location_column]: 11,
        [_Location_line]: 850,
        [_Location_file]: null
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 11,
        [_Location_line]: 851,
        [_Location_file]: null
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "elevation",
        [_Location_column]: 11,
        [_Location_line]: 852,
        [_Location_file]: null
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 853,
        [_Location_file]: null
      });
    },
    get C67() {
      return C[67] = dart.constList([C[68] || CT.C68, C[69] || CT.C69, C[70] || CT.C70, C[71] || CT.C71], widget_inspector._Location);
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[67] || CT.C67,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 849,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 9,
        [_Location_line]: 846,
        [_Location_file]: null
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 9,
        [_Location_line]: 847,
        [_Location_file]: null
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "margin",
        [_Location_column]: 9,
        [_Location_line]: 848,
        [_Location_file]: null
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 849,
        [_Location_file]: null
      });
    },
    get C73() {
      return C[73] = dart.constList([C[74] || CT.C74, C[75] || CT.C75, C[76] || CT.C76, C[77] || CT.C77], widget_inspector._Location);
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[73] || CT.C73,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 845,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
      });
    }
  }, false);
  var C = Array(78).fill(void 0);
  var I = [
    "package:flutter/src/material/progress_indicator.dart",
    "file:///C:/flutter/packages/flutter/lib/src/material/progress_indicator.dart"
  ];
  var _name$ = dart.privateName(progress_indicator, "_name");
  progress_indicator._ActivityIndicatorType = class _ActivityIndicatorType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (progress_indicator._ActivityIndicatorType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = progress_indicator._ActivityIndicatorType.prototype;
  dart.addTypeTests(progress_indicator._ActivityIndicatorType);
  dart.addTypeCaches(progress_indicator._ActivityIndicatorType);
  dart.setLibraryUri(progress_indicator._ActivityIndicatorType, I[0]);
  dart.setFieldSignature(progress_indicator._ActivityIndicatorType, () => ({
    __proto__: dart.getFields(progress_indicator._ActivityIndicatorType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(progress_indicator._ActivityIndicatorType, ['toString']);
  progress_indicator._ActivityIndicatorType.material = C[0] || CT.C0;
  progress_indicator._ActivityIndicatorType.adaptive = C[1] || CT.C1;
  progress_indicator._ActivityIndicatorType.values = C[2] || CT.C2;
  var value$ = dart.privateName(progress_indicator, "ProgressIndicator.value");
  var backgroundColor$ = dart.privateName(progress_indicator, "ProgressIndicator.backgroundColor");
  var color$ = dart.privateName(progress_indicator, "ProgressIndicator.color");
  var valueColor$ = dart.privateName(progress_indicator, "ProgressIndicator.valueColor");
  var semanticsLabel$ = dart.privateName(progress_indicator, "ProgressIndicator.semanticsLabel");
  var semanticsValue$ = dart.privateName(progress_indicator, "ProgressIndicator.semanticsValue");
  var _getBackgroundColor = dart.privateName(progress_indicator, "_getBackgroundColor");
  var _getValueColor = dart.privateName(progress_indicator, "_getValueColor");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var _buildSemanticsWrapper = dart.privateName(progress_indicator, "_buildSemanticsWrapper");
  progress_indicator.ProgressIndicator = class ProgressIndicator extends framework.StatefulWidget {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get valueColor() {
      return this[valueColor$];
    }
    set valueColor(value) {
      super.valueColor = value;
    }
    get semanticsLabel() {
      return this[semanticsLabel$];
    }
    set semanticsLabel(value) {
      super.semanticsLabel = value;
    }
    get semanticsValue() {
      return this[semanticsValue$];
    }
    set semanticsValue(value) {
      super.semanticsValue = value;
    }
    [_getBackgroundColor](context) {
      let t0;
      t0 = this.backgroundColor;
      return t0 == null ? theme$.Theme.of(context).colorScheme.background : t0;
    }
    [_getValueColor](context) {
      let t0, t0$, t0$0;
      t0$0 = (t0$ = (t0 = this.valueColor, t0 == null ? null : t0.value), t0$ == null ? this.color : t0$);
      return t0$0 == null ? theme$.Theme.of(context).colorScheme.primary : t0$0;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.PercentProperty.new("value", this.value, {showName: false, ifNull: "<indeterminate>"}));
    }
    [_buildSemanticsWrapper](opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let expandedSemanticsValue = this.semanticsValue;
      if (this.value != null) {
        expandedSemanticsValue == null ? expandedSemanticsValue = dart.str((dart.nullCheck(this.value) * 100)[$round]()) + "%" : null;
      }
      return new basic.Semantics.new({label: this.semanticsLabel, value: expandedSemanticsValue, child: child, $creationLocationd_0dea112b090073317d4: C[3] || CT.C3});
    }
  };
  (progress_indicator.ProgressIndicator.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let valueColor = opts && 'valueColor' in opts ? opts.valueColor : null;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let semanticsValue = opts && 'semanticsValue' in opts ? opts.semanticsValue : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[value$] = value;
    this[backgroundColor$] = backgroundColor;
    this[color$] = color;
    this[valueColor$] = valueColor;
    this[semanticsLabel$] = semanticsLabel;
    this[semanticsValue$] = semanticsValue;
    progress_indicator.ProgressIndicator.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = progress_indicator.ProgressIndicator.prototype;
  dart.addTypeTests(progress_indicator.ProgressIndicator);
  dart.addTypeCaches(progress_indicator.ProgressIndicator);
  dart.setMethodSignature(progress_indicator.ProgressIndicator, () => ({
    __proto__: dart.getMethods(progress_indicator.ProgressIndicator.__proto__),
    [_getBackgroundColor]: dart.fnType(ui.Color, [framework.BuildContext]),
    [_getValueColor]: dart.fnType(ui.Color, [framework.BuildContext]),
    [_buildSemanticsWrapper]: dart.fnType(framework.Widget, [], {}, {child: framework.Widget, context: framework.BuildContext})
  }));
  dart.setLibraryUri(progress_indicator.ProgressIndicator, I[0]);
  dart.setFieldSignature(progress_indicator.ProgressIndicator, () => ({
    __proto__: dart.getFields(progress_indicator.ProgressIndicator.__proto__),
    value: dart.finalFieldType(dart.nullable(core.double)),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    valueColor: dart.finalFieldType(dart.nullable(animation.Animation$(dart.nullable(ui.Color)))),
    semanticsLabel: dart.finalFieldType(dart.nullable(core.String)),
    semanticsValue: dart.finalFieldType(dart.nullable(core.String))
  }));
  var backgroundColor$0 = dart.privateName(progress_indicator, "_LinearProgressIndicatorPainter.backgroundColor");
  var valueColor$0 = dart.privateName(progress_indicator, "_LinearProgressIndicatorPainter.valueColor");
  var value$0 = dart.privateName(progress_indicator, "_LinearProgressIndicatorPainter.value");
  var animationValue$ = dart.privateName(progress_indicator, "_LinearProgressIndicatorPainter.animationValue");
  var textDirection$ = dart.privateName(progress_indicator, "_LinearProgressIndicatorPainter.textDirection");
  var _name = dart.privateName(ui, "_name");
  var Cubic_d = dart.privateName(curves, "Cubic.d");
  var Cubic_c = dart.privateName(curves, "Cubic.c");
  var Cubic_b = dart.privateName(curves, "Cubic.b");
  var Cubic_a = dart.privateName(curves, "Cubic.a");
  var Interval_curve = dart.privateName(curves, "Interval.curve");
  var Interval_end = dart.privateName(curves, "Interval.end");
  var Interval_begin = dart.privateName(curves, "Interval.begin");
  progress_indicator._LinearProgressIndicatorPainter = class _LinearProgressIndicatorPainter extends custom_paint.CustomPainter {
    get backgroundColor() {
      return this[backgroundColor$0];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get valueColor() {
      return this[valueColor$0];
    }
    set valueColor(value) {
      super.valueColor = value;
    }
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    get animationValue() {
      return this[animationValue$];
    }
    set animationValue(value) {
      super.animationValue = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    paint(canvas, size) {
      let t0;
      let paint = (t0 = ui.Paint.new(), (() => {
        t0.color = this.backgroundColor;
        t0.style = ui.PaintingStyle.fill;
        return t0;
      })());
      canvas.drawRect(ui.Offset.zero['&'](size), paint);
      paint.color = this.valueColor;
      const drawBar = (x, width) => {
        if (width <= 0.0) return;
        let left = null;
        switch (this.textDirection) {
          case C[8] || CT.C8:
          {
            left = size.width - width - x;
            break;
          }
          case C[9] || CT.C9:
          {
            left = x;
            break;
          }
        }
        canvas.drawRect(new ui.Offset.new(left, 0.0)['&'](new ui.Size.new(width, size.height)), paint);
      };
      dart.fn(drawBar, T.doubleAnddoubleTovoid());
      if (this.value != null) {
        drawBar(0.0, dart.nullCheck(this.value)[$clamp](0.0, 1.0) * size.width);
      } else {
        let x1 = size.width * progress_indicator._LinearProgressIndicatorPainter.line1Tail.transform(this.animationValue);
        let width1 = size.width * progress_indicator._LinearProgressIndicatorPainter.line1Head.transform(this.animationValue) - x1;
        let x2 = size.width * progress_indicator._LinearProgressIndicatorPainter.line2Tail.transform(this.animationValue);
        let width2 = size.width * progress_indicator._LinearProgressIndicatorPainter.line2Head.transform(this.animationValue) - x2;
        drawBar(x1, width1);
        drawBar(x2, width2);
      }
    }
    shouldRepaint(oldPainter) {
      progress_indicator._LinearProgressIndicatorPainter.as(oldPainter);
      return !oldPainter.backgroundColor._equals(this.backgroundColor) || !oldPainter.valueColor._equals(this.valueColor) || oldPainter.value != this.value || oldPainter.animationValue !== this.animationValue || oldPainter.textDirection !== this.textDirection;
    }
  };
  (progress_indicator._LinearProgressIndicatorPainter.new = function(opts) {
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let valueColor = opts && 'valueColor' in opts ? opts.valueColor : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let animationValue = opts && 'animationValue' in opts ? opts.animationValue : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[backgroundColor$0] = backgroundColor;
    this[valueColor$0] = valueColor;
    this[value$0] = value;
    this[animationValue$] = animationValue;
    this[textDirection$] = textDirection;
    if (!(textDirection !== null)) dart.assertFailed(null, I[1], 151, 15, "textDirection != null");
    progress_indicator._LinearProgressIndicatorPainter.__proto__.new.call(this);
    ;
  }).prototype = progress_indicator._LinearProgressIndicatorPainter.prototype;
  dart.addTypeTests(progress_indicator._LinearProgressIndicatorPainter);
  dart.addTypeCaches(progress_indicator._LinearProgressIndicatorPainter);
  dart.setMethodSignature(progress_indicator._LinearProgressIndicatorPainter, () => ({
    __proto__: dart.getMethods(progress_indicator._LinearProgressIndicatorPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(progress_indicator._LinearProgressIndicatorPainter, I[0]);
  dart.setFieldSignature(progress_indicator._LinearProgressIndicatorPainter, () => ({
    __proto__: dart.getFields(progress_indicator._LinearProgressIndicatorPainter.__proto__),
    backgroundColor: dart.finalFieldType(ui.Color),
    valueColor: dart.finalFieldType(ui.Color),
    value: dart.finalFieldType(dart.nullable(core.double)),
    animationValue: dart.finalFieldType(core.double),
    textDirection: dart.finalFieldType(ui.TextDirection)
  }));
  dart.defineLazy(progress_indicator._LinearProgressIndicatorPainter, {
    /*progress_indicator._LinearProgressIndicatorPainter.line1Head*/get line1Head() {
      return C[10] || CT.C10;
    },
    /*progress_indicator._LinearProgressIndicatorPainter.line1Tail*/get line1Tail() {
      return C[12] || CT.C12;
    },
    /*progress_indicator._LinearProgressIndicatorPainter.line2Head*/get line2Head() {
      return C[14] || CT.C14;
    },
    /*progress_indicator._LinearProgressIndicatorPainter.line2Tail*/get line2Tail() {
      return C[16] || CT.C16;
    }
  }, false);
  var minHeight$ = dart.privateName(progress_indicator, "LinearProgressIndicator.minHeight");
  progress_indicator.LinearProgressIndicator = class LinearProgressIndicator extends progress_indicator.ProgressIndicator {
    get minHeight() {
      return this[minHeight$];
    }
    set minHeight(value) {
      super.minHeight = value;
    }
    createState() {
      return new progress_indicator._LinearProgressIndicatorState.new();
    }
  };
  (progress_indicator.LinearProgressIndicator.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let valueColor = opts && 'valueColor' in opts ? opts.valueColor : null;
    let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let semanticsValue = opts && 'semanticsValue' in opts ? opts.semanticsValue : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[minHeight$] = minHeight;
    if (!(minHeight == null || dart.notNull(minHeight) > 0)) dart.assertFailed(null, I[1], 321, 15, "minHeight == null || minHeight > 0");
    progress_indicator.LinearProgressIndicator.__proto__.new.call(this, {key: key, value: value, backgroundColor: backgroundColor, color: color, valueColor: valueColor, semanticsLabel: semanticsLabel, semanticsValue: semanticsValue, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = progress_indicator.LinearProgressIndicator.prototype;
  dart.addTypeTests(progress_indicator.LinearProgressIndicator);
  dart.addTypeCaches(progress_indicator.LinearProgressIndicator);
  dart.setMethodSignature(progress_indicator.LinearProgressIndicator, () => ({
    __proto__: dart.getMethods(progress_indicator.LinearProgressIndicator.__proto__),
    createState: dart.fnType(progress_indicator._LinearProgressIndicatorState, [])
  }));
  dart.setLibraryUri(progress_indicator.LinearProgressIndicator, I[0]);
  dart.setFieldSignature(progress_indicator.LinearProgressIndicator, () => ({
    __proto__: dart.getFields(progress_indicator.LinearProgressIndicator.__proto__),
    minHeight: dart.finalFieldType(dart.nullable(core.double))
  }));
  var ___LinearProgressIndicatorState__controller = dart.privateName(progress_indicator, "_#_LinearProgressIndicatorState#_controller");
  var _controller = dart.privateName(progress_indicator, "_controller");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _buildIndicator = dart.privateName(progress_indicator, "_buildIndicator");
  const State_SingleTickerProviderStateMixin$36 = class State_SingleTickerProviderStateMixin extends framework.State$(progress_indicator.LinearProgressIndicator) {};
  (State_SingleTickerProviderStateMixin$36.new = function() {
    ticker_provider.SingleTickerProviderStateMixin$(progress_indicator.LinearProgressIndicator)[dart.mixinNew].call(this);
    State_SingleTickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_SingleTickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_SingleTickerProviderStateMixin$36, ticker_provider.SingleTickerProviderStateMixin$(progress_indicator.LinearProgressIndicator));
  progress_indicator._LinearProgressIndicatorState = class _LinearProgressIndicatorState extends State_SingleTickerProviderStateMixin$36 {
    get [_controller]() {
      let t0;
      t0 = this[___LinearProgressIndicatorState__controller];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_controller")) : t0;
    }
    set [_controller](t0) {
      this[___LinearProgressIndicatorState__controller] = t0;
    }
    initState() {
      super.initState();
      this[_controller] = new animation_controller.AnimationController.new({duration: C[18] || CT.C18, vsync: this});
      if (this.widget.value == null) this[_controller].repeat();
    }
    didUpdateWidget(oldWidget) {
      progress_indicator.LinearProgressIndicator.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (this.widget.value == null && !this[_controller].isAnimating)
        this[_controller].repeat();
      else if (this.widget.value != null && this[_controller].isAnimating) this[_controller].stop();
    }
    dispose() {
      this[_controller].dispose();
      super.dispose();
    }
    [_buildIndicator](context, animationValue, textDirection) {
      let t1;
      return this.widget[_buildSemanticsWrapper]({context: context, child: new container.Container.new({constraints: new box.BoxConstraints.new({minWidth: 1 / 0, minHeight: (t1 = this.widget.minHeight, t1 == null ? 4.0 : t1)}), child: new basic.CustomPaint.new({painter: new progress_indicator._LinearProgressIndicatorPainter.new({backgroundColor: this.widget[_getBackgroundColor](context), valueColor: this.widget[_getValueColor](context), value: this.widget.value, animationValue: animationValue, textDirection: textDirection}), $creationLocationd_0dea112b090073317d4: C[19] || CT.C19}), $creationLocationd_0dea112b090073317d4: C[22] || CT.C22})});
    }
    build(context) {
      let textDirection = basic.Directionality.of(context);
      if (this.widget.value != null) return this[_buildIndicator](context, this[_controller].value, textDirection);
      return new transitions.AnimatedBuilder.new({animation: this[_controller].view, builder: dart.fn((context, child) => this[_buildIndicator](context, this[_controller].value, textDirection), T.BuildContextAndWidgetNToWidget()), $creationLocationd_0dea112b090073317d4: C[26] || CT.C26});
    }
  };
  (progress_indicator._LinearProgressIndicatorState.new = function() {
    this[___LinearProgressIndicatorState__controller] = null;
    progress_indicator._LinearProgressIndicatorState.__proto__.new.call(this);
    ;
  }).prototype = progress_indicator._LinearProgressIndicatorState.prototype;
  dart.addTypeTests(progress_indicator._LinearProgressIndicatorState);
  dart.addTypeCaches(progress_indicator._LinearProgressIndicatorState);
  dart.setMethodSignature(progress_indicator._LinearProgressIndicatorState, () => ({
    __proto__: dart.getMethods(progress_indicator._LinearProgressIndicatorState.__proto__),
    [_buildIndicator]: dart.fnType(framework.Widget, [framework.BuildContext, core.double, ui.TextDirection]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(progress_indicator._LinearProgressIndicatorState, () => ({
    __proto__: dart.getGetters(progress_indicator._LinearProgressIndicatorState.__proto__),
    [_controller]: animation_controller.AnimationController
  }));
  dart.setSetterSignature(progress_indicator._LinearProgressIndicatorState, () => ({
    __proto__: dart.getSetters(progress_indicator._LinearProgressIndicatorState.__proto__),
    [_controller]: animation_controller.AnimationController
  }));
  dart.setLibraryUri(progress_indicator._LinearProgressIndicatorState, I[0]);
  dart.setFieldSignature(progress_indicator._LinearProgressIndicatorState, () => ({
    __proto__: dart.getFields(progress_indicator._LinearProgressIndicatorState.__proto__),
    [___LinearProgressIndicatorState__controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController))
  }));
  progress_indicator._CircularProgressIndicatorPainter = class _CircularProgressIndicatorPainter extends custom_paint.CustomPainter {
    paint(canvas, size) {
      let t1, t1$;
      let paint = (t1 = ui.Paint.new(), (() => {
        t1.color = this.valueColor;
        t1.strokeWidth = this.strokeWidth;
        t1.style = ui.PaintingStyle.stroke;
        return t1;
      })());
      if (this.backgroundColor != null) {
        let backgroundPaint = (t1$ = ui.Paint.new(), (() => {
          t1$.color = dart.nullCheck(this.backgroundColor);
          t1$.strokeWidth = this.strokeWidth;
          t1$.style = ui.PaintingStyle.stroke;
          return t1$;
        })());
        canvas.drawArc(ui.Offset.zero['&'](size), 0.0, 6.282185307179586, false, backgroundPaint);
      }
      if (this.value == null) paint.strokeCap = ui.StrokeCap.square;
      canvas.drawArc(ui.Offset.zero['&'](size), this.arcStart, this.arcSweep, false, paint);
    }
    shouldRepaint(oldPainter) {
      progress_indicator._CircularProgressIndicatorPainter.as(oldPainter);
      return !dart.equals(oldPainter.backgroundColor, this.backgroundColor) || !oldPainter.valueColor._equals(this.valueColor) || oldPainter.value != this.value || oldPainter.headValue !== this.headValue || oldPainter.tailValue !== this.tailValue || oldPainter.offsetValue !== this.offsetValue || oldPainter.rotationValue !== this.rotationValue || oldPainter.strokeWidth !== this.strokeWidth;
    }
  };
  (progress_indicator._CircularProgressIndicatorPainter.new = function(opts) {
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let valueColor = opts && 'valueColor' in opts ? opts.valueColor : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let headValue = opts && 'headValue' in opts ? opts.headValue : null;
    let tailValue = opts && 'tailValue' in opts ? opts.tailValue : null;
    let offsetValue = opts && 'offsetValue' in opts ? opts.offsetValue : null;
    let rotationValue = opts && 'rotationValue' in opts ? opts.rotationValue : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    this.backgroundColor = backgroundColor;
    this.valueColor = valueColor;
    this.value = value;
    this.headValue = headValue;
    this.tailValue = tailValue;
    this.offsetValue = offsetValue;
    this.rotationValue = rotationValue;
    this.strokeWidth = strokeWidth;
    this.arcStart = value != null ? -1.5707963267948966 : -1.5707963267948966 + tailValue * 3 / 2 * 3.141592653589793 + rotationValue * 3.141592653589793 * 2.0 + offsetValue * 0.5 * 3.141592653589793;
    this.arcSweep = value != null ? value[$clamp](0.0, 1.0) * 6.282185307179586 : math.max(core.double, headValue * 3 / 2 * 3.141592653589793 - tailValue * 3 / 2 * 3.141592653589793, 0.001);
    progress_indicator._CircularProgressIndicatorPainter.__proto__.new.call(this);
    ;
  }).prototype = progress_indicator._CircularProgressIndicatorPainter.prototype;
  dart.addTypeTests(progress_indicator._CircularProgressIndicatorPainter);
  dart.addTypeCaches(progress_indicator._CircularProgressIndicatorPainter);
  dart.setMethodSignature(progress_indicator._CircularProgressIndicatorPainter, () => ({
    __proto__: dart.getMethods(progress_indicator._CircularProgressIndicatorPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(progress_indicator._CircularProgressIndicatorPainter, I[0]);
  dart.setFieldSignature(progress_indicator._CircularProgressIndicatorPainter, () => ({
    __proto__: dart.getFields(progress_indicator._CircularProgressIndicatorPainter.__proto__),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    valueColor: dart.finalFieldType(ui.Color),
    value: dart.finalFieldType(dart.nullable(core.double)),
    headValue: dart.finalFieldType(core.double),
    tailValue: dart.finalFieldType(core.double),
    offsetValue: dart.finalFieldType(core.double),
    rotationValue: dart.finalFieldType(core.double),
    strokeWidth: dart.finalFieldType(core.double),
    arcStart: dart.finalFieldType(core.double),
    arcSweep: dart.finalFieldType(core.double)
  }));
  dart.defineLazy(progress_indicator._CircularProgressIndicatorPainter, {
    /*progress_indicator._CircularProgressIndicatorPainter._twoPi*/get _twoPi() {
      return 6.283185307179586;
    },
    /*progress_indicator._CircularProgressIndicatorPainter._epsilon*/get _epsilon() {
      return 0.001;
    },
    /*progress_indicator._CircularProgressIndicatorPainter._sweep*/get _sweep() {
      return 6.282185307179586;
    },
    /*progress_indicator._CircularProgressIndicatorPainter._startAngle*/get _startAngle() {
      return -1.5707963267948966;
    }
  }, false);
  var _indicatorType = dart.privateName(progress_indicator, "CircularProgressIndicator._indicatorType");
  var strokeWidth$ = dart.privateName(progress_indicator, "CircularProgressIndicator.strokeWidth");
  var _indicatorType$ = dart.privateName(progress_indicator, "_indicatorType");
  progress_indicator.CircularProgressIndicator = class CircularProgressIndicator extends progress_indicator.ProgressIndicator {
    get [_indicatorType$]() {
      return this[_indicatorType];
    }
    set [_indicatorType$](value) {
      super[_indicatorType$] = value;
    }
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    createState() {
      return new progress_indicator._CircularProgressIndicatorState.new();
    }
  };
  (progress_indicator.CircularProgressIndicator.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let valueColor = opts && 'valueColor' in opts ? opts.valueColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 4;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let semanticsValue = opts && 'semanticsValue' in opts ? opts.semanticsValue : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[strokeWidth$] = strokeWidth;
    this[_indicatorType] = progress_indicator._ActivityIndicatorType.material;
    progress_indicator.CircularProgressIndicator.__proto__.new.call(this, {key: key, value: value, backgroundColor: backgroundColor, color: color, valueColor: valueColor, semanticsLabel: semanticsLabel, semanticsValue: semanticsValue, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = progress_indicator.CircularProgressIndicator.prototype;
  (progress_indicator.CircularProgressIndicator.adaptive = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let valueColor = opts && 'valueColor' in opts ? opts.valueColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 4;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let semanticsValue = opts && 'semanticsValue' in opts ? opts.semanticsValue : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[strokeWidth$] = strokeWidth;
    this[_indicatorType] = progress_indicator._ActivityIndicatorType.adaptive;
    progress_indicator.CircularProgressIndicator.__proto__.new.call(this, {key: key, value: value, backgroundColor: backgroundColor, valueColor: valueColor, semanticsLabel: semanticsLabel, semanticsValue: semanticsValue, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = progress_indicator.CircularProgressIndicator.prototype;
  dart.addTypeTests(progress_indicator.CircularProgressIndicator);
  dart.addTypeCaches(progress_indicator.CircularProgressIndicator);
  dart.setMethodSignature(progress_indicator.CircularProgressIndicator, () => ({
    __proto__: dart.getMethods(progress_indicator.CircularProgressIndicator.__proto__),
    createState: dart.fnType(progress_indicator._CircularProgressIndicatorState, [])
  }));
  dart.setLibraryUri(progress_indicator.CircularProgressIndicator, I[0]);
  dart.setFieldSignature(progress_indicator.CircularProgressIndicator, () => ({
    __proto__: dart.getFields(progress_indicator.CircularProgressIndicator.__proto__),
    [_indicatorType$]: dart.finalFieldType(progress_indicator._ActivityIndicatorType),
    strokeWidth: dart.finalFieldType(core.double)
  }));
  var ___CircularProgressIndicatorState__controller = dart.privateName(progress_indicator, "_#_CircularProgressIndicatorState#_controller");
  var _buildCupertinoIndicator = dart.privateName(progress_indicator, "_buildCupertinoIndicator");
  var BoxConstraints_maxHeight = dart.privateName(box, "BoxConstraints.maxHeight");
  var BoxConstraints_minHeight = dart.privateName(box, "BoxConstraints.minHeight");
  var BoxConstraints_maxWidth = dart.privateName(box, "BoxConstraints.maxWidth");
  var BoxConstraints_minWidth = dart.privateName(box, "BoxConstraints.minWidth");
  var _buildMaterialIndicator = dart.privateName(progress_indicator, "_buildMaterialIndicator");
  var _buildAnimation = dart.privateName(progress_indicator, "_buildAnimation");
  var _name$0 = dart.privateName(platform, "_name");
  var SawTooth_count = dart.privateName(curves, "SawTooth.count");
  const State_SingleTickerProviderStateMixin$36$ = class State_SingleTickerProviderStateMixin extends framework.State$(progress_indicator.CircularProgressIndicator) {};
  (State_SingleTickerProviderStateMixin$36$.new = function() {
    ticker_provider.SingleTickerProviderStateMixin$(progress_indicator.CircularProgressIndicator)[dart.mixinNew].call(this);
    State_SingleTickerProviderStateMixin$36$.__proto__.new.call(this);
  }).prototype = State_SingleTickerProviderStateMixin$36$.prototype;
  dart.applyMixin(State_SingleTickerProviderStateMixin$36$, ticker_provider.SingleTickerProviderStateMixin$(progress_indicator.CircularProgressIndicator));
  progress_indicator._CircularProgressIndicatorState = class _CircularProgressIndicatorState extends State_SingleTickerProviderStateMixin$36$ {
    get [_controller]() {
      let t1;
      t1 = this[___CircularProgressIndicatorState__controller];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_controller")) : t1;
    }
    set [_controller](t1) {
      this[___CircularProgressIndicatorState__controller] = t1;
    }
    initState() {
      super.initState();
      this[_controller] = new animation_controller.AnimationController.new({duration: C[30] || CT.C30, vsync: this});
      if (this.widget.value == null) this[_controller].repeat();
    }
    didUpdateWidget(oldWidget) {
      progress_indicator.CircularProgressIndicator.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (this.widget.value == null && !this[_controller].isAnimating)
        this[_controller].repeat();
      else if (this.widget.value != null && this[_controller].isAnimating) this[_controller].stop();
    }
    dispose() {
      this[_controller].dispose();
      super.dispose();
    }
    [_buildCupertinoIndicator](context) {
      return new activity_indicator.CupertinoActivityIndicator.new({key: this.widget.key, $creationLocationd_0dea112b090073317d4: C[31] || CT.C31});
    }
    [_buildMaterialIndicator](context, headValue, tailValue, offsetValue, rotationValue) {
      return this.widget[_buildSemanticsWrapper]({context: context, child: new container.Container.new({constraints: C[34] || CT.C34, child: new basic.CustomPaint.new({painter: new progress_indicator._CircularProgressIndicatorPainter.new({backgroundColor: this.widget.backgroundColor, valueColor: this.widget[_getValueColor](context), value: this.widget.value, headValue: headValue, tailValue: tailValue, offsetValue: offsetValue, rotationValue: rotationValue, strokeWidth: this.widget.strokeWidth}), $creationLocationd_0dea112b090073317d4: C[35] || CT.C35}), $creationLocationd_0dea112b090073317d4: C[38] || CT.C38})});
    }
    [_buildAnimation]() {
      return new transitions.AnimatedBuilder.new({animation: this[_controller], builder: dart.fn((context, child) => this[_buildMaterialIndicator](context, progress_indicator._CircularProgressIndicatorState._strokeHeadTween.evaluate(this[_controller]), progress_indicator._CircularProgressIndicatorState._strokeTailTween.evaluate(this[_controller]), progress_indicator._CircularProgressIndicatorState._offsetTween.evaluate(this[_controller]), progress_indicator._CircularProgressIndicatorState._rotationTween.evaluate(this[_controller])), T.BuildContextAndWidgetNToWidget()), $creationLocationd_0dea112b090073317d4: C[42] || CT.C42});
    }
    build(context) {
      switch (this.widget[_indicatorType$]) {
        case C[0] || CT.C0:
        {
          if (this.widget.value != null) return this[_buildMaterialIndicator](context, 0.0, 0.0, 0.0, 0.0);
          return this[_buildAnimation]();
        }
        case C[1] || CT.C1:
        {
          let theme = theme$.Theme.of(context);
          if (!(theme.platform !== null)) dart.assertFailed(null, I[1], 708, 16, "theme.platform != null");
          switch (theme.platform) {
            case C[46] || CT.C46:
            case C[47] || CT.C47:
            {
              return this[_buildCupertinoIndicator](context);
            }
            case C[48] || CT.C48:
            case C[49] || CT.C49:
            case C[50] || CT.C50:
            case C[51] || CT.C51:
            {
              if (this.widget.value != null) return this[_buildMaterialIndicator](context, 0.0, 0.0, 0.0, 0.0);
              return this[_buildAnimation]();
            }
          }
        }
      }
    }
  };
  (progress_indicator._CircularProgressIndicatorState.new = function() {
    this[___CircularProgressIndicatorState__controller] = null;
    progress_indicator._CircularProgressIndicatorState.__proto__.new.call(this);
    ;
  }).prototype = progress_indicator._CircularProgressIndicatorState.prototype;
  dart.addTypeTests(progress_indicator._CircularProgressIndicatorState);
  dart.addTypeCaches(progress_indicator._CircularProgressIndicatorState);
  dart.setMethodSignature(progress_indicator._CircularProgressIndicatorState, () => ({
    __proto__: dart.getMethods(progress_indicator._CircularProgressIndicatorState.__proto__),
    [_buildCupertinoIndicator]: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_buildMaterialIndicator]: dart.fnType(framework.Widget, [framework.BuildContext, core.double, core.double, core.double, core.double]),
    [_buildAnimation]: dart.fnType(framework.Widget, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(progress_indicator._CircularProgressIndicatorState, () => ({
    __proto__: dart.getGetters(progress_indicator._CircularProgressIndicatorState.__proto__),
    [_controller]: animation_controller.AnimationController
  }));
  dart.setSetterSignature(progress_indicator._CircularProgressIndicatorState, () => ({
    __proto__: dart.getSetters(progress_indicator._CircularProgressIndicatorState.__proto__),
    [_controller]: animation_controller.AnimationController
  }));
  dart.setLibraryUri(progress_indicator._CircularProgressIndicatorState, I[0]);
  dart.setFieldSignature(progress_indicator._CircularProgressIndicatorState, () => ({
    __proto__: dart.getFields(progress_indicator._CircularProgressIndicatorState.__proto__),
    [___CircularProgressIndicatorState__controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController))
  }));
  dart.defineLazy(progress_indicator._CircularProgressIndicatorState, {
    /*progress_indicator._CircularProgressIndicatorState._pathCount*/get _pathCount() {
      return 2222;
    },
    /*progress_indicator._CircularProgressIndicatorState._rotationCount*/get _rotationCount() {
      return 1333;
    },
    /*progress_indicator._CircularProgressIndicatorState._strokeHeadTween*/get _strokeHeadTween() {
      return new tween.CurveTween.new({curve: C[52] || CT.C52}).chain(new tween.CurveTween.new({curve: C[54] || CT.C54}));
    },
    /*progress_indicator._CircularProgressIndicatorState._strokeTailTween*/get _strokeTailTween() {
      return new tween.CurveTween.new({curve: C[55] || CT.C55}).chain(new tween.CurveTween.new({curve: C[54] || CT.C54}));
    },
    /*progress_indicator._CircularProgressIndicatorState._offsetTween*/get _offsetTween() {
      return new tween.CurveTween.new({curve: C[54] || CT.C54});
    },
    /*progress_indicator._CircularProgressIndicatorState._rotationTween*/get _rotationTween() {
      return new tween.CurveTween.new({curve: C[56] || CT.C56});
    }
  }, false);
  progress_indicator._RefreshProgressIndicatorPainter = class _RefreshProgressIndicatorPainter extends progress_indicator._CircularProgressIndicatorPainter {
    paintArrowhead(canvas, size) {
      let t2, t2$;
      let arcEnd = this.arcStart + this.arcSweep;
      let ux = math.cos(arcEnd);
      let uy = math.sin(arcEnd);
      if (!(size.width === size.height)) dart.assertFailed(null, I[1], 754, 12, "size.width == size.height");
      let radius = size.width / 2.0;
      let arrowheadPointX = radius + ux * radius + -uy * this.strokeWidth * 2.0 * this.arrowheadScale;
      let arrowheadPointY = radius + uy * radius + ux * this.strokeWidth * 2.0 * this.arrowheadScale;
      let arrowheadRadius = this.strokeWidth * 1.5 * this.arrowheadScale;
      let innerRadius = radius - arrowheadRadius;
      let outerRadius = radius + arrowheadRadius;
      let path = (t2 = ui.Path.new(), (() => {
        t2.moveTo(radius + ux * innerRadius, radius + uy * innerRadius);
        t2.lineTo(radius + ux * outerRadius, radius + uy * outerRadius);
        t2.lineTo(arrowheadPointX, arrowheadPointY);
        t2.close();
        return t2;
      })());
      let paint = (t2$ = ui.Paint.new(), (() => {
        t2$.color = this.valueColor;
        t2$.strokeWidth = this.strokeWidth;
        t2$.style = ui.PaintingStyle.fill;
        return t2$;
      })());
      canvas.drawPath(path, paint);
    }
    paint(canvas, size) {
      super.paint(canvas, size);
      if (this.arrowheadScale > 0.0) this.paintArrowhead(canvas, size);
    }
  };
  (progress_indicator._RefreshProgressIndicatorPainter.new = function(opts) {
    let valueColor = opts && 'valueColor' in opts ? opts.valueColor : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let headValue = opts && 'headValue' in opts ? opts.headValue : null;
    let tailValue = opts && 'tailValue' in opts ? opts.tailValue : null;
    let offsetValue = opts && 'offsetValue' in opts ? opts.offsetValue : null;
    let rotationValue = opts && 'rotationValue' in opts ? opts.rotationValue : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    let arrowheadScale = opts && 'arrowheadScale' in opts ? opts.arrowheadScale : null;
    this.arrowheadScale = arrowheadScale;
    progress_indicator._RefreshProgressIndicatorPainter.__proto__.new.call(this, {valueColor: valueColor, value: value, headValue: headValue, tailValue: tailValue, offsetValue: offsetValue, rotationValue: rotationValue, strokeWidth: strokeWidth});
    ;
  }).prototype = progress_indicator._RefreshProgressIndicatorPainter.prototype;
  dart.addTypeTests(progress_indicator._RefreshProgressIndicatorPainter);
  dart.addTypeCaches(progress_indicator._RefreshProgressIndicatorPainter);
  dart.setMethodSignature(progress_indicator._RefreshProgressIndicatorPainter, () => ({
    __proto__: dart.getMethods(progress_indicator._RefreshProgressIndicatorPainter.__proto__),
    paintArrowhead: dart.fnType(dart.void, [ui.Canvas, ui.Size])
  }));
  dart.setLibraryUri(progress_indicator._RefreshProgressIndicatorPainter, I[0]);
  dart.setFieldSignature(progress_indicator._RefreshProgressIndicatorPainter, () => ({
    __proto__: dart.getFields(progress_indicator._RefreshProgressIndicatorPainter.__proto__),
    arrowheadScale: dart.finalFieldType(core.double)
  }));
  progress_indicator.RefreshProgressIndicator = class RefreshProgressIndicator extends progress_indicator.CircularProgressIndicator {
    createState() {
      return new progress_indicator._RefreshProgressIndicatorState.new();
    }
  };
  (progress_indicator.RefreshProgressIndicator.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let valueColor = opts && 'valueColor' in opts ? opts.valueColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 2;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let semanticsValue = opts && 'semanticsValue' in opts ? opts.semanticsValue : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    progress_indicator.RefreshProgressIndicator.__proto__.new.call(this, {key: key, value: value, backgroundColor: backgroundColor, valueColor: valueColor, strokeWidth: strokeWidth, semanticsLabel: semanticsLabel, semanticsValue: semanticsValue, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = progress_indicator.RefreshProgressIndicator.prototype;
  dart.addTypeTests(progress_indicator.RefreshProgressIndicator);
  dart.addTypeCaches(progress_indicator.RefreshProgressIndicator);
  dart.setMethodSignature(progress_indicator.RefreshProgressIndicator, () => ({
    __proto__: dart.getMethods(progress_indicator.RefreshProgressIndicator.__proto__),
    createState: dart.fnType(progress_indicator._RefreshProgressIndicatorState, [])
  }));
  dart.setLibraryUri(progress_indicator.RefreshProgressIndicator, I[0]);
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  progress_indicator._RefreshProgressIndicatorState = class _RefreshProgressIndicatorState extends progress_indicator._CircularProgressIndicatorState {
    build(context) {
      if (this.widget.value != null)
        this[_controller].value = dart.nullCheck(this.widget.value) * (1333 / 2 / 2961926);
      else if (!this[_controller].isAnimating) this[_controller].repeat();
      return this[_buildAnimation]();
    }
    [_buildMaterialIndicator](context, headValue, tailValue, offsetValue, rotationValue) {
      let t2;
      let arrowheadScale = this.widget.value == null ? 0.0 : (dart.nullCheck(this.widget.value) * 2.0)[$clamp](0.0, 1.0);
      return this.widget[_buildSemanticsWrapper]({context: context, child: new container.Container.new({width: 40, height: 40, margin: C[57] || CT.C57, child: new material.Material.new({type: material.MaterialType.circle, color: (t2 = this.widget.backgroundColor, t2 == null ? theme$.Theme.of(context).canvasColor : t2), elevation: 2.0, child: new basic.Padding.new({padding: C[58] || CT.C58, child: new basic.CustomPaint.new({painter: new progress_indicator._RefreshProgressIndicatorPainter.new({valueColor: this.widget[_getValueColor](context), value: null, headValue: headValue, tailValue: tailValue, offsetValue: offsetValue, rotationValue: rotationValue, strokeWidth: this.widget.strokeWidth, arrowheadScale: arrowheadScale}), $creationLocationd_0dea112b090073317d4: C[59] || CT.C59}), $creationLocationd_0dea112b090073317d4: C[62] || CT.C62}), $creationLocationd_0dea112b090073317d4: C[66] || CT.C66}), $creationLocationd_0dea112b090073317d4: C[72] || CT.C72})});
    }
  };
  (progress_indicator._RefreshProgressIndicatorState.new = function() {
    progress_indicator._RefreshProgressIndicatorState.__proto__.new.call(this);
    ;
  }).prototype = progress_indicator._RefreshProgressIndicatorState.prototype;
  dart.addTypeTests(progress_indicator._RefreshProgressIndicatorState);
  dart.addTypeCaches(progress_indicator._RefreshProgressIndicatorState);
  dart.setLibraryUri(progress_indicator._RefreshProgressIndicatorState, I[0]);
  dart.defineLazy(progress_indicator._RefreshProgressIndicatorState, {
    /*progress_indicator._RefreshProgressIndicatorState._indicatorSize*/get _indicatorSize() {
      return 40;
    }
  }, false);
  dart.defineLazy(progress_indicator, {
    /*progress_indicator._kMinCircularProgressIndicatorSize*/get _kMinCircularProgressIndicatorSize() {
      return 36;
    },
    /*progress_indicator._kIndeterminateLinearDuration*/get _kIndeterminateLinearDuration() {
      return 1800;
    },
    /*progress_indicator._kIndeterminateCircularDuration*/get _kIndeterminateCircularDuration() {
      return 2961926;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/material/progress_indicator.dart", {
    "package:flutter/src/material/progress_indicator.dart": progress_indicator
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["progress_indicator.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/material/progress_indicator.dart.lib.js"}');
  // Exports:
  return {
    src__material__progress_indicator: progress_indicator
  };
}));

//# sourceMappingURL=progress_indicator.dart.lib.js.map
>>>>>>> feature-b
